System.register(["./instantiated-bf611ec3.js"], (function(t) {
    "use strict";
    var e, i, r, n, s, a, o, l, h, u, c, _, d, p, f, g, m, y, v, S, T, b, E, A, C, R, B, x, D, w, O, P, M, I, L, F, N, k, G, z, U, H, V, W, X, j, Y, K, Z, q, J, Q, $, tt, et, it, rt, nt, st, at, ot, lt, ht, ut, ct, _t, dt, pt, ft, gt, mt, yt, vt, St, Tt, bt, Et, At, Ct, Rt, Bt, xt, Dt, wt, Ot, Pt, Mt, It, Lt, Ft, Nt, kt, Gt, zt, Ut, Ht, Vt, Wt, Xt, jt, Yt, Kt, Zt, qt, Jt, Qt, $t, te, ee, ie, re, ne, se, ae, oe, le, he, ue, ce, _e, de, pe, fe, ge, me, ye, ve, Se, Te, be, Ee, Ae, Ce, Re, Be, xe, De, we, Oe, Pe, Me, Ie, Le, Fe, Ne, ke, Ge, ze, Ue, He, Ve, We, Xe, je, Ye, Ke, Ze, qe, Je, Qe, $e, ti, ei, ii, ri, ni, si, ai, oi, li, hi, ui, ci, _i, di, pi, fi, gi, mi, yi, vi, Si, Ti, bi, Ei, Ai, Ci, Ri, Bi, xi, Di, wi, Oi, Pi, Mi, Ii, Li, Fi, Ni, ki, Gi, zi, Ui, Hi, Vi, Wi, Xi, ji, Yi, Ki, Zi, qi, Ji, Qi, $i, tr, er, ir, rr, nr, sr, ar, or, lr, hr, ur, cr, _r, dr, pr, fr, gr, mr, yr, vr, Sr, Tr, br, Er, Ar, Cr, Rr, Br, xr, Dr, wr, Or, Pr, Mr, Ir, Lr, Fr, Nr, kr, Gr, zr, Ur, Hr, Vr, Wr, Xr, jr, Yr, Kr, Zr, qr, Jr, Qr, $r, tn, en, rn, nn, sn, an, on, ln, hn, un, cn, _n, dn, pn, fn, gn, mn, yn, vn, Sn, Tn, bn, En, An, Cn, Rn, Bn, xn, Dn, wn, On, Pn, Mn, In, Ln, Fn, Nn, kn, Gn, zn, Un, Hn, Vn, Wn, Xn, jn, Yn, Kn, Zn, qn, Jn, Qn, $n, ts, es, is, rs, ns, ss, as, os, ls, hs, us, cs, _s, ds, ps, fs, gs, ms, ys, vs, Ss, Ts, bs, Es, As, Cs, Rs;
    return {
        setters: [function(Bs) {
            e = Bs.P,
            i = Bs.R,
            r = Bs.C,
            n = Bs.D,
            s = Bs.B,
            a = Bs.a,
            o = Bs.O,
            l = Bs.S,
            h = Bs.A,
            u = Bs.b,
            c = Bs.F,
            _ = Bs.c,
            d = Bs.d,
            p = Bs.T,
            f = Bs.e,
            g = Bs.f,
            m = Bs.M,
            y = Bs.g,
            v = Bs.h,
            S = Bs.i,
            T = Bs.j,
            b = Bs.k,
            E = Bs.V,
            A = Bs.l,
            C = Bs.m,
            R = Bs.n,
            B = Bs.o,
            x = Bs.p,
            D = Bs.q,
            w = Bs.r,
            O = Bs.s,
            P = Bs.L,
            M = Bs.t,
            I = Bs.u,
            L = Bs.v,
            F = Bs.w,
            N = Bs.x,
            k = Bs.y,
            G = Bs.z,
            z = Bs.E,
            U = Bs.G,
            H = Bs.H,
            V = Bs.I,
            W = Bs.Q,
            X = Bs.J,
            j = Bs.K,
            Y = Bs.N,
            K = Bs.U,
            Z = Bs.W,
            q = Bs.X,
            J = Bs.Y,
            Q = Bs.Z,
            $ = Bs._,
            tt = Bs.$,
            et = Bs.a0,
            it = Bs.a1,
            rt = Bs.a2,
            nt = Bs.a3,
            st = Bs.a4,
            at = Bs.a5,
            ot = Bs.a6,
            lt = Bs.a7,
            ht = Bs.a8,
            ut = Bs.a9,
            ct = Bs.aa,
            _t = Bs.ab,
            dt = Bs.ac,
            pt = Bs.ad,
            ft = Bs.ae,
            gt = Bs.af,
            mt = Bs.ag,
            yt = Bs.ah,
            vt = Bs.ai,
            St = Bs.aj,
            Tt = Bs.ak,
            bt = Bs.al,
            Et = Bs.am,
            At = Bs.an,
            Ct = Bs.ao,
            Rt = Bs.ap,
            Bt = Bs.aq,
            xt = Bs.ar,
            Dt = Bs.as,
            wt = Bs.at,
            Ot = Bs.au,
            Pt = Bs.av,
            Mt = Bs.aw,
            It = Bs.ax,
            Lt = Bs.ay,
            Ft = Bs.az,
            Nt = Bs.aA,
            kt = Bs.aB,
            Gt = Bs.aC,
            zt = Bs.aD,
            Ut = Bs.aE,
            Ht = Bs.aF,
            Vt = Bs.aG,
            Wt = Bs.aH,
            Xt = Bs.aI,
            jt = Bs.aJ,
            Yt = Bs.aK,
            Kt = Bs.aL,
            Zt = Bs.aM,
            qt = Bs.aN,
            Jt = Bs.aO,
            Qt = Bs.aP,
            $t = Bs.aQ,
            te = Bs.aR,
            ee = Bs.aS,
            ie = Bs.aT,
            re = Bs.aU,
            ne = Bs.aV,
            se = Bs.aW,
            ae = Bs.aX,
            oe = Bs.aY,
            le = Bs.aZ,
            he = Bs.a_,
            ue = Bs.a$,
            ce = Bs.b0,
            _e = Bs.b1,
            de = Bs.b2,
            pe = Bs.b3,
            fe = Bs.b4,
            ge = Bs.b5,
            me = Bs.b6,
            ye = Bs.b7,
            ve = Bs.b8,
            Se = Bs.b9,
            Te = Bs.ba,
            be = Bs.bb,
            Ee = Bs.bc,
            Ae = Bs.bd,
            Ce = Bs.be,
            Re = Bs.bf,
            Be = Bs.bg,
            xe = Bs.bh,
            De = Bs.bi,
            we = Bs.bj,
            Oe = Bs.bk,
            Pe = Bs.bl,
            Me = Bs.bm,
            Ie = Bs.bn,
            Le = Bs.bo,
            Fe = Bs.bp,
            Ne = Bs.bq,
            ke = Bs.br,
            Ge = Bs.bs,
            ze = Bs.bt,
            Ue = Bs.bu,
            He = Bs.bv,
            Ve = Bs.bw,
            We = Bs.bx,
            Xe = Bs.by,
            je = Bs.bz,
            Ye = Bs.bA,
            Ke = Bs.bB,
            Ze = Bs.bC,
            qe = Bs.bD,
            Je = Bs.bE,
            Qe = Bs.bF,
            $e = Bs.bG,
            ti = Bs.bH,
            ei = Bs.bI,
            ii = Bs.bJ,
            ri = Bs.bK,
            ni = Bs.bL,
            si = Bs.bM,
            ai = Bs.bN,
            oi = Bs.bO,
            li = Bs.bP,
            hi = Bs.bQ,
            ui = Bs.bR,
            ci = Bs.bS,
            _i = Bs.bT,
            di = Bs.bU,
            pi = Bs.bV,
            fi = Bs.bW,
            gi = Bs.bX,
            mi = Bs.bY,
            yi = Bs.bZ,
            vi = Bs.b_,
            Si = Bs.b$,
            Ti = Bs.c0,
            bi = Bs.c1,
            Ei = Bs.c2,
            Ai = Bs.c3,
            Ci = Bs.c4,
            Ri = Bs.c5,
            Bi = Bs.c6,
            xi = Bs.c7,
            Di = Bs.c8,
            wi = Bs.c9,
            Oi = Bs.ca,
            Pi = Bs.cb,
            Mi = Bs.cc,
            Ii = Bs.cd,
            Li = Bs.ce,
            Fi = Bs.cf,
            Ni = Bs.cg,
            ki = Bs.ch,
            Gi = Bs.ci,
            zi = Bs.cj,
            Ui = Bs.ck,
            Hi = Bs.cl,
            Vi = Bs.cm,
            Wi = Bs.cn,
            Xi = Bs.co,
            ji = Bs.cp,
            Yi = Bs.cq,
            Ki = Bs.cr,
            Zi = Bs.cs,
            qi = Bs.ct,
            Ji = Bs.cu,
            Qi = Bs.cv,
            $i = Bs.cw,
            tr = Bs.cx,
            er = Bs.cy,
            ir = Bs.cz,
            rr = Bs.cA,
            nr = Bs.cB,
            sr = Bs.cC,
            ar = Bs.cD,
            or = Bs.cE,
            lr = Bs.cF,
            hr = Bs.cG,
            ur = Bs.cH,
            cr = Bs.cI,
            _r = Bs.cJ,
            dr = Bs.cK,
            pr = Bs.cL,
            fr = Bs.cM,
            gr = Bs.cN,
            mr = Bs.cO,
            yr = Bs.cP,
            vr = Bs.cQ,
            Sr = Bs.cR,
            Tr = Bs.cS,
            br = Bs.cT,
            Er = Bs.cU,
            Ar = Bs.cV,
            Cr = Bs.cW,
            Rr = Bs.cX,
            Br = Bs.cY,
            xr = Bs.cZ,
            Dr = Bs.c_,
            wr = Bs.c$,
            Or = Bs.d0,
            Pr = Bs.d1,
            Mr = Bs.d2,
            Ir = Bs.d3,
            Lr = Bs.d4,
            Fr = Bs.d5,
            Nr = Bs.d6,
            kr = Bs.d7,
            Gr = Bs.d8,
            zr = Bs.d9,
            Ur = Bs.da,
            Hr = Bs.db,
            Vr = Bs.dc,
            Wr = Bs.dd,
            Xr = Bs.de,
            jr = Bs.df,
            Yr = Bs.dg,
            Kr = Bs.dh,
            Zr = Bs.di,
            qr = Bs.dj,
            Jr = Bs.dk,
            Qr = Bs.dl,
            $r = Bs.dm,
            tn = Bs.dn,
            en = Bs.dp,
            rn = Bs.dq,
            nn = Bs.dr,
            sn = Bs.ds,
            an = Bs.dt,
            on = Bs.du,
            ln = Bs.dv,
            hn = Bs.dw,
            un = Bs.dx,
            cn = Bs.dy,
            _n = Bs.dz,
            dn = Bs.dA,
            pn = Bs.dB,
            fn = Bs.dC,
            gn = Bs.dD,
            mn = Bs.dE,
            yn = Bs.dF,
            vn = Bs.dG,
            Sn = Bs.dH,
            Tn = Bs.dI,
            bn = Bs.dJ,
            En = Bs.dK,
            An = Bs.dL,
            Cn = Bs.dM,
            Rn = Bs.dN,
            Bn = Bs.dO,
            xn = Bs.dP,
            Dn = Bs.dQ,
            wn = Bs.dR,
            On = Bs.dS,
            Pn = Bs.dT,
            Mn = Bs.dU,
            In = Bs.dV,
            Ln = Bs.dW,
            Fn = Bs.dX,
            Nn = Bs.dY,
            kn = Bs.dZ,
            Gn = Bs.d_,
            zn = Bs.d$,
            Un = Bs.e0,
            Hn = Bs.e1,
            Vn = Bs.e2,
            Wn = Bs.e3,
            Xn = Bs.e4,
            jn = Bs.e5,
            Yn = Bs.e6,
            Kn = Bs.e7,
            Zn = Bs.e8,
            qn = Bs.e9,
            Jn = Bs.ea,
            Qn = Bs.eb,
            $n = Bs.ec,
            ts = Bs.ed,
            es = Bs.ee,
            is = Bs.ef,
            rs = Bs.eg,
            ns = Bs.eh,
            ss = Bs.ei,
            as = Bs.ej,
            os = Bs.ek,
            ls = Bs.el,
            hs = Bs.em,
            us = Bs.en,
            cs = Bs.eo,
            _s = Bs.ep,
            ds = Bs.eq,
            ps = Bs.er,
            fs = Bs.es,
            gs = Bs.et,
            ms = Bs.eu,
            ys = Bs.ev,
            vs = Bs.ew,
            Ss = Bs.ex,
            Ts = Bs.ey,
            bs = Bs.ez,
            Es = Bs.eA,
            As = Bs.eB,
            Cs = Bs.eC,
            Rs = Bs.eD;
            var xs = {};
            xs.Acceleration = Bs.gC,
            xs.AffineTransform = Bs.eN,
            xs.AnimCurve = Bs.gm,
            xs.Animation = Bs.c_,
            xs.AnimationClip = Bs.gi,
            xs.AnimationComponent = Bs.c_,
            xs.AnimationManager = Bs.gq,
            xs.AnimationState = Bs.cZ,
            xs.Asset = Bs.d2,
            xs.AssetLibrary = Bs.g4,
            xs.AssetManager = Bs.g0,
            xs.BaseNode = Bs.g6,
            xs.BitMask = Bs.e$,
            xs.BloomStage = Bs.fS,
            xs.BoxCollider = Bs.gM,
            xs.BoxColliderComponent = Bs.gM,
            xs.BufferAsset = Bs.fn,
            xs.CCBoolean = Bs.fh,
            xs.CCClass = Bs.fa,
            xs.CCFloat = Bs.fg,
            xs.CCInteger = Bs.ff,
            xs.CCLoader = Bs.g2,
            xs.CCObject = Bs.dn,
            xs.CCString = Bs.cT,
            xs.CachedArray = Bs.C,
            xs.Camera = Bs.du,
            xs.CameraComponent = Bs.du,
            xs.CapsuleCollider = Bs.gO,
            xs.CapsuleColliderComponent = Bs.gO,
            xs.Collider = Bs.gL,
            xs.ColliderComponent = Bs.gL,
            xs.Color = Bs.cs,
            xs.CompactValueTypeArray = Bs.fi,
            xs.Component = Bs.cr,
            xs.ComponentModifier = Bs.gc,
            xs.ConeCollider = Bs.gR,
            xs.ConstantForce = Bs.gI,
            xs.Constraint = Bs.gV,
            xs.CubicSplineNumberValue = Bs.bz,
            xs.CubicSplineQuatValue = Bs.by,
            xs.CubicSplineVec2Value = Bs.bv,
            xs.CubicSplineVec3Value = Bs.bw,
            xs.CubicSplineVec4Value = Bs.bx,
            xs.CurveValueAdapter = Bs.gd,
            xs.CylinderCollider = Bs.gQ,
            xs.CylinderColliderComponent = Bs.gQ,
            xs.DebugMode = Bs.fD,
            xs.DeferredPipeline = Bs.fO,
            xs.Details = Bs.fd,
            xs.Director = Bs.db,
            xs.EAxisDirection = Bs.gY,
            xs.EPSILON = Bs.eR,
            xs.ERigidBodyType = Bs.en,
            xs.EffectAsset = Bs.ft,
            xs.Enum = Bs.b$,
            xs.Event = Bs.e0,
            xs.EventAcceleration = Bs.gz,
            xs.EventHandler = Bs.dO,
            xs.EventInfo = Bs.gn,
            xs.EventKeyboard = Bs.gA,
            xs.EventMouse = Bs.gB,
            xs.EventTarget = Bs.ez,
            xs.EventTouch = Bs.d_,
            xs.Eventify = Bs.fm,
            xs.ExtrapolationMode = Bs.gt,
            xs.ForwardFlow = Bs.fM,
            xs.ForwardPipeline = Bs.fL,
            xs.ForwardStage = Bs.fN,
            xs.Game = Bs.ev,
            xs.GbufferStage = Bs.fQ,
            xs.HierachyModifier = Bs.gb,
            xs.HingeConstraint = Bs.gW,
            xs.ImageAsset = Bs.d3,
            xs.Input = Bs.dG,
            xs.InstancedBuffer = Bs.fW,
            xs.JavaScript = Bs.fv,
            xs.JsonAsset = Bs.fr,
            xs.KeyCode = Bs.dV,
            xs.Layers = Bs.dA,
            xs.LightingStage = Bs.fR,
            xs.MATH_FLOAT_ARRAY = Bs.eZ,
            xs.MainFlow = Bs.fP,
            xs.Mat3 = Bs.eM,
            xs.Mat4 = Bs.ck,
            xs.Material = Bs.cS,
            xs.MathBase = Bs.e_,
            xs.Mesh = Bs.bW,
            xs.MeshCollider = Bs.gP,
            xs.MeshColliderComponent = Bs.gP,
            xs.MissingScript = Bs.g9,
            xs.Node = Bs.cR,
            xs.NodeActivator = Bs.g7,
            xs.NodePool = Bs.gy,
            xs.ObjectCurve = Bs.gx,
            xs.PhysicMaterial = Bs.gJ,
            xs.PhysicsMaterial = Bs.gJ,
            xs.PhysicsRayResult = Bs.gK,
            xs.PhysicsSystem = Bs.em,
            xs.PipelineEventProcessor = Bs.fY,
            xs.PipelineEventType = Bs.fZ,
            xs.PipelineStateManager = Bs.fX,
            xs.PlaneCollider = Bs.gU,
            xs.PointToPointConstraint = Bs.gX,
            xs.Pool = Bs.P,
            xs.PostProcessStage = Bs.fT,
            xs.Prefab = Bs.fo,
            xs.PrefabLink = Bs.f4,
            xs.PrivateNode = Bs.g8,
            xs.Quat = Bs.cB,
            xs.QuatCurve = Bs.gv,
            xs.QuatInterpolationMode = Bs.gw,
            xs.RatioSampler = Bs.gl,
            xs.RealCurve = Bs.e6,
            xs.RealInterpolationMode = Bs.gs,
            xs.Rect = Bs.d0,
            xs.RecyclePool = Bs.R,
            xs.RenderFlow = Bs.fJ,
            xs.RenderPipeline = Bs.fI,
            xs.RenderStage = Bs.fK,
            xs.RenderTexture = Bs.ds,
            xs.RenderableComponent = Bs.cj,
            xs.RenderingSubMesh = Bs.dm,
            xs.ResolutionPolicy = Bs.fE,
            xs.RigidBody = Bs.gH,
            xs.RigidBodyComponent = Bs.gH,
            xs.Scene = Bs.e1,
            xs.SceneAsset = Bs.fp,
            xs.Scheduler = Bs.fF,
            xs.Script = Bs.fu,
            xs.ShadowFlow = Bs.fU,
            xs.ShadowStage = Bs.fV,
            xs.SimplexCollider = Bs.gT,
            xs.Size = Bs.d1,
            xs.SkelAnimDataHub = Bs.cE,
            xs.Skeleton = Bs.cQ,
            xs.SphereCollider = Bs.gN,
            xs.SphereColliderComponent = Bs.gN,
            xs.System = Bs.eB,
            xs.SystemEvent = Bs.gE,
            xs.SystemEventType = Bs.d$,
            xs.TangentWeightMode = Bs.gu,
            xs.TerrainCollider = Bs.gS,
            xs.TextAsset = Bs.fq,
            xs.Texture2D = Bs.cU,
            xs.TextureCube = Bs.fs,
            xs.Touch = Bs.gD,
            xs.TypeScript = Bs.fw,
            xs.UniformCurveValueAdapter = Bs.ge,
            xs.VERSION = Bs.eD,
            xs.ValueType = Bs.f0,
            xs.Vec2 = Bs.cY,
            xs.Vec3 = Bs.bU,
            xs.Vec4 = Bs.cc,
            xs.View = Bs.e4,
            xs.WorldNode3DToLocalNodeUI = Bs.f6,
            xs.WorldNode3DToWorldNodeUI = Bs.f7,
            xs._decorator = Bs.f9,
            xs.absMax = Bs.eu,
            xs.absMaxComponent = Bs.et,
            xs.approx = Bs.eT,
            xs.assert = Bs.fy,
            xs.assertID = Bs.fz,
            xs.assetManager = Bs.f$,
            xs.bezier = Bs.gj,
            xs.bezierByTime = Bs.gk,
            xs.bits = Bs.eH,
            xs.builtinResMgr = Bs.c8,
            xs.ccenum = Bs.dg,
            xs.cclegacy = Bs.bS,
            xs.clamp = Bs.dr,
            xs.clamp01 = Bs.dZ,
            xs.color = Bs.eQ,
            xs.computeRatioByType = Bs.gp,
            xs.convertUtils = Bs.f8,
            xs.createDefaultPipeline = Bs.fH,
            xs.debug = Bs.bG,
            xs.deserialize = Bs.fc,
            xs.deserializeTag = Bs.fk,
            xs.director = Bs.da,
            xs.easing = Bs.eC,
            xs.editorExtrasTag = Bs.fj,
            xs.effects = Bs.ga,
            xs.enumerableProps = Bs.eY,
            xs.equals = Bs.eS,
            xs.error = Bs.bH,
            xs.errorID = Bs.bF,
            xs.find = Bs.bY,
            xs.game = Bs.dS,
            xs.geometry = Bs.eG,
            xs.getError = Bs.fC,
            xs.getPathFromRoot = Bs.gr,
            xs.getPhaseID = Bs.f_,
            xs.getSerializationMetadata = Bs.fe,
            xs.getWorldTransformUntilRoot = Bs.cD,
            xs.input = Bs.dF,
            xs.instantiate = Bs.ek,
            xs.inverseLerp = Bs.eX,
            xs.isCustomTargetModifier = Bs.gh,
            xs.isDisplayStats = Bs.fA,
            xs.isElementModifier = Bs.gg,
            xs.isPropertyModifier = Bs.gf,
            xs.isValid = Bs.fb,
            xs.js = Bs.f1,
            xs.lerp = Bs.dP,
            xs.loader = Bs.g3,
            xs.log = Bs.fx,
            xs.logID = Bs.dE,
            xs.macro = Bs.bP,
            xs.markAsWarning = Bs.dx,
            xs.mat4 = Bs.eA,
            xs.math = Bs.eF,
            xs.misc = Bs.f2,
            xs.murmurhash2_32_gc = Bs.c$,
            xs.nextPow2 = Bs.eW,
            xs.path = Bs.f3,
            xs.physics = Bs.gG,
            xs.pingPong = Bs.eh,
            xs.pipeline = Bs.fG,
            xs.pointerEvent2SystemEvent = Bs.dI,
            xs.pseudoRandom = Bs.eb,
            xs.pseudoRandomRange = Bs.eU,
            xs.pseudoRandomRangeInt = Bs.eV,
            xs.quat = Bs.eL,
            xs.random = Bs.ec,
            xs.randomRange = Bs.ed,
            xs.randomRangeInt = Bs.ee,
            xs.rect = Bs.eP,
            xs.removeProperty = Bs.cl,
            xs.renderer = Bs.eE,
            xs.repeat = Bs.ea,
            xs.replaceProperty = Bs.cA,
            xs.resources = Bs.g1,
            xs.sampleAnimationCurve = Bs.go,
            xs.screen = Bs.dw,
            xs.serializeTag = Bs.fl,
            xs.setDefaultLogTimes = Bs.f5,
            xs.setDisplayStats = Bs.fB,
            xs.size = Bs.eO,
            xs.sys = Bs.bL,
            xs.systemEvent = Bs.gF,
            xs.toDegree = Bs.e5,
            xs.toRadian = Bs.cz,
            xs.url = Bs.g5,
            xs.v2 = Bs.eI,
            xs.v3 = Bs.eJ,
            xs.v4 = Bs.eK,
            xs.view = Bs.dv,
            xs.warn = Bs.bK,
            xs.warnID = Bs.bJ,
            t(xs)
        }
        ],
        execute: function() {
            t({
                CacheMode: void 0,
                HorizontalTextAlignment: void 0,
                InstanceMaterialType: void 0,
                Overflow: void 0,
                VerticalTextAlignment: void 0,
                earcut: iS,
                fragmentText: I_,
                getBaselineOffset: function() {
                    return 0
                },
                isUnicodeCJK: w_,
                isUnicodeSpace: O_,
                safeMeasureText: P_,
                tween: zZ,
                tweenUtil: UZ
            }),
            t("memop", Object.freeze({
                __proto__: null,
                Pool: e,
                RecyclePool: i,
                CachedArray: r
            })),
            t("gfx", Object.freeze({
                __proto__: null,
                DescriptorSet: n,
                Buffer: s,
                CommandBuffer: a,
                get ObjectType() {
                    return o
                },
                get Status() {
                    return l
                },
                get API() {
                    return h
                },
                get SurfaceTransform() {
                    return u
                },
                get Feature() {
                    return c
                },
                get Format() {
                    return _
                },
                get FormatType() {
                    return d
                },
                get Type() {
                    return p
                },
                get BufferUsageBit() {
                    return f
                },
                get BufferFlagBit() {
                    return g
                },
                get MemoryAccessBit() {
                    return m
                },
                get MemoryUsageBit() {
                    return y
                },
                get TextureType() {
                    return v
                },
                get TextureUsageBit() {
                    return S
                },
                get TextureFlagBit() {
                    return T
                },
                get SampleCount() {
                    return b
                },
                get VsyncMode() {
                    return E
                },
                get Filter() {
                    return A
                },
                get Address() {
                    return C
                },
                get ComparisonFunc() {
                    return R
                },
                get StencilOp() {
                    return B
                },
                get BlendFactor() {
                    return x
                },
                get BlendOp() {
                    return D
                },
                get ColorMask() {
                    return w
                },
                get ShaderStageFlagBit() {
                    return O
                },
                get LoadOp() {
                    return P
                },
                get StoreOp() {
                    return M
                },
                get AccessType() {
                    return I
                },
                get ResolveMode() {
                    return L
                },
                get PipelineBindPoint() {
                    return F
                },
                get PrimitiveMode() {
                    return N
                },
                get PolygonMode() {
                    return k
                },
                get ShadeModel() {
                    return G
                },
                get CullMode() {
                    return z
                },
                get DynamicStateFlagBit() {
                    return U
                },
                get StencilFace() {
                    return H
                },
                get DescriptorType() {
                    return V
                },
                get QueueType() {
                    return W
                },
                get QueryType() {
                    return X
                },
                get CommandBufferType() {
                    return j
                },
                get ClearFlagBit() {
                    return Y
                },
                Size: K,
                DeviceCaps: Z,
                Offset: q,
                Rect: J,
                Extent: Q,
                TextureSubresLayers: $,
                TextureSubresRange: tt,
                TextureCopy: et,
                TextureBlit: it,
                BufferTextureCopy: rt,
                Viewport: nt,
                Color: st,
                BindingMappingInfo: at,
                SwapchainInfo: ot,
                DeviceInfo: lt,
                BufferInfo: ht,
                BufferViewInfo: ut,
                DrawInfo: ct,
                DispatchInfo: _t,
                IndirectBuffer: dt,
                TextureInfo: pt,
                TextureViewInfo: ft,
                SamplerInfo: gt,
                Uniform: mt,
                UniformBlock: yt,
                UniformSamplerTexture: vt,
                UniformSampler: St,
                UniformTexture: Tt,
                UniformStorageImage: bt,
                UniformStorageBuffer: Et,
                UniformInputAttachment: At,
                ShaderStage: Ct,
                Attribute: Rt,
                ShaderInfo: Bt,
                InputAssemblerInfo: xt,
                ColorAttachment: Dt,
                DepthStencilAttachment: wt,
                SubpassInfo: Ot,
                SubpassDependency: Pt,
                RenderPassInfo: Mt,
                GlobalBarrierInfo: It,
                TextureBarrierInfo: Lt,
                FramebufferInfo: Ft,
                DescriptorSetLayoutBinding: Nt,
                DescriptorSetLayoutInfo: kt,
                DescriptorSetInfo: Gt,
                PipelineLayoutInfo: zt,
                InputState: Ut,
                CommandBufferInfo: Ht,
                QueueInfo: Vt,
                QueryPoolInfo: Wt,
                FormatInfo: Xt,
                MemoryStatus: jt,
                DynamicStencilStates: Yt,
                DynamicStates: Kt,
                GFXObject: Zt,
                get AttributeName() {
                    return qt
                },
                FormatInfos: Jt,
                DESCRIPTOR_BUFFER_TYPE: Qt,
                DESCRIPTOR_SAMPLER_TYPE: $t,
                DESCRIPTOR_DYNAMIC_TYPE: te,
                DRAW_INFO_SIZE: ee,
                IsPowerOf2: ie,
                FormatSize: re,
                FormatSurfaceSize: ne,
                GetTypeSize: se,
                getTypedArrayConstructor: ae,
                Device: oe,
                Swapchain: le,
                Framebuffer: he,
                InputAssembler: ue,
                DescriptorSetLayout: ce,
                PipelineLayout: _e,
                RasterizerState: de,
                DepthStencilState: pe,
                BlendTarget: fe,
                BlendState: ge,
                PipelineStateInfo: me,
                PipelineState: ye,
                Queue: ve,
                RenderPass: Se,
                Sampler: Te,
                Shader: be,
                Texture: Ee,
                GlobalBarrier: Ae,
                TextureBarrier: Ce
            })),
            t("animation", Object.freeze({
                __proto__: null,
                UniformProxyFactory: Re,
                MorphWeightValueProxy: Be,
                MorphWeightsValueProxy: xe,
                MorphWeightsAllValueProxy: De,
                Track: we,
                TrackPath: Oe,
                RealTrack: Pe,
                VectorTrack: Me,
                QuatTrack: Ie,
                ColorTrack: Le,
                SizeTrack: Fe,
                ObjectTrack: Ne,
                isPropertyPath: ke,
                isCustomPath: Ge,
                HierarchyPath: ze,
                ComponentPath: Ue,
                CubicSplineVec2Value: He,
                CubicSplineVec3Value: Ve,
                CubicSplineVec4Value: We,
                CubicSplineQuatValue: Xe,
                CubicSplineNumberValue: je,
                AnimationController: Ye,
                get VariableType() {
                    return Ke
                },
                StateMachineComponent: Ze
            }));
            var Bs, xs = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuDescriptorSet = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._layout = t.layout;
                    var e = t.layout.gpuDescriptorSetLayout
                      , i = e.bindings
                      , r = e.descriptorIndices
                      , n = e.descriptorCount;
                    this._buffers = Array(n).fill(null),
                    this._textures = Array(n).fill(null),
                    this._samplers = Array(n).fill(null);
                    var s = [];
                    this._gpuDescriptorSet = {
                        gpuDescriptors: s,
                        descriptorIndices: r
                    };
                    for (var a = 0; a < i.length; ++a)
                        for (var o = i[a], l = 0; l < o.count; l++)
                            s.push({
                                type: o.descriptorType,
                                gpuBuffer: null,
                                gpuTexture: null,
                                gpuSampler: null
                            })
                }
                ,
                i.destroy = function() {
                    this._layout = null,
                    this._gpuDescriptorSet = null
                }
                ,
                i.update = function() {
                    if (this._isDirty && this._gpuDescriptorSet) {
                        for (var t = this._gpuDescriptorSet.gpuDescriptors, e = 0; e < t.length; ++e)
                            if (t[e].type & Qt) {
                                var i = this._buffers[e];
                                i && (t[e].gpuBuffer = i.gpuBuffer || i.gpuBufferView)
                            } else
                                t[e].type & $t && (this._textures[e] && (t[e].gpuTexture = this._textures[e].gpuTexture),
                                this._samplers[e] && (t[e].gpuSampler = this._samplers[e].gpuSampler));
                        this._isDirty = !1
                    }
                }
                ,
                Je(e, [{
                    key: "gpuDescriptorSet",
                    get: function() {
                        return this._gpuDescriptorSet
                    }
                }]),
                e
            }(n);
            !function(t) {
                t[t.RGBA16F_EXT = 34842] = "RGBA16F_EXT",
                t[t.RGB16F_EXT = 34843] = "RGB16F_EXT",
                t[t.RGBA32F_EXT = 34836] = "RGBA32F_EXT",
                t[t.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 33297] = "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT",
                t[t.UNSIGNED_NORMALIZED_EXT = 35863] = "UNSIGNED_NORMALIZED_EXT",
                t[t.UNSIGNED_INT_24_8_WEBGL = 34042] = "UNSIGNED_INT_24_8_WEBGL",
                t[t.HALF_FLOAT_OES = 36193] = "HALF_FLOAT_OES",
                t[t.SRGB_EXT = 35904] = "SRGB_EXT",
                t[t.SRGB_ALPHA_EXT = 35906] = "SRGB_ALPHA_EXT",
                t[t.SRGB8_ALPHA8_EXT = 35907] = "SRGB8_ALPHA8_EXT",
                t[t.COMPRESSED_RGB_S3TC_DXT1_EXT = 33776] = "COMPRESSED_RGB_S3TC_DXT1_EXT",
                t[t.COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777] = "COMPRESSED_RGBA_S3TC_DXT1_EXT",
                t[t.COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778] = "COMPRESSED_RGBA_S3TC_DXT3_EXT",
                t[t.COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779] = "COMPRESSED_RGBA_S3TC_DXT5_EXT",
                t[t.COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916] = "COMPRESSED_SRGB_S3TC_DXT1_EXT",
                t[t.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT",
                t[t.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT",
                t[t.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT",
                t[t.COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840] = "COMPRESSED_RGB_PVRTC_4BPPV1_IMG",
                t[t.COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841] = "COMPRESSED_RGB_PVRTC_2BPPV1_IMG",
                t[t.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842] = "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG",
                t[t.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843] = "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG",
                t[t.COMPRESSED_RGB_ETC1_WEBGL = 36196] = "COMPRESSED_RGB_ETC1_WEBGL",
                t[t.COMPRESSED_R11_EAC = 37488] = "COMPRESSED_R11_EAC",
                t[t.COMPRESSED_SIGNED_R11_EAC = 37489] = "COMPRESSED_SIGNED_R11_EAC",
                t[t.COMPRESSED_RG11_EAC = 37490] = "COMPRESSED_RG11_EAC",
                t[t.COMPRESSED_SIGNED_RG11_EAC = 37491] = "COMPRESSED_SIGNED_RG11_EAC",
                t[t.COMPRESSED_RGB8_ETC2 = 37492] = "COMPRESSED_RGB8_ETC2",
                t[t.COMPRESSED_SRGB8_ETC2 = 37493] = "COMPRESSED_SRGB8_ETC2",
                t[t.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494] = "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2",
                t[t.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495] = "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2",
                t[t.COMPRESSED_RGBA8_ETC2_EAC = 37496] = "COMPRESSED_RGBA8_ETC2_EAC",
                t[t.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497] = "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC",
                t[t.COMPRESSED_RGBA_ASTC_4x4_KHR = 37808] = "COMPRESSED_RGBA_ASTC_4x4_KHR",
                t[t.COMPRESSED_RGBA_ASTC_5x4_KHR = 37809] = "COMPRESSED_RGBA_ASTC_5x4_KHR",
                t[t.COMPRESSED_RGBA_ASTC_5x5_KHR = 37810] = "COMPRESSED_RGBA_ASTC_5x5_KHR",
                t[t.COMPRESSED_RGBA_ASTC_6x5_KHR = 37811] = "COMPRESSED_RGBA_ASTC_6x5_KHR",
                t[t.COMPRESSED_RGBA_ASTC_6x6_KHR = 37812] = "COMPRESSED_RGBA_ASTC_6x6_KHR",
                t[t.COMPRESSED_RGBA_ASTC_8x5_KHR = 37813] = "COMPRESSED_RGBA_ASTC_8x5_KHR",
                t[t.COMPRESSED_RGBA_ASTC_8x6_KHR = 37814] = "COMPRESSED_RGBA_ASTC_8x6_KHR",
                t[t.COMPRESSED_RGBA_ASTC_8x8_KHR = 37815] = "COMPRESSED_RGBA_ASTC_8x8_KHR",
                t[t.COMPRESSED_RGBA_ASTC_10x5_KHR = 37816] = "COMPRESSED_RGBA_ASTC_10x5_KHR",
                t[t.COMPRESSED_RGBA_ASTC_10x6_KHR = 37817] = "COMPRESSED_RGBA_ASTC_10x6_KHR",
                t[t.COMPRESSED_RGBA_ASTC_10x8_KHR = 37818] = "COMPRESSED_RGBA_ASTC_10x8_KHR",
                t[t.COMPRESSED_RGBA_ASTC_10x10_KHR = 37819] = "COMPRESSED_RGBA_ASTC_10x10_KHR",
                t[t.COMPRESSED_RGBA_ASTC_12x10_KHR = 37820] = "COMPRESSED_RGBA_ASTC_12x10_KHR",
                t[t.COMPRESSED_RGBA_ASTC_12x12_KHR = 37821] = "COMPRESSED_RGBA_ASTC_12x12_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840] = "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 37841] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 37842] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 37843] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 37844] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 37845] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 37846] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 37847] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 37848] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 37849] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 37850] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 37851] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 37852] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 37853] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"
            }(Bs || (Bs = {}));
            var Ds = function() {
                function t() {}
                return t.setInstance = function(e) {
                    t._instance = e
                }
                ,
                Je(t, null, [{
                    key: "instance",
                    get: function() {
                        return t._instance
                    }
                }]),
                t
            }();
            function ws(t, e) {
                switch (t) {
                case _.R8:
                    return e.UNSIGNED_BYTE;
                case _.R8SN:
                    return e.BYTE;
                case _.R8UI:
                    return e.UNSIGNED_BYTE;
                case _.R8I:
                    return e.BYTE;
                case _.R16F:
                    return Bs.HALF_FLOAT_OES;
                case _.R16UI:
                    return e.UNSIGNED_SHORT;
                case _.R16I:
                    return e.SHORT;
                case _.R32F:
                    return e.FLOAT;
                case _.R32UI:
                    return e.UNSIGNED_INT;
                case _.R32I:
                    return e.INT;
                case _.RG8:
                    return e.UNSIGNED_BYTE;
                case _.RG8SN:
                    return e.BYTE;
                case _.RG8UI:
                    return e.UNSIGNED_BYTE;
                case _.RG8I:
                    return e.BYTE;
                case _.RG16F:
                    return Bs.HALF_FLOAT_OES;
                case _.RG16UI:
                    return e.UNSIGNED_SHORT;
                case _.RG16I:
                    return e.SHORT;
                case _.RG32F:
                    return e.FLOAT;
                case _.RG32UI:
                    return e.UNSIGNED_INT;
                case _.RG32I:
                    return e.INT;
                case _.RGB8:
                case _.SRGB8:
                    return e.UNSIGNED_BYTE;
                case _.RGB8SN:
                    return e.BYTE;
                case _.RGB8UI:
                    return e.UNSIGNED_BYTE;
                case _.RGB8I:
                    return e.BYTE;
                case _.RGB16F:
                    return Bs.HALF_FLOAT_OES;
                case _.RGB16UI:
                    return e.UNSIGNED_SHORT;
                case _.RGB16I:
                    return e.SHORT;
                case _.RGB32F:
                    return e.FLOAT;
                case _.RGB32UI:
                    return e.UNSIGNED_INT;
                case _.RGB32I:
                    return e.INT;
                case _.BGRA8:
                case _.RGBA8:
                case _.SRGB8_A8:
                    return e.UNSIGNED_BYTE;
                case _.RGBA8SN:
                    return e.BYTE;
                case _.RGBA8UI:
                    return e.UNSIGNED_BYTE;
                case _.RGBA8I:
                    return e.BYTE;
                case _.RGBA16F:
                    return Bs.HALF_FLOAT_OES;
                case _.RGBA16UI:
                    return e.UNSIGNED_SHORT;
                case _.RGBA16I:
                    return e.SHORT;
                case _.RGBA32F:
                    return e.FLOAT;
                case _.RGBA32UI:
                    return e.UNSIGNED_INT;
                case _.RGBA32I:
                    return e.INT;
                case _.R5G6B5:
                    return e.UNSIGNED_SHORT_5_6_5;
                case _.R11G11B10F:
                    return e.FLOAT;
                case _.RGB5A1:
                    return e.UNSIGNED_SHORT_5_5_5_1;
                case _.RGBA4:
                    return e.UNSIGNED_SHORT_4_4_4_4;
                case _.RGB10A2:
                    return e.UNSIGNED_BYTE;
                case _.RGB10A2UI:
                    return e.UNSIGNED_INT;
                case _.RGB9E5:
                    return e.UNSIGNED_BYTE;
                case _.DEPTH:
                    return e.UNSIGNED_INT;
                case _.DEPTH_STENCIL:
                    return Bs.UNSIGNED_INT_24_8_WEBGL;
                case _.BC1:
                case _.BC1_SRGB:
                case _.BC2:
                case _.BC2_SRGB:
                case _.BC3:
                case _.BC3_SRGB:
                case _.BC4:
                    return e.UNSIGNED_BYTE;
                case _.BC4_SNORM:
                    return e.BYTE;
                case _.BC5:
                    return e.UNSIGNED_BYTE;
                case _.BC5_SNORM:
                    return e.BYTE;
                case _.BC6H_SF16:
                case _.BC6H_UF16:
                    return e.FLOAT;
                case _.BC7:
                case _.BC7_SRGB:
                case _.ETC_RGB8:
                case _.ETC2_RGB8:
                case _.ETC2_SRGB8:
                case _.ETC2_RGB8_A1:
                case _.ETC2_SRGB8_A1:
                case _.EAC_R11:
                    return e.UNSIGNED_BYTE;
                case _.EAC_R11SN:
                    return e.BYTE;
                case _.EAC_RG11:
                    return e.UNSIGNED_BYTE;
                case _.EAC_RG11SN:
                    return e.BYTE;
                case _.PVRTC_RGB2:
                case _.PVRTC_RGBA2:
                case _.PVRTC_RGB4:
                case _.PVRTC_RGBA4:
                case _.PVRTC2_2BPP:
                case _.PVRTC2_4BPP:
                    return e.UNSIGNED_BYTE;
                case _.ASTC_RGBA_4X4:
                case _.ASTC_RGBA_5X4:
                case _.ASTC_RGBA_5X5:
                case _.ASTC_RGBA_6X5:
                case _.ASTC_RGBA_6X6:
                case _.ASTC_RGBA_8X5:
                case _.ASTC_RGBA_8X6:
                case _.ASTC_RGBA_8X8:
                case _.ASTC_RGBA_10X5:
                case _.ASTC_RGBA_10X6:
                case _.ASTC_RGBA_10X8:
                case _.ASTC_RGBA_10X10:
                case _.ASTC_RGBA_12X10:
                case _.ASTC_RGBA_12X12:
                case _.ASTC_SRGBA_4X4:
                case _.ASTC_SRGBA_5X4:
                case _.ASTC_SRGBA_5X5:
                case _.ASTC_SRGBA_6X5:
                case _.ASTC_SRGBA_6X6:
                case _.ASTC_SRGBA_8X5:
                case _.ASTC_SRGBA_8X6:
                case _.ASTC_SRGBA_8X8:
                case _.ASTC_SRGBA_10X5:
                case _.ASTC_SRGBA_10X6:
                case _.ASTC_SRGBA_10X8:
                case _.ASTC_SRGBA_10X10:
                case _.ASTC_SRGBA_12X10:
                case _.ASTC_SRGBA_12X12:
                default:
                    return e.UNSIGNED_BYTE
                }
            }
            function Os(t, e) {
                switch (t) {
                case p.BOOL:
                    return e.BOOL;
                case p.BOOL2:
                    return e.BOOL_VEC2;
                case p.BOOL3:
                    return e.BOOL_VEC3;
                case p.BOOL4:
                    return e.BOOL_VEC4;
                case p.INT:
                    return e.INT;
                case p.INT2:
                    return e.INT_VEC2;
                case p.INT3:
                    return e.INT_VEC3;
                case p.INT4:
                    return e.INT_VEC4;
                case p.UINT:
                    return e.UNSIGNED_INT;
                case p.FLOAT:
                    return e.FLOAT;
                case p.FLOAT2:
                    return e.FLOAT_VEC2;
                case p.FLOAT3:
                    return e.FLOAT_VEC3;
                case p.FLOAT4:
                    return e.FLOAT_VEC4;
                case p.MAT2:
                    return e.FLOAT_MAT2;
                case p.MAT3:
                    return e.FLOAT_MAT3;
                case p.MAT4:
                    return e.FLOAT_MAT4;
                case p.SAMPLER2D:
                    return e.SAMPLER_2D;
                case p.SAMPLER_CUBE:
                    return e.SAMPLER_CUBE;
                default:
                    return console.error("Unsupported GLType, convert to GL type failed."),
                    p.UNKNOWN
                }
            }
            function Ps(t) {
                switch (t) {
                case p.BOOL:
                case p.BOOL2:
                case p.BOOL3:
                case p.BOOL4:
                case p.INT:
                case p.INT2:
                case p.INT3:
                case p.INT4:
                case p.UINT:
                    return Int32Array;
                case p.FLOAT:
                case p.FLOAT2:
                case p.FLOAT3:
                case p.FLOAT4:
                case p.MAT2:
                case p.MAT3:
                case p.MAT4:
                    return Float32Array;
                default:
                    return console.error("Unsupported GLType, convert to TypedArrayConstructor failed."),
                    Float32Array
                }
            }
            function Ms(t, e) {
                switch (t) {
                case e.BOOL:
                    return p.BOOL;
                case e.BOOL_VEC2:
                    return p.BOOL2;
                case e.BOOL_VEC3:
                    return p.BOOL3;
                case e.BOOL_VEC4:
                    return p.BOOL4;
                case e.INT:
                    return p.INT;
                case e.INT_VEC2:
                    return p.INT2;
                case e.INT_VEC3:
                    return p.INT3;
                case e.INT_VEC4:
                    return p.INT4;
                case e.UNSIGNED_INT:
                    return p.UINT;
                case e.FLOAT:
                    return p.FLOAT;
                case e.FLOAT_VEC2:
                    return p.FLOAT2;
                case e.FLOAT_VEC3:
                    return p.FLOAT3;
                case e.FLOAT_VEC4:
                    return p.FLOAT4;
                case e.FLOAT_MAT2:
                    return p.MAT2;
                case e.FLOAT_MAT3:
                    return p.MAT3;
                case e.FLOAT_MAT4:
                    return p.MAT4;
                case e.SAMPLER_2D:
                    return p.SAMPLER2D;
                case e.SAMPLER_CUBE:
                    return p.SAMPLER_CUBE;
                default:
                    return console.error("Unsupported GLType, convert to Type failed."),
                    p.UNKNOWN
                }
            }
            function Is(t, e) {
                switch (t) {
                case e.BOOL:
                    return 4;
                case e.BOOL_VEC2:
                    return 8;
                case e.BOOL_VEC3:
                    return 12;
                case e.BOOL_VEC4:
                    return 16;
                case e.INT:
                    return 4;
                case e.INT_VEC2:
                    return 8;
                case e.INT_VEC3:
                    return 12;
                case e.INT_VEC4:
                    return 16;
                case e.UNSIGNED_INT:
                case e.FLOAT:
                    return 4;
                case e.FLOAT_VEC2:
                    return 8;
                case e.FLOAT_VEC3:
                    return 12;
                case e.FLOAT_VEC4:
                case e.FLOAT_MAT2:
                    return 16;
                case e.FLOAT_MAT3:
                    return 36;
                case e.FLOAT_MAT4:
                    return 64;
                case e.SAMPLER_2D:
                case e.SAMPLER_CUBE:
                    return 4;
                default:
                    return console.error("Unsupported GLType, get type failed."),
                    0
                }
            }
            function Ls(t, e) {
                switch (t) {
                case e.FLOAT_MAT2:
                    return 2;
                case e.FLOAT_MAT3:
                    return 3;
                case e.FLOAT_MAT4:
                    return 4;
                default:
                    return 1
                }
            }
            Ds._instance = null;
            var Fs, Ns = [512, 513, 514, 515, 516, 517, 518, 519], ks = [0, 7680, 7681, 7682, 7683, 5386, 34055, 34056], Gs = [32774, 32778, 32779, 32775, 32776], zs = [0, 1, 770, 772, 771, 773, 768, 774, 769, 775, 776, 32769, 32770, 32771, 32772];
            !function(t) {
                t[t.BEGIN_RENDER_PASS = 0] = "BEGIN_RENDER_PASS",
                t[t.END_RENDER_PASS = 1] = "END_RENDER_PASS",
                t[t.BIND_STATES = 2] = "BIND_STATES",
                t[t.DRAW = 3] = "DRAW",
                t[t.UPDATE_BUFFER = 4] = "UPDATE_BUFFER",
                t[t.COPY_BUFFER_TO_TEXTURE = 5] = "COPY_BUFFER_TO_TEXTURE",
                t[t.COUNT = 6] = "COUNT"
            }(Fs || (Fs = {}));
            var Us = function(t) {
                this.cmdType = void 0,
                this.refCount = 0,
                this.cmdType = t
            }
              , Hs = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this, Fs.BEGIN_RENDER_PASS) || this).gpuRenderPass = null,
                    e.gpuFramebuffer = null,
                    e.renderArea = new J,
                    e.clearFlag = Y.NONE,
                    e.clearColors = [],
                    e.clearDepth = 1,
                    e.clearStencil = 0,
                    e
                }
                return qe(e, t),
                e.prototype.clear = function() {
                    this.gpuFramebuffer = null,
                    this.clearColors.length = 0
                }
                ,
                e
            }(Us)
              , Vs = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this, Fs.BIND_STATES) || this).gpuPipelineState = null,
                    e.gpuInputAssembler = null,
                    e.gpuDescriptorSets = [],
                    e.dynamicOffsets = [],
                    e.dynamicStates = new Kt,
                    e
                }
                return qe(e, t),
                e.prototype.clear = function() {
                    this.gpuPipelineState = null,
                    this.gpuDescriptorSets.length = 0,
                    this.gpuInputAssembler = null,
                    this.dynamicOffsets.length = 0
                }
                ,
                e
            }(Us)
              , Ws = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this, Fs.DRAW) || this).drawInfo = new ct,
                    e
                }
                return qe(e, t),
                e.prototype.clear = function() {}
                ,
                e
            }(Us)
              , Xs = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this, Fs.UPDATE_BUFFER) || this).gpuBuffer = null,
                    e.buffer = null,
                    e.offset = 0,
                    e.size = 0,
                    e
                }
                return qe(e, t),
                e.prototype.clear = function() {
                    this.gpuBuffer = null,
                    this.buffer = null
                }
                ,
                e
            }(Us)
              , js = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this, Fs.COPY_BUFFER_TO_TEXTURE) || this).gpuTexture = null,
                    e.buffers = [],
                    e.regions = [],
                    e
                }
                return qe(e, t),
                e.prototype.clear = function() {
                    this.gpuTexture = null,
                    this.buffers.length = 0,
                    this.regions.length = 0
                }
                ,
                e
            }(Us)
              , Ys = function() {
                function t() {
                    this.cmds = new r(1),
                    this.beginRenderPassCmds = new r(1),
                    this.bindStatesCmds = new r(1),
                    this.drawCmds = new r(1),
                    this.updateBufferCmds = new r(1),
                    this.copyBufferToTextureCmds = new r(1)
                }
                return t.prototype.clearCmds = function(t) {
                    this.beginRenderPassCmds.length && (t.beginRenderPassCmdPool.freeCmds(this.beginRenderPassCmds),
                    this.beginRenderPassCmds.clear()),
                    this.bindStatesCmds.length && (t.bindStatesCmdPool.freeCmds(this.bindStatesCmds),
                    this.bindStatesCmds.clear()),
                    this.drawCmds.length && (t.drawCmdPool.freeCmds(this.drawCmds),
                    this.drawCmds.clear()),
                    this.updateBufferCmds.length && (t.updateBufferCmdPool.freeCmds(this.updateBufferCmds),
                    this.updateBufferCmds.clear()),
                    this.copyBufferToTextureCmds.length && (t.copyBufferToTextureCmdPool.freeCmds(this.copyBufferToTextureCmds),
                    this.copyBufferToTextureCmds.clear()),
                    this.cmds.clear()
                }
                ,
                t
            }();
            function Ks(t, e, i, r, n) {
                if (e.usage & f.UNIFORM)
                    ArrayBuffer.isView(i) ? e.vf32.set(i, r / Float32Array.BYTES_PER_ELEMENT) : e.vf32.set(new Float32Array(i), r / Float32Array.BYTES_PER_ELEMENT);
                else if (e.usage & f.INDIRECT) {
                    e.indirects.clearDraws();
                    for (var s = i.drawInfos, a = 0; a < s.length; ++a)
                        e.indirects.setDrawInfo(r + a, s[a])
                } else {
                    var o = i
                      , l = t.gl
                      , h = t.stateCache;
                    switch (e.glTarget) {
                    case l.ARRAY_BUFFER:
                        t.extensions.useVAO && h.glVAO && (t.extensions.OES_vertex_array_object.bindVertexArrayOES(null),
                        h.glVAO = null),
                        Zs.gpuInputAssembler = null,
                        t.stateCache.glArrayBuffer !== e.glBuffer && (l.bindBuffer(l.ARRAY_BUFFER, e.glBuffer),
                        t.stateCache.glArrayBuffer = e.glBuffer);
                        break;
                    case l.ELEMENT_ARRAY_BUFFER:
                        t.extensions.useVAO && h.glVAO && (t.extensions.OES_vertex_array_object.bindVertexArrayOES(null),
                        h.glVAO = null),
                        Zs.gpuInputAssembler = null,
                        t.stateCache.glElementArrayBuffer !== e.glBuffer && (l.bindBuffer(l.ELEMENT_ARRAY_BUFFER, e.glBuffer),
                        t.stateCache.glElementArrayBuffer = e.glBuffer);
                        break;
                    default:
                        return void console.error("Unsupported BufferType, update buffer failed.")
                    }
                    n === o.byteLength ? l.bufferSubData(e.glTarget, r, o) : l.bufferSubData(e.glTarget, r, o.slice(0, n))
                }
            }
            var Zs = {
                gpuPipelineState: null,
                gpuInputAssembler: null,
                glPrimitive: 0
            };
            function qs(t, e, i, r, n, s, a) {
                var o = t.gl
                  , l = t.stateCache
                  , h = 0;
                if (i && e) {
                    l.glFramebuffer !== i.glFramebuffer && (o.bindFramebuffer(o.FRAMEBUFFER, i.glFramebuffer),
                    l.glFramebuffer = i.glFramebuffer),
                    l.viewport.left === r.x && l.viewport.top === r.y && l.viewport.width === r.width && l.viewport.height === r.height || (o.viewport(r.x, r.y, r.width, r.height),
                    l.viewport.left = r.x,
                    l.viewport.top = r.y,
                    l.viewport.width = r.width,
                    l.viewport.height = r.height),
                    l.scissorRect.x === r.x && l.scissorRect.y === r.y && l.scissorRect.width === r.width && l.scissorRect.height === r.height || (o.scissor(r.x, r.y, r.width, r.height),
                    l.scissorRect.x = r.x,
                    l.scissorRect.y = r.y,
                    l.scissorRect.width = r.width,
                    l.scissorRect.height = r.height);
                    var u = n.length;
                    t.extensions.WEBGL_draw_buffers || (u = 1);
                    for (var c = 0; c < u; ++c) {
                        var d = e.colorAttachments[c];
                        if (d.format !== _.UNKNOWN)
                            switch (d.loadOp) {
                            case P.LOAD:
                                break;
                            case P.CLEAR:
                                l.bs.targets[0].blendColorMask !== w.ALL && o.colorMask(!0, !0, !0, !0);
                                var p = n[0];
                                o.clearColor(p.x, p.y, p.z, p.w),
                                h |= o.COLOR_BUFFER_BIT;
                                break;
                            case P.DISCARD:
                            }
                    }
                    if (e.depthStencilAttachment && e.depthStencilAttachment.format !== _.UNKNOWN) {
                        switch (e.depthStencilAttachment.depthLoadOp) {
                        case P.LOAD:
                            break;
                        case P.CLEAR:
                            l.dss.depthWrite || o.depthMask(!0),
                            o.clearDepth(s),
                            h |= o.DEPTH_BUFFER_BIT;
                            break;
                        case P.DISCARD:
                        }
                        if (Jt[e.depthStencilAttachment.format].hasStencil)
                            switch (e.depthStencilAttachment.stencilLoadOp) {
                            case P.LOAD:
                                break;
                            case P.CLEAR:
                                l.dss.stencilWriteMaskFront || o.stencilMaskSeparate(o.FRONT, 65535),
                                l.dss.stencilWriteMaskBack || o.stencilMaskSeparate(o.BACK, 65535),
                                o.clearStencil(a),
                                h |= o.STENCIL_BUFFER_BIT;
                                break;
                            case P.DISCARD:
                            }
                    }
                    if (h && o.clear(h),
                    h & o.COLOR_BUFFER_BIT) {
                        var f = l.bs.targets[0].blendColorMask;
                        if (f !== w.ALL) {
                            var g = (f & w.R) !== w.NONE
                              , m = (f & w.G) !== w.NONE
                              , y = (f & w.B) !== w.NONE
                              , v = (f & w.A) !== w.NONE;
                            o.colorMask(g, m, y, v)
                        }
                    }
                    h & o.DEPTH_BUFFER_BIT && !l.dss.depthWrite && o.depthMask(!1),
                    h & o.STENCIL_BUFFER_BIT && (l.dss.stencilWriteMaskFront || o.stencilMaskSeparate(o.FRONT, 0),
                    l.dss.stencilWriteMaskBack || o.stencilMaskSeparate(o.BACK, 0))
                }
            }
            function Js(t, e, i, r, n, s) {
                var a, o, l, h = t.gl, u = t.stateCache, c = e && e.gpuShader, _ = !1;
                if (e && Zs.gpuPipelineState !== e) {
                    if (Zs.gpuPipelineState = e,
                    Zs.glPrimitive = e.glPrimitive,
                    e.gpuShader) {
                        var d = e.gpuShader.glProgram;
                        u.glProgram !== d && (h.useProgram(d),
                        u.glProgram = d,
                        _ = !0)
                    }
                    var p = e.rs;
                    if (p) {
                        if (u.rs.cullMode !== p.cullMode) {
                            switch (p.cullMode) {
                            case z.NONE:
                                h.disable(h.CULL_FACE);
                                break;
                            case z.FRONT:
                                h.enable(h.CULL_FACE),
                                h.cullFace(h.FRONT);
                                break;
                            case z.BACK:
                                h.enable(h.CULL_FACE),
                                h.cullFace(h.BACK)
                            }
                            u.rs.cullMode = p.cullMode
                        }
                        var f = p.isFrontFaceCCW;
                        u.rs.isFrontFaceCCW !== f && (h.frontFace(f ? h.CCW : h.CW),
                        u.rs.isFrontFaceCCW = f),
                        u.rs.depthBias === p.depthBias && u.rs.depthBiasSlop === p.depthBiasSlop || (h.polygonOffset(p.depthBias, p.depthBiasSlop),
                        u.rs.depthBias = p.depthBias,
                        u.rs.depthBiasSlop = p.depthBiasSlop),
                        u.rs.lineWidth !== p.lineWidth && (h.lineWidth(p.lineWidth),
                        u.rs.lineWidth = p.lineWidth)
                    }
                    var g = e.dss;
                    g && (u.dss.depthTest !== g.depthTest && (g.depthTest ? h.enable(h.DEPTH_TEST) : h.disable(h.DEPTH_TEST),
                    u.dss.depthTest = g.depthTest),
                    u.dss.depthWrite !== g.depthWrite && (h.depthMask(g.depthWrite),
                    u.dss.depthWrite = g.depthWrite),
                    u.dss.depthFunc !== g.depthFunc && (h.depthFunc(Ns[g.depthFunc]),
                    u.dss.depthFunc = g.depthFunc),
                    u.dss.stencilTestFront === g.stencilTestFront && u.dss.stencilTestBack === g.stencilTestBack || (g.stencilTestFront || g.stencilTestBack ? h.enable(h.STENCIL_TEST) : h.disable(h.STENCIL_TEST),
                    u.dss.stencilTestFront = g.stencilTestFront,
                    u.dss.stencilTestBack = g.stencilTestBack),
                    u.dss.stencilFuncFront === g.stencilFuncFront && u.dss.stencilRefFront === g.stencilRefFront && u.dss.stencilReadMaskFront === g.stencilReadMaskFront || (h.stencilFuncSeparate(h.FRONT, Ns[g.stencilFuncFront], g.stencilRefFront, g.stencilReadMaskFront),
                    u.dss.stencilFuncFront = g.stencilFuncFront,
                    u.dss.stencilRefFront = g.stencilRefFront,
                    u.dss.stencilReadMaskFront = g.stencilReadMaskFront),
                    u.dss.stencilFailOpFront === g.stencilFailOpFront && u.dss.stencilZFailOpFront === g.stencilZFailOpFront && u.dss.stencilPassOpFront === g.stencilPassOpFront || (h.stencilOpSeparate(h.FRONT, ks[g.stencilFailOpFront], ks[g.stencilZFailOpFront], ks[g.stencilPassOpFront]),
                    u.dss.stencilFailOpFront = g.stencilFailOpFront,
                    u.dss.stencilZFailOpFront = g.stencilZFailOpFront,
                    u.dss.stencilPassOpFront = g.stencilPassOpFront),
                    u.dss.stencilWriteMaskFront !== g.stencilWriteMaskFront && (h.stencilMaskSeparate(h.FRONT, g.stencilWriteMaskFront),
                    u.dss.stencilWriteMaskFront = g.stencilWriteMaskFront),
                    u.dss.stencilFuncBack === g.stencilFuncBack && u.dss.stencilRefBack === g.stencilRefBack && u.dss.stencilReadMaskBack === g.stencilReadMaskBack || (h.stencilFuncSeparate(h.BACK, Ns[g.stencilFuncBack], g.stencilRefBack, g.stencilReadMaskBack),
                    u.dss.stencilFuncBack = g.stencilFuncBack,
                    u.dss.stencilRefBack = g.stencilRefBack,
                    u.dss.stencilReadMaskBack = g.stencilReadMaskBack),
                    u.dss.stencilFailOpBack === g.stencilFailOpBack && u.dss.stencilZFailOpBack === g.stencilZFailOpBack && u.dss.stencilPassOpBack === g.stencilPassOpBack || (h.stencilOpSeparate(h.BACK, ks[g.stencilFailOpBack], ks[g.stencilZFailOpBack], ks[g.stencilPassOpBack]),
                    u.dss.stencilFailOpBack = g.stencilFailOpBack,
                    u.dss.stencilZFailOpBack = g.stencilZFailOpBack,
                    u.dss.stencilPassOpBack = g.stencilPassOpBack),
                    u.dss.stencilWriteMaskBack !== g.stencilWriteMaskBack && (h.stencilMaskSeparate(h.BACK, g.stencilWriteMaskBack),
                    u.dss.stencilWriteMaskBack = g.stencilWriteMaskBack));
                    var m = e.bs;
                    if (m) {
                        u.bs.isA2C !== m.isA2C && (m.isA2C ? h.enable(h.SAMPLE_ALPHA_TO_COVERAGE) : h.disable(h.SAMPLE_ALPHA_TO_COVERAGE),
                        u.bs.isA2C = m.isA2C),
                        u.bs.blendColor.x === m.blendColor.x && u.bs.blendColor.y === m.blendColor.y && u.bs.blendColor.z === m.blendColor.z && u.bs.blendColor.w === m.blendColor.w || (h.blendColor(m.blendColor.x, m.blendColor.y, m.blendColor.z, m.blendColor.w),
                        u.bs.blendColor.x = m.blendColor.x,
                        u.bs.blendColor.y = m.blendColor.y,
                        u.bs.blendColor.z = m.blendColor.z,
                        u.bs.blendColor.w = m.blendColor.w);
                        var y = m.targets[0]
                          , v = u.bs.targets[0];
                        v.blend !== y.blend && (y.blend ? h.enable(h.BLEND) : h.disable(h.BLEND),
                        v.blend = y.blend),
                        v.blendEq === y.blendEq && v.blendAlphaEq === y.blendAlphaEq || (h.blendEquationSeparate(Gs[y.blendEq], Gs[y.blendAlphaEq]),
                        v.blendEq = y.blendEq,
                        v.blendAlphaEq = y.blendAlphaEq),
                        v.blendSrc === y.blendSrc && v.blendDst === y.blendDst && v.blendSrcAlpha === y.blendSrcAlpha && v.blendDstAlpha === y.blendDstAlpha || (h.blendFuncSeparate(zs[y.blendSrc], zs[y.blendDst], zs[y.blendSrcAlpha], zs[y.blendDstAlpha]),
                        v.blendSrc = y.blendSrc,
                        v.blendDst = y.blendDst,
                        v.blendSrcAlpha = y.blendSrcAlpha,
                        v.blendDstAlpha = y.blendDstAlpha),
                        v.blendColorMask !== y.blendColorMask && (h.colorMask((y.blendColorMask & w.R) !== w.NONE, (y.blendColorMask & w.G) !== w.NONE, (y.blendColorMask & w.B) !== w.NONE, (y.blendColorMask & w.A) !== w.NONE),
                        v.blendColorMask = y.blendColorMask)
                    }
                }
                if (e && e.gpuPipelineLayout && c) {
                    for (var S = c.glBlocks.length, T = e.gpuPipelineLayout.dynamicOffsetIndices, b = 0; b < S; b++) {
                        var E = c.glBlocks[b]
                          , A = r[E.set]
                          , C = A && A.descriptorIndices[E.binding]
                          , R = C >= 0 && A.gpuDescriptors[C]
                          , B = null
                          , x = 0;
                        if (R && R.gpuBuffer) {
                            var D = R.gpuBuffer
                              , O = T[E.set]
                              , P = O && O[E.binding];
                            P >= 0 && (x = n[P]),
                            "vf32"in D ? B = D.vf32 : (x += D.offset,
                            B = D.gpuBuffer.vf32),
                            x >>= 2
                        }
                        if (B)
                            for (var M = E.glActiveUniforms.length, I = 0; I < M; I++) {
                                var L = E.glActiveUniforms[I];
                                switch (L.glType) {
                                case h.BOOL:
                                case h.INT:
                                    for (var F = 0; F < L.array.length; ++F) {
                                        var N = L.offset + x + F;
                                        if (B[N] !== L.array[F]) {
                                            for (var k = F, G = N; k < L.array.length; ++k,
                                            ++G)
                                                L.array[k] = B[G];
                                            h.uniform1iv(L.glLoc, L.array);
                                            break
                                        }
                                    }
                                    break;
                                case h.BOOL_VEC2:
                                case h.INT_VEC2:
                                    for (var H = 0; H < L.array.length; ++H) {
                                        var V = L.offset + x + H;
                                        if (B[V] !== L.array[H]) {
                                            for (var W = H, X = V; W < L.array.length; ++W,
                                            ++X)
                                                L.array[W] = B[X];
                                            h.uniform2iv(L.glLoc, L.array);
                                            break
                                        }
                                    }
                                    break;
                                case h.BOOL_VEC3:
                                case h.INT_VEC3:
                                    for (var j = 0; j < L.array.length; ++j) {
                                        var Y = L.offset + x + j;
                                        if (B[Y] !== L.array[j]) {
                                            for (var K = j, Z = Y; K < L.array.length; ++K,
                                            ++Z)
                                                L.array[K] = B[Z];
                                            h.uniform3iv(L.glLoc, L.array);
                                            break
                                        }
                                    }
                                    break;
                                case h.BOOL_VEC4:
                                case h.INT_VEC4:
                                    for (var q = 0; q < L.array.length; ++q) {
                                        var J = L.offset + x + q;
                                        if (B[J] !== L.array[q]) {
                                            for (var Q = q, $ = J; Q < L.array.length; ++Q,
                                            ++$)
                                                L.array[Q] = B[$];
                                            h.uniform4iv(L.glLoc, L.array);
                                            break
                                        }
                                    }
                                    break;
                                case h.FLOAT:
                                    for (var tt = 0; tt < L.array.length; ++tt) {
                                        var et = L.offset + x + tt;
                                        if (B[et] !== L.array[tt]) {
                                            for (var it = tt, rt = et; it < L.array.length; ++it,
                                            ++rt)
                                                L.array[it] = B[rt];
                                            h.uniform1fv(L.glLoc, L.array);
                                            break
                                        }
                                    }
                                    break;
                                case h.FLOAT_VEC2:
                                    for (var nt = 0; nt < L.array.length; ++nt) {
                                        var st = L.offset + x + nt;
                                        if (B[st] !== L.array[nt]) {
                                            for (var at = nt, ot = st; at < L.array.length; ++at,
                                            ++ot)
                                                L.array[at] = B[ot];
                                            h.uniform2fv(L.glLoc, L.array);
                                            break
                                        }
                                    }
                                    break;
                                case h.FLOAT_VEC3:
                                    for (var lt = 0; lt < L.array.length; ++lt) {
                                        var ht = L.offset + x + lt;
                                        if (B[ht] !== L.array[lt]) {
                                            for (var ut = lt, ct = ht; ut < L.array.length; ++ut,
                                            ++ct)
                                                L.array[ut] = B[ct];
                                            h.uniform3fv(L.glLoc, L.array);
                                            break
                                        }
                                    }
                                    break;
                                case h.FLOAT_VEC4:
                                    for (var _t = 0; _t < L.array.length; ++_t) {
                                        var dt = L.offset + x + _t;
                                        if (B[dt] !== L.array[_t]) {
                                            for (var pt = _t, ft = dt; pt < L.array.length; ++pt,
                                            ++ft)
                                                L.array[pt] = B[ft];
                                            h.uniform4fv(L.glLoc, L.array);
                                            break
                                        }
                                    }
                                    break;
                                case h.FLOAT_MAT2:
                                    for (var gt = 0; gt < L.array.length; ++gt) {
                                        var mt = L.offset + x + gt;
                                        if (B[mt] !== L.array[gt]) {
                                            for (var yt = gt, vt = mt; yt < L.array.length; ++yt,
                                            ++vt)
                                                L.array[yt] = B[vt];
                                            h.uniformMatrix2fv(L.glLoc, !1, L.array);
                                            break
                                        }
                                    }
                                    break;
                                case h.FLOAT_MAT3:
                                    for (var St = 0; St < L.array.length; ++St) {
                                        var Tt = L.offset + x + St;
                                        if (B[Tt] !== L.array[St]) {
                                            for (var bt = St, Et = Tt; bt < L.array.length; ++bt,
                                            ++Et)
                                                L.array[bt] = B[Et];
                                            h.uniformMatrix3fv(L.glLoc, !1, L.array);
                                            break
                                        }
                                    }
                                    break;
                                case h.FLOAT_MAT4:
                                    for (var At = 0; At < L.array.length; ++At) {
                                        var Ct = L.offset + x + At;
                                        if (B[Ct] !== L.array[At]) {
                                            for (var Rt = At, Bt = Ct; Rt < L.array.length; ++Rt,
                                            ++Bt)
                                                L.array[Rt] = B[Bt];
                                            h.uniformMatrix4fv(L.glLoc, !1, L.array);
                                            break
                                        }
                                    }
                                }
                            }
                        else
                            ti("Buffer binding '" + E.name + "' at set " + E.set + " binding " + E.binding + " is not bounded")
                    }
                    for (var xt = c.glSamplerTextures.length, Dt = 0; Dt < xt; Dt++)
                        for (var wt = c.glSamplerTextures[Dt], Ot = r[wt.set], Pt = Ot && Ot.descriptorIndices[wt.binding], Mt = Pt >= 0 && Ot.gpuDescriptors[Pt], It = wt.units.length, Lt = 0; Lt < It; Lt++) {
                            var Ft = wt.units[Lt];
                            if (Mt && Mt.gpuSampler) {
                                if (Mt.gpuTexture && Mt.gpuTexture.size > 0) {
                                    var Nt = Mt.gpuTexture
                                      , kt = u.glTexUnits[Ft];
                                    kt.glTexture !== Nt.glTexture && (u.texUnit !== Ft && (h.activeTexture(h.TEXTURE0 + Ft),
                                    u.texUnit = Ft),
                                    Nt.glTexture ? h.bindTexture(Nt.glTarget, Nt.glTexture) : h.bindTexture(Nt.glTarget, t.nullTex2D.gpuTexture.glTexture),
                                    kt.glTexture = Nt.glTexture);
                                    var Gt = Mt.gpuSampler;
                                    Nt.isPowerOf2 ? (a = Gt.glWrapS,
                                    o = Gt.glWrapT) : (a = h.CLAMP_TO_EDGE,
                                    o = h.CLAMP_TO_EDGE),
                                    l = Nt.isPowerOf2 ? Nt.mipLevel <= 1 && (Gt.glMinFilter === h.LINEAR_MIPMAP_NEAREST || Gt.glMinFilter === h.LINEAR_MIPMAP_LINEAR) ? h.LINEAR : Gt.glMinFilter : Gt.glMinFilter === h.LINEAR || Gt.glMinFilter === h.LINEAR_MIPMAP_NEAREST || Gt.glMinFilter === h.LINEAR_MIPMAP_LINEAR ? h.LINEAR : h.NEAREST,
                                    Nt.glWrapS !== a && (u.texUnit !== Ft && (h.activeTexture(h.TEXTURE0 + Ft),
                                    u.texUnit = Ft),
                                    h.texParameteri(Nt.glTarget, h.TEXTURE_WRAP_S, a),
                                    Nt.glWrapS = a),
                                    Nt.glWrapT !== o && (u.texUnit !== Ft && (h.activeTexture(h.TEXTURE0 + Ft),
                                    u.texUnit = Ft),
                                    h.texParameteri(Nt.glTarget, h.TEXTURE_WRAP_T, o),
                                    Nt.glWrapT = o),
                                    Nt.glMinFilter !== l && (u.texUnit !== Ft && (h.activeTexture(h.TEXTURE0 + Ft),
                                    u.texUnit = Ft),
                                    h.texParameteri(Nt.glTarget, h.TEXTURE_MIN_FILTER, l),
                                    Nt.glMinFilter = l),
                                    Nt.glMagFilter !== Gt.glMagFilter && (u.texUnit !== Ft && (h.activeTexture(h.TEXTURE0 + Ft),
                                    u.texUnit = Ft),
                                    h.texParameteri(Nt.glTarget, h.TEXTURE_MAG_FILTER, Gt.glMagFilter),
                                    Nt.glMagFilter = Gt.glMagFilter)
                                }
                                Mt = Ot.gpuDescriptors[++Pt]
                            } else
                                ti("Sampler binding '" + wt.name + "' at set " + wt.set + " binding " + wt.binding + " index " + Lt + " is not bounded")
                        }
                }
                if (i && c && (_ || Zs.gpuInputAssembler !== i)) {
                    Zs.gpuInputAssembler = i;
                    var zt = t.extensions.ANGLE_instanced_arrays;
                    if (t.extensions.useVAO) {
                        var Ut = t.extensions.OES_vertex_array_object
                          , Ht = i.glVAOs.get(c.glProgram);
                        if (!Ht) {
                            var Vt;
                            Ht = Ut.createVertexArrayOES(),
                            i.glVAOs.set(c.glProgram, Ht),
                            Ut.bindVertexArrayOES(Ht),
                            h.bindBuffer(h.ARRAY_BUFFER, null),
                            h.bindBuffer(h.ELEMENT_ARRAY_BUFFER, null),
                            u.glArrayBuffer = null,
                            u.glElementArrayBuffer = null;
                            for (var Wt = c.glInputs.length, Xt = 0; Xt < Wt; Xt++) {
                                var jt = c.glInputs[Xt];
                                Vt = null;
                                for (var Yt = i.glAttribs.length, Kt = 0; Kt < Yt; Kt++) {
                                    var Zt = i.glAttribs[Kt];
                                    if (Zt.name === jt.name) {
                                        Vt = Zt;
                                        break
                                    }
                                }
                                if (Vt) {
                                    u.glArrayBuffer !== Vt.glBuffer && (h.bindBuffer(h.ARRAY_BUFFER, Vt.glBuffer),
                                    u.glArrayBuffer = Vt.glBuffer);
                                    for (var qt = 0; qt < Vt.componentCount; ++qt) {
                                        var Jt = jt.glLoc + qt
                                          , Qt = Vt.offset + Vt.size * qt;
                                        h.enableVertexAttribArray(Jt),
                                        u.glCurrentAttribLocs[Jt] = !0,
                                        h.vertexAttribPointer(Jt, Vt.count, Vt.glType, Vt.isNormalized, Vt.stride, Qt),
                                        zt && zt.vertexAttribDivisorANGLE(Jt, Vt.isInstanced ? 1 : 0)
                                    }
                                }
                            }
                            var $t = i.gpuIndexBuffer;
                            $t && h.bindBuffer(h.ELEMENT_ARRAY_BUFFER, $t.glBuffer),
                            Ut.bindVertexArrayOES(null),
                            h.bindBuffer(h.ARRAY_BUFFER, null),
                            h.bindBuffer(h.ELEMENT_ARRAY_BUFFER, null),
                            u.glArrayBuffer = null,
                            u.glElementArrayBuffer = null
                        }
                        u.glVAO !== Ht && (Ut.bindVertexArrayOES(Ht),
                        u.glVAO = Ht)
                    } else {
                        for (var te = 0; te < t.capabilities.maxVertexAttributes; ++te)
                            u.glCurrentAttribLocs[te] = !1;
                        for (var ee = c.glInputs.length, ie = 0; ie < ee; ie++) {
                            for (var re = c.glInputs[ie], ne = null, se = i.glAttribs.length, ae = 0; ae < se; ae++) {
                                var oe = i.glAttribs[ae];
                                if (oe.name === re.name) {
                                    ne = oe;
                                    break
                                }
                            }
                            if (ne) {
                                u.glArrayBuffer !== ne.glBuffer && (h.bindBuffer(h.ARRAY_BUFFER, ne.glBuffer),
                                u.glArrayBuffer = ne.glBuffer);
                                for (var le = 0; le < ne.componentCount; ++le) {
                                    var he = re.glLoc + le
                                      , ue = ne.offset + ne.size * le;
                                    !u.glEnabledAttribLocs[he] && he >= 0 && (h.enableVertexAttribArray(he),
                                    u.glEnabledAttribLocs[he] = !0),
                                    u.glCurrentAttribLocs[he] = !0,
                                    h.vertexAttribPointer(he, ne.count, ne.glType, ne.isNormalized, ne.stride, ue),
                                    zt && zt.vertexAttribDivisorANGLE(he, ne.isInstanced ? 1 : 0)
                                }
                            }
                        }
                        var ce = i.gpuIndexBuffer;
                        ce && u.glElementArrayBuffer !== ce.glBuffer && (h.bindBuffer(h.ELEMENT_ARRAY_BUFFER, ce.glBuffer),
                        u.glElementArrayBuffer = ce.glBuffer);
                        for (var _e = 0; _e < t.capabilities.maxVertexAttributes; ++_e)
                            u.glEnabledAttribLocs[_e] !== u.glCurrentAttribLocs[_e] && (h.disableVertexAttribArray(_e),
                            u.glEnabledAttribLocs[_e] = !1)
                    }
                }
                if (e && e.dynamicStates.length)
                    for (var de = e.dynamicStates.length, pe = 0; pe < de; pe++)
                        switch (e.dynamicStates[pe]) {
                        case U.LINE_WIDTH:
                            u.rs.lineWidth !== s.lineWidth && (h.lineWidth(s.lineWidth),
                            u.rs.lineWidth = s.lineWidth);
                            break;
                        case U.DEPTH_BIAS:
                            u.rs.depthBias === s.depthBiasConstant && u.rs.depthBiasSlop === s.depthBiasSlope || (h.polygonOffset(s.depthBiasConstant, s.depthBiasSlope),
                            u.rs.depthBias = s.depthBiasConstant,
                            u.rs.depthBiasSlop = s.depthBiasSlope);
                            break;
                        case U.BLEND_CONSTANTS:
                            var fe = s.blendConstant;
                            u.bs.blendColor.x === fe.x && u.bs.blendColor.y === fe.y && u.bs.blendColor.z === fe.z && u.bs.blendColor.w === fe.w || (h.blendColor(fe.x, fe.y, fe.z, fe.w),
                            u.bs.blendColor.copy(fe));
                            break;
                        case U.STENCIL_WRITE_MASK:
                            var ge = s.stencilStatesFront
                              , me = s.stencilStatesBack;
                            u.dss.stencilWriteMaskFront !== ge.writeMask && (h.stencilMaskSeparate(h.FRONT, ge.writeMask),
                            u.dss.stencilWriteMaskFront = ge.writeMask),
                            u.dss.stencilWriteMaskBack !== me.writeMask && (h.stencilMaskSeparate(h.BACK, me.writeMask),
                            u.dss.stencilWriteMaskBack = me.writeMask);
                            break;
                        case U.STENCIL_COMPARE_MASK:
                            var ye = s.stencilStatesFront
                              , ve = s.stencilStatesBack;
                            u.dss.stencilRefFront === ye.reference && u.dss.stencilReadMaskFront === ye.compareMask || (h.stencilFuncSeparate(h.FRONT, Ns[u.dss.stencilFuncFront], ye.reference, ye.compareMask),
                            u.dss.stencilRefFront = ye.reference,
                            u.dss.stencilReadMaskFront = ye.compareMask),
                            u.dss.stencilRefBack === ve.reference && u.dss.stencilReadMaskBack === ve.compareMask || (h.stencilFuncSeparate(h.BACK, Ns[u.dss.stencilFuncBack], ve.reference, ve.compareMask),
                            u.dss.stencilRefBack = ve.reference,
                            u.dss.stencilReadMaskBack = ve.compareMask)
                        }
            }
            function Qs(t, e) {
                var i = t.gl
                  , r = t.extensions
                  , n = r.ANGLE_instanced_arrays
                  , s = r.WEBGL_multi_draw
                  , a = Zs.gpuInputAssembler
                  , o = Zs.glPrimitive;
                if (a) {
                    var l = a.gpuIndexBuffer;
                    if (a.gpuIndirectBuffer) {
                        var h = a.gpuIndirectBuffer.indirects;
                        if (h.drawByIndex) {
                            for (var u = 0; u < h.drawCount; u++)
                                h.byteOffsets[u] = h.offsets[u] * l.stride;
                            if (s)
                                h.instancedDraw ? s.multiDrawElementsInstancedWEBGL(o, h.counts, 0, a.glIndexType, h.byteOffsets, 0, h.instances, 0, h.drawCount) : s.multiDrawElementsWEBGL(o, h.counts, 0, a.glIndexType, h.byteOffsets, 0, h.drawCount);
                            else
                                for (var c = 0; c < h.drawCount; c++)
                                    h.instances[c] && n ? n.drawElementsInstancedANGLE(o, h.counts[c], a.glIndexType, h.byteOffsets[c], h.instances[c]) : i.drawElements(o, h.counts[c], a.glIndexType, h.byteOffsets[c])
                        } else if (s)
                            h.instancedDraw ? s.multiDrawArraysInstancedWEBGL(o, h.offsets, 0, h.counts, 0, h.instances, 0, h.drawCount) : s.multiDrawArraysWEBGL(o, h.offsets, 0, h.counts, 0, h.drawCount);
                        else
                            for (var _ = 0; _ < h.drawCount; _++)
                                h.instances[_] && n ? n.drawArraysInstancedANGLE(o, h.offsets[_], h.counts[_], h.instances[_]) : i.drawArrays(o, h.offsets[_], h.counts[_])
                    } else if (e.instanceCount && n)
                        if (l) {
                            if (e.indexCount > 0) {
                                var d = e.firstIndex * l.stride;
                                n.drawElementsInstancedANGLE(o, e.indexCount, a.glIndexType, d, e.instanceCount)
                            }
                        } else
                            e.vertexCount > 0 && n.drawArraysInstancedANGLE(o, e.firstVertex, e.vertexCount, e.instanceCount);
                    else if (l) {
                        if (e.indexCount > 0) {
                            var p = e.firstIndex * l.stride;
                            i.drawElements(o, e.indexCount, a.glIndexType, p)
                        }
                    } else
                        e.vertexCount > 0 && i.drawArrays(o, e.firstVertex, e.vertexCount)
                }
            }
            var $s = new Array(Fs.COUNT);
            function ta(t, e) {
                $s.fill(0);
                for (var i = 0; i < e.cmds.length; ++i) {
                    var r = e.cmds.array[i]
                      , n = $s[r]++;
                    switch (r) {
                    case Fs.BEGIN_RENDER_PASS:
                        var s = e.beginRenderPassCmds.array[n];
                        qs(t, s.gpuRenderPass, s.gpuFramebuffer, s.renderArea, s.clearColors, s.clearDepth, s.clearStencil);
                        break;
                    case Fs.BIND_STATES:
                        var a = e.bindStatesCmds.array[n];
                        Js(t, a.gpuPipelineState, a.gpuInputAssembler, a.gpuDescriptorSets, a.dynamicOffsets, a.dynamicStates);
                        break;
                    case Fs.DRAW:
                        Qs(t, e.drawCmds.array[n].drawInfo);
                        break;
                    case Fs.UPDATE_BUFFER:
                        var o = e.updateBufferCmds.array[n];
                        Ks(t, o.gpuBuffer, o.buffer, o.offset, o.size);
                        break;
                    case Fs.COPY_BUFFER_TO_TEXTURE:
                        var l = e.copyBufferToTextureCmds.array[n];
                        ea(t, l.buffers, l.gpuTexture, l.regions)
                    }
                }
            }
            function ea(t, e, i, r) {
                var n = t.gl
                  , s = t.stateCache.glTexUnits[t.stateCache.texUnit];
                s.glTexture !== i.glTexture && (n.bindTexture(i.glTarget, i.glTexture),
                s.glTexture = i.glTexture);
                var a = 0
                  , o = 1
                  , l = 1
                  , h = 0
                  , u = Jt[i.format].isCompressed;
                switch (i.glTarget) {
                case n.TEXTURE_2D:
                    for (var c = 0; c < r.length; c++) {
                        var _ = r[c];
                        o = _.texExtent.width,
                        l = _.texExtent.height;
                        var d = e[a++];
                        u ? i.glInternalFmt === Bs.COMPRESSED_RGB_ETC1_WEBGL || t.extensions.noCompressedTexSubImage2D ? n.compressedTexImage2D(n.TEXTURE_2D, _.texSubres.mipLevel, i.glInternalFmt, o, l, 0, d) : n.compressedTexSubImage2D(n.TEXTURE_2D, _.texSubres.mipLevel, _.texOffset.x, _.texOffset.y, o, l, i.glFormat, d) : n.texSubImage2D(n.TEXTURE_2D, _.texSubres.mipLevel, _.texOffset.x, _.texOffset.y, o, l, i.glFormat, i.glType, d)
                    }
                    break;
                case n.TEXTURE_CUBE_MAP:
                    for (var p = 0; p < r.length; p++) {
                        var f = r[p]
                          , g = f.texSubres.baseArrayLayer + f.texSubres.layerCount;
                        for (h = f.texSubres.baseArrayLayer; h < g; ++h) {
                            o = f.texExtent.width,
                            l = f.texExtent.height;
                            var m = e[a++];
                            u ? i.glInternalFmt === Bs.COMPRESSED_RGB_ETC1_WEBGL || t.extensions.noCompressedTexSubImage2D ? n.compressedTexImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + h, f.texSubres.mipLevel, i.glInternalFmt, o, l, 0, m) : n.compressedTexSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + h, f.texSubres.mipLevel, f.texOffset.x, f.texOffset.y, o, l, i.glFormat, m) : n.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + h, f.texSubres.mipLevel, f.texOffset.x, f.texOffset.y, o, l, i.glFormat, i.glType, m)
                        }
                    }
                    break;
                default:
                    console.error("Unsupported GL texture type, copy buffer to texture failed.")
                }
                i.flags & T.GEN_MIPMAP && n.generateMipmap(i.glTarget)
            }
            var ia = function() {
                function t() {
                    this.counts = void 0,
                    this.offsets = void 0,
                    this.instances = void 0,
                    this.drawCount = 0,
                    this.drawByIndex = !1,
                    this.instancedDraw = !1,
                    this.byteOffsets = void 0,
                    this._capacity = 4,
                    this.counts = new Int32Array(this._capacity),
                    this.offsets = new Int32Array(this._capacity),
                    this.instances = new Int32Array(this._capacity),
                    this.byteOffsets = new Int32Array(this._capacity)
                }
                var e = t.prototype;
                return e.clearDraws = function() {
                    this.drawCount = 0,
                    this.drawByIndex = !1,
                    this.instancedDraw = !1
                }
                ,
                e.setDrawInfo = function(t, e) {
                    this._ensureCapacity(t),
                    this.drawByIndex = e.indexCount > 0,
                    this.instancedDraw = !!e.instanceCount,
                    this.drawCount = Math.max(t + 1, this.drawCount),
                    this.drawByIndex ? (this.counts[t] = e.indexCount,
                    this.offsets[t] = e.firstIndex) : (this.counts[t] = e.vertexCount,
                    this.offsets[t] = e.firstVertex),
                    this.instances[t] = Math.max(1, e.instanceCount)
                }
                ,
                e._ensureCapacity = function(t) {
                    if (!(this._capacity > t)) {
                        this._capacity = ei(t);
                        var e = new Int32Array(this._capacity)
                          , i = new Int32Array(this._capacity)
                          , r = new Int32Array(this._capacity);
                        this.byteOffsets = new Int32Array(this._capacity),
                        e.set(this.counts),
                        i.set(this.offsets),
                        r.set(this.instances),
                        this.counts = e,
                        this.offsets = i,
                        this.instances = r
                    }
                }
                ,
                t
            }()
              , ra = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuBuffer = null,
                    e._gpuBufferView = null,
                    e._uniformBuffer = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    if ("buffer"in t) {
                        this._isBufferView = !0;
                        var e = t.buffer;
                        this._usage = e.usage,
                        this._memUsage = e.memUsage,
                        this._size = this._stride = t.range,
                        this._count = 1,
                        this._flags = e.flags,
                        this._gpuBufferView = {
                            gpuBuffer: e.gpuBuffer,
                            offset: t.offset,
                            range: t.range
                        }
                    } else
                        this._usage = t.usage,
                        this._memUsage = t.memUsage,
                        this._size = t.size,
                        this._stride = Math.max(t.stride || this._size, 1),
                        this._count = this._size / this._stride,
                        this._flags = t.flags,
                        this._usage & f.UNIFORM && this._size > 0 && (this._uniformBuffer = new Uint8Array(this._size)),
                        this._gpuBuffer = {
                            usage: this._usage,
                            memUsage: this._memUsage,
                            size: this._size,
                            stride: this._stride,
                            buffer: null,
                            vf32: null,
                            indirects: new ia,
                            glTarget: 0,
                            glBuffer: null
                        },
                        this._usage & f.UNIFORM && (this._gpuBuffer.buffer = this._uniformBuffer),
                        function(t, e) {
                            var i = t.gl
                              , r = t.stateCache
                              , n = e.memUsage & y.HOST ? i.DYNAMIC_DRAW : i.STATIC_DRAW;
                            if (e.usage & f.VERTEX) {
                                e.glTarget = i.ARRAY_BUFFER;
                                var s = i.createBuffer();
                                s && (e.glBuffer = s,
                                e.size > 0 && (t.extensions.useVAO && r.glVAO && (t.extensions.OES_vertex_array_object.bindVertexArrayOES(null),
                                r.glVAO = null),
                                Zs.gpuInputAssembler = null,
                                t.stateCache.glArrayBuffer !== e.glBuffer && (i.bindBuffer(i.ARRAY_BUFFER, e.glBuffer),
                                t.stateCache.glArrayBuffer = e.glBuffer),
                                i.bufferData(i.ARRAY_BUFFER, e.size, n),
                                i.bindBuffer(i.ARRAY_BUFFER, null),
                                t.stateCache.glArrayBuffer = null))
                            } else if (e.usage & f.INDEX) {
                                e.glTarget = i.ELEMENT_ARRAY_BUFFER;
                                var a = i.createBuffer();
                                a && (e.glBuffer = a,
                                e.size > 0 && (t.extensions.useVAO && r.glVAO && (t.extensions.OES_vertex_array_object.bindVertexArrayOES(null),
                                r.glVAO = null),
                                Zs.gpuInputAssembler = null,
                                t.stateCache.glElementArrayBuffer !== e.glBuffer && (i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, e.glBuffer),
                                t.stateCache.glElementArrayBuffer = e.glBuffer),
                                i.bufferData(i.ELEMENT_ARRAY_BUFFER, e.size, n),
                                i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, null),
                                t.stateCache.glElementArrayBuffer = null))
                            } else
                                e.usage & f.UNIFORM ? (e.glTarget = i.NONE,
                                e.buffer && (e.vf32 = new Float32Array(e.buffer.buffer))) : (e.usage & f.INDIRECT || e.usage & f.TRANSFER_DST || e.usage & f.TRANSFER_SRC || console.error("Unsupported BufferType, create buffer failed."),
                                e.glTarget = i.NONE)
                        }(Ds.instance, this._gpuBuffer),
                        Ds.instance.memoryStatus.bufferSize += this._size
                }
                ,
                i.destroy = function() {
                    this._gpuBuffer && (function(t, e) {
                        var i = t.gl
                          , r = t.stateCache;
                        if (e.glBuffer) {
                            switch (e.glTarget) {
                            case i.ARRAY_BUFFER:
                                t.extensions.useVAO && r.glVAO && (t.extensions.OES_vertex_array_object.bindVertexArrayOES(null),
                                t.stateCache.glVAO = null),
                                Zs.gpuInputAssembler = null,
                                i.bindBuffer(i.ARRAY_BUFFER, null),
                                t.stateCache.glArrayBuffer = null;
                                break;
                            case i.ELEMENT_ARRAY_BUFFER:
                                t.extensions.useVAO && r.glVAO && (t.extensions.OES_vertex_array_object.bindVertexArrayOES(null),
                                t.stateCache.glVAO = null),
                                Zs.gpuInputAssembler = null,
                                i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, null),
                                t.stateCache.glElementArrayBuffer = null
                            }
                            i.deleteBuffer(e.glBuffer),
                            e.glBuffer = null
                        }
                    }(Ds.instance, this._gpuBuffer),
                    Ds.instance.memoryStatus.bufferSize -= this._size,
                    this._gpuBuffer = null),
                    this._gpuBufferView && (this._gpuBufferView = null)
                }
                ,
                i.resize = function(t) {
                    if (this._isBufferView)
                        console.warn("cannot resize buffer views!");
                    else {
                        var e, i, r, n, s, a = this._size;
                        a !== t && (this._size = t,
                        this._count = this._size / this._stride,
                        this._uniformBuffer && (this._uniformBuffer = new Uint8Array(t)),
                        this._gpuBuffer && (this._uniformBuffer && (this._gpuBuffer.buffer = this._uniformBuffer),
                        this._gpuBuffer.size = t,
                        t > 0 && (e = Ds.instance,
                        i = this._gpuBuffer,
                        r = e.gl,
                        n = e.stateCache,
                        s = i.memUsage & y.HOST ? r.DYNAMIC_DRAW : r.STATIC_DRAW,
                        i.usage & f.VERTEX ? (e.extensions.useVAO && n.glVAO && (e.extensions.OES_vertex_array_object.bindVertexArrayOES(null),
                        n.glVAO = null),
                        Zs.gpuInputAssembler = null,
                        e.stateCache.glArrayBuffer !== i.glBuffer && r.bindBuffer(r.ARRAY_BUFFER, i.glBuffer),
                        i.buffer ? r.bufferData(r.ARRAY_BUFFER, i.buffer, s) : r.bufferData(r.ARRAY_BUFFER, i.size, s),
                        r.bindBuffer(r.ARRAY_BUFFER, null),
                        e.stateCache.glArrayBuffer = null) : i.usage & f.INDEX ? (e.extensions.useVAO && n.glVAO && (e.extensions.OES_vertex_array_object.bindVertexArrayOES(null),
                        n.glVAO = null),
                        Zs.gpuInputAssembler = null,
                        e.stateCache.glElementArrayBuffer !== i.glBuffer && r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, i.glBuffer),
                        i.buffer ? r.bufferData(r.ELEMENT_ARRAY_BUFFER, i.buffer, s) : r.bufferData(r.ELEMENT_ARRAY_BUFFER, i.size, s),
                        r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, null),
                        e.stateCache.glElementArrayBuffer = null) : i.usage & f.UNIFORM ? i.buffer && (i.vf32 = new Float32Array(i.buffer.buffer)) : (i.usage & f.INDIRECT || i.usage & f.TRANSFER_DST || i.usage & f.TRANSFER_SRC || console.error("Unsupported BufferType, create buffer failed."),
                        i.glTarget = r.NONE),
                        Ds.instance.memoryStatus.bufferSize -= a,
                        Ds.instance.memoryStatus.bufferSize += t)))
                    }
                }
                ,
                i.update = function(t, e) {
                    var i;
                    this._isBufferView ? console.warn("cannot update through buffer views!") : (i = void 0 !== e ? e : this._usage & f.INDIRECT ? 0 : t.byteLength,
                    Ks(Ds.instance, this._gpuBuffer, t, 0, i))
                }
                ,
                Je(e, [{
                    key: "gpuBuffer",
                    get: function() {
                        return this._gpuBuffer
                    }
                }, {
                    key: "gpuBufferView",
                    get: function() {
                        return this._gpuBufferView
                    }
                }]),
                e
            }(s)
              , na = function() {
                function t(t, e) {
                    this._frees = void 0,
                    this._freeIdx = 0,
                    this._freeCmds = void 0,
                    this._frees = new Array(e),
                    this._freeCmds = new r(e);
                    for (var i = 0; i < e; ++i)
                        this._frees[i] = new t;
                    this._freeIdx = e - 1
                }
                var e = t.prototype;
                return e.alloc = function(t) {
                    if (this._freeIdx < 0) {
                        var e = 2 * this._frees.length
                          , i = this._frees;
                        this._frees = new Array(e);
                        for (var r = e - i.length, n = 0; n < r; ++n)
                            this._frees[n] = new t;
                        for (var s = r, a = 0; s < e; ++s,
                        ++a)
                            this._frees[s] = i[a];
                        this._freeIdx += r
                    }
                    var o = this._frees[this._freeIdx];
                    return this._frees[this._freeIdx--] = null,
                    ++o.refCount,
                    o
                }
                ,
                e.free = function(t) {
                    0 == --t.refCount && this._freeCmds.push(t)
                }
                ,
                e.freeCmds = function(t) {
                    for (var e = 0; e < t.length; ++e)
                        0 == --t.array[e].refCount && this._freeCmds.push(t.array[e])
                }
                ,
                e.release = function() {
                    for (var t = 0; t < this._freeCmds.length; ++t) {
                        var e = this._freeCmds.array[t];
                        e.clear(),
                        this._frees[++this._freeIdx] = e
                    }
                    this._freeCmds.clear()
                }
                ,
                t
            }()
              , sa = function() {
                function t() {
                    this.beginRenderPassCmdPool = void 0,
                    this.bindStatesCmdPool = void 0,
                    this.drawCmdPool = void 0,
                    this.updateBufferCmdPool = void 0,
                    this.copyBufferToTextureCmdPool = void 0,
                    this.beginRenderPassCmdPool = new na(Hs,1),
                    this.bindStatesCmdPool = new na(Vs,1),
                    this.drawCmdPool = new na(Ws,1),
                    this.updateBufferCmdPool = new na(Xs,1),
                    this.copyBufferToTextureCmdPool = new na(js,1)
                }
                var e = t.prototype;
                return e.clearCmds = function(t) {
                    t.beginRenderPassCmds.length && (this.beginRenderPassCmdPool.freeCmds(t.beginRenderPassCmds),
                    t.beginRenderPassCmds.clear()),
                    t.bindStatesCmds.length && (this.bindStatesCmdPool.freeCmds(t.bindStatesCmds),
                    t.bindStatesCmds.clear()),
                    t.drawCmds.length && (this.drawCmdPool.freeCmds(t.drawCmds),
                    t.drawCmds.clear()),
                    t.updateBufferCmds.length && (this.updateBufferCmdPool.freeCmds(t.updateBufferCmds),
                    t.updateBufferCmds.clear()),
                    t.copyBufferToTextureCmds.length && (this.copyBufferToTextureCmdPool.freeCmds(t.copyBufferToTextureCmds),
                    t.copyBufferToTextureCmds.clear()),
                    t.cmds.clear()
                }
                ,
                e.releaseCmds = function() {
                    this.beginRenderPassCmdPool.release(),
                    this.bindStatesCmdPool.release(),
                    this.drawCmdPool.release(),
                    this.updateBufferCmdPool.release(),
                    this.copyBufferToTextureCmdPool.release()
                }
                ,
                t
            }()
              , aa = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this).cmdPackage = new Ys,
                    e._cmdAllocator = new sa,
                    e._isInRenderPass = !1,
                    e._curGPUPipelineState = null,
                    e._curGPUInputAssembler = null,
                    e._curGPUDescriptorSets = [],
                    e._curDynamicOffsets = Array(8).fill(0),
                    e._curDynamicStates = new Kt,
                    e._isStateInvalied = !1,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._type = t.type,
                    this._queue = t.queue;
                    for (var e = Ds.instance.bindingMappingInfo.bufferOffsets.length, i = 0; i < e; i++)
                        this._curGPUDescriptorSets.push(null)
                }
                ,
                i.destroy = function() {
                    this._cmdAllocator.clearCmds(this.cmdPackage)
                }
                ,
                i.begin = function() {
                    this._cmdAllocator.clearCmds(this.cmdPackage),
                    this._curGPUPipelineState = null,
                    this._curGPUInputAssembler = null,
                    this._curGPUDescriptorSets.length = 0,
                    this._numDrawCalls = 0,
                    this._numInstances = 0,
                    this._numTris = 0
                }
                ,
                i.end = function() {
                    this._isStateInvalied && this.bindStates(),
                    this._isInRenderPass = !1
                }
                ,
                i.beginRenderPass = function(t, e, i, r, n, s) {
                    var a = this._cmdAllocator.beginRenderPassCmdPool.alloc(Hs);
                    a.gpuRenderPass = t.gpuRenderPass,
                    a.gpuFramebuffer = e.gpuFramebuffer,
                    a.renderArea = i,
                    a.clearColors.length = r.length;
                    for (var o = 0; o < r.length; ++o)
                        a.clearColors[o] = r[o];
                    a.clearDepth = n,
                    a.clearStencil = s,
                    this.cmdPackage.beginRenderPassCmds.push(a),
                    this.cmdPackage.cmds.push(Fs.BEGIN_RENDER_PASS),
                    this._isInRenderPass = !0
                }
                ,
                i.endRenderPass = function() {
                    this._isInRenderPass = !1
                }
                ,
                i.bindPipelineState = function(t) {
                    var e = t.gpuPipelineState;
                    e !== this._curGPUPipelineState && (this._curGPUPipelineState = e,
                    this._isStateInvalied = !0)
                }
                ,
                i.bindDescriptorSet = function(t, e, i) {
                    var r = e.gpuDescriptorSet;
                    if (r !== this._curGPUDescriptorSets[t] && (this._curGPUDescriptorSets[t] = r,
                    this._isStateInvalied = !0),
                    i) {
                        var n, s = null === (n = this._curGPUPipelineState) || void 0 === n ? void 0 : n.gpuPipelineLayout;
                        if (s) {
                            for (var a = this._curDynamicOffsets, o = s.dynamicOffsetOffsets[t], l = 0; l < i.length; l++)
                                a[o + l] = i[l];
                            this._isStateInvalied = !0
                        }
                    }
                }
                ,
                i.bindInputAssembler = function(t) {
                    var e = t.gpuInputAssembler;
                    this._curGPUInputAssembler = e,
                    this._isStateInvalied = !0
                }
                ,
                i.setViewport = function(t) {
                    var e = this._curDynamicStates.viewport;
                    e.left === t.left && e.top === t.top && e.width === t.width && e.height === t.height && e.minDepth === t.minDepth && e.maxDepth === t.maxDepth || (e.left = t.left,
                    e.top = t.top,
                    e.width = t.width,
                    e.height = t.height,
                    e.minDepth = t.minDepth,
                    e.maxDepth = t.maxDepth,
                    this._isStateInvalied = !0)
                }
                ,
                i.setScissor = function(t) {
                    var e = this._curDynamicStates.scissor;
                    e.x === t.x && e.y === t.y && e.width === t.width && e.height === t.height || (e.x = t.x,
                    e.y = t.y,
                    e.width = t.width,
                    e.height = t.height,
                    this._isStateInvalied = !0)
                }
                ,
                i.setLineWidth = function(t) {
                    this._curDynamicStates.lineWidth !== t && (this._curDynamicStates.lineWidth = t,
                    this._isStateInvalied = !0)
                }
                ,
                i.setDepthBias = function(t, e, i) {
                    var r = this._curDynamicStates;
                    r.depthBiasConstant === t && r.depthBiasClamp === e && r.depthBiasSlope === i || (r.depthBiasConstant = t,
                    r.depthBiasClamp = e,
                    r.depthBiasSlope = i,
                    this._isStateInvalied = !0)
                }
                ,
                i.setBlendConstants = function(t) {
                    var e = this._curDynamicStates.blendConstant;
                    e.x === t.x && e.y === t.y && e.z === t.z && e.w === t.w || (e.copy(t),
                    this._isStateInvalied = !0)
                }
                ,
                i.setDepthBound = function(t, e) {
                    var i = this._curDynamicStates;
                    i.depthMinBounds === t && i.depthMaxBounds === e || (i.depthMinBounds = t,
                    i.depthMaxBounds = e,
                    this._isStateInvalied = !0)
                }
                ,
                i.setStencilWriteMask = function(t, e) {
                    var i = this._curDynamicStates.stencilStatesFront
                      , r = this._curDynamicStates.stencilStatesBack;
                    t & H.FRONT && i.writeMask !== e && (i.writeMask = e,
                    this._isStateInvalied = !0),
                    t & H.BACK && r.writeMask !== e && (r.writeMask = e,
                    this._isStateInvalied = !0)
                }
                ,
                i.setStencilCompareMask = function(t, e, i) {
                    var r = this._curDynamicStates.stencilStatesFront
                      , n = this._curDynamicStates.stencilStatesBack;
                    t & H.FRONT && (r.compareMask === i && r.reference === e || (r.reference = e,
                    r.compareMask = i,
                    this._isStateInvalied = !0)),
                    t & H.BACK && (n.compareMask === i && n.reference === e || (n.reference = e,
                    n.compareMask = i,
                    this._isStateInvalied = !0))
                }
                ,
                i.draw = function(t) {
                    if (this._type === j.PRIMARY && this._isInRenderPass || this._type === j.SECONDARY) {
                        this._isStateInvalied && this.bindStates();
                        var e = "drawInfo"in t ? t.drawInfo : t
                          , i = this._cmdAllocator.drawCmdPool.alloc(Ws);
                        i.drawInfo.copy(e),
                        this.cmdPackage.drawCmds.push(i),
                        this.cmdPackage.cmds.push(Fs.DRAW),
                        ++this._numDrawCalls,
                        this._numInstances += e.instanceCount;
                        var r = e.indexCount || e.vertexCount;
                        if (this._curGPUPipelineState)
                            switch (this._curGPUPipelineState.glPrimitive) {
                            case 4:
                                this._numTris += r / 3 * Math.max(e.instanceCount, 1);
                                break;
                            case 5:
                            case 6:
                                this._numTris += (r - 2) * Math.max(e.instanceCount, 1)
                            }
                    } else
                        console.error("Command 'draw' must be recorded inside a render pass.")
                }
                ,
                i.updateBuffer = function(t, e, i) {
                    if (this._type === j.PRIMARY && !this._isInRenderPass || this._type === j.SECONDARY) {
                        var r = t.gpuBuffer;
                        if (r) {
                            var n, s = this._cmdAllocator.updateBufferCmdPool.alloc(Xs), a = 0;
                            t.usage & f.INDIRECT || (a = void 0 !== i ? i : e.byteLength),
                            n = e,
                            s.gpuBuffer = r,
                            s.buffer = n,
                            s.offset = 0,
                            s.size = a,
                            this.cmdPackage.updateBufferCmds.push(s),
                            this.cmdPackage.cmds.push(Fs.UPDATE_BUFFER)
                        }
                    } else
                        console.error("Command 'updateBuffer' must be recorded outside a render pass.")
                }
                ,
                i.copyBuffersToTexture = function(t, e, i) {
                    if (this._type === j.PRIMARY && !this._isInRenderPass || this._type === j.SECONDARY) {
                        var r = e.gpuTexture;
                        if (r) {
                            var n = this._cmdAllocator.copyBufferToTextureCmdPool.alloc(js);
                            n && (n.gpuTexture = r,
                            n.regions = i,
                            n.buffers = t,
                            this.cmdPackage.copyBufferToTextureCmds.push(n),
                            this.cmdPackage.cmds.push(Fs.COPY_BUFFER_TO_TEXTURE))
                        }
                    } else
                        console.error("Command 'copyBufferToTexture' must be recorded outside a render pass.")
                }
                ,
                i.execute = function(t, e) {
                    for (var i = 0; i < e; ++i) {
                        for (var r = t[i], n = 0; n < r.cmdPackage.beginRenderPassCmds.length; ++n) {
                            var s = r.cmdPackage.beginRenderPassCmds.array[n];
                            ++s.refCount,
                            this.cmdPackage.beginRenderPassCmds.push(s)
                        }
                        for (var a = 0; a < r.cmdPackage.bindStatesCmds.length; ++a) {
                            var o = r.cmdPackage.bindStatesCmds.array[a];
                            ++o.refCount,
                            this.cmdPackage.bindStatesCmds.push(o)
                        }
                        for (var l = 0; l < r.cmdPackage.drawCmds.length; ++l) {
                            var h = r.cmdPackage.drawCmds.array[l];
                            ++h.refCount,
                            this.cmdPackage.drawCmds.push(h)
                        }
                        for (var u = 0; u < r.cmdPackage.updateBufferCmds.length; ++u) {
                            var c = r.cmdPackage.updateBufferCmds.array[u];
                            ++c.refCount,
                            this.cmdPackage.updateBufferCmds.push(c)
                        }
                        for (var _ = 0; _ < r.cmdPackage.copyBufferToTextureCmds.length; ++_) {
                            var d = r.cmdPackage.copyBufferToTextureCmds.array[_];
                            ++d.refCount,
                            this.cmdPackage.copyBufferToTextureCmds.push(d)
                        }
                        this.cmdPackage.cmds.concat(r.cmdPackage.cmds.array),
                        this._numDrawCalls += r._numDrawCalls,
                        this._numInstances += r._numInstances,
                        this._numTris += r._numTris
                    }
                }
                ,
                i.pipelineBarrier = function() {}
                ,
                i.bindStates = function() {
                    var t = this._cmdAllocator.bindStatesCmdPool.alloc(Vs);
                    t && (t.gpuPipelineState = this._curGPUPipelineState,
                    Array.prototype.push.apply(t.gpuDescriptorSets, this._curGPUDescriptorSets),
                    Array.prototype.push.apply(t.dynamicOffsets, this._curDynamicOffsets),
                    t.gpuInputAssembler = this._curGPUInputAssembler,
                    t.dynamicStates.copy(this._curDynamicStates),
                    this.cmdPackage.bindStatesCmds.push(t),
                    this.cmdPackage.cmds.push(Fs.BIND_STATES),
                    this._isStateInvalied = !1)
                }
                ,
                e
            }(a)
              , oa = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuFramebuffer = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._renderPass = t.renderPass,
                    this._colorTextures = t.colorTextures || [],
                    this._depthStencilTexture = t.depthStencilTexture || null;
                    for (var e = [], i = 0; i < t.colorTextures.length; ++i) {
                        var r = t.colorTextures[i];
                        r && e.push(r.gpuTexture)
                    }
                    var n = null;
                    t.depthStencilTexture && (n = t.depthStencilTexture.gpuTexture);
                    var s = Number.MAX_SAFE_INTEGER
                      , a = Number.MAX_SAFE_INTEGER;
                    this._gpuFramebuffer = {
                        gpuRenderPass: t.renderPass.gpuRenderPass,
                        gpuColorTextures: e,
                        gpuDepthStencilTexture: n,
                        glFramebuffer: null,
                        isOffscreen: !0,
                        get width() {
                            return this.isOffscreen ? s : this.gpuColorTextures[0].width
                        },
                        set width(t) {
                            s = t
                        },
                        get height() {
                            return this.isOffscreen ? a : this.gpuColorTextures[0].height
                        },
                        set height(t) {
                            a = t
                        }
                    },
                    function(t, e) {
                        for (var i = 0; i < e.gpuColorTextures.length; ++i)
                            if (e.gpuColorTextures[i].isSwapchainTexture)
                                return void (e.isOffscreen = !1);
                        var r = t.gl
                          , n = []
                          , s = r.createFramebuffer();
                        if (s) {
                            e.glFramebuffer = s,
                            t.stateCache.glFramebuffer !== e.glFramebuffer && r.bindFramebuffer(r.FRAMEBUFFER, e.glFramebuffer);
                            for (var a = 0; a < e.gpuColorTextures.length; ++a) {
                                var o = e.gpuColorTextures[a];
                                o && (o.glTexture ? r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + a, o.glTarget, o.glTexture, 0) : r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + a, r.RENDERBUFFER, o.glRenderbuffer),
                                n.push(r.COLOR_ATTACHMENT0 + a),
                                e.width = Math.min(e.width, o.width),
                                e.height = Math.min(e.height, o.height))
                            }
                            var l = e.gpuDepthStencilTexture;
                            if (l) {
                                var h = Jt[l.format].hasStencil ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT;
                                l.glTexture ? r.framebufferTexture2D(r.FRAMEBUFFER, h, l.glTarget, l.glTexture, 0) : r.framebufferRenderbuffer(r.FRAMEBUFFER, h, r.RENDERBUFFER, l.glRenderbuffer),
                                e.width = Math.min(e.width, l.width),
                                e.height = Math.min(e.height, l.height)
                            }
                            t.extensions.WEBGL_draw_buffers && t.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(n);
                            var u = r.checkFramebufferStatus(r.FRAMEBUFFER);
                            if (u !== r.FRAMEBUFFER_COMPLETE)
                                switch (u) {
                                case r.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                                    console.error("glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
                                    break;
                                case r.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                                    console.error("glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
                                    break;
                                case r.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                                    console.error("glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
                                    break;
                                case r.FRAMEBUFFER_UNSUPPORTED:
                                    console.error("glCheckFramebufferStatus() - FRAMEBUFFER_UNSUPPORTED")
                                }
                            t.stateCache.glFramebuffer !== e.glFramebuffer && r.bindFramebuffer(r.FRAMEBUFFER, t.stateCache.glFramebuffer)
                        }
                    }(Ds.instance, this._gpuFramebuffer)
                }
                ,
                i.destroy = function() {
                    var t, e;
                    this._gpuFramebuffer && (t = Ds.instance,
                    (e = this._gpuFramebuffer).glFramebuffer && (t.gl.deleteFramebuffer(e.glFramebuffer),
                    e.glFramebuffer = null),
                    this._gpuFramebuffer = null)
                }
                ,
                Je(e, [{
                    key: "gpuFramebuffer",
                    get: function() {
                        return this._gpuFramebuffer
                    }
                }]),
                e
            }(he)
              , la = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuInputAssembler = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    if (0 !== t.vertexBuffers.length) {
                        if (this._attributes = t.attributes,
                        this._attributesHash = this.computeAttributesHash(),
                        this._vertexBuffers = t.vertexBuffers,
                        t.indexBuffer)
                            this._indexBuffer = t.indexBuffer,
                            this._drawInfo.indexCount = this._indexBuffer.size / this._indexBuffer.stride,
                            this._drawInfo.firstIndex = 0;
                        else {
                            var e = this._vertexBuffers[0];
                            this._drawInfo.vertexCount = e.size / e.stride,
                            this._drawInfo.firstVertex = 0,
                            this._drawInfo.vertexOffset = 0
                        }
                        this._drawInfo.instanceCount = 0,
                        this._drawInfo.firstInstance = 0,
                        this._indirectBuffer = t.indirectBuffer || null;
                        for (var i = new Array(t.vertexBuffers.length), r = 0; r < t.vertexBuffers.length; ++r) {
                            var n = t.vertexBuffers[r];
                            n.gpuBuffer && (i[r] = n.gpuBuffer)
                        }
                        var s = null
                          , a = 0;
                        if (t.indexBuffer && (s = t.indexBuffer.gpuBuffer))
                            switch (s.stride) {
                            case 1:
                                a = 5121;
                                break;
                            case 2:
                                a = 5123;
                                break;
                            case 4:
                                a = 5125;
                                break;
                            default:
                                console.error("Error index buffer stride.")
                            }
                        var o = null;
                        t.indirectBuffer && (o = t.indirectBuffer.gpuBuffer),
                        this._gpuInputAssembler = {
                            attributes: t.attributes,
                            gpuVertexBuffers: i,
                            gpuIndexBuffer: s,
                            gpuIndirectBuffer: o,
                            glAttribs: [],
                            glIndexType: a,
                            glVAOs: new Map
                        },
                        function(t, e) {
                            var i = t.gl;
                            e.glAttribs = new Array(e.attributes.length);
                            for (var r = [0, 0, 0, 0, 0, 0, 0, 0], n = 0; n < e.attributes.length; ++n) {
                                var s = e.attributes[n]
                                  , a = void 0 !== s.stream ? s.stream : 0
                                  , o = e.gpuVertexBuffers[a]
                                  , l = ws(s.format, i)
                                  , h = Jt[s.format].size;
                                e.glAttribs[n] = {
                                    name: s.name,
                                    glBuffer: o.glBuffer,
                                    glType: l,
                                    size: h,
                                    count: Jt[s.format].count,
                                    stride: o.stride,
                                    componentCount: Ls(l, i),
                                    isNormalized: void 0 !== s.isNormalized && s.isNormalized,
                                    isInstanced: void 0 !== s.isInstanced && s.isInstanced,
                                    offset: r[a]
                                },
                                r[a] += h
                            }
                        }(Ds.instance, this._gpuInputAssembler)
                    } else
                        console.error("InputAssemblerInfo.vertexBuffers is null.")
                }
                ,
                i.destroy = function() {
                    var t = Ds.instance;
                    this._gpuInputAssembler && t.extensions.useVAO && function(t, e) {
                        for (var i = e.glVAOs.values(), r = i.next(); !r.done; )
                            t.extensions.OES_vertex_array_object.deleteVertexArrayOES(r.value),
                            r = i.next();
                        e.glVAOs.clear()
                    }(t, this._gpuInputAssembler),
                    this._gpuInputAssembler = null
                }
                ,
                Je(e, [{
                    key: "gpuInputAssembler",
                    get: function() {
                        return this._gpuInputAssembler
                    }
                }]),
                e
            }(ue)
              , ha = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuDescriptorSetLayout = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    Array.prototype.push.apply(this._bindings, t.bindings);
                    for (var e = 0, i = -1, r = [], n = 0; n < this._bindings.length; n++) {
                        var s = this._bindings[n];
                        r.push(e),
                        e += s.count,
                        s.binding > i && (i = s.binding)
                    }
                    this._bindingIndices = Array(i + 1).fill(-1);
                    for (var a = this._descriptorIndices = Array(i + 1).fill(-1), o = 0; o < this._bindings.length; o++) {
                        var l = this._bindings[o];
                        this._bindingIndices[l.binding] = o,
                        a[l.binding] = r[o]
                    }
                    for (var h = [], u = 0; u < this._bindings.length; u++) {
                        var c = this._bindings[u];
                        if (c.descriptorType & te)
                            for (var _ = 0; _ < c.count; _++)
                                h.push(c.binding)
                    }
                    this._gpuDescriptorSetLayout = {
                        bindings: this._bindings,
                        dynamicBindings: h,
                        descriptorIndices: a,
                        descriptorCount: e
                    }
                }
                ,
                i.destroy = function() {
                    this._bindings.length = 0
                }
                ,
                Je(e, [{
                    key: "gpuDescriptorSetLayout",
                    get: function() {
                        return this._gpuDescriptorSetLayout
                    }
                }]),
                e
            }(ce)
              , ua = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuPipelineLayout = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    Array.prototype.push.apply(this._setLayouts, t.setLayouts);
                    for (var e = [], i = [], r = 0, n = [], s = 0; s < this._setLayouts.length; s++) {
                        for (var a = this._setLayouts[s], o = a.gpuDescriptorSetLayout.dynamicBindings, l = Array(a.bindingIndices.length).fill(-1), h = 0; h < o.length; h++) {
                            var u = o[h];
                            l[u] < 0 && (l[u] = r + h)
                        }
                        i.push(a.gpuDescriptorSetLayout),
                        e.push(l),
                        n.push(r),
                        r += o.length
                    }
                    this._gpuPipelineLayout = {
                        gpuSetLayouts: i,
                        dynamicOffsetIndices: e,
                        dynamicOffsetCount: r,
                        dynamicOffsetOffsets: n
                    }
                }
                ,
                i.destroy = function() {
                    this._setLayouts.length = 0
                }
                ,
                Je(e, [{
                    key: "gpuPipelineLayout",
                    get: function() {
                        return this._gpuPipelineLayout
                    }
                }]),
                e
            }(_e)
              , ca = [0, 1, 3, 2, 0, 0, 0, 4, 5, 6, 0, 0, 0, 0]
              , _a = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuPipelineState = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._primitive = t.primitive,
                    this._shader = t.shader,
                    this._pipelineLayout = t.pipelineLayout;
                    var e = this._bs;
                    if (t.blendState) {
                        var i = t.blendState
                          , r = i.targets;
                        r && r.forEach((function(t, i) {
                            e.setTarget(i, t)
                        }
                        )),
                        void 0 !== i.isA2C && (e.isA2C = i.isA2C),
                        void 0 !== i.isIndepend && (e.isIndepend = i.isIndepend),
                        void 0 !== i.blendColor && (e.blendColor = i.blendColor)
                    }
                    Object.assign(this._rs, t.rasterizerState),
                    Object.assign(this._dss, t.depthStencilState),
                    this._is = t.inputState,
                    this._renderPass = t.renderPass,
                    this._dynamicStates = t.dynamicStates;
                    for (var n = [], s = 0; s < 31; s++)
                        this._dynamicStates & 1 << s && n.push(1 << s);
                    this._gpuPipelineState = {
                        glPrimitive: ca[t.primitive],
                        gpuShader: t.shader.gpuShader,
                        gpuPipelineLayout: t.pipelineLayout.gpuPipelineLayout,
                        rs: t.rasterizerState,
                        dss: t.depthStencilState,
                        bs: t.blendState,
                        gpuRenderPass: t.renderPass.gpuRenderPass,
                        dynamicStates: n
                    }
                }
                ,
                i.destroy = function() {
                    this._gpuPipelineState = null
                }
                ,
                Je(e, [{
                    key: "gpuPipelineState",
                    get: function() {
                        return this._gpuPipelineState
                    }
                }]),
                e
            }(ye)
              , da = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.beginRenderPass = function(t, e, i, r, n, s) {
                    qs(Ds.instance, t.gpuRenderPass, e.gpuFramebuffer, i, r, n, s),
                    this._isInRenderPass = !0
                }
                ,
                i.draw = function(t) {
                    if (this._isInRenderPass) {
                        this._isStateInvalied && this.bindStates();
                        var e = "drawInfo"in t ? t.drawInfo : t;
                        Qs(Ds.instance, e),
                        ++this._numDrawCalls,
                        this._numInstances += e.instanceCount;
                        var i = e.indexCount || e.vertexCount;
                        if (this._curGPUPipelineState)
                            switch (this._curGPUPipelineState.glPrimitive) {
                            case 4:
                                this._numTris += i / 3 * Math.max(e.instanceCount, 1);
                                break;
                            case 5:
                            case 6:
                                this._numTris += (i - 2) * Math.max(e.instanceCount, 1)
                            }
                    } else
                        console.error("Command 'draw' must be recorded inside a render pass.")
                }
                ,
                i.setViewport = function(t) {
                    var e = Ds.instance
                      , i = e.stateCache
                      , r = e.gl;
                    i.viewport.left === t.left && i.viewport.top === t.top && i.viewport.width === t.width && i.viewport.height === t.height || (r.viewport(t.left, t.top, t.width, t.height),
                    i.viewport.left = t.left,
                    i.viewport.top = t.top,
                    i.viewport.width = t.width,
                    i.viewport.height = t.height)
                }
                ,
                i.setScissor = function(t) {
                    var e = Ds.instance
                      , i = e.stateCache
                      , r = e.gl;
                    i.scissorRect.x === t.x && i.scissorRect.y === t.y && i.scissorRect.width === t.width && i.scissorRect.height === t.height || (r.scissor(t.x, t.y, t.width, t.height),
                    i.scissorRect.x = t.x,
                    i.scissorRect.y = t.y,
                    i.scissorRect.width = t.width,
                    i.scissorRect.height = t.height)
                }
                ,
                i.updateBuffer = function(t, e, i) {
                    if (this._isInRenderPass)
                        console.error("Command 'updateBuffer' must be recorded outside a render pass.");
                    else {
                        var r, n = t.gpuBuffer;
                        n && (r = void 0 !== i ? i : t.usage & f.INDIRECT ? 0 : e.byteLength,
                        Ks(Ds.instance, n, e, 0, r))
                    }
                }
                ,
                i.copyBuffersToTexture = function(t, e, i) {
                    if (this._isInRenderPass)
                        console.error("Command 'copyBufferToTexture' must be recorded outside a render pass.");
                    else {
                        var r = e.gpuTexture;
                        r && ea(Ds.instance, t, r, i)
                    }
                }
                ,
                i.execute = function(t, e) {
                    for (var i = 0; i < e; ++i) {
                        var r = t[i];
                        ta(Ds.instance, r.cmdPackage),
                        this._numDrawCalls += r._numDrawCalls,
                        this._numInstances += r._numInstances,
                        this._numTris += r._numTris
                    }
                }
                ,
                i.bindStates = function() {
                    Js(Ds.instance, this._curGPUPipelineState, this._curGPUInputAssembler, this._curGPUDescriptorSets, this._curDynamicOffsets, this._curDynamicStates),
                    this._isStateInvalied = !1
                }
                ,
                e
            }(aa)
              , pa = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this).numDrawCalls = 0,
                    e.numInstances = 0,
                    e.numTris = 0,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._type = t.type
                }
                ,
                i.destroy = function() {}
                ,
                i.submit = function(t) {
                    for (var e = t.length, i = 0; i < e; i++) {
                        var r = t[i];
                        this.numDrawCalls += r.numDrawCalls,
                        this.numInstances += r.numInstances,
                        this.numTris += r.numTris
                    }
                }
                ,
                i.clear = function() {
                    this.numDrawCalls = 0,
                    this.numInstances = 0,
                    this.numTris = 0
                }
                ,
                e
            }(ve)
              , fa = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuRenderPass = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._colorInfos = t.colorAttachments,
                    this._depthStencilInfo = t.depthStencilAttachment,
                    this._subpasses = t.subpasses,
                    this._gpuRenderPass = {
                        colorAttachments: this._colorInfos,
                        depthStencilAttachment: this._depthStencilInfo
                    },
                    this._hash = this.computeHash()
                }
                ,
                i.destroy = function() {
                    this._gpuRenderPass = null
                }
                ,
                Je(e, [{
                    key: "gpuRenderPass",
                    get: function() {
                        return this._gpuRenderPass
                    }
                }]),
                e
            }(Se)
              , ga = [10497, 33648, 33071, 33071]
              , ma = function(t) {
                function e(e, i) {
                    var r;
                    (r = t.call(this, e, i) || this)._gpuSampler = null;
                    var n, s, a = r._info.minFilter, o = r._info.magFilter, l = r._info.mipFilter;
                    n = a === A.LINEAR || a === A.ANISOTROPIC ? l === A.LINEAR || l === A.ANISOTROPIC ? 9987 : l === A.POINT ? 9985 : 9729 : l === A.LINEAR || l === A.ANISOTROPIC ? 9986 : l === A.POINT ? 9984 : 9728,
                    s = o === A.LINEAR || o === A.ANISOTROPIC ? 9729 : 9728;
                    var h = ga[r._info.addressU]
                      , u = ga[r._info.addressV]
                      , c = ga[r._info.addressW];
                    return r._gpuSampler = {
                        glMinFilter: n,
                        glMagFilter: s,
                        glWrapS: h,
                        glWrapT: u,
                        glWrapR: c
                    },
                    r
                }
                return qe(e, t),
                Je(e, [{
                    key: "gpuSampler",
                    get: function() {
                        return this._gpuSampler
                    }
                }]),
                e
            }(Te)
              , ya = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuShader = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._name = t.name,
                    this._stages = t.stages,
                    this._attributes = t.attributes,
                    this._blocks = t.blocks,
                    this._samplers = t.samplers,
                    this._gpuShader = {
                        name: t.name,
                        blocks: t.blocks.slice(),
                        samplerTextures: t.samplerTextures.slice(),
                        subpassInputs: t.subpassInputs.slice(),
                        gpuStages: new Array(t.stages.length),
                        glProgram: null,
                        glInputs: [],
                        glUniforms: [],
                        glBlocks: [],
                        glSamplerTextures: []
                    };
                    for (var e = 0; e < t.stages.length; ++e) {
                        var i = t.stages[e];
                        this._gpuShader.gpuStages[e] = {
                            type: i.stage,
                            source: i.source,
                            glShader: null
                        }
                    }
                    !function(t, e) {
                        for (var i = t.gl, r = function(t) {
                            var r = e.gpuStages[t]
                              , n = 0
                              , s = ""
                              , a = 1;
                            switch (r.type) {
                            case O.VERTEX:
                                s = "VertexShader",
                                n = i.VERTEX_SHADER;
                                break;
                            case O.FRAGMENT:
                                s = "FragmentShader",
                                n = i.FRAGMENT_SHADER;
                                break;
                            default:
                                return console.error("Unsupported ShaderType."),
                                {
                                    v: void 0
                                }
                            }
                            var o = i.createShader(n);
                            if (o && (r.glShader = o,
                            i.shaderSource(r.glShader, r.source),
                            i.compileShader(r.glShader),
                            !i.getShaderParameter(r.glShader, i.COMPILE_STATUS))) {
                                console.error(s + " in '" + e.name + "' compilation failed."),
                                console.error("Shader source dump:", r.source.replace(/^|\n/g, (function() {
                                    return "\n" + a++ + " "
                                }
                                ))),
                                console.error(i.getShaderInfoLog(r.glShader));
                                for (var l = 0; l < e.gpuStages.length; l++) {
                                    var h = e.gpuStages[t];
                                    h.glShader && (i.deleteShader(h.glShader),
                                    h.glShader = null)
                                }
                                return {
                                    v: void 0
                                }
                            }
                        }, n = 0; n < e.gpuStages.length; n++) {
                            var s = r(n);
                            if ("object" == typeof s)
                                return s.v
                        }
                        var a = i.createProgram();
                        if (a) {
                            e.glProgram = a;
                            for (var o = 0; o < e.gpuStages.length; o++) {
                                var l = e.gpuStages[o];
                                i.attachShader(e.glProgram, l.glShader)
                            }
                            if (i.linkProgram(e.glProgram),
                            t.extensions.destroyShadersImmediately)
                                for (var h = 0; h < e.gpuStages.length; h++) {
                                    var u = e.gpuStages[h];
                                    u.glShader && (i.detachShader(e.glProgram, u.glShader),
                                    i.deleteShader(u.glShader),
                                    u.glShader = null)
                                }
                            if (!i.getProgramParameter(e.glProgram, i.LINK_STATUS))
                                return console.error("Failed to link shader '" + e.name + "'."),
                                void console.error(i.getProgramInfoLog(e.glProgram));
                            $e("Shader '" + e.name + "' compilation succeeded.");
                            var c = i.getProgramParameter(e.glProgram, i.ACTIVE_ATTRIBUTES);
                            e.glInputs = new Array(c);
                            for (var _ = 0; _ < c; ++_) {
                                var d = i.getActiveAttrib(e.glProgram, _);
                                if (d) {
                                    var f, g = d.name.indexOf("[");
                                    f = -1 !== g ? d.name.substr(0, g) : d.name;
                                    var m = i.getAttribLocation(e.glProgram, f)
                                      , y = Ms(d.type, i)
                                      , v = Is(d.type, i);
                                    e.glInputs[_] = {
                                        binding: m,
                                        name: f,
                                        type: y,
                                        stride: v,
                                        count: d.size,
                                        size: v * d.size,
                                        glType: d.type,
                                        glLoc: m
                                    }
                                }
                            }
                            if (e.blocks.length > 0) {
                                e.glBlocks = new Array(e.blocks.length);
                                for (var S = 0; S < e.blocks.length; ++S) {
                                    var T = e.blocks[S]
                                      , b = {
                                        set: T.set,
                                        binding: T.binding,
                                        name: T.name,
                                        size: 0,
                                        glUniforms: new Array(T.members.length),
                                        glActiveUniforms: []
                                    };
                                    e.glBlocks[S] = b;
                                    for (var E = 0; E < T.members.length; ++E) {
                                        var A = T.members[E]
                                          , C = Os(A.type, i)
                                          , R = Is(C, i)
                                          , B = R * A.count;
                                        b.glUniforms[E] = {
                                            binding: -1,
                                            name: A.name,
                                            type: A.type,
                                            stride: R,
                                            count: A.count,
                                            size: B,
                                            offset: 0,
                                            glType: C,
                                            glLoc: null,
                                            array: null
                                        }
                                    }
                                }
                            }
                            for (var x = 0; x < e.subpassInputs.length; ++x) {
                                var D = e.subpassInputs[x];
                                e.samplerTextures.push(new vt(D.set,D.binding,D.name,p.SAMPLER2D,D.count))
                            }
                            if (e.samplerTextures.length > 0) {
                                e.glSamplerTextures = new Array(e.samplerTextures.length);
                                for (var w = 0; w < e.samplerTextures.length; ++w) {
                                    var P = e.samplerTextures[w];
                                    e.glSamplerTextures[w] = {
                                        set: P.set,
                                        binding: P.binding,
                                        name: P.name,
                                        type: P.type,
                                        count: P.count,
                                        units: [],
                                        glUnits: null,
                                        glType: Os(P.type, i),
                                        glLoc: null
                                    }
                                }
                            }
                            for (var M = i.getProgramParameter(e.glProgram, i.ACTIVE_UNIFORMS), I = 0; I < M; ++I) {
                                var L = i.getActiveUniform(e.glProgram, I);
                                if (L && L.type !== i.SAMPLER_2D && L.type !== i.SAMPLER_CUBE) {
                                    var F = i.getUniformLocation(e.glProgram, L.name);
                                    if (t.extensions.isLocationActive(F)) {
                                        var N, k = L.name.indexOf("[");
                                        N = -1 !== k ? L.name.substr(0, k) : L.name;
                                        for (var G = 0; G < e.glBlocks.length; G++)
                                            for (var z = e.glBlocks[G], U = 0; U < z.glUniforms.length; U++) {
                                                var H = z.glUniforms[U];
                                                if (H.name === N) {
                                                    H.glLoc = F,
                                                    H.count = L.size,
                                                    H.size = H.stride * H.count,
                                                    H.array = new (Ps(H.type))(H.size / 4),
                                                    z.glActiveUniforms.push(H);
                                                    break
                                                }
                                            }
                                    }
                                }
                            }
                            for (var V = 0; V < e.glBlocks.length; V++)
                                for (var W = e.glBlocks[V], X = 0; X < W.glUniforms.length; X++) {
                                    var j = W.glUniforms[X];
                                    j.offset = W.size / 4,
                                    W.size += j.size
                                }
                            for (var Y = [], K = [], Z = t.bindingMappingInfo, q = t.stateCache.texUnitCacheMap, J = 0, Q = 0; Q < e.blocks.length; ++Q)
                                e.blocks[Q].set === Z.flexibleSet && J++;
                            for (var $ = 0, tt = 0; tt < e.samplerTextures.length; ++tt) {
                                var et = e.samplerTextures[tt]
                                  , it = i.getUniformLocation(e.glProgram, et.name);
                                if (t.extensions.isLocationActive(it) && (Y.push(e.glSamplerTextures[tt]),
                                K.push(it)),
                                void 0 === q[et.name]) {
                                    var rt = et.binding + Z.samplerOffsets[et.set] + $;
                                    et.set === Z.flexibleSet && (rt -= J),
                                    q[et.name] = rt % t.capabilities.maxTextureUnits,
                                    $ += et.count - 1
                                }
                            }
                            if (Y.length) {
                                for (var nt = [], st = 0; st < Y.length; ++st) {
                                    var at = Y[st]
                                      , ot = q[at.name];
                                    if (void 0 !== ot) {
                                        at.glLoc = K[st];
                                        for (var lt = 0; lt < at.count; ++lt) {
                                            for (; nt[ot]; )
                                                ot = (ot + 1) % t.capabilities.maxTextureUnits;
                                            at.units.push(ot),
                                            nt[ot] = !0
                                        }
                                    }
                                }
                                for (var ht = 0, ut = 0; ut < Y.length; ++ut) {
                                    var ct = Y[ut];
                                    if (!t.extensions.isLocationActive(ct.glLoc)) {
                                        ct.glLoc = K[ut];
                                        for (var _t = 0; _t < ct.count; ++_t) {
                                            for (; nt[ht]; )
                                                ht = (ht + 1) % t.capabilities.maxTextureUnits;
                                            void 0 === q[ct.name] && (q[ct.name] = ht),
                                            ct.units.push(ht),
                                            nt[ht] = !0
                                        }
                                    }
                                }
                                t.stateCache.glProgram !== e.glProgram && i.useProgram(e.glProgram);
                                for (var dt = 0; dt < Y.length; dt++) {
                                    var pt = Y[dt];
                                    pt.glUnits = new Int32Array(pt.units),
                                    i.uniform1iv(pt.glLoc, pt.glUnits)
                                }
                                t.stateCache.glProgram !== e.glProgram && i.useProgram(t.stateCache.glProgram)
                            }
                            for (var ft = 0; ft < e.glBlocks.length; )
                                e.glBlocks[ft].glActiveUniforms.length ? ft++ : (e.glBlocks[ft] = e.glBlocks[e.glBlocks.length - 1],
                                e.glBlocks.length--);
                            e.glSamplerTextures = Y
                        }
                    }(Ds.instance, this._gpuShader)
                }
                ,
                i.destroy = function() {
                    this._gpuShader && (function(t, e) {
                        if (e.glProgram) {
                            var i = t.gl;
                            if (!t.extensions.destroyShadersImmediately)
                                for (var r = 0; r < e.gpuStages.length; r++) {
                                    var n = e.gpuStages[r];
                                    n.glShader && (i.detachShader(e.glProgram, n.glShader),
                                    i.deleteShader(n.glShader),
                                    n.glShader = null)
                                }
                            i.deleteProgram(e.glProgram),
                            e.glProgram = null
                        }
                    }(Ds.instance, this._gpuShader),
                    this._gpuShader = null)
                }
                ,
                Je(e, [{
                    key: "gpuShader",
                    get: function() {
                        return this._gpuShader
                    }
                }]),
                e
            }(be)
              , va = function() {
                function t() {
                    this.glArrayBuffer = null,
                    this.glElementArrayBuffer = null,
                    this.glVAO = null,
                    this.texUnit = 0,
                    this.glTexUnits = [],
                    this.glRenderbuffer = null,
                    this.glFramebuffer = null,
                    this.viewport = new nt,
                    this.scissorRect = new J(0,0,0,0),
                    this.rs = new de,
                    this.dss = new pe,
                    this.bs = new ge,
                    this.glProgram = null,
                    this.glEnabledAttribLocs = [],
                    this.glCurrentAttribLocs = [],
                    this.texUnitCacheMap = {}
                }
                return t.prototype.initialize = function(t, e) {
                    for (var i = 0; i < t; ++i)
                        this.glTexUnits.push({
                            glTexture: null
                        });
                    this.glEnabledAttribLocs.length = e,
                    this.glEnabledAttribLocs.fill(!1),
                    this.glCurrentAttribLocs.length = e,
                    this.glCurrentAttribLocs.fill(!1)
                }
                ,
                t
            }()
              , Sa = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuTexture = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t, e) {
                    "texture"in t ? console.log("WebGL does not support texture view.") : (this._type = t.type,
                    this._usage = t.usage,
                    this._format = t.format,
                    this._width = t.width,
                    this._height = t.height,
                    this._depth = t.depth,
                    this._layerCount = t.layerCount,
                    this._levelCount = t.levelCount,
                    this._samples = t.samples,
                    this._flags = t.flags,
                    this._isPowerOf2 = ie(this._width) && ie(this._height),
                    this._size = ne(this._format, this.width, this.height, this.depth, this._levelCount) * this._layerCount,
                    this._gpuTexture = {
                        type: this._type,
                        format: this._format,
                        usage: this._usage,
                        width: this._width,
                        height: this._height,
                        depth: this._depth,
                        size: this._size,
                        arrayLayer: this._layerCount,
                        mipLevel: this._levelCount,
                        samples: this._samples,
                        flags: this._flags,
                        isPowerOf2: this._isPowerOf2,
                        glTarget: 0,
                        glInternalFmt: 0,
                        glFormat: 0,
                        glType: 0,
                        glUsage: 0,
                        glTexture: null,
                        glRenderbuffer: null,
                        glWrapS: 0,
                        glWrapT: 0,
                        glMinFilter: 0,
                        glMagFilter: 0,
                        isSwapchainTexture: e || !1
                    },
                    function(t, e) {
                        var i = t.gl;
                        e.glFormat = e.glInternalFmt = function(t, e) {
                            switch (t) {
                            case _.A8:
                                return e.ALPHA;
                            case _.L8:
                                return e.LUMINANCE;
                            case _.LA8:
                                return e.LUMINANCE_ALPHA;
                            case _.RGB8:
                            case _.RGB16F:
                            case _.RGB32F:
                                return e.RGB;
                            case _.BGRA8:
                            case _.RGBA8:
                            case _.SRGB8_A8:
                            case _.RGBA16F:
                            case _.RGBA32F:
                                return e.RGBA;
                            case _.R5G6B5:
                                return e.RGB;
                            case _.RGB5A1:
                            case _.RGBA4:
                                return e.RGBA;
                            case _.DEPTH:
                                return e.DEPTH_COMPONENT;
                            case _.DEPTH_STENCIL:
                                return e.DEPTH_STENCIL;
                            case _.BC1:
                                return Bs.COMPRESSED_RGB_S3TC_DXT1_EXT;
                            case _.BC1_ALPHA:
                                return Bs.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                            case _.BC1_SRGB:
                                return Bs.COMPRESSED_SRGB_S3TC_DXT1_EXT;
                            case _.BC1_SRGB_ALPHA:
                                return Bs.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
                            case _.BC2:
                                return Bs.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                            case _.BC2_SRGB:
                                return Bs.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
                            case _.BC3:
                                return Bs.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                            case _.BC3_SRGB:
                                return Bs.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
                            case _.ETC_RGB8:
                                return Bs.COMPRESSED_RGB_ETC1_WEBGL;
                            case _.ETC2_RGB8:
                                return Bs.COMPRESSED_RGB8_ETC2;
                            case _.ETC2_SRGB8:
                                return Bs.COMPRESSED_SRGB8_ETC2;
                            case _.ETC2_RGB8_A1:
                                return Bs.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;
                            case _.ETC2_SRGB8_A1:
                                return Bs.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;
                            case _.ETC2_RGBA8:
                                return Bs.COMPRESSED_RGBA8_ETC2_EAC;
                            case _.ETC2_SRGB8_A8:
                                return Bs.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;
                            case _.EAC_R11:
                                return Bs.COMPRESSED_R11_EAC;
                            case _.EAC_R11SN:
                                return Bs.COMPRESSED_SIGNED_R11_EAC;
                            case _.EAC_RG11:
                                return Bs.COMPRESSED_RG11_EAC;
                            case _.EAC_RG11SN:
                                return Bs.COMPRESSED_SIGNED_RG11_EAC;
                            case _.PVRTC_RGB2:
                                return Bs.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                            case _.PVRTC_RGBA2:
                                return Bs.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                            case _.PVRTC_RGB4:
                                return Bs.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                            case _.PVRTC_RGBA4:
                                return Bs.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                            case _.ASTC_RGBA_4X4:
                                return Bs.COMPRESSED_RGBA_ASTC_4x4_KHR;
                            case _.ASTC_RGBA_5X4:
                                return Bs.COMPRESSED_RGBA_ASTC_5x4_KHR;
                            case _.ASTC_RGBA_5X5:
                                return Bs.COMPRESSED_RGBA_ASTC_5x5_KHR;
                            case _.ASTC_RGBA_6X5:
                                return Bs.COMPRESSED_RGBA_ASTC_6x5_KHR;
                            case _.ASTC_RGBA_6X6:
                                return Bs.COMPRESSED_RGBA_ASTC_6x6_KHR;
                            case _.ASTC_RGBA_8X5:
                                return Bs.COMPRESSED_RGBA_ASTC_8x5_KHR;
                            case _.ASTC_RGBA_8X6:
                                return Bs.COMPRESSED_RGBA_ASTC_8x6_KHR;
                            case _.ASTC_RGBA_8X8:
                                return Bs.COMPRESSED_RGBA_ASTC_8x8_KHR;
                            case _.ASTC_RGBA_10X5:
                                return Bs.COMPRESSED_RGBA_ASTC_10x5_KHR;
                            case _.ASTC_RGBA_10X6:
                                return Bs.COMPRESSED_RGBA_ASTC_10x6_KHR;
                            case _.ASTC_RGBA_10X8:
                                return Bs.COMPRESSED_RGBA_ASTC_10x8_KHR;
                            case _.ASTC_RGBA_10X10:
                                return Bs.COMPRESSED_RGBA_ASTC_10x10_KHR;
                            case _.ASTC_RGBA_12X10:
                                return Bs.COMPRESSED_RGBA_ASTC_12x10_KHR;
                            case _.ASTC_RGBA_12X12:
                                return Bs.COMPRESSED_RGBA_ASTC_12x12_KHR;
                            case _.ASTC_SRGBA_4X4:
                                return Bs.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;
                            case _.ASTC_SRGBA_5X4:
                                return Bs.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;
                            case _.ASTC_SRGBA_5X5:
                                return Bs.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;
                            case _.ASTC_SRGBA_6X5:
                                return Bs.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;
                            case _.ASTC_SRGBA_6X6:
                                return Bs.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;
                            case _.ASTC_SRGBA_8X5:
                                return Bs.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;
                            case _.ASTC_SRGBA_8X6:
                                return Bs.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;
                            case _.ASTC_SRGBA_8X8:
                                return Bs.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;
                            case _.ASTC_SRGBA_10X5:
                                return Bs.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;
                            case _.ASTC_SRGBA_10X6:
                                return Bs.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;
                            case _.ASTC_SRGBA_10X8:
                                return Bs.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;
                            case _.ASTC_SRGBA_10X10:
                                return Bs.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;
                            case _.ASTC_SRGBA_12X10:
                                return Bs.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;
                            case _.ASTC_SRGBA_12X12:
                                return Bs.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;
                            default:
                                return console.error("Unsupported Format, convert to WebGL format failed."),
                                e.RGBA
                            }
                        }(e.format, i),
                        e.glType = ws(e.format, i);
                        var r = e.width
                          , n = e.height;
                        switch (e.type) {
                        case v.TEX2D:
                            if (e.glTarget = i.TEXTURE_2D,
                            e.isSwapchainTexture)
                                break;
                            var s = Math.max(r, n);
                            if (s > t.capabilities.maxTextureSize && Qe(9100, s, t.capabilities.maxTextureSize),
                            !t.extensions.WEBGL_depth_texture && Jt[e.format].hasDepth)
                                e.glInternalFmt = function(t, e) {
                                    switch (t) {
                                    case _.R5G6B5:
                                        return e.RGB565;
                                    case _.RGB5A1:
                                        return e.RGB5_A1;
                                    case _.RGBA4:
                                        return e.RGBA4;
                                    case _.RGBA16F:
                                        return Bs.RGBA16F_EXT;
                                    case _.RGBA32F:
                                        return Bs.RGBA32F_EXT;
                                    case _.SRGB8_A8:
                                        return Bs.SRGB8_ALPHA8_EXT;
                                    case _.DEPTH:
                                        return e.DEPTH_COMPONENT16;
                                    case _.DEPTH_STENCIL:
                                        return e.DEPTH_STENCIL;
                                    default:
                                        return console.error("Unsupported Format, convert to WebGL internal format failed."),
                                        e.RGBA
                                    }
                                }(e.format, i),
                                e.glRenderbuffer = i.createRenderbuffer(),
                                e.size > 0 && (t.stateCache.glRenderbuffer !== e.glRenderbuffer && (i.bindRenderbuffer(i.RENDERBUFFER, e.glRenderbuffer),
                                t.stateCache.glRenderbuffer = e.glRenderbuffer),
                                i.renderbufferStorage(i.RENDERBUFFER, e.glInternalFmt, r, n));
                            else if (e.glTexture = i.createTexture(),
                            e.size > 0) {
                                var a = t.stateCache.glTexUnits[t.stateCache.texUnit];
                                if (a.glTexture !== e.glTexture && (i.bindTexture(i.TEXTURE_2D, e.glTexture),
                                a.glTexture = e.glTexture),
                                Jt[e.format].isCompressed)
                                    for (var o = 0; o < e.mipLevel; ++o) {
                                        var l = re(e.format, r, n, 1)
                                          , h = new Uint8Array(l);
                                        i.compressedTexImage2D(i.TEXTURE_2D, o, e.glInternalFmt, r, n, 0, h),
                                        r = Math.max(1, r >> 1),
                                        n = Math.max(1, n >> 1)
                                    }
                                else
                                    for (var u = 0; u < e.mipLevel; ++u)
                                        i.texImage2D(i.TEXTURE_2D, u, e.glInternalFmt, r, n, 0, e.glFormat, e.glType, null),
                                        r = Math.max(1, r >> 1),
                                        n = Math.max(1, n >> 1);
                                e.isPowerOf2 ? (e.glWrapS = i.REPEAT,
                                e.glWrapT = i.REPEAT) : (e.glWrapS = i.CLAMP_TO_EDGE,
                                e.glWrapT = i.CLAMP_TO_EDGE),
                                e.glMinFilter = i.LINEAR,
                                e.glMagFilter = i.LINEAR,
                                i.texParameteri(e.glTarget, i.TEXTURE_WRAP_S, e.glWrapS),
                                i.texParameteri(e.glTarget, i.TEXTURE_WRAP_T, e.glWrapT),
                                i.texParameteri(e.glTarget, i.TEXTURE_MIN_FILTER, e.glMinFilter),
                                i.texParameteri(e.glTarget, i.TEXTURE_MAG_FILTER, e.glMagFilter)
                            }
                            break;
                        case v.CUBE:
                            e.glTarget = i.TEXTURE_CUBE_MAP;
                            var c = Math.max(r, n);
                            if (c > t.capabilities.maxCubeMapTextureSize && Qe(9100, c, t.capabilities.maxTextureSize),
                            e.glTexture = i.createTexture(),
                            e.size > 0) {
                                var d = t.stateCache.glTexUnits[t.stateCache.texUnit];
                                if (d.glTexture !== e.glTexture && (i.bindTexture(i.TEXTURE_CUBE_MAP, e.glTexture),
                                d.glTexture = e.glTexture),
                                Jt[e.format].isCompressed)
                                    for (var p = 0; p < 6; ++p) {
                                        r = e.width,
                                        n = e.height;
                                        for (var f = 0; f < e.mipLevel; ++f) {
                                            var g = re(e.format, r, n, 1)
                                              , m = new Uint8Array(g);
                                            i.compressedTexImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + p, f, e.glInternalFmt, r, n, 0, m),
                                            r = Math.max(1, r >> 1),
                                            n = Math.max(1, n >> 1)
                                        }
                                    }
                                else
                                    for (var y = 0; y < 6; ++y) {
                                        r = e.width,
                                        n = e.height;
                                        for (var S = 0; S < e.mipLevel; ++S)
                                            i.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + y, S, e.glInternalFmt, r, n, 0, e.glFormat, e.glType, null),
                                            r = Math.max(1, r >> 1),
                                            n = Math.max(1, n >> 1)
                                    }
                                e.isPowerOf2 ? (e.glWrapS = i.REPEAT,
                                e.glWrapT = i.REPEAT) : (e.glWrapS = i.CLAMP_TO_EDGE,
                                e.glWrapT = i.CLAMP_TO_EDGE),
                                e.glMinFilter = i.LINEAR,
                                e.glMagFilter = i.LINEAR,
                                i.texParameteri(e.glTarget, i.TEXTURE_WRAP_S, e.glWrapS),
                                i.texParameteri(e.glTarget, i.TEXTURE_WRAP_T, e.glWrapT),
                                i.texParameteri(e.glTarget, i.TEXTURE_MIN_FILTER, e.glMinFilter),
                                i.texParameteri(e.glTarget, i.TEXTURE_MAG_FILTER, e.glMagFilter)
                            }
                            break;
                        default:
                            console.error("Unsupported TextureType, create texture failed."),
                            e.type = v.TEX2D,
                            e.glTarget = i.TEXTURE_2D
                        }
                    }(Ds.instance, this._gpuTexture),
                    Ds.instance.memoryStatus.textureSize += this._size)
                }
                ,
                i.destroy = function() {
                    var t, e;
                    this._gpuTexture && (t = Ds.instance,
                    (e = this._gpuTexture).glTexture && (t.gl.deleteTexture(e.glTexture),
                    e.glTexture = null),
                    e.glRenderbuffer && (t.gl.deleteRenderbuffer(e.glRenderbuffer),
                    e.glRenderbuffer = null),
                    Ds.instance.memoryStatus.textureSize -= this._size,
                    this._gpuTexture = null)
                }
                ,
                i.resize = function(t, e) {
                    var i = this._size;
                    this._width = t,
                    this._height = e,
                    this._size = ne(this._format, this.width, this.height, this.depth, this._levelCount) * this._layerCount,
                    this._gpuTexture && (this._gpuTexture.width = t,
                    this._gpuTexture.height = e,
                    this._gpuTexture.size = this._size,
                    function(t, e) {
                        if (e.size) {
                            var i = t.gl
                              , r = e.width
                              , n = e.height;
                            switch (e.type) {
                            case v.TEX2D:
                                e.glTarget = i.TEXTURE_2D;
                                var s = Math.max(r, n);
                                if (s > t.capabilities.maxTextureSize && Qe(9100, s, t.capabilities.maxTextureSize),
                                e.glRenderbuffer)
                                    t.stateCache.glRenderbuffer !== e.glRenderbuffer && (i.bindRenderbuffer(i.RENDERBUFFER, e.glRenderbuffer),
                                    t.stateCache.glRenderbuffer = e.glRenderbuffer),
                                    i.renderbufferStorage(i.RENDERBUFFER, e.glInternalFmt, r, n);
                                else if (e.glTexture) {
                                    var a = t.stateCache.glTexUnits[t.stateCache.texUnit];
                                    if (a.glTexture !== e.glTexture && (i.bindTexture(i.TEXTURE_2D, e.glTexture),
                                    a.glTexture = e.glTexture),
                                    Jt[e.format].isCompressed)
                                        for (var o = 0; o < e.mipLevel; ++o) {
                                            var l = re(e.format, r, n, 1)
                                              , h = new Uint8Array(l);
                                            i.compressedTexImage2D(i.TEXTURE_2D, o, e.glInternalFmt, r, n, 0, h),
                                            r = Math.max(1, r >> 1),
                                            n = Math.max(1, n >> 1)
                                        }
                                    else
                                        for (var u = 0; u < e.mipLevel; ++u)
                                            i.texImage2D(i.TEXTURE_2D, u, e.glInternalFmt, r, n, 0, e.glFormat, e.glType, null),
                                            r = Math.max(1, r >> 1),
                                            n = Math.max(1, n >> 1)
                                }
                                break;
                            case v.CUBE:
                                e.glTarget = i.TEXTURE_CUBE_MAP;
                                var c = Math.max(r, n);
                                c > t.capabilities.maxCubeMapTextureSize && Qe(9100, c, t.capabilities.maxTextureSize);
                                var _ = t.stateCache.glTexUnits[t.stateCache.texUnit];
                                if (_.glTexture !== e.glTexture && (i.bindTexture(i.TEXTURE_CUBE_MAP, e.glTexture),
                                _.glTexture = e.glTexture),
                                Jt[e.format].isCompressed)
                                    for (var d = 0; d < 6; ++d) {
                                        r = e.width,
                                        n = e.height;
                                        for (var p = 0; p < e.mipLevel; ++p) {
                                            var f = re(e.format, r, n, 1)
                                              , g = new Uint8Array(f);
                                            i.compressedTexImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + d, p, e.glInternalFmt, r, n, 0, g),
                                            r = Math.max(1, r >> 1),
                                            n = Math.max(1, n >> 1)
                                        }
                                    }
                                else
                                    for (var m = 0; m < 6; ++m) {
                                        r = e.width,
                                        n = e.height;
                                        for (var y = 0; y < e.mipLevel; ++y)
                                            i.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + m, y, e.glInternalFmt, r, n, 0, e.glFormat, e.glType, null),
                                            r = Math.max(1, r >> 1),
                                            n = Math.max(1, n >> 1)
                                    }
                                break;
                            default:
                                console.error("Unsupported TextureType, create texture failed."),
                                e.type = v.TEX2D,
                                e.glTarget = i.TEXTURE_2D
                            }
                        }
                    }(Ds.instance, this._gpuTexture),
                    Ds.instance.memoryStatus.textureSize -= i,
                    Ds.instance.memoryStatus.textureSize += this._size)
                }
                ,
                i.initAsSwapchainTexture = function(t) {
                    var e = new pt;
                    e.format = t.format,
                    e.usage = Jt[t.format].hasDepth ? S.DEPTH_STENCIL_ATTACHMENT : S.COLOR_ATTACHMENT,
                    e.width = t.width,
                    e.height = t.height,
                    this.initialize(e, !0)
                }
                ,
                Je(e, [{
                    key: "gpuTexture",
                    get: function() {
                        return this._gpuTexture
                    }
                }]),
                e
            }(Ee)
              , Ta = "webglcontextlost";
            function ba(t, e) {
                for (var i = ["", "WEBKIT_", "MOZ_"], r = 0; r < i.length; ++r) {
                    var n = t.getExtension(i[r] + e);
                    if (n)
                        return n
                }
                return null
            }
            function Ea(t) {
                var e = {
                    EXT_texture_filter_anisotropic: ba(t, "EXT_texture_filter_anisotropic"),
                    EXT_blend_minmax: ba(t, "EXT_blend_minmax"),
                    EXT_frag_depth: ba(t, "EXT_frag_depth"),
                    EXT_shader_texture_lod: ba(t, "EXT_shader_texture_lod"),
                    EXT_sRGB: ba(t, "EXT_sRGB"),
                    OES_vertex_array_object: ba(t, "OES_vertex_array_object"),
                    EXT_color_buffer_half_float: ba(t, "EXT_color_buffer_half_float"),
                    WEBGL_multi_draw: ba(t, "WEBGL_multi_draw"),
                    WEBGL_color_buffer_float: ba(t, "WEBGL_color_buffer_float"),
                    WEBGL_compressed_texture_etc1: ba(t, "WEBGL_compressed_texture_etc1"),
                    WEBGL_compressed_texture_etc: ba(t, "WEBGL_compressed_texture_etc"),
                    WEBGL_compressed_texture_pvrtc: ba(t, "WEBGL_compressed_texture_pvrtc"),
                    WEBGL_compressed_texture_s3tc: ba(t, "WEBGL_compressed_texture_s3tc"),
                    WEBGL_compressed_texture_s3tc_srgb: ba(t, "WEBGL_compressed_texture_s3tc_srgb"),
                    WEBGL_debug_shaders: ba(t, "WEBGL_debug_shaders"),
                    WEBGL_draw_buffers: ba(t, "WEBGL_draw_buffers"),
                    WEBGL_lose_context: ba(t, "WEBGL_lose_context"),
                    WEBGL_depth_texture: ba(t, "WEBGL_depth_texture"),
                    OES_texture_half_float: ba(t, "OES_texture_half_float"),
                    OES_texture_half_float_linear: ba(t, "OES_texture_half_float_linear"),
                    OES_texture_float: ba(t, "OES_texture_float"),
                    OES_texture_float_linear: ba(t, "OES_texture_float_linear"),
                    OES_standard_derivatives: ba(t, "OES_standard_derivatives"),
                    OES_element_index_uint: ba(t, "OES_element_index_uint"),
                    ANGLE_instanced_arrays: ba(t, "ANGLE_instanced_arrays"),
                    WEBGL_debug_renderer_info: ba(t, "WEBGL_debug_renderer_info"),
                    WEBGL_compressed_texture_astc: null,
                    destroyShadersImmediately: !0,
                    noCompressedTexSubImage2D: !1,
                    isLocationActive: function(t) {
                        return !!t
                    },
                    useVAO: !1
                };
                return ni.os === si.IOS && 14 === ni.osMainVersion && ni.isBrowser || (e.WEBGL_compressed_texture_astc = ba(t, "WEBGL_compressed_texture_astc")),
                ni.browserType === ai.UC && (e.ANGLE_instanced_arrays = null),
                (ni.os === si.IOS && ni.osMainVersion <= 10 || oi) && (e.destroyShadersImmediately = !1),
                e.OES_vertex_array_object && (e.useVAO = !0),
                e
            }
            var Aa = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this).stateCache = new va,
                    e.cmdAllocator = new sa,
                    e.nullTex2D = null,
                    e.nullTexCube = null,
                    e._canvas = null,
                    e._webGLContextLostHandler = null,
                    e._extensions = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._canvas = t.windowHandle,
                    this._webGLContextLostHandler = this._onWebGLContextLost.bind(this),
                    this._canvas.addEventListener(Ta, this._onWebGLContextLost);
                    var e = Ds.instance.gl;
                    this.stateCache.initialize(Ds.instance.capabilities.maxTextureUnits, Ds.instance.capabilities.maxVertexAttributes),
                    this._extensions = Ea(e),
                    function(t) {
                        t.activeTexture(t.TEXTURE0),
                        t.pixelStorei(t.PACK_ALIGNMENT, 1),
                        t.pixelStorei(t.UNPACK_ALIGNMENT, 1),
                        t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, !1),
                        t.bindFramebuffer(t.FRAMEBUFFER, null),
                        t.enable(t.SCISSOR_TEST),
                        t.enable(t.CULL_FACE),
                        t.cullFace(t.BACK),
                        t.frontFace(t.CCW),
                        t.disable(t.POLYGON_OFFSET_FILL),
                        t.polygonOffset(0, 0),
                        t.enable(t.DEPTH_TEST),
                        t.depthMask(!0),
                        t.depthFunc(t.LESS),
                        t.depthRange(0, 1),
                        t.stencilFuncSeparate(t.FRONT, t.ALWAYS, 1, 65535),
                        t.stencilOpSeparate(t.FRONT, t.KEEP, t.KEEP, t.KEEP),
                        t.stencilMaskSeparate(t.FRONT, 65535),
                        t.stencilFuncSeparate(t.BACK, t.ALWAYS, 1, 65535),
                        t.stencilOpSeparate(t.BACK, t.KEEP, t.KEEP, t.KEEP),
                        t.stencilMaskSeparate(t.BACK, 65535),
                        t.disable(t.STENCIL_TEST),
                        t.disable(t.SAMPLE_ALPHA_TO_COVERAGE),
                        t.disable(t.BLEND),
                        t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD),
                        t.blendFuncSeparate(t.ONE, t.ZERO, t.ONE, t.ZERO),
                        t.colorMask(!0, !0, !0, !0),
                        t.blendColor(0, 0, 0, 0)
                    }(e);
                    var i = _.RGBA8
                      , r = _.DEPTH_STENCIL
                      , n = e.getParameter(e.DEPTH_BITS)
                      , s = e.getParameter(e.STENCIL_BITS);
                    n && s ? r = _.DEPTH_STENCIL : n && (r = _.DEPTH),
                    this._colorTexture = new Sa,
                    this._colorTexture.initAsSwapchainTexture({
                        swapchain: this,
                        format: i,
                        width: t.width,
                        height: t.height
                    }),
                    this._depthStencilTexture = new Sa,
                    this._depthStencilTexture.initAsSwapchainTexture({
                        swapchain: this,
                        format: r,
                        width: t.width,
                        height: t.height
                    }),
                    this.nullTex2D = Ds.instance.createTexture(new pt(v.TEX2D,S.SAMPLED,_.RGBA8,2,2,T.GEN_MIPMAP)),
                    this.nullTexCube = Ds.instance.createTexture(new pt(v.CUBE,S.SAMPLED,_.RGBA8,2,2,T.GEN_MIPMAP,6));
                    var a = new rt;
                    a.texExtent.width = 2,
                    a.texExtent.height = 2;
                    var o = new Uint8Array(this.nullTex2D.size);
                    o.fill(0),
                    Ds.instance.copyBuffersToTexture([o], this.nullTex2D, [a]),
                    a.texSubres.layerCount = 6,
                    Ds.instance.copyBuffersToTexture([o, o, o, o, o, o], this.nullTexCube, [a])
                }
                ,
                i.destroy = function() {
                    this._canvas && this._webGLContextLostHandler && (this._canvas.removeEventListener(Ta, this._webGLContextLostHandler),
                    this._webGLContextLostHandler = null),
                    this.nullTex2D && (this.nullTex2D.destroy(),
                    this.nullTex2D = null),
                    this.nullTexCube && (this.nullTexCube.destroy(),
                    this.nullTexCube = null),
                    this._extensions = null,
                    this._canvas = null
                }
                ,
                i.resize = function(t, e) {
                    this._colorTexture.width === t && this._colorTexture.height === e || ($e("Resizing swapchain: " + t + "x" + e),
                    this._canvas.width = t,
                    this._canvas.height = e,
                    this._colorTexture.resize(t, e),
                    this._depthStencilTexture.resize(t, e))
                }
                ,
                i._onWebGLContextLost = function(t) {
                    ii(11e3),
                    ri(t)
                }
                ,
                Je(e, [{
                    key: "extensions",
                    get: function() {
                        return this._extensions
                    }
                }]),
                e
            }(le)
              , Ca = t("WebGLDevice", function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._swapchain = null,
                    e._context = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    Ds.setInstance(this),
                    this._gfxAPI = h.WEBGL,
                    this._bindingMappingInfo = t.bindingMappingInfo,
                    this._bindingMappingInfo.bufferOffsets.length || this._bindingMappingInfo.bufferOffsets.push(0),
                    this._bindingMappingInfo.samplerOffsets.length || this._bindingMappingInfo.samplerOffsets.push(0);
                    var e = this._context = function(t) {
                        var e = null;
                        try {
                            var i = {
                                alpha: li.ENABLE_TRANSPARENT_CANVAS,
                                antialias: hi || li.ENABLE_WEBGL_ANTIALIAS,
                                depth: !0,
                                stencil: !0,
                                premultipliedAlpha: !1,
                                preserveDrawingBuffer: !1,
                                powerPreference: "default",
                                failIfMajorPerformanceCaveat: !1
                            };
                            e = t.getContext("webgl", i)
                        } catch (t) {
                            return null
                        }
                        return e
                    }(oe.canvas);
                    if (!e)
                        return console.error("This device does not support WebGL."),
                        !1;
                    this._queue = this.createQueue(new Vt(W.GRAPHICS)),
                    this._cmdBuff = this.createCommandBuffer(new Ht(this._queue)),
                    this._caps.maxVertexAttributes = e.getParameter(e.MAX_VERTEX_ATTRIBS),
                    this._caps.maxVertexUniformVectors = e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),
                    this._caps.maxFragmentUniformVectors = e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),
                    this._caps.maxTextureUnits = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),
                    this._caps.maxVertexTextureUnits = e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),
                    this._caps.maxTextureSize = e.getParameter(e.MAX_TEXTURE_SIZE),
                    this._caps.maxCubeMapTextureSize = e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE);
                    var i = e.getSupportedExtensions()
                      , r = "";
                    if (i)
                        for (var n, s = ui(i); !(n = s()).done; )
                            r += n.value + " ";
                    var a = Ea(e);
                    a.WEBGL_debug_renderer_info ? (this._renderer = e.getParameter(a.WEBGL_debug_renderer_info.UNMASKED_RENDERER_WEBGL),
                    this._vendor = e.getParameter(a.WEBGL_debug_renderer_info.UNMASKED_VENDOR_WEBGL)) : (this._renderer = e.getParameter(e.RENDERER),
                    this._vendor = e.getParameter(e.VENDOR));
                    var o = e.getParameter(e.VERSION);
                    this._features.fill(!1),
                    a.EXT_sRGB && (this._features[c.FORMAT_SRGB] = !0),
                    a.EXT_blend_minmax && (this._features[c.BLEND_MINMAX] = !0),
                    a.WEBGL_color_buffer_float && (this._features[c.COLOR_FLOAT] = !0),
                    a.EXT_color_buffer_half_float && (this._features[c.COLOR_HALF_FLOAT] = !0),
                    a.OES_texture_float && (this._features[c.TEXTURE_FLOAT] = !0),
                    a.OES_texture_half_float && (this._features[c.TEXTURE_HALF_FLOAT] = !0),
                    a.OES_texture_float_linear && (this._features[c.TEXTURE_FLOAT_LINEAR] = !0),
                    a.OES_texture_half_float_linear && (this._features[c.TEXTURE_HALF_FLOAT_LINEAR] = !0),
                    this._features[c.FORMAT_RGB8] = !0,
                    a.OES_element_index_uint && (this._features[c.ELEMENT_INDEX_UINT] = !0),
                    a.ANGLE_instanced_arrays && (this._features[c.INSTANCED_ARRAYS] = !0),
                    a.WEBGL_draw_buffers && (this._features[c.MULTIPLE_RENDER_TARGETS] = !0);
                    var l = "";
                    return a.WEBGL_compressed_texture_etc1 && (this._features[c.FORMAT_ETC1] = !0,
                    l += "etc1 "),
                    a.WEBGL_compressed_texture_etc && (this._features[c.FORMAT_ETC2] = !0,
                    l += "etc2 "),
                    a.WEBGL_compressed_texture_s3tc && (this._features[c.FORMAT_DXT] = !0,
                    l += "dxt "),
                    a.WEBGL_compressed_texture_pvrtc && (this._features[c.FORMAT_PVRTC] = !0,
                    l += "pvrtc "),
                    a.WEBGL_compressed_texture_astc && (this._features[c.FORMAT_ASTC] = !0,
                    l += "astc "),
                    $e("WebGL device initialized."),
                    $e("RENDERER: " + this._renderer),
                    $e("VENDOR: " + this._vendor),
                    $e("VERSION: " + o),
                    $e("COMPRESSED_FORMAT: " + l),
                    $e("EXTENSIONS: " + r),
                    !0
                }
                ,
                i.destroy = function() {
                    this._queue && (this._queue.destroy(),
                    this._queue = null),
                    this._cmdBuff && (this._cmdBuff.destroy(),
                    this._cmdBuff = null)
                }
                ,
                i.flushCommands = function() {}
                ,
                i.acquire = function() {}
                ,
                i.present = function() {
                    var t = this._queue;
                    this._numDrawCalls = t.numDrawCalls,
                    this._numInstances = t.numInstances,
                    this._numTris = t.numTris,
                    t.clear()
                }
                ,
                i.createCommandBuffer = function(t) {
                    var e = new (t.type === j.PRIMARY ? da : aa);
                    return e.initialize(t),
                    e
                }
                ,
                i.createSwapchain = function(t) {
                    var e = new Aa;
                    return this._swapchain = e,
                    e.initialize(t),
                    e
                }
                ,
                i.createBuffer = function(t) {
                    var e = new ra;
                    return e.initialize(t),
                    e
                }
                ,
                i.createTexture = function(t) {
                    var e = new Sa;
                    return e.initialize(t),
                    e
                }
                ,
                i.createDescriptorSet = function(t) {
                    var e = new xs;
                    return e.initialize(t),
                    e
                }
                ,
                i.createShader = function(t) {
                    var e = new ya;
                    return e.initialize(t),
                    e
                }
                ,
                i.createInputAssembler = function(t) {
                    var e = new la;
                    return e.initialize(t),
                    e
                }
                ,
                i.createRenderPass = function(t) {
                    var e = new fa;
                    return e.initialize(t),
                    e
                }
                ,
                i.createFramebuffer = function(t) {
                    var e = new oa;
                    return e.initialize(t),
                    e
                }
                ,
                i.createDescriptorSetLayout = function(t) {
                    var e = new ha;
                    return e.initialize(t),
                    e
                }
                ,
                i.createPipelineLayout = function(t) {
                    var e = new ua;
                    return e.initialize(t),
                    e
                }
                ,
                i.createPipelineState = function(t) {
                    var e = new _a;
                    return e.initialize(t),
                    e
                }
                ,
                i.createQueue = function(t) {
                    var e = new pa;
                    return e.initialize(t),
                    e
                }
                ,
                i.getSampler = function(t) {
                    var e = Te.computeHash(t);
                    return this._samplers.has(e) || this._samplers.set(e, new ma(t,e)),
                    this._samplers.get(e)
                }
                ,
                i.getGlobalBarrier = function(t) {
                    var e = Ae.computeHash(t);
                    return this._globalBarriers.has(e) || this._globalBarriers.set(e, new Ae(t,e)),
                    this._globalBarriers.get(e)
                }
                ,
                i.getTextureBarrier = function(t) {
                    var e = Ce.computeHash(t);
                    return this._textureBarriers.has(e) || this._textureBarriers.set(e, new Ce(t,e)),
                    this._textureBarriers.get(e)
                }
                ,
                i.copyBuffersToTexture = function(t, e, i) {
                    ea(this, t, e.gpuTexture, i)
                }
                ,
                i.copyTextureToBuffers = function(t, e, i) {
                    !function(t, e, i, r) {
                        var n = t.gl
                          , s = t.stateCache
                          , a = n.createFramebuffer();
                        n.bindFramebuffer(n.FRAMEBUFFER, a);
                        var o = 0
                          , l = 0
                          , h = 1
                          , u = 1;
                        switch (e.glTarget) {
                        case n.TEXTURE_2D:
                            for (var c = 0; c < r.length; c++) {
                                var _ = r[c];
                                n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, e.glTarget, e.glTexture, _.texSubres.mipLevel),
                                o = _.texOffset.x,
                                l = _.texOffset.y,
                                h = _.texExtent.width,
                                u = _.texExtent.height,
                                n.readPixels(o, l, h, u, e.glFormat, e.glType, i[c])
                            }
                            break;
                        default:
                            console.error("Unsupported GL texture type, copy texture to buffers failed.")
                        }
                        n.bindFramebuffer(n.FRAMEBUFFER, null),
                        s.glFramebuffer = null,
                        n.deleteFramebuffer(a)
                    }(this, t.gpuTexture, e, i)
                }
                ,
                i.copyTexImagesToTexture = function(t, e, i) {
                    !function(t, e, i, r) {
                        var n = t.gl
                          , s = t.stateCache.glTexUnits[t.stateCache.texUnit];
                        s.glTexture !== i.glTexture && (n.bindTexture(i.glTarget, i.glTexture),
                        s.glTexture = i.glTexture);
                        var a = 0
                          , o = 0;
                        switch (i.glTarget) {
                        case n.TEXTURE_2D:
                            for (var l = 0; l < r.length; l++) {
                                var h = r[l];
                                n.texSubImage2D(n.TEXTURE_2D, h.texSubres.mipLevel, h.texOffset.x, h.texOffset.y, i.glFormat, i.glType, e[a++])
                            }
                            break;
                        case n.TEXTURE_CUBE_MAP:
                            for (var u = 0; u < r.length; u++) {
                                var c = r[u]
                                  , _ = c.texSubres.baseArrayLayer + c.texSubres.layerCount;
                                for (o = c.texSubres.baseArrayLayer; o < _; ++o)
                                    n.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + o, c.texSubres.mipLevel, c.texOffset.x, c.texOffset.y, i.glFormat, i.glType, e[a++])
                            }
                            break;
                        default:
                            console.error("Unsupported GL texture type, copy buffer to texture failed.")
                        }
                        i.flags & T.GEN_MIPMAP && i.isPowerOf2 && n.generateMipmap(i.glTarget)
                    }(this, t, e.gpuTexture, i)
                }
                ,
                Je(e, [{
                    key: "gl",
                    get: function() {
                        return this._context
                    }
                }, {
                    key: "extensions",
                    get: function() {
                        return this._swapchain.extensions
                    }
                }, {
                    key: "stateCache",
                    get: function() {
                        return this._swapchain.stateCache
                    }
                }, {
                    key: "nullTex2D",
                    get: function() {
                        return this._swapchain.nullTex2D
                    }
                }, {
                    key: "nullTexCube",
                    get: function() {
                        return this._swapchain.nullTexCube
                    }
                }]),
                e
            }(oe));
            ci.WebGLDevice = Ca;
            var Ra, Ba = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuDescriptorSet = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._layout = t.layout;
                    var e = t.layout.gpuDescriptorSetLayout
                      , i = e.bindings
                      , r = e.descriptorIndices
                      , n = e.descriptorCount;
                    this._buffers = Array(n).fill(null),
                    this._textures = Array(n).fill(null),
                    this._samplers = Array(n).fill(null);
                    var s = [];
                    this._gpuDescriptorSet = {
                        gpuDescriptors: s,
                        descriptorIndices: r
                    };
                    for (var a = 0; a < i.length; ++a)
                        for (var o = i[a], l = 0; l < o.count; l++)
                            s.push({
                                type: o.descriptorType,
                                gpuBuffer: null,
                                gpuTexture: null,
                                gpuSampler: null
                            })
                }
                ,
                i.destroy = function() {
                    this._layout = null,
                    this._gpuDescriptorSet = null
                }
                ,
                i.update = function() {
                    if (this._isDirty && this._gpuDescriptorSet) {
                        for (var t = this._gpuDescriptorSet.gpuDescriptors, e = 0; e < t.length; ++e)
                            t[e].type & Qt ? this._buffers[e] && (t[e].gpuBuffer = this._buffers[e].gpuBuffer) : t[e].type & $t && (this._textures[e] && (t[e].gpuTexture = this._textures[e].gpuTexture),
                            this._samplers[e] && (t[e].gpuSampler = this._samplers[e].gpuSampler));
                        this._isDirty = !1
                    }
                }
                ,
                Je(e, [{
                    key: "gpuDescriptorSet",
                    get: function() {
                        return this._gpuDescriptorSet
                    }
                }]),
                e
            }(n);
            !function(t) {
                t[t.COMPRESSED_RGB_S3TC_DXT1_EXT = 33776] = "COMPRESSED_RGB_S3TC_DXT1_EXT",
                t[t.COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777] = "COMPRESSED_RGBA_S3TC_DXT1_EXT",
                t[t.COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778] = "COMPRESSED_RGBA_S3TC_DXT3_EXT",
                t[t.COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779] = "COMPRESSED_RGBA_S3TC_DXT5_EXT",
                t[t.COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916] = "COMPRESSED_SRGB_S3TC_DXT1_EXT",
                t[t.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT",
                t[t.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT",
                t[t.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT",
                t[t.COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840] = "COMPRESSED_RGB_PVRTC_4BPPV1_IMG",
                t[t.COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841] = "COMPRESSED_RGB_PVRTC_2BPPV1_IMG",
                t[t.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842] = "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG",
                t[t.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843] = "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG",
                t[t.COMPRESSED_RGB_ETC1_WEBGL = 36196] = "COMPRESSED_RGB_ETC1_WEBGL",
                t[t.COMPRESSED_R11_EAC = 37488] = "COMPRESSED_R11_EAC",
                t[t.COMPRESSED_SIGNED_R11_EAC = 37489] = "COMPRESSED_SIGNED_R11_EAC",
                t[t.COMPRESSED_RG11_EAC = 37490] = "COMPRESSED_RG11_EAC",
                t[t.COMPRESSED_SIGNED_RG11_EAC = 37491] = "COMPRESSED_SIGNED_RG11_EAC",
                t[t.COMPRESSED_RGB8_ETC2 = 37492] = "COMPRESSED_RGB8_ETC2",
                t[t.COMPRESSED_SRGB8_ETC2 = 37493] = "COMPRESSED_SRGB8_ETC2",
                t[t.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494] = "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2",
                t[t.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495] = "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2",
                t[t.COMPRESSED_RGBA8_ETC2_EAC = 37496] = "COMPRESSED_RGBA8_ETC2_EAC",
                t[t.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497] = "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC",
                t[t.COMPRESSED_RGBA_ASTC_4x4_KHR = 37808] = "COMPRESSED_RGBA_ASTC_4x4_KHR",
                t[t.COMPRESSED_RGBA_ASTC_5x4_KHR = 37809] = "COMPRESSED_RGBA_ASTC_5x4_KHR",
                t[t.COMPRESSED_RGBA_ASTC_5x5_KHR = 37810] = "COMPRESSED_RGBA_ASTC_5x5_KHR",
                t[t.COMPRESSED_RGBA_ASTC_6x5_KHR = 37811] = "COMPRESSED_RGBA_ASTC_6x5_KHR",
                t[t.COMPRESSED_RGBA_ASTC_6x6_KHR = 37812] = "COMPRESSED_RGBA_ASTC_6x6_KHR",
                t[t.COMPRESSED_RGBA_ASTC_8x5_KHR = 37813] = "COMPRESSED_RGBA_ASTC_8x5_KHR",
                t[t.COMPRESSED_RGBA_ASTC_8x6_KHR = 37814] = "COMPRESSED_RGBA_ASTC_8x6_KHR",
                t[t.COMPRESSED_RGBA_ASTC_8x8_KHR = 37815] = "COMPRESSED_RGBA_ASTC_8x8_KHR",
                t[t.COMPRESSED_RGBA_ASTC_10x5_KHR = 37816] = "COMPRESSED_RGBA_ASTC_10x5_KHR",
                t[t.COMPRESSED_RGBA_ASTC_10x6_KHR = 37817] = "COMPRESSED_RGBA_ASTC_10x6_KHR",
                t[t.COMPRESSED_RGBA_ASTC_10x8_KHR = 37818] = "COMPRESSED_RGBA_ASTC_10x8_KHR",
                t[t.COMPRESSED_RGBA_ASTC_10x10_KHR = 37819] = "COMPRESSED_RGBA_ASTC_10x10_KHR",
                t[t.COMPRESSED_RGBA_ASTC_12x10_KHR = 37820] = "COMPRESSED_RGBA_ASTC_12x10_KHR",
                t[t.COMPRESSED_RGBA_ASTC_12x12_KHR = 37821] = "COMPRESSED_RGBA_ASTC_12x12_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840] = "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 37841] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 37842] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 37843] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 37844] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 37845] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 37846] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 37847] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 37848] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 37849] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 37850] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 37851] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 37852] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR",
                t[t.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 37853] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"
            }(Ra || (Ra = {}));
            var xa = function() {
                function t() {}
                return t.setInstance = function(e) {
                    t._instance = e
                }
                ,
                Je(t, null, [{
                    key: "instance",
                    get: function() {
                        return t._instance
                    }
                }]),
                t
            }();
            xa._instance = null;
            var Da = [10497, 33648, 33071, 33071]
              , wa = new Float32Array(4);
            function Oa(t, e) {
                switch (t) {
                case _.R8:
                    return e.UNSIGNED_BYTE;
                case _.R8SN:
                    return e.BYTE;
                case _.R8UI:
                    return e.UNSIGNED_BYTE;
                case _.R8I:
                    return e.BYTE;
                case _.R16F:
                    return e.HALF_FLOAT;
                case _.R16UI:
                    return e.UNSIGNED_SHORT;
                case _.R16I:
                    return e.SHORT;
                case _.R32F:
                    return e.FLOAT;
                case _.R32UI:
                    return e.UNSIGNED_INT;
                case _.R32I:
                    return e.INT;
                case _.RG8:
                    return e.UNSIGNED_BYTE;
                case _.RG8SN:
                    return e.BYTE;
                case _.RG8UI:
                    return e.UNSIGNED_BYTE;
                case _.RG8I:
                    return e.BYTE;
                case _.RG16F:
                    return e.HALF_FLOAT;
                case _.RG16UI:
                    return e.UNSIGNED_SHORT;
                case _.RG16I:
                    return e.SHORT;
                case _.RG32F:
                    return e.FLOAT;
                case _.RG32UI:
                    return e.UNSIGNED_INT;
                case _.RG32I:
                    return e.INT;
                case _.RGB8:
                case _.SRGB8:
                    return e.UNSIGNED_BYTE;
                case _.RGB8SN:
                    return e.BYTE;
                case _.RGB8UI:
                    return e.UNSIGNED_BYTE;
                case _.RGB8I:
                    return e.BYTE;
                case _.RGB16F:
                    return e.HALF_FLOAT;
                case _.RGB16UI:
                    return e.UNSIGNED_SHORT;
                case _.RGB16I:
                    return e.SHORT;
                case _.RGB32F:
                    return e.FLOAT;
                case _.RGB32UI:
                    return e.UNSIGNED_INT;
                case _.RGB32I:
                    return e.INT;
                case _.BGRA8:
                case _.RGBA8:
                case _.SRGB8_A8:
                    return e.UNSIGNED_BYTE;
                case _.RGBA8SN:
                    return e.BYTE;
                case _.RGBA8UI:
                    return e.UNSIGNED_BYTE;
                case _.RGBA8I:
                    return e.BYTE;
                case _.RGBA16F:
                    return e.HALF_FLOAT;
                case _.RGBA16UI:
                    return e.UNSIGNED_SHORT;
                case _.RGBA16I:
                    return e.SHORT;
                case _.RGBA32F:
                    return e.FLOAT;
                case _.RGBA32UI:
                    return e.UNSIGNED_INT;
                case _.RGBA32I:
                    return e.INT;
                case _.R5G6B5:
                    return e.UNSIGNED_SHORT_5_6_5;
                case _.R11G11B10F:
                    return e.UNSIGNED_INT_10F_11F_11F_REV;
                case _.RGB5A1:
                    return e.UNSIGNED_SHORT_5_5_5_1;
                case _.RGBA4:
                    return e.UNSIGNED_SHORT_4_4_4_4;
                case _.RGB10A2:
                case _.RGB10A2UI:
                    return e.UNSIGNED_INT_2_10_10_10_REV;
                case _.RGB9E5:
                case _.DEPTH:
                    return e.FLOAT;
                case _.DEPTH_STENCIL:
                    return e.UNSIGNED_INT_24_8;
                case _.BC1:
                case _.BC1_SRGB:
                case _.BC2:
                case _.BC2_SRGB:
                case _.BC3:
                case _.BC3_SRGB:
                case _.BC4:
                    return e.UNSIGNED_BYTE;
                case _.BC4_SNORM:
                    return e.BYTE;
                case _.BC5:
                    return e.UNSIGNED_BYTE;
                case _.BC5_SNORM:
                    return e.BYTE;
                case _.BC6H_SF16:
                case _.BC6H_UF16:
                    return e.FLOAT;
                case _.BC7:
                case _.BC7_SRGB:
                case _.ETC_RGB8:
                case _.ETC2_RGB8:
                case _.ETC2_SRGB8:
                case _.ETC2_RGB8_A1:
                case _.ETC2_SRGB8_A1:
                case _.EAC_R11:
                    return e.UNSIGNED_BYTE;
                case _.EAC_R11SN:
                    return e.BYTE;
                case _.EAC_RG11:
                    return e.UNSIGNED_BYTE;
                case _.EAC_RG11SN:
                    return e.BYTE;
                case _.PVRTC_RGB2:
                case _.PVRTC_RGBA2:
                case _.PVRTC_RGB4:
                case _.PVRTC_RGBA4:
                case _.PVRTC2_2BPP:
                case _.PVRTC2_4BPP:
                    return e.UNSIGNED_BYTE;
                case _.ASTC_RGBA_4X4:
                case _.ASTC_RGBA_5X4:
                case _.ASTC_RGBA_5X5:
                case _.ASTC_RGBA_6X5:
                case _.ASTC_RGBA_6X6:
                case _.ASTC_RGBA_8X5:
                case _.ASTC_RGBA_8X6:
                case _.ASTC_RGBA_8X8:
                case _.ASTC_RGBA_10X5:
                case _.ASTC_RGBA_10X6:
                case _.ASTC_RGBA_10X8:
                case _.ASTC_RGBA_10X10:
                case _.ASTC_RGBA_12X10:
                case _.ASTC_RGBA_12X12:
                case _.ASTC_SRGBA_4X4:
                case _.ASTC_SRGBA_5X4:
                case _.ASTC_SRGBA_5X5:
                case _.ASTC_SRGBA_6X5:
                case _.ASTC_SRGBA_6X6:
                case _.ASTC_SRGBA_8X5:
                case _.ASTC_SRGBA_8X6:
                case _.ASTC_SRGBA_8X8:
                case _.ASTC_SRGBA_10X5:
                case _.ASTC_SRGBA_10X6:
                case _.ASTC_SRGBA_10X8:
                case _.ASTC_SRGBA_10X10:
                case _.ASTC_SRGBA_12X10:
                case _.ASTC_SRGBA_12X12:
                default:
                    return e.UNSIGNED_BYTE
                }
            }
            function Pa(t, e) {
                switch (t) {
                case p.BOOL:
                    return e.BOOL;
                case p.BOOL2:
                    return e.BOOL_VEC2;
                case p.BOOL3:
                    return e.BOOL_VEC3;
                case p.BOOL4:
                    return e.BOOL_VEC4;
                case p.INT:
                    return e.INT;
                case p.INT2:
                    return e.INT_VEC2;
                case p.INT3:
                    return e.INT_VEC3;
                case p.INT4:
                    return e.INT_VEC4;
                case p.UINT:
                    return e.UNSIGNED_INT;
                case p.FLOAT:
                    return e.FLOAT;
                case p.FLOAT2:
                    return e.FLOAT_VEC2;
                case p.FLOAT3:
                    return e.FLOAT_VEC3;
                case p.FLOAT4:
                    return e.FLOAT_VEC4;
                case p.MAT2:
                    return e.FLOAT_MAT2;
                case p.MAT2X3:
                    return e.FLOAT_MAT2x3;
                case p.MAT2X4:
                    return e.FLOAT_MAT2x4;
                case p.MAT3X2:
                    return e.FLOAT_MAT3x2;
                case p.MAT3:
                    return e.FLOAT_MAT3;
                case p.MAT3X4:
                    return e.FLOAT_MAT3x4;
                case p.MAT4X2:
                    return e.FLOAT_MAT4x2;
                case p.MAT4X3:
                    return e.FLOAT_MAT4x3;
                case p.MAT4:
                    return e.FLOAT_MAT4;
                case p.SAMPLER2D:
                    return e.SAMPLER_2D;
                case p.SAMPLER2D_ARRAY:
                    return e.SAMPLER_2D_ARRAY;
                case p.SAMPLER3D:
                    return e.SAMPLER_3D;
                case p.SAMPLER_CUBE:
                    return e.SAMPLER_CUBE;
                default:
                    return console.error("Unsupported GLType, convert to GL type failed."),
                    p.UNKNOWN
                }
            }
            function Ma(t, e) {
                switch (t) {
                case e.BOOL:
                    return p.BOOL;
                case e.BOOL_VEC2:
                    return p.BOOL2;
                case e.BOOL_VEC3:
                    return p.BOOL3;
                case e.BOOL_VEC4:
                    return p.BOOL4;
                case e.INT:
                    return p.INT;
                case e.INT_VEC2:
                    return p.INT2;
                case e.INT_VEC3:
                    return p.INT3;
                case e.INT_VEC4:
                    return p.INT4;
                case e.UNSIGNED_INT:
                    return p.UINT;
                case e.UNSIGNED_INT_VEC2:
                    return p.UINT2;
                case e.UNSIGNED_INT_VEC3:
                    return p.UINT3;
                case e.UNSIGNED_INT_VEC4:
                    return p.UINT4;
                case e.FLOAT:
                    return p.FLOAT;
                case e.FLOAT_VEC2:
                    return p.FLOAT2;
                case e.FLOAT_VEC3:
                    return p.FLOAT3;
                case e.FLOAT_VEC4:
                    return p.FLOAT4;
                case e.FLOAT_MAT2:
                    return p.MAT2;
                case e.FLOAT_MAT2x3:
                    return p.MAT2X3;
                case e.FLOAT_MAT2x4:
                    return p.MAT2X4;
                case e.FLOAT_MAT3x2:
                    return p.MAT3X2;
                case e.FLOAT_MAT3:
                    return p.MAT3;
                case e.FLOAT_MAT3x4:
                    return p.MAT3X4;
                case e.FLOAT_MAT4x2:
                    return p.MAT4X2;
                case e.FLOAT_MAT4x3:
                    return p.MAT4X3;
                case e.FLOAT_MAT4:
                    return p.MAT4;
                case e.SAMPLER_2D:
                    return p.SAMPLER2D;
                case e.SAMPLER_2D_ARRAY:
                    return p.SAMPLER2D_ARRAY;
                case e.SAMPLER_3D:
                    return p.SAMPLER3D;
                case e.SAMPLER_CUBE:
                    return p.SAMPLER_CUBE;
                default:
                    return console.error("Unsupported GLType, convert to Type failed."),
                    p.UNKNOWN
                }
            }
            function Ia(t, e) {
                switch (t) {
                case e.BOOL:
                    return 4;
                case e.BOOL_VEC2:
                    return 8;
                case e.BOOL_VEC3:
                    return 12;
                case e.BOOL_VEC4:
                    return 16;
                case e.INT:
                    return 4;
                case e.INT_VEC2:
                    return 8;
                case e.INT_VEC3:
                    return 12;
                case e.INT_VEC4:
                    return 16;
                case e.UNSIGNED_INT:
                    return 4;
                case e.UNSIGNED_INT_VEC2:
                    return 8;
                case e.UNSIGNED_INT_VEC3:
                    return 12;
                case e.UNSIGNED_INT_VEC4:
                    return 16;
                case e.FLOAT:
                    return 4;
                case e.FLOAT_VEC2:
                    return 8;
                case e.FLOAT_VEC3:
                    return 12;
                case e.FLOAT_VEC4:
                case e.FLOAT_MAT2:
                    return 16;
                case e.FLOAT_MAT2x3:
                    return 24;
                case e.FLOAT_MAT2x4:
                    return 32;
                case e.FLOAT_MAT3x2:
                    return 24;
                case e.FLOAT_MAT3:
                    return 36;
                case e.FLOAT_MAT3x4:
                    return 48;
                case e.FLOAT_MAT4x2:
                    return 32;
                case e.FLOAT_MAT4x3:
                    return 48;
                case e.FLOAT_MAT4:
                    return 64;
                case e.SAMPLER_2D:
                case e.SAMPLER_2D_ARRAY:
                case e.SAMPLER_2D_ARRAY_SHADOW:
                case e.SAMPLER_3D:
                case e.SAMPLER_CUBE:
                case e.INT_SAMPLER_2D:
                case e.INT_SAMPLER_2D_ARRAY:
                case e.INT_SAMPLER_3D:
                case e.INT_SAMPLER_CUBE:
                case e.UNSIGNED_INT_SAMPLER_2D:
                case e.UNSIGNED_INT_SAMPLER_2D_ARRAY:
                case e.UNSIGNED_INT_SAMPLER_3D:
                case e.UNSIGNED_INT_SAMPLER_CUBE:
                    return 4;
                default:
                    return console.error("Unsupported GLType, get type failed."),
                    0
                }
            }
            function La(t, e) {
                switch (t) {
                case e.FLOAT_MAT2:
                case e.FLOAT_MAT2x3:
                case e.FLOAT_MAT2x4:
                    return 2;
                case e.FLOAT_MAT3x2:
                case e.FLOAT_MAT3:
                case e.FLOAT_MAT3x4:
                    return 3;
                case e.FLOAT_MAT4x2:
                case e.FLOAT_MAT4x3:
                case e.FLOAT_MAT4:
                    return 4;
                default:
                    return 1
                }
            }
            var Fa, Na = [512, 513, 514, 515, 516, 517, 518, 519], ka = [0, 7680, 7681, 7682, 7683, 5386, 34055, 34056], Ga = [32774, 32778, 32779, 32775, 32776], za = [0, 1, 770, 772, 771, 773, 768, 774, 769, 775, 776, 32769, 32770, 32771, 32772];
            !function(t) {
                t[t.BEGIN_RENDER_PASS = 0] = "BEGIN_RENDER_PASS",
                t[t.END_RENDER_PASS = 1] = "END_RENDER_PASS",
                t[t.BIND_STATES = 2] = "BIND_STATES",
                t[t.DRAW = 3] = "DRAW",
                t[t.UPDATE_BUFFER = 4] = "UPDATE_BUFFER",
                t[t.COPY_BUFFER_TO_TEXTURE = 5] = "COPY_BUFFER_TO_TEXTURE",
                t[t.COUNT = 6] = "COUNT"
            }(Fa || (Fa = {}));
            var Ua = function(t) {
                this.cmdType = void 0,
                this.refCount = 0,
                this.cmdType = t
            }
              , Ha = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this, Fa.BEGIN_RENDER_PASS) || this).gpuRenderPass = null,
                    e.gpuFramebuffer = null,
                    e.renderArea = new J,
                    e.clearColors = [],
                    e.clearDepth = 1,
                    e.clearStencil = 0,
                    e
                }
                return qe(e, t),
                e.prototype.clear = function() {
                    this.gpuFramebuffer = null,
                    this.clearColors.length = 0
                }
                ,
                e
            }(Ua)
              , Va = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this, Fa.BIND_STATES) || this).gpuPipelineState = null,
                    e.gpuInputAssembler = null,
                    e.gpuDescriptorSets = [],
                    e.dynamicOffsets = [],
                    e.dynamicStates = new Kt,
                    e
                }
                return qe(e, t),
                e.prototype.clear = function() {
                    this.gpuPipelineState = null,
                    this.gpuInputAssembler = null,
                    this.gpuDescriptorSets.length = 0,
                    this.dynamicOffsets.length = 0
                }
                ,
                e
            }(Ua)
              , Wa = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this, Fa.DRAW) || this).drawInfo = new ct,
                    e
                }
                return qe(e, t),
                e.prototype.clear = function() {}
                ,
                e
            }(Ua)
              , Xa = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this, Fa.UPDATE_BUFFER) || this).gpuBuffer = null,
                    e.buffer = null,
                    e.offset = 0,
                    e.size = 0,
                    e
                }
                return qe(e, t),
                e.prototype.clear = function() {
                    this.gpuBuffer = null,
                    this.buffer = null
                }
                ,
                e
            }(Ua)
              , ja = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this, Fa.COPY_BUFFER_TO_TEXTURE) || this).gpuTexture = null,
                    e.buffers = [],
                    e.regions = [],
                    e
                }
                return qe(e, t),
                e.prototype.clear = function() {
                    this.gpuTexture = null,
                    this.buffers.length = 0,
                    this.regions.length = 0
                }
                ,
                e
            }(Ua)
              , Ya = function() {
                function t() {
                    this.cmds = new r(1),
                    this.beginRenderPassCmds = new r(1),
                    this.bindStatesCmds = new r(1),
                    this.drawCmds = new r(1),
                    this.updateBufferCmds = new r(1),
                    this.copyBufferToTextureCmds = new r(1)
                }
                return t.prototype.clearCmds = function(t) {
                    this.beginRenderPassCmds.length && (t.beginRenderPassCmdPool.freeCmds(this.beginRenderPassCmds),
                    this.beginRenderPassCmds.clear()),
                    this.bindStatesCmds.length && (t.bindStatesCmdPool.freeCmds(this.bindStatesCmds),
                    this.bindStatesCmds.clear()),
                    this.drawCmds.length && (t.drawCmdPool.freeCmds(this.drawCmds),
                    this.drawCmds.clear()),
                    this.updateBufferCmds.length && (t.updateBufferCmdPool.freeCmds(this.updateBufferCmds),
                    this.updateBufferCmds.clear()),
                    this.copyBufferToTextureCmds.length && (t.copyBufferToTextureCmdPool.freeCmds(this.copyBufferToTextureCmds),
                    this.copyBufferToTextureCmds.clear()),
                    this.cmds.clear()
                }
                ,
                t
            }();
            function Ka(t, e, i, r, n) {
                if (e.usage & f.INDIRECT) {
                    e.indirects.clearDraws();
                    for (var s = i.drawInfos, a = 0; a < s.length; ++a)
                        e.indirects.setDrawInfo(r + a, s[a])
                } else {
                    var o = i
                      , l = t.gl
                      , h = t.stateCache;
                    switch (e.glTarget) {
                    case l.ARRAY_BUFFER:
                        t.extensions.useVAO && h.glVAO && (l.bindVertexArray(null),
                        h.glVAO = null),
                        Ja.gpuInputAssembler = null,
                        h.glArrayBuffer !== e.glBuffer && (l.bindBuffer(l.ARRAY_BUFFER, e.glBuffer),
                        h.glArrayBuffer = e.glBuffer),
                        n === o.byteLength ? l.bufferSubData(e.glTarget, r, o) : l.bufferSubData(e.glTarget, r, o.slice(0, n));
                        break;
                    case l.ELEMENT_ARRAY_BUFFER:
                        t.extensions.useVAO && h.glVAO && (l.bindVertexArray(null),
                        h.glVAO = null),
                        Ja.gpuInputAssembler = null,
                        h.glElementArrayBuffer !== e.glBuffer && (l.bindBuffer(l.ELEMENT_ARRAY_BUFFER, e.glBuffer),
                        h.glElementArrayBuffer = e.glBuffer),
                        n === o.byteLength ? l.bufferSubData(e.glTarget, r, o) : l.bufferSubData(e.glTarget, r, o.slice(0, n));
                        break;
                    case l.UNIFORM_BUFFER:
                        h.glUniformBuffer !== e.glBuffer && (l.bindBuffer(l.UNIFORM_BUFFER, e.glBuffer),
                        h.glUniformBuffer = e.glBuffer),
                        n === o.byteLength ? l.bufferSubData(e.glTarget, r, o) : l.bufferSubData(e.glTarget, r, new Float32Array(o,0,n / 4));
                        break;
                    default:
                        console.error("Unsupported BufferType, update buffer failed.")
                    }
                }
            }
            function Za(t, e) {
                var i = t.gl;
                e.glInternalFmt = function(t, e) {
                    switch (t) {
                    case _.A8:
                        return e.ALPHA;
                    case _.L8:
                        return e.LUMINANCE;
                    case _.LA8:
                        return e.LUMINANCE_ALPHA;
                    case _.R8:
                        return e.R8;
                    case _.R8SN:
                        return e.R8_SNORM;
                    case _.R8UI:
                        return e.R8UI;
                    case _.R8I:
                        return e.R8I;
                    case _.RG8:
                        return e.RG8;
                    case _.RG8SN:
                        return e.RG8_SNORM;
                    case _.RG8UI:
                        return e.RG8UI;
                    case _.RG8I:
                        return e.RG8I;
                    case _.RGB8:
                        return e.RGB8;
                    case _.RGB8SN:
                        return e.RGB8_SNORM;
                    case _.RGB8UI:
                        return e.RGB8UI;
                    case _.RGB8I:
                        return e.RGB8I;
                    case _.BGRA8:
                    case _.RGBA8:
                        return e.RGBA8;
                    case _.RGBA8SN:
                        return e.RGBA8_SNORM;
                    case _.RGBA8UI:
                        return e.RGBA8UI;
                    case _.RGBA8I:
                        return e.RGBA8I;
                    case _.R16I:
                        return e.R16I;
                    case _.R16UI:
                        return e.R16UI;
                    case _.R16F:
                        return e.R16F;
                    case _.RG16I:
                        return e.RG16I;
                    case _.RG16UI:
                        return e.RG16UI;
                    case _.RG16F:
                        return e.RG16F;
                    case _.RGB16I:
                        return e.RGB16I;
                    case _.RGB16UI:
                        return e.RGB16UI;
                    case _.RGB16F:
                        return e.RGB16F;
                    case _.RGBA16I:
                        return e.RGBA16I;
                    case _.RGBA16UI:
                        return e.RGBA16UI;
                    case _.RGBA16F:
                        return e.RGBA16F;
                    case _.R32I:
                        return e.R32I;
                    case _.R32UI:
                        return e.R32UI;
                    case _.R32F:
                        return e.R32F;
                    case _.RG32I:
                        return e.RG32I;
                    case _.RG32UI:
                        return e.RG32UI;
                    case _.RG32F:
                        return e.RG32F;
                    case _.RGB32I:
                        return e.RGB32I;
                    case _.RGB32UI:
                        return e.RGB32UI;
                    case _.RGB32F:
                        return e.RGB32F;
                    case _.RGBA32I:
                        return e.RGBA32I;
                    case _.RGBA32UI:
                        return e.RGBA32UI;
                    case _.RGBA32F:
                        return e.RGBA32F;
                    case _.R5G6B5:
                        return e.RGB565;
                    case _.RGB5A1:
                        return e.RGB5_A1;
                    case _.RGBA4:
                        return e.RGBA4;
                    case _.SRGB8:
                        return e.SRGB8;
                    case _.SRGB8_A8:
                        return e.SRGB8_ALPHA8;
                    case _.RGB10A2:
                        return e.RGB10_A2;
                    case _.RGB10A2UI:
                        return e.RGB10_A2UI;
                    case _.R11G11B10F:
                        return e.R11F_G11F_B10F;
                    case _.DEPTH:
                        return e.DEPTH_COMPONENT32F;
                    case _.DEPTH_STENCIL:
                        return e.DEPTH24_STENCIL8;
                    case _.BC1:
                        return Ra.COMPRESSED_RGB_S3TC_DXT1_EXT;
                    case _.BC1_ALPHA:
                        return Ra.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                    case _.BC1_SRGB:
                        return Ra.COMPRESSED_SRGB_S3TC_DXT1_EXT;
                    case _.BC1_SRGB_ALPHA:
                        return Ra.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
                    case _.BC2:
                        return Ra.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                    case _.BC2_SRGB:
                        return Ra.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
                    case _.BC3:
                        return Ra.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                    case _.BC3_SRGB:
                        return Ra.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
                    case _.ETC_RGB8:
                        return Ra.COMPRESSED_RGB_ETC1_WEBGL;
                    case _.ETC2_RGB8:
                        return Ra.COMPRESSED_RGB8_ETC2;
                    case _.ETC2_SRGB8:
                        return Ra.COMPRESSED_SRGB8_ETC2;
                    case _.ETC2_RGB8_A1:
                        return Ra.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;
                    case _.ETC2_SRGB8_A1:
                        return Ra.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;
                    case _.ETC2_RGBA8:
                        return Ra.COMPRESSED_RGBA8_ETC2_EAC;
                    case _.ETC2_SRGB8_A8:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;
                    case _.EAC_R11:
                        return Ra.COMPRESSED_R11_EAC;
                    case _.EAC_R11SN:
                        return Ra.COMPRESSED_SIGNED_R11_EAC;
                    case _.EAC_RG11:
                        return Ra.COMPRESSED_RG11_EAC;
                    case _.EAC_RG11SN:
                        return Ra.COMPRESSED_SIGNED_RG11_EAC;
                    case _.PVRTC_RGB2:
                        return Ra.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                    case _.PVRTC_RGBA2:
                        return Ra.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                    case _.PVRTC_RGB4:
                        return Ra.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                    case _.PVRTC_RGBA4:
                        return Ra.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                    case _.ASTC_RGBA_4X4:
                        return Ra.COMPRESSED_RGBA_ASTC_4x4_KHR;
                    case _.ASTC_RGBA_5X4:
                        return Ra.COMPRESSED_RGBA_ASTC_5x4_KHR;
                    case _.ASTC_RGBA_5X5:
                        return Ra.COMPRESSED_RGBA_ASTC_5x5_KHR;
                    case _.ASTC_RGBA_6X5:
                        return Ra.COMPRESSED_RGBA_ASTC_6x5_KHR;
                    case _.ASTC_RGBA_6X6:
                        return Ra.COMPRESSED_RGBA_ASTC_6x6_KHR;
                    case _.ASTC_RGBA_8X5:
                        return Ra.COMPRESSED_RGBA_ASTC_8x5_KHR;
                    case _.ASTC_RGBA_8X6:
                        return Ra.COMPRESSED_RGBA_ASTC_8x6_KHR;
                    case _.ASTC_RGBA_8X8:
                        return Ra.COMPRESSED_RGBA_ASTC_8x8_KHR;
                    case _.ASTC_RGBA_10X5:
                        return Ra.COMPRESSED_RGBA_ASTC_10x5_KHR;
                    case _.ASTC_RGBA_10X6:
                        return Ra.COMPRESSED_RGBA_ASTC_10x6_KHR;
                    case _.ASTC_RGBA_10X8:
                        return Ra.COMPRESSED_RGBA_ASTC_10x8_KHR;
                    case _.ASTC_RGBA_10X10:
                        return Ra.COMPRESSED_RGBA_ASTC_10x10_KHR;
                    case _.ASTC_RGBA_12X10:
                        return Ra.COMPRESSED_RGBA_ASTC_12x10_KHR;
                    case _.ASTC_RGBA_12X12:
                        return Ra.COMPRESSED_RGBA_ASTC_12x12_KHR;
                    case _.ASTC_SRGBA_4X4:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;
                    case _.ASTC_SRGBA_5X4:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;
                    case _.ASTC_SRGBA_5X5:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;
                    case _.ASTC_SRGBA_6X5:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;
                    case _.ASTC_SRGBA_6X6:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;
                    case _.ASTC_SRGBA_8X5:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;
                    case _.ASTC_SRGBA_8X6:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;
                    case _.ASTC_SRGBA_8X8:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;
                    case _.ASTC_SRGBA_10X5:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;
                    case _.ASTC_SRGBA_10X6:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;
                    case _.ASTC_SRGBA_10X8:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;
                    case _.ASTC_SRGBA_10X10:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;
                    case _.ASTC_SRGBA_12X10:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;
                    case _.ASTC_SRGBA_12X12:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;
                    default:
                        return console.error("Unsupported Format, convert to WebGL internal format failed."),
                        e.RGBA
                    }
                }(e.format, i),
                e.glFormat = function(t, e) {
                    switch (t) {
                    case _.A8:
                        return e.ALPHA;
                    case _.L8:
                        return e.LUMINANCE;
                    case _.LA8:
                        return e.LUMINANCE_ALPHA;
                    case _.R8:
                    case _.R8SN:
                        return e.RED;
                    case _.R8UI:
                    case _.R8I:
                        return e.RED;
                    case _.RG8:
                    case _.RG8SN:
                    case _.RG8UI:
                    case _.RG8I:
                        return e.RG;
                    case _.RGB8:
                    case _.RGB8SN:
                    case _.RGB8UI:
                    case _.RGB8I:
                        return e.RGB;
                    case _.BGRA8:
                    case _.RGBA8:
                    case _.RGBA8SN:
                    case _.RGBA8UI:
                    case _.RGBA8I:
                        return e.RGBA;
                    case _.R16UI:
                    case _.R16I:
                    case _.R16F:
                        return e.RED;
                    case _.RG16UI:
                    case _.RG16I:
                    case _.RG16F:
                        return e.RG;
                    case _.RGB16UI:
                    case _.RGB16I:
                    case _.RGB16F:
                        return e.RGB;
                    case _.RGBA16UI:
                    case _.RGBA16I:
                    case _.RGBA16F:
                        return e.RGBA;
                    case _.R32UI:
                    case _.R32I:
                    case _.R32F:
                        return e.RED;
                    case _.RG32UI:
                    case _.RG32I:
                    case _.RG32F:
                        return e.RG;
                    case _.RGB32UI:
                    case _.RGB32I:
                    case _.RGB32F:
                        return e.RGB;
                    case _.RGBA32UI:
                    case _.RGBA32I:
                    case _.RGBA32F:
                    case _.RGB10A2:
                        return e.RGBA;
                    case _.R11G11B10F:
                    case _.R5G6B5:
                        return e.RGB;
                    case _.RGB5A1:
                    case _.RGBA4:
                        return e.RGBA;
                    case _.SRGB8:
                        return e.RGB;
                    case _.SRGB8_A8:
                        return e.RGBA;
                    case _.DEPTH:
                        return e.DEPTH_COMPONENT;
                    case _.DEPTH_STENCIL:
                        return e.DEPTH_STENCIL;
                    case _.BC1:
                        return Ra.COMPRESSED_RGB_S3TC_DXT1_EXT;
                    case _.BC1_ALPHA:
                        return Ra.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                    case _.BC1_SRGB:
                        return Ra.COMPRESSED_SRGB_S3TC_DXT1_EXT;
                    case _.BC1_SRGB_ALPHA:
                        return Ra.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
                    case _.BC2:
                        return Ra.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                    case _.BC2_SRGB:
                        return Ra.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
                    case _.BC3:
                        return Ra.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                    case _.BC3_SRGB:
                        return Ra.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
                    case _.ETC_RGB8:
                        return Ra.COMPRESSED_RGB_ETC1_WEBGL;
                    case _.ETC2_RGB8:
                        return Ra.COMPRESSED_RGB8_ETC2;
                    case _.ETC2_SRGB8:
                        return Ra.COMPRESSED_SRGB8_ETC2;
                    case _.ETC2_RGB8_A1:
                        return Ra.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;
                    case _.ETC2_SRGB8_A1:
                        return Ra.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;
                    case _.ETC2_RGBA8:
                        return Ra.COMPRESSED_RGBA8_ETC2_EAC;
                    case _.ETC2_SRGB8_A8:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;
                    case _.EAC_R11:
                        return Ra.COMPRESSED_R11_EAC;
                    case _.EAC_R11SN:
                        return Ra.COMPRESSED_SIGNED_R11_EAC;
                    case _.EAC_RG11:
                        return Ra.COMPRESSED_RG11_EAC;
                    case _.EAC_RG11SN:
                        return Ra.COMPRESSED_SIGNED_RG11_EAC;
                    case _.PVRTC_RGB2:
                        return Ra.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                    case _.PVRTC_RGBA2:
                        return Ra.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                    case _.PVRTC_RGB4:
                        return Ra.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                    case _.PVRTC_RGBA4:
                        return Ra.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                    case _.ASTC_RGBA_4X4:
                        return Ra.COMPRESSED_RGBA_ASTC_4x4_KHR;
                    case _.ASTC_RGBA_5X4:
                        return Ra.COMPRESSED_RGBA_ASTC_5x4_KHR;
                    case _.ASTC_RGBA_5X5:
                        return Ra.COMPRESSED_RGBA_ASTC_5x5_KHR;
                    case _.ASTC_RGBA_6X5:
                        return Ra.COMPRESSED_RGBA_ASTC_6x5_KHR;
                    case _.ASTC_RGBA_6X6:
                        return Ra.COMPRESSED_RGBA_ASTC_6x6_KHR;
                    case _.ASTC_RGBA_8X5:
                        return Ra.COMPRESSED_RGBA_ASTC_8x5_KHR;
                    case _.ASTC_RGBA_8X6:
                        return Ra.COMPRESSED_RGBA_ASTC_8x6_KHR;
                    case _.ASTC_RGBA_8X8:
                        return Ra.COMPRESSED_RGBA_ASTC_8x8_KHR;
                    case _.ASTC_RGBA_10X5:
                        return Ra.COMPRESSED_RGBA_ASTC_10x5_KHR;
                    case _.ASTC_RGBA_10X6:
                        return Ra.COMPRESSED_RGBA_ASTC_10x6_KHR;
                    case _.ASTC_RGBA_10X8:
                        return Ra.COMPRESSED_RGBA_ASTC_10x8_KHR;
                    case _.ASTC_RGBA_10X10:
                        return Ra.COMPRESSED_RGBA_ASTC_10x10_KHR;
                    case _.ASTC_RGBA_12X10:
                        return Ra.COMPRESSED_RGBA_ASTC_12x10_KHR;
                    case _.ASTC_RGBA_12X12:
                        return Ra.COMPRESSED_RGBA_ASTC_12x12_KHR;
                    case _.ASTC_SRGBA_4X4:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;
                    case _.ASTC_SRGBA_5X4:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;
                    case _.ASTC_SRGBA_5X5:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;
                    case _.ASTC_SRGBA_6X5:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;
                    case _.ASTC_SRGBA_6X6:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;
                    case _.ASTC_SRGBA_8X5:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;
                    case _.ASTC_SRGBA_8X6:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;
                    case _.ASTC_SRGBA_8X8:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;
                    case _.ASTC_SRGBA_10X5:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;
                    case _.ASTC_SRGBA_10X6:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;
                    case _.ASTC_SRGBA_10X8:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;
                    case _.ASTC_SRGBA_10X10:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;
                    case _.ASTC_SRGBA_12X10:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;
                    case _.ASTC_SRGBA_12X12:
                        return Ra.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;
                    default:
                        return console.error("Unsupported Format, convert to WebGL format failed."),
                        e.RGBA
                    }
                }(e.format, i),
                e.glType = Oa(e.format, i);
                var r = e.width
                  , n = e.height;
                switch (e.type) {
                case v.TEX2D:
                    if (e.glTarget = i.TEXTURE_2D,
                    e.isSwapchainTexture)
                        break;
                    var s = Math.max(r, n);
                    if (s > t.capabilities.maxTextureSize && Qe(9100, s, t.capabilities.maxTextureSize),
                    e.samples === b.ONE) {
                        if (e.glTexture = i.createTexture(),
                        e.size > 0) {
                            var a = t.stateCache.glTexUnits[t.stateCache.texUnit];
                            if (a.glTexture !== e.glTexture && (i.bindTexture(i.TEXTURE_2D, e.glTexture),
                            a.glTexture = e.glTexture),
                            Jt[e.format].isCompressed)
                                for (var o = 0; o < e.mipLevel; ++o) {
                                    var l = re(e.format, r, n, 1)
                                      , h = new Uint8Array(l);
                                    i.compressedTexImage2D(i.TEXTURE_2D, o, e.glInternalFmt, r, n, 0, h),
                                    r = Math.max(1, r >> 1),
                                    n = Math.max(1, n >> 1)
                                }
                            else
                                i.texStorage2D(i.TEXTURE_2D, e.mipLevel, e.glInternalFmt, r, n)
                        }
                    } else
                        e.glRenderbuffer = i.createRenderbuffer(),
                        e.size > 0 && (t.stateCache.glRenderbuffer !== e.glRenderbuffer && (i.bindRenderbuffer(i.RENDERBUFFER, e.glRenderbuffer),
                        t.stateCache.glRenderbuffer = e.glRenderbuffer),
                        i.renderbufferStorageMultisample(i.RENDERBUFFER, e.samples, e.glInternalFmt, e.width, e.height));
                    break;
                case v.CUBE:
                    e.glTarget = i.TEXTURE_CUBE_MAP;
                    var u = Math.max(r, n);
                    if (u > t.capabilities.maxCubeMapTextureSize && Qe(9100, u, t.capabilities.maxTextureSize),
                    e.glTexture = i.createTexture(),
                    e.size > 0) {
                        var c = t.stateCache.glTexUnits[t.stateCache.texUnit];
                        if (c.glTexture !== e.glTexture && (i.bindTexture(i.TEXTURE_CUBE_MAP, e.glTexture),
                        c.glTexture = e.glTexture),
                        Jt[e.format].isCompressed)
                            for (var d = 0; d < e.mipLevel; ++d) {
                                for (var p = re(e.format, r, n, 1), f = new Uint8Array(p), g = 0; g < 6; ++g)
                                    i.compressedTexImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + g, d, e.glInternalFmt, r, n, 0, f);
                                r = Math.max(1, r >> 1),
                                n = Math.max(1, n >> 1)
                            }
                        else
                            i.texStorage2D(i.TEXTURE_CUBE_MAP, e.mipLevel, e.glInternalFmt, r, n)
                    }
                    break;
                default:
                    console.error("Unsupported TextureType, create texture failed."),
                    e.type = v.TEX2D,
                    e.glTarget = i.TEXTURE_2D
                }
            }
            function qa(t, e) {
                e.glTexture && (t.gl.deleteTexture(e.glTexture),
                e.glTexture = null),
                e.glRenderbuffer && (t.gl.deleteRenderbuffer(e.glRenderbuffer),
                e.glRenderbuffer = null)
            }
            var Ja = {
                gpuPipelineState: null,
                gpuInputAssembler: null,
                glPrimitive: 0,
                invalidateAttachments: []
            };
            function Qa(t, e, i, r, n, s, a) {
                var o = t.gl
                  , l = t.stateCache
                  , h = 0;
                if (i && e) {
                    l.glFramebuffer !== i.glFramebuffer && (o.bindFramebuffer(o.FRAMEBUFFER, i.glFramebuffer),
                    l.glFramebuffer = i.glFramebuffer),
                    l.viewport.left === r.x && l.viewport.top === r.y && l.viewport.width === r.width && l.viewport.height === r.height || (o.viewport(r.x, r.y, r.width, r.height),
                    l.viewport.left = r.x,
                    l.viewport.top = r.y,
                    l.viewport.width = r.width,
                    l.viewport.height = r.height),
                    l.scissorRect.x === r.x && l.scissorRect.y === r.y && l.scissorRect.width === r.width && l.scissorRect.height === r.height || (o.scissor(r.x, r.y, r.width, r.height),
                    l.scissorRect.x = r.x,
                    l.scissorRect.y = r.y,
                    l.scissorRect.width = r.width,
                    l.scissorRect.height = r.height),
                    Ja.invalidateAttachments.length = 0;
                    for (var u = 0; u < n.length; ++u) {
                        var c = e.colorAttachments[u];
                        if (c.format !== _.UNKNOWN)
                            switch (c.loadOp) {
                            case P.LOAD:
                                break;
                            case P.CLEAR:
                                if (l.bs.targets[0].blendColorMask !== w.ALL && o.colorMask(!0, !0, !0, !0),
                                i.isOffscreen)
                                    wa[0] = n[u].x,
                                    wa[1] = n[u].y,
                                    wa[2] = n[u].z,
                                    wa[3] = n[u].w,
                                    o.clearBufferfv(o.COLOR, u, wa);
                                else {
                                    var d = n[0];
                                    o.clearColor(d.x, d.y, d.z, d.w),
                                    h |= o.COLOR_BUFFER_BIT
                                }
                                break;
                            case P.DISCARD:
                                Ja.invalidateAttachments.push(o.COLOR_ATTACHMENT0 + u)
                            }
                    }
                    if (e.depthStencilAttachment && e.depthStencilAttachment.format !== _.UNKNOWN) {
                        switch (e.depthStencilAttachment.depthLoadOp) {
                        case P.LOAD:
                            break;
                        case P.CLEAR:
                            l.dss.depthWrite || o.depthMask(!0),
                            o.clearDepth(s),
                            h |= o.DEPTH_BUFFER_BIT;
                            break;
                        case P.DISCARD:
                            Ja.invalidateAttachments.push(o.DEPTH_ATTACHMENT)
                        }
                        if (Jt[e.depthStencilAttachment.format].hasStencil)
                            switch (e.depthStencilAttachment.stencilLoadOp) {
                            case P.LOAD:
                                break;
                            case P.CLEAR:
                                l.dss.stencilWriteMaskFront || o.stencilMaskSeparate(o.FRONT, 65535),
                                l.dss.stencilWriteMaskBack || o.stencilMaskSeparate(o.BACK, 65535),
                                o.clearStencil(a),
                                h |= o.STENCIL_BUFFER_BIT;
                                break;
                            case P.DISCARD:
                                Ja.invalidateAttachments.push(o.STENCIL_ATTACHMENT)
                            }
                    }
                    if (i.glFramebuffer && Ja.invalidateAttachments.length && o.invalidateFramebuffer(o.FRAMEBUFFER, Ja.invalidateAttachments),
                    h && o.clear(h),
                    h & o.COLOR_BUFFER_BIT) {
                        var p = l.bs.targets[0].blendColorMask;
                        if (p !== w.ALL) {
                            var f = (p & w.R) !== w.NONE
                              , g = (p & w.G) !== w.NONE
                              , m = (p & w.B) !== w.NONE
                              , y = (p & w.A) !== w.NONE;
                            o.colorMask(f, g, m, y)
                        }
                    }
                    h & o.DEPTH_BUFFER_BIT && !l.dss.depthWrite && o.depthMask(!1),
                    h & o.STENCIL_BUFFER_BIT && (l.dss.stencilWriteMaskFront || o.stencilMaskSeparate(o.FRONT, 0),
                    l.dss.stencilWriteMaskBack || o.stencilMaskSeparate(o.BACK, 0))
                }
            }
            function $a(t, e, i, r, n, s) {
                var a = t.gl
                  , o = t.stateCache
                  , l = e && e.gpuShader
                  , h = !1;
                if (e && Ja.gpuPipelineState !== e) {
                    if (Ja.gpuPipelineState = e,
                    Ja.glPrimitive = e.glPrimitive,
                    l) {
                        var u = l.glProgram;
                        o.glProgram !== u && (a.useProgram(u),
                        o.glProgram = u,
                        h = !0)
                    }
                    var c = e.rs;
                    if (c) {
                        if (o.rs.cullMode !== c.cullMode) {
                            switch (c.cullMode) {
                            case z.NONE:
                                a.disable(a.CULL_FACE);
                                break;
                            case z.FRONT:
                                a.enable(a.CULL_FACE),
                                a.cullFace(a.FRONT);
                                break;
                            case z.BACK:
                                a.enable(a.CULL_FACE),
                                a.cullFace(a.BACK)
                            }
                            t.stateCache.rs.cullMode = c.cullMode
                        }
                        var _ = c.isFrontFaceCCW;
                        t.stateCache.rs.isFrontFaceCCW !== _ && (a.frontFace(_ ? a.CCW : a.CW),
                        t.stateCache.rs.isFrontFaceCCW = _),
                        t.stateCache.rs.depthBias === c.depthBias && t.stateCache.rs.depthBiasSlop === c.depthBiasSlop || (a.polygonOffset(c.depthBias, c.depthBiasSlop),
                        t.stateCache.rs.depthBias = c.depthBias,
                        t.stateCache.rs.depthBiasSlop = c.depthBiasSlop),
                        t.stateCache.rs.lineWidth !== c.lineWidth && (a.lineWidth(c.lineWidth),
                        t.stateCache.rs.lineWidth = c.lineWidth)
                    }
                    var d = e.dss;
                    d && (o.dss.depthTest !== d.depthTest && (d.depthTest ? a.enable(a.DEPTH_TEST) : a.disable(a.DEPTH_TEST),
                    o.dss.depthTest = d.depthTest),
                    o.dss.depthWrite !== d.depthWrite && (a.depthMask(d.depthWrite),
                    o.dss.depthWrite = d.depthWrite),
                    o.dss.depthFunc !== d.depthFunc && (a.depthFunc(Na[d.depthFunc]),
                    o.dss.depthFunc = d.depthFunc),
                    o.dss.stencilTestFront === d.stencilTestFront && o.dss.stencilTestBack === d.stencilTestBack || (d.stencilTestFront || d.stencilTestBack ? a.enable(a.STENCIL_TEST) : a.disable(a.STENCIL_TEST),
                    o.dss.stencilTestFront = d.stencilTestFront,
                    o.dss.stencilTestBack = d.stencilTestBack),
                    o.dss.stencilFuncFront === d.stencilFuncFront && o.dss.stencilRefFront === d.stencilRefFront && o.dss.stencilReadMaskFront === d.stencilReadMaskFront || (a.stencilFuncSeparate(a.FRONT, Na[d.stencilFuncFront], d.stencilRefFront, d.stencilReadMaskFront),
                    o.dss.stencilFuncFront = d.stencilFuncFront,
                    o.dss.stencilRefFront = d.stencilRefFront,
                    o.dss.stencilReadMaskFront = d.stencilReadMaskFront),
                    o.dss.stencilFailOpFront === d.stencilFailOpFront && o.dss.stencilZFailOpFront === d.stencilZFailOpFront && o.dss.stencilPassOpFront === d.stencilPassOpFront || (a.stencilOpSeparate(a.FRONT, ka[d.stencilFailOpFront], ka[d.stencilZFailOpFront], ka[d.stencilPassOpFront]),
                    o.dss.stencilFailOpFront = d.stencilFailOpFront,
                    o.dss.stencilZFailOpFront = d.stencilZFailOpFront,
                    o.dss.stencilPassOpFront = d.stencilPassOpFront),
                    o.dss.stencilWriteMaskFront !== d.stencilWriteMaskFront && (a.stencilMaskSeparate(a.FRONT, d.stencilWriteMaskFront),
                    o.dss.stencilWriteMaskFront = d.stencilWriteMaskFront),
                    o.dss.stencilFuncBack === d.stencilFuncBack && o.dss.stencilRefBack === d.stencilRefBack && o.dss.stencilReadMaskBack === d.stencilReadMaskBack || (a.stencilFuncSeparate(a.BACK, Na[d.stencilFuncBack], d.stencilRefBack, d.stencilReadMaskBack),
                    o.dss.stencilFuncBack = d.stencilFuncBack,
                    o.dss.stencilRefBack = d.stencilRefBack,
                    o.dss.stencilReadMaskBack = d.stencilReadMaskBack),
                    o.dss.stencilFailOpBack === d.stencilFailOpBack && o.dss.stencilZFailOpBack === d.stencilZFailOpBack && o.dss.stencilPassOpBack === d.stencilPassOpBack || (a.stencilOpSeparate(a.BACK, ka[d.stencilFailOpBack], ka[d.stencilZFailOpBack], ka[d.stencilPassOpBack]),
                    o.dss.stencilFailOpBack = d.stencilFailOpBack,
                    o.dss.stencilZFailOpBack = d.stencilZFailOpBack,
                    o.dss.stencilPassOpBack = d.stencilPassOpBack),
                    o.dss.stencilWriteMaskBack !== d.stencilWriteMaskBack && (a.stencilMaskSeparate(a.BACK, d.stencilWriteMaskBack),
                    o.dss.stencilWriteMaskBack = d.stencilWriteMaskBack));
                    var p = e.bs;
                    if (p) {
                        o.bs.isA2C !== p.isA2C && (p.isA2C ? a.enable(a.SAMPLE_ALPHA_TO_COVERAGE) : a.disable(a.SAMPLE_ALPHA_TO_COVERAGE),
                        o.bs.isA2C = p.isA2C),
                        o.bs.blendColor.x === p.blendColor.x && o.bs.blendColor.y === p.blendColor.y && o.bs.blendColor.z === p.blendColor.z && o.bs.blendColor.w === p.blendColor.w || (a.blendColor(p.blendColor.x, p.blendColor.y, p.blendColor.z, p.blendColor.w),
                        o.bs.blendColor.x = p.blendColor.x,
                        o.bs.blendColor.y = p.blendColor.y,
                        o.bs.blendColor.z = p.blendColor.z,
                        o.bs.blendColor.w = p.blendColor.w);
                        var f = p.targets[0]
                          , g = o.bs.targets[0];
                        g.blend !== f.blend && (f.blend ? a.enable(a.BLEND) : a.disable(a.BLEND),
                        g.blend = f.blend),
                        g.blendEq === f.blendEq && g.blendAlphaEq === f.blendAlphaEq || (a.blendEquationSeparate(Ga[f.blendEq], Ga[f.blendAlphaEq]),
                        g.blendEq = f.blendEq,
                        g.blendAlphaEq = f.blendAlphaEq),
                        g.blendSrc === f.blendSrc && g.blendDst === f.blendDst && g.blendSrcAlpha === f.blendSrcAlpha && g.blendDstAlpha === f.blendDstAlpha || (a.blendFuncSeparate(za[f.blendSrc], za[f.blendDst], za[f.blendSrcAlpha], za[f.blendDstAlpha]),
                        g.blendSrc = f.blendSrc,
                        g.blendDst = f.blendDst,
                        g.blendSrcAlpha = f.blendSrcAlpha,
                        g.blendDstAlpha = f.blendDstAlpha),
                        g.blendColorMask !== f.blendColorMask && (a.colorMask((f.blendColorMask & w.R) !== w.NONE, (f.blendColorMask & w.G) !== w.NONE, (f.blendColorMask & w.B) !== w.NONE, (f.blendColorMask & w.A) !== w.NONE),
                        g.blendColorMask = f.blendColorMask)
                    }
                }
                if (e && e.gpuPipelineLayout && l) {
                    for (var m = l.glBlocks.length, y = e.gpuPipelineLayout.dynamicOffsetIndices, v = 0; v < m; v++) {
                        var S = l.glBlocks[v]
                          , T = r[S.set]
                          , b = T && T.descriptorIndices[S.binding]
                          , E = b >= 0 && T.gpuDescriptors[b];
                        if (E && E.gpuBuffer) {
                            var A = y[S.set]
                              , C = A && A[S.binding]
                              , R = E.gpuBuffer.glOffset;
                            C >= 0 && (R += n[C]),
                            o.glBindUBOs[S.glBinding] === E.gpuBuffer.glBuffer && o.glBindUBOOffsets[S.glBinding] === R || (R ? a.bindBufferRange(a.UNIFORM_BUFFER, S.glBinding, E.gpuBuffer.glBuffer, R, E.gpuBuffer.size) : a.bindBufferBase(a.UNIFORM_BUFFER, S.glBinding, E.gpuBuffer.glBuffer),
                            o.glUniformBuffer = o.glBindUBOs[S.glBinding] = E.gpuBuffer.glBuffer,
                            o.glBindUBOOffsets[S.glBinding] = R)
                        } else
                            ti("Buffer binding '" + S.name + "' at set " + S.set + " binding " + S.binding + " is not bounded")
                    }
                    for (var B = l.glSamplerTextures.length, x = 0; x < B; x++)
                        for (var D = l.glSamplerTextures[x], O = r[D.set], P = O && O.descriptorIndices[D.binding], M = P >= 0 && O.gpuDescriptors[P], I = 0; I < D.units.length; I++) {
                            var L = D.units[I]
                              , F = o.glTexUnits[L];
                            if (M && M.gpuTexture && M.gpuSampler) {
                                if (M.gpuTexture && M.gpuTexture.size > 0) {
                                    var N = M.gpuTexture;
                                    F.glTexture !== N.glTexture && (o.texUnit !== L && (a.activeTexture(a.TEXTURE0 + L),
                                    o.texUnit = L),
                                    N.glTexture ? a.bindTexture(N.glTarget, N.glTexture) : a.bindTexture(N.glTarget, t.nullTex2D.gpuTexture.glTexture),
                                    F.glTexture = N.glTexture);
                                    var k = M.gpuSampler;
                                    o.glSamplerUnits[L] !== k.glSampler && (a.bindSampler(L, k.glSampler),
                                    o.glSamplerUnits[L] = k.glSampler)
                                }
                                M = O.gpuDescriptors[++P]
                            } else
                                ti("Sampler binding '" + D.name + "' at set " + D.set + " binding " + D.binding + " index " + I + " is not bounded")
                        }
                }
                if (i && l && (h || Ja.gpuInputAssembler !== i))
                    if (Ja.gpuInputAssembler = i,
                    t.extensions.useVAO) {
                        var G = i.glVAOs.get(l.glProgram);
                        if (!G) {
                            var H;
                            G = a.createVertexArray(),
                            i.glVAOs.set(l.glProgram, G),
                            a.bindVertexArray(G),
                            a.bindBuffer(a.ARRAY_BUFFER, null),
                            a.bindBuffer(a.ELEMENT_ARRAY_BUFFER, null),
                            o.glArrayBuffer = null,
                            o.glElementArrayBuffer = null;
                            for (var V = 0; V < l.glInputs.length; V++) {
                                var W = l.glInputs[V];
                                H = null;
                                for (var X = 0; X < i.glAttribs.length; X++) {
                                    var j = i.glAttribs[X];
                                    if (j.name === W.name) {
                                        H = j;
                                        break
                                    }
                                }
                                if (H) {
                                    o.glArrayBuffer !== H.glBuffer && (a.bindBuffer(a.ARRAY_BUFFER, H.glBuffer),
                                    o.glArrayBuffer = H.glBuffer);
                                    for (var Y = 0; Y < H.componentCount; ++Y) {
                                        var K = W.glLoc + Y
                                          , Z = H.offset + H.size * Y;
                                        a.enableVertexAttribArray(K),
                                        o.glCurrentAttribLocs[K] = !0,
                                        a.vertexAttribPointer(K, H.count, H.glType, H.isNormalized, H.stride, Z),
                                        a.vertexAttribDivisor(K, H.isInstanced ? 1 : 0)
                                    }
                                }
                            }
                            var q = i.gpuIndexBuffer;
                            q && a.bindBuffer(a.ELEMENT_ARRAY_BUFFER, q.glBuffer),
                            a.bindVertexArray(null),
                            a.bindBuffer(a.ARRAY_BUFFER, null),
                            a.bindBuffer(a.ELEMENT_ARRAY_BUFFER, null),
                            o.glArrayBuffer = null,
                            o.glElementArrayBuffer = null
                        }
                        o.glVAO !== G && (a.bindVertexArray(G),
                        o.glVAO = G)
                    } else {
                        for (var J = 0; J < t.capabilities.maxVertexAttributes; ++J)
                            o.glCurrentAttribLocs[J] = !1;
                        for (var Q = 0; Q < l.glInputs.length; Q++) {
                            for (var $ = l.glInputs[Q], tt = null, et = 0; et < i.glAttribs.length; et++) {
                                var it = i.glAttribs[et];
                                if (it.name === $.name) {
                                    tt = it;
                                    break
                                }
                            }
                            if (tt) {
                                o.glArrayBuffer !== tt.glBuffer && (a.bindBuffer(a.ARRAY_BUFFER, tt.glBuffer),
                                o.glArrayBuffer = tt.glBuffer);
                                for (var rt = 0; rt < tt.componentCount; ++rt) {
                                    var nt = $.glLoc + rt
                                      , st = tt.offset + tt.size * rt;
                                    !o.glEnabledAttribLocs[nt] && nt >= 0 && (a.enableVertexAttribArray(nt),
                                    o.glEnabledAttribLocs[nt] = !0),
                                    o.glCurrentAttribLocs[nt] = !0,
                                    a.vertexAttribPointer(nt, tt.count, tt.glType, tt.isNormalized, tt.stride, st),
                                    a.vertexAttribDivisor(nt, tt.isInstanced ? 1 : 0)
                                }
                            }
                        }
                        var at = i.gpuIndexBuffer;
                        at && o.glElementArrayBuffer !== at.glBuffer && (a.bindBuffer(a.ELEMENT_ARRAY_BUFFER, at.glBuffer),
                        o.glElementArrayBuffer = at.glBuffer);
                        for (var ot = 0; ot < t.capabilities.maxVertexAttributes; ++ot)
                            o.glEnabledAttribLocs[ot] !== o.glCurrentAttribLocs[ot] && (a.disableVertexAttribArray(ot),
                            o.glEnabledAttribLocs[ot] = !1)
                    }
                if (e && e.dynamicStates.length)
                    for (var lt = e.dynamicStates.length, ht = 0; ht < lt; ht++)
                        switch (e.dynamicStates[ht]) {
                        case U.LINE_WIDTH:
                            o.rs.lineWidth !== s.lineWidth && (a.lineWidth(s.lineWidth),
                            o.rs.lineWidth = s.lineWidth);
                            break;
                        case U.DEPTH_BIAS:
                            o.rs.depthBias === s.depthBiasConstant && o.rs.depthBiasSlop === s.depthBiasSlope || (a.polygonOffset(s.depthBiasConstant, s.depthBiasSlope),
                            o.rs.depthBias = s.depthBiasConstant,
                            o.rs.depthBiasSlop = s.depthBiasSlope);
                            break;
                        case U.BLEND_CONSTANTS:
                            var ut = s.blendConstant;
                            o.bs.blendColor.x === ut.x && o.bs.blendColor.y === ut.y && o.bs.blendColor.z === ut.z && o.bs.blendColor.w === ut.w || (a.blendColor(ut.x, ut.y, ut.z, ut.w),
                            o.bs.blendColor.copy(ut));
                            break;
                        case U.STENCIL_WRITE_MASK:
                            var ct = s.stencilStatesFront
                              , _t = s.stencilStatesBack;
                            o.dss.stencilWriteMaskFront !== ct.writeMask && (a.stencilMaskSeparate(a.FRONT, ct.writeMask),
                            o.dss.stencilWriteMaskFront = ct.writeMask),
                            o.dss.stencilWriteMaskBack !== _t.writeMask && (a.stencilMaskSeparate(a.BACK, _t.writeMask),
                            o.dss.stencilWriteMaskBack = _t.writeMask);
                            break;
                        case U.STENCIL_COMPARE_MASK:
                            var dt = s.stencilStatesFront
                              , pt = s.stencilStatesBack;
                            o.dss.stencilRefFront === dt.reference && o.dss.stencilReadMaskFront === dt.compareMask || (a.stencilFuncSeparate(a.FRONT, Na[o.dss.stencilFuncFront], dt.reference, dt.compareMask),
                            o.dss.stencilRefFront = dt.reference,
                            o.dss.stencilReadMaskFront = dt.compareMask),
                            o.dss.stencilRefBack === pt.reference && o.dss.stencilReadMaskBack === pt.compareMask || (a.stencilFuncSeparate(a.BACK, Na[o.dss.stencilFuncBack], pt.reference, pt.compareMask),
                            o.dss.stencilRefBack = pt.reference,
                            o.dss.stencilReadMaskBack = pt.compareMask)
                        }
            }
            function to(t, e) {
                var i = t.gl
                  , r = Ja.gpuInputAssembler
                  , n = Ja.glPrimitive
                  , s = t.extensions.WEBGL_multi_draw;
                if (r) {
                    var a = r.gpuIndexBuffer;
                    if (r.gpuIndirectBuffer) {
                        var o = r.gpuIndirectBuffer.indirects;
                        if (o.drawByIndex) {
                            for (var l = 0; l < o.drawCount; l++)
                                o.byteOffsets[l] = o.offsets[l] * a.stride;
                            if (s)
                                o.instancedDraw ? s.multiDrawElementsInstancedWEBGL(n, o.counts, 0, r.glIndexType, o.byteOffsets, 0, o.instances, 0, o.drawCount) : s.multiDrawElementsWEBGL(n, o.counts, 0, r.glIndexType, o.byteOffsets, 0, o.drawCount);
                            else
                                for (var h = 0; h < o.drawCount; h++)
                                    o.instances[h] ? i.drawElementsInstanced(n, o.counts[h], r.glIndexType, o.byteOffsets[h], o.instances[h]) : i.drawElements(n, o.counts[h], r.glIndexType, o.byteOffsets[h])
                        } else if (s)
                            o.instancedDraw ? s.multiDrawArraysInstancedWEBGL(n, o.offsets, 0, o.counts, 0, o.instances, 0, o.drawCount) : s.multiDrawArraysWEBGL(n, o.offsets, 0, o.counts, 0, o.drawCount);
                        else
                            for (var u = 0; u < o.drawCount; u++)
                                o.instances[u] ? i.drawArraysInstanced(n, o.offsets[u], o.counts[u], o.instances[u]) : i.drawArrays(n, o.offsets[u], o.counts[u])
                    } else if (e.instanceCount)
                        if (a) {
                            if (e.indexCount > 0) {
                                var c = e.firstIndex * a.stride;
                                i.drawElementsInstanced(n, e.indexCount, r.glIndexType, c, e.instanceCount)
                            }
                        } else
                            e.vertexCount > 0 && i.drawArraysInstanced(n, e.firstVertex, e.vertexCount, e.instanceCount);
                    else if (a) {
                        if (e.indexCount > 0) {
                            var _ = e.firstIndex * a.stride;
                            i.drawElements(n, e.indexCount, r.glIndexType, _)
                        }
                    } else
                        e.vertexCount > 0 && i.drawArrays(n, e.firstVertex, e.vertexCount)
                }
            }
            var eo = new Array(Fa.COUNT);
            function io(t, e) {
                eo.fill(0);
                for (var i = 0; i < e.cmds.length; ++i) {
                    var r = e.cmds.array[i]
                      , n = eo[r]++;
                    switch (r) {
                    case Fa.BEGIN_RENDER_PASS:
                        var s = e.beginRenderPassCmds.array[n];
                        Qa(t, s.gpuRenderPass, s.gpuFramebuffer, s.renderArea, s.clearColors, s.clearDepth, s.clearStencil);
                        break;
                    case Fa.BIND_STATES:
                        var a = e.bindStatesCmds.array[n];
                        $a(t, a.gpuPipelineState, a.gpuInputAssembler, a.gpuDescriptorSets, a.dynamicOffsets, a.dynamicStates);
                        break;
                    case Fa.DRAW:
                        to(t, e.drawCmds.array[n].drawInfo);
                        break;
                    case Fa.UPDATE_BUFFER:
                        var o = e.updateBufferCmds.array[n];
                        Ka(t, o.gpuBuffer, o.buffer, o.offset, o.size);
                        break;
                    case Fa.COPY_BUFFER_TO_TEXTURE:
                        var l = e.copyBufferToTextureCmds.array[n];
                        ro(t, l.buffers, l.gpuTexture, l.regions)
                    }
                }
            }
            function ro(t, e, i, r) {
                var n = t.gl
                  , s = t.stateCache.glTexUnits[t.stateCache.texUnit];
                s.glTexture !== i.glTexture && (n.bindTexture(i.glTarget, i.glTexture),
                s.glTexture = i.glTexture);
                var a = 0
                  , o = 1
                  , l = 1
                  , h = 0
                  , u = Jt[i.format].isCompressed;
                switch (i.glTarget) {
                case n.TEXTURE_2D:
                    for (var c = 0; c < r.length; c++) {
                        var _ = r[c];
                        o = _.texExtent.width,
                        l = _.texExtent.height;
                        var d = e[a++];
                        u ? i.glInternalFmt !== Ra.COMPRESSED_RGB_ETC1_WEBGL ? n.compressedTexSubImage2D(n.TEXTURE_2D, _.texSubres.mipLevel, _.texOffset.x, _.texOffset.y, o, l, i.glFormat, d) : n.compressedTexImage2D(n.TEXTURE_2D, _.texSubres.mipLevel, i.glInternalFmt, o, l, 0, d) : n.texSubImage2D(n.TEXTURE_2D, _.texSubres.mipLevel, _.texOffset.x, _.texOffset.y, o, l, i.glFormat, i.glType, d)
                    }
                    break;
                case n.TEXTURE_CUBE_MAP:
                    for (var p = 0; p < r.length; p++) {
                        var f = r[p]
                          , g = f.texSubres.baseArrayLayer + f.texSubres.layerCount;
                        for (h = f.texSubres.baseArrayLayer; h < g; ++h) {
                            o = f.texExtent.width,
                            l = f.texExtent.height;
                            var m = e[a++];
                            u ? i.glInternalFmt !== Ra.COMPRESSED_RGB_ETC1_WEBGL ? n.compressedTexSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + h, f.texSubres.mipLevel, f.texOffset.x, f.texOffset.y, o, l, i.glFormat, m) : n.compressedTexImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + h, f.texSubres.mipLevel, i.glInternalFmt, o, l, 0, m) : n.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + h, f.texSubres.mipLevel, f.texOffset.x, f.texOffset.y, o, l, i.glFormat, i.glType, m)
                        }
                    }
                    break;
                default:
                    console.error("Unsupported GL texture type, copy buffer to texture failed.")
                }
                i.flags & T.GEN_MIPMAP && n.generateMipmap(i.glTarget)
            }
            var no = function() {
                function t() {
                    this.counts = void 0,
                    this.offsets = void 0,
                    this.instances = void 0,
                    this.drawCount = 0,
                    this.drawByIndex = !1,
                    this.instancedDraw = !1,
                    this.byteOffsets = void 0,
                    this._capacity = 4,
                    this.counts = new Int32Array(this._capacity),
                    this.offsets = new Int32Array(this._capacity),
                    this.instances = new Int32Array(this._capacity),
                    this.byteOffsets = new Int32Array(this._capacity)
                }
                var e = t.prototype;
                return e.clearDraws = function() {
                    this.drawCount = 0,
                    this.drawByIndex = !1,
                    this.instancedDraw = !1
                }
                ,
                e.setDrawInfo = function(t, e) {
                    this._ensureCapacity(t),
                    this.drawByIndex = e.indexCount > 0,
                    this.instancedDraw = !!e.instanceCount,
                    this.drawCount = Math.max(t + 1, this.drawCount),
                    this.drawByIndex ? (this.counts[t] = e.indexCount,
                    this.offsets[t] = e.firstIndex) : (this.counts[t] = e.vertexCount,
                    this.offsets[t] = e.firstVertex),
                    this.instances[t] = Math.max(1, e.instanceCount)
                }
                ,
                e._ensureCapacity = function(t) {
                    if (!(this._capacity > t)) {
                        this._capacity = ei(t);
                        var e = new Int32Array(this._capacity)
                          , i = new Int32Array(this._capacity)
                          , r = new Int32Array(this._capacity);
                        this.byteOffsets = new Int32Array(this._capacity),
                        e.set(this.counts),
                        i.set(this.offsets),
                        r.set(this.instances),
                        this.counts = e,
                        this.offsets = i,
                        this.instances = r
                    }
                }
                ,
                t
            }()
              , so = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuBuffer = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    if ("buffer"in t) {
                        this._isBufferView = !0;
                        var e = t.buffer;
                        this._usage = e.usage,
                        this._memUsage = e.memUsage,
                        this._size = this._stride = t.range,
                        this._count = 1,
                        this._flags = e.flags,
                        this._gpuBuffer = {
                            usage: this._usage,
                            memUsage: this._memUsage,
                            size: this._size,
                            stride: this._stride,
                            buffer: null,
                            indirects: e.gpuBuffer.indirects,
                            glTarget: e.gpuBuffer.glTarget,
                            glBuffer: e.gpuBuffer.glBuffer,
                            glOffset: t.offset
                        }
                    } else
                        this._usage = t.usage,
                        this._memUsage = t.memUsage,
                        this._size = t.size,
                        this._stride = Math.max(t.stride || this._size, 1),
                        this._count = this._size / this._stride,
                        this._flags = t.flags,
                        this._gpuBuffer = {
                            usage: this._usage,
                            memUsage: this._memUsage,
                            size: this._size,
                            stride: this._stride,
                            buffer: null,
                            indirects: new no,
                            glTarget: 0,
                            glBuffer: null,
                            glOffset: 0
                        },
                        function(t, e) {
                            var i = t.gl
                              , r = t.stateCache
                              , n = e.memUsage & y.HOST ? i.DYNAMIC_DRAW : i.STATIC_DRAW;
                            if (e.usage & f.VERTEX) {
                                e.glTarget = i.ARRAY_BUFFER;
                                var s = i.createBuffer();
                                s && (e.glBuffer = s,
                                e.size > 0 && (t.extensions.useVAO && r.glVAO && (i.bindVertexArray(null),
                                r.glVAO = null),
                                Ja.gpuInputAssembler = null,
                                t.stateCache.glArrayBuffer !== e.glBuffer && (i.bindBuffer(i.ARRAY_BUFFER, e.glBuffer),
                                t.stateCache.glArrayBuffer = e.glBuffer),
                                i.bufferData(i.ARRAY_BUFFER, e.size, n),
                                i.bindBuffer(i.ARRAY_BUFFER, null),
                                t.stateCache.glArrayBuffer = null))
                            } else if (e.usage & f.INDEX) {
                                e.glTarget = i.ELEMENT_ARRAY_BUFFER;
                                var a = i.createBuffer();
                                a && (e.glBuffer = a,
                                e.size > 0 && (t.extensions.useVAO && r.glVAO && (i.bindVertexArray(null),
                                r.glVAO = null),
                                Ja.gpuInputAssembler = null,
                                t.stateCache.glElementArrayBuffer !== e.glBuffer && (i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, e.glBuffer),
                                t.stateCache.glElementArrayBuffer = e.glBuffer),
                                i.bufferData(i.ELEMENT_ARRAY_BUFFER, e.size, n),
                                i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, null),
                                t.stateCache.glElementArrayBuffer = null))
                            } else if (e.usage & f.UNIFORM) {
                                e.glTarget = i.UNIFORM_BUFFER;
                                var o = i.createBuffer();
                                o && e.size > 0 && (e.glBuffer = o,
                                t.stateCache.glUniformBuffer !== e.glBuffer && (i.bindBuffer(i.UNIFORM_BUFFER, e.glBuffer),
                                t.stateCache.glUniformBuffer = e.glBuffer),
                                i.bufferData(i.UNIFORM_BUFFER, e.size, n),
                                i.bindBuffer(i.UNIFORM_BUFFER, null),
                                t.stateCache.glUniformBuffer = null)
                            } else
                                e.usage & f.INDIRECT || e.usage & f.TRANSFER_DST || e.usage & f.TRANSFER_SRC || console.error("Unsupported BufferType, create buffer failed."),
                                e.glTarget = i.NONE
                        }(xa.instance, this._gpuBuffer),
                        xa.instance.memoryStatus.bufferSize += this._size
                }
                ,
                i.destroy = function() {
                    this._gpuBuffer && (this._isBufferView || (function(t, e) {
                        var i = t.gl
                          , r = t.stateCache;
                        if (e.glBuffer) {
                            switch (e.glTarget) {
                            case i.ARRAY_BUFFER:
                                t.extensions.useVAO && r.glVAO && (i.bindVertexArray(null),
                                t.stateCache.glVAO = null),
                                Ja.gpuInputAssembler = null,
                                i.bindBuffer(i.ARRAY_BUFFER, null),
                                t.stateCache.glArrayBuffer = null;
                                break;
                            case i.ELEMENT_ARRAY_BUFFER:
                                t.extensions.useVAO && r.glVAO && (i.bindVertexArray(null),
                                t.stateCache.glVAO = null),
                                Ja.gpuInputAssembler = null,
                                i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, null),
                                t.stateCache.glElementArrayBuffer = null;
                                break;
                            case i.UNIFORM_BUFFER:
                                i.bindBuffer(i.UNIFORM_BUFFER, null),
                                t.stateCache.glUniformBuffer = null
                            }
                            i.deleteBuffer(e.glBuffer),
                            e.glBuffer = null
                        }
                    }(xa.instance, this._gpuBuffer),
                    xa.instance.memoryStatus.bufferSize -= this._size),
                    this._gpuBuffer = null)
                }
                ,
                i.resize = function(t) {
                    if (this._isBufferView)
                        console.warn("cannot resize buffer views!");
                    else {
                        var e, i, r, n, s, a = this._size;
                        a !== t && (this._size = t,
                        this._count = this._size / this._stride,
                        this._gpuBuffer && (this._gpuBuffer.size = t,
                        t > 0 && (e = xa.instance,
                        i = this._gpuBuffer,
                        r = e.gl,
                        n = e.stateCache,
                        s = i.memUsage & y.HOST ? r.DYNAMIC_DRAW : r.STATIC_DRAW,
                        i.usage & f.VERTEX ? (e.extensions.useVAO && n.glVAO && (r.bindVertexArray(null),
                        n.glVAO = null),
                        Ja.gpuInputAssembler = null,
                        n.glArrayBuffer !== i.glBuffer && r.bindBuffer(r.ARRAY_BUFFER, i.glBuffer),
                        i.buffer ? r.bufferData(r.ARRAY_BUFFER, i.buffer, s) : r.bufferData(r.ARRAY_BUFFER, i.size, s),
                        r.bindBuffer(r.ARRAY_BUFFER, null),
                        n.glArrayBuffer = null) : i.usage & f.INDEX ? (e.extensions.useVAO && n.glVAO && (r.bindVertexArray(null),
                        n.glVAO = null),
                        Ja.gpuInputAssembler = null,
                        e.stateCache.glElementArrayBuffer !== i.glBuffer && r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, i.glBuffer),
                        i.buffer ? r.bufferData(r.ELEMENT_ARRAY_BUFFER, i.buffer, s) : r.bufferData(r.ELEMENT_ARRAY_BUFFER, i.size, s),
                        r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, null),
                        e.stateCache.glElementArrayBuffer = null) : i.usage & f.UNIFORM ? (e.stateCache.glUniformBuffer !== i.glBuffer && r.bindBuffer(r.UNIFORM_BUFFER, i.glBuffer),
                        r.bufferData(r.UNIFORM_BUFFER, i.size, s),
                        r.bindBuffer(r.UNIFORM_BUFFER, null),
                        e.stateCache.glUniformBuffer = null) : (i.usage & f.INDIRECT || i.usage & f.TRANSFER_DST || i.usage & f.TRANSFER_SRC || console.error("Unsupported BufferType, create buffer failed."),
                        i.glTarget = r.NONE),
                        xa.instance.memoryStatus.bufferSize -= a,
                        xa.instance.memoryStatus.bufferSize += t)))
                    }
                }
                ,
                i.update = function(t, e) {
                    var i;
                    this._isBufferView ? console.warn("cannot update through buffer views!") : (i = void 0 !== e ? e : this._usage & f.INDIRECT ? 0 : t.byteLength,
                    Ka(xa.instance, this._gpuBuffer, t, 0, i))
                }
                ,
                Je(e, [{
                    key: "gpuBuffer",
                    get: function() {
                        return this._gpuBuffer
                    }
                }]),
                e
            }(s)
              , ao = function() {
                function t(t, e) {
                    this._frees = void 0,
                    this._freeIdx = 0,
                    this._freeCmds = void 0,
                    this._frees = new Array(e),
                    this._freeCmds = new r(e);
                    for (var i = 0; i < e; ++i)
                        this._frees[i] = new t;
                    this._freeIdx = e - 1
                }
                var e = t.prototype;
                return e.alloc = function(t) {
                    if (this._freeIdx < 0) {
                        var e = 2 * this._frees.length
                          , i = this._frees;
                        this._frees = new Array(e);
                        for (var r = e - i.length, n = 0; n < r; ++n)
                            this._frees[n] = new t;
                        for (var s = r, a = 0; s < e; ++s,
                        ++a)
                            this._frees[s] = i[a];
                        this._freeIdx += r
                    }
                    var o = this._frees[this._freeIdx];
                    return this._frees[this._freeIdx--] = null,
                    ++o.refCount,
                    o
                }
                ,
                e.free = function(t) {
                    0 == --t.refCount && this._freeCmds.push(t)
                }
                ,
                e.freeCmds = function(t) {
                    for (var e = 0; e < t.length; ++e)
                        0 == --t.array[e].refCount && this._freeCmds.push(t.array[e])
                }
                ,
                e.release = function() {
                    for (var t = 0; t < this._freeCmds.length; ++t) {
                        var e = this._freeCmds.array[t];
                        e.clear(),
                        this._frees[++this._freeIdx] = e
                    }
                    this._freeCmds.clear()
                }
                ,
                t
            }()
              , oo = function() {
                function t() {
                    this.beginRenderPassCmdPool = void 0,
                    this.bindStatesCmdPool = void 0,
                    this.drawCmdPool = void 0,
                    this.updateBufferCmdPool = void 0,
                    this.copyBufferToTextureCmdPool = void 0,
                    this.beginRenderPassCmdPool = new ao(Ha,1),
                    this.bindStatesCmdPool = new ao(Va,1),
                    this.drawCmdPool = new ao(Wa,1),
                    this.updateBufferCmdPool = new ao(Xa,1),
                    this.copyBufferToTextureCmdPool = new ao(ja,1)
                }
                var e = t.prototype;
                return e.clearCmds = function(t) {
                    t.beginRenderPassCmds.length && (this.beginRenderPassCmdPool.freeCmds(t.beginRenderPassCmds),
                    t.beginRenderPassCmds.clear()),
                    t.bindStatesCmds.length && (this.bindStatesCmdPool.freeCmds(t.bindStatesCmds),
                    t.bindStatesCmds.clear()),
                    t.drawCmds.length && (this.drawCmdPool.freeCmds(t.drawCmds),
                    t.drawCmds.clear()),
                    t.updateBufferCmds.length && (this.updateBufferCmdPool.freeCmds(t.updateBufferCmds),
                    t.updateBufferCmds.clear()),
                    t.copyBufferToTextureCmds.length && (this.copyBufferToTextureCmdPool.freeCmds(t.copyBufferToTextureCmds),
                    t.copyBufferToTextureCmds.clear()),
                    t.cmds.clear()
                }
                ,
                e.releaseCmds = function() {
                    this.beginRenderPassCmdPool.release(),
                    this.bindStatesCmdPool.release(),
                    this.drawCmdPool.release(),
                    this.updateBufferCmdPool.release(),
                    this.copyBufferToTextureCmdPool.release()
                }
                ,
                t
            }()
              , lo = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this).cmdPackage = new Ya,
                    e._cmdAllocator = new oo,
                    e._isInRenderPass = !1,
                    e._curGPUPipelineState = null,
                    e._curGPUDescriptorSets = [],
                    e._curGPUInputAssembler = null,
                    e._curDynamicOffsets = Array(8).fill(0),
                    e._curDynamicStates = new Kt,
                    e._isStateInvalied = !1,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._type = t.type,
                    this._queue = t.queue;
                    for (var e = xa.instance.bindingMappingInfo.bufferOffsets.length, i = 0; i < e; i++)
                        this._curGPUDescriptorSets.push(null)
                }
                ,
                i.destroy = function() {
                    this._cmdAllocator.clearCmds(this.cmdPackage)
                }
                ,
                i.begin = function() {
                    this._cmdAllocator.clearCmds(this.cmdPackage),
                    this._curGPUPipelineState = null,
                    this._curGPUInputAssembler = null,
                    this._curGPUDescriptorSets.length = 0,
                    this._numDrawCalls = 0,
                    this._numInstances = 0,
                    this._numTris = 0
                }
                ,
                i.end = function() {
                    this._isStateInvalied && this.bindStates(),
                    this._isInRenderPass = !1
                }
                ,
                i.beginRenderPass = function(t, e, i, r, n, s) {
                    var a = this._cmdAllocator.beginRenderPassCmdPool.alloc(Ha);
                    a.gpuRenderPass = t.gpuRenderPass,
                    a.gpuFramebuffer = e.gpuFramebuffer,
                    a.renderArea = i;
                    for (var o = 0; o < r.length; ++o)
                        a.clearColors[o] = r[o];
                    a.clearDepth = n,
                    a.clearStencil = s,
                    this.cmdPackage.beginRenderPassCmds.push(a),
                    this.cmdPackage.cmds.push(Fa.BEGIN_RENDER_PASS),
                    this._isInRenderPass = !0
                }
                ,
                i.endRenderPass = function() {
                    this._isInRenderPass = !1
                }
                ,
                i.bindPipelineState = function(t) {
                    var e = t.gpuPipelineState;
                    e !== this._curGPUPipelineState && (this._curGPUPipelineState = e,
                    this._isStateInvalied = !0)
                }
                ,
                i.bindDescriptorSet = function(t, e, i) {
                    var r = e.gpuDescriptorSet;
                    if (r !== this._curGPUDescriptorSets[t] && (this._curGPUDescriptorSets[t] = r,
                    this._isStateInvalied = !0),
                    i) {
                        var n, s = null === (n = this._curGPUPipelineState) || void 0 === n ? void 0 : n.gpuPipelineLayout;
                        if (s) {
                            for (var a = this._curDynamicOffsets, o = s.dynamicOffsetOffsets[t], l = 0; l < i.length; l++)
                                a[o + l] = i[l];
                            this._isStateInvalied = !0
                        }
                    }
                }
                ,
                i.bindInputAssembler = function(t) {
                    var e = t.gpuInputAssembler;
                    this._curGPUInputAssembler = e,
                    this._isStateInvalied = !0
                }
                ,
                i.setViewport = function(t) {
                    var e = this._curDynamicStates.viewport;
                    e.left === t.left && e.top === t.top && e.width === t.width && e.height === t.height && e.minDepth === t.minDepth && e.maxDepth === t.maxDepth || (e.left = t.left,
                    e.top = t.top,
                    e.width = t.width,
                    e.height = t.height,
                    e.minDepth = t.minDepth,
                    e.maxDepth = t.maxDepth,
                    this._isStateInvalied = !0)
                }
                ,
                i.setScissor = function(t) {
                    var e = this._curDynamicStates.scissor;
                    e.x === t.x && e.y === t.y && e.width === t.width && e.height === t.height || (e.x = t.x,
                    e.y = t.y,
                    e.width = t.width,
                    e.height = t.height,
                    this._isStateInvalied = !0)
                }
                ,
                i.setLineWidth = function(t) {
                    this._curDynamicStates.lineWidth !== t && (this._curDynamicStates.lineWidth = t,
                    this._isStateInvalied = !0)
                }
                ,
                i.setDepthBias = function(t, e, i) {
                    var r = this._curDynamicStates;
                    r.depthBiasConstant === t && r.depthBiasClamp === e && r.depthBiasSlope === i || (r.depthBiasConstant = t,
                    r.depthBiasClamp = e,
                    r.depthBiasSlope = i,
                    this._isStateInvalied = !0)
                }
                ,
                i.setBlendConstants = function(t) {
                    var e = this._curDynamicStates.blendConstant;
                    e.x === t.x && e.y === t.y && e.z === t.z && e.w === t.w || (e.copy(t),
                    this._isStateInvalied = !0)
                }
                ,
                i.setDepthBound = function(t, e) {
                    var i = this._curDynamicStates;
                    i.depthMinBounds === t && i.depthMaxBounds === e || (i.depthMinBounds = t,
                    i.depthMaxBounds = e,
                    this._isStateInvalied = !0)
                }
                ,
                i.setStencilWriteMask = function(t, e) {
                    var i = this._curDynamicStates.stencilStatesFront
                      , r = this._curDynamicStates.stencilStatesBack;
                    t & H.FRONT && i.writeMask !== e && (i.writeMask = e,
                    this._isStateInvalied = !0),
                    t & H.BACK && r.writeMask !== e && (r.writeMask = e,
                    this._isStateInvalied = !0)
                }
                ,
                i.setStencilCompareMask = function(t, e, i) {
                    var r = this._curDynamicStates.stencilStatesFront
                      , n = this._curDynamicStates.stencilStatesBack;
                    t & H.FRONT && (r.compareMask === i && r.reference === e || (r.reference = e,
                    r.compareMask = i,
                    this._isStateInvalied = !0)),
                    t & H.BACK && (n.compareMask === i && n.reference === e || (n.reference = e,
                    n.compareMask = i,
                    this._isStateInvalied = !0))
                }
                ,
                i.draw = function(t) {
                    if (this._type === j.PRIMARY && this._isInRenderPass || this._type === j.SECONDARY) {
                        this._isStateInvalied && this.bindStates();
                        var e = "drawInfo"in t ? t.drawInfo : t
                          , i = this._cmdAllocator.drawCmdPool.alloc(Wa);
                        i.drawInfo.copy(e),
                        this.cmdPackage.drawCmds.push(i),
                        this.cmdPackage.cmds.push(Fa.DRAW),
                        ++this._numDrawCalls,
                        this._numInstances += e.instanceCount;
                        var r = e.indexCount || e.vertexCount;
                        if (this._curGPUPipelineState)
                            switch (this._curGPUPipelineState.glPrimitive) {
                            case 4:
                                this._numTris += r / 3 * Math.max(e.instanceCount, 1);
                                break;
                            case 5:
                            case 6:
                                this._numTris += (r - 2) * Math.max(e.instanceCount, 1)
                            }
                    } else
                        console.error("Command 'draw' must be recorded inside a render pass.")
                }
                ,
                i.updateBuffer = function(t, e, i) {
                    if (this._type === j.PRIMARY && !this._isInRenderPass || this._type === j.SECONDARY) {
                        var r = t.gpuBuffer;
                        if (r) {
                            var n, s = this._cmdAllocator.updateBufferCmdPool.alloc(Xa), a = 0;
                            t.usage & f.INDIRECT || (a = void 0 !== i ? i : e.byteLength),
                            n = e,
                            s.gpuBuffer = r,
                            s.buffer = n,
                            s.offset = 0,
                            s.size = a,
                            this.cmdPackage.updateBufferCmds.push(s),
                            this.cmdPackage.cmds.push(Fa.UPDATE_BUFFER)
                        }
                    } else
                        console.error("Command 'updateBuffer' must be recorded outside a render pass.")
                }
                ,
                i.copyBuffersToTexture = function(t, e, i) {
                    if (this._type === j.PRIMARY && !this._isInRenderPass || this._type === j.SECONDARY) {
                        var r = e.gpuTexture;
                        if (r) {
                            var n = this._cmdAllocator.copyBufferToTextureCmdPool.alloc(ja);
                            n.gpuTexture = r,
                            n.regions = i,
                            n.buffers = t,
                            this.cmdPackage.copyBufferToTextureCmds.push(n),
                            this.cmdPackage.cmds.push(Fa.COPY_BUFFER_TO_TEXTURE)
                        }
                    } else
                        console.error("Command 'copyBufferToTexture' must be recorded outside a render pass.")
                }
                ,
                i.execute = function(t, e) {
                    for (var i = 0; i < e; ++i) {
                        for (var r = t[i], n = 0; n < r.cmdPackage.beginRenderPassCmds.length; ++n) {
                            var s = r.cmdPackage.beginRenderPassCmds.array[n];
                            ++s.refCount,
                            this.cmdPackage.beginRenderPassCmds.push(s)
                        }
                        for (var a = 0; a < r.cmdPackage.bindStatesCmds.length; ++a) {
                            var o = r.cmdPackage.bindStatesCmds.array[a];
                            ++o.refCount,
                            this.cmdPackage.bindStatesCmds.push(o)
                        }
                        for (var l = 0; l < r.cmdPackage.drawCmds.length; ++l) {
                            var h = r.cmdPackage.drawCmds.array[l];
                            ++h.refCount,
                            this.cmdPackage.drawCmds.push(h)
                        }
                        for (var u = 0; u < r.cmdPackage.updateBufferCmds.length; ++u) {
                            var c = r.cmdPackage.updateBufferCmds.array[u];
                            ++c.refCount,
                            this.cmdPackage.updateBufferCmds.push(c)
                        }
                        for (var _ = 0; _ < r.cmdPackage.copyBufferToTextureCmds.length; ++_) {
                            var d = r.cmdPackage.copyBufferToTextureCmds.array[_];
                            ++d.refCount,
                            this.cmdPackage.copyBufferToTextureCmds.push(d)
                        }
                        this.cmdPackage.cmds.concat(r.cmdPackage.cmds.array),
                        this._numDrawCalls += r._numDrawCalls,
                        this._numInstances += r._numInstances,
                        this._numTris += r._numTris
                    }
                }
                ,
                i.pipelineBarrier = function() {}
                ,
                i.bindStates = function() {
                    var t = this._cmdAllocator.bindStatesCmdPool.alloc(Va);
                    t.gpuPipelineState = this._curGPUPipelineState,
                    Array.prototype.push.apply(t.gpuDescriptorSets, this._curGPUDescriptorSets),
                    Array.prototype.push.apply(t.dynamicOffsets, this._curDynamicOffsets),
                    t.gpuInputAssembler = this._curGPUInputAssembler,
                    t.dynamicStates = this._curDynamicStates,
                    this.cmdPackage.bindStatesCmds.push(t),
                    this.cmdPackage.cmds.push(Fa.BIND_STATES),
                    this._isStateInvalied = !1
                }
                ,
                e
            }(a)
              , ho = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuFramebuffer = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._renderPass = t.renderPass,
                    this._colorTextures = t.colorTextures || [],
                    this._depthStencilTexture = t.depthStencilTexture || null;
                    for (var e = [], i = 0; i < t.colorTextures.length; i++) {
                        var r = t.colorTextures[i];
                        r && e.push(r.gpuTexture)
                    }
                    var n = null;
                    t.depthStencilTexture && (n = t.depthStencilTexture.gpuTexture);
                    var s = Number.MAX_SAFE_INTEGER
                      , a = Number.MAX_SAFE_INTEGER;
                    this._gpuFramebuffer = {
                        gpuRenderPass: t.renderPass.gpuRenderPass,
                        gpuColorTextures: e,
                        gpuDepthStencilTexture: n,
                        glFramebuffer: null,
                        isOffscreen: !0,
                        get width() {
                            return this.isOffscreen ? s : this.gpuColorTextures[0].width
                        },
                        set width(t) {
                            s = t
                        },
                        get height() {
                            return this.isOffscreen ? a : this.gpuColorTextures[0].height
                        },
                        set height(t) {
                            a = t
                        }
                    },
                    function(t, e) {
                        for (var i = 0; i < e.gpuColorTextures.length; ++i)
                            if (e.gpuColorTextures[i].isSwapchainTexture)
                                return void (e.isOffscreen = !1);
                        var r = t.gl
                          , n = []
                          , s = r.createFramebuffer();
                        if (s) {
                            e.glFramebuffer = s,
                            t.stateCache.glFramebuffer !== e.glFramebuffer && r.bindFramebuffer(r.FRAMEBUFFER, e.glFramebuffer);
                            for (var a = 0; a < e.gpuColorTextures.length; ++a) {
                                var o = e.gpuColorTextures[a];
                                o && (o.glTexture ? r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + a, o.glTarget, o.glTexture, 0) : r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + a, r.RENDERBUFFER, o.glRenderbuffer),
                                n.push(r.COLOR_ATTACHMENT0 + a),
                                e.width = Math.min(e.width, o.width),
                                e.height = Math.min(e.height, o.height))
                            }
                            var l = e.gpuDepthStencilTexture;
                            if (l) {
                                var h = Jt[l.format].hasStencil ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT;
                                l.glTexture ? r.framebufferTexture2D(r.FRAMEBUFFER, h, l.glTarget, l.glTexture, 0) : r.framebufferRenderbuffer(r.FRAMEBUFFER, h, r.RENDERBUFFER, l.glRenderbuffer),
                                e.width = Math.min(e.width, l.width),
                                e.height = Math.min(e.height, l.height)
                            }
                            r.drawBuffers(n);
                            var u = r.checkFramebufferStatus(r.FRAMEBUFFER);
                            if (u !== r.FRAMEBUFFER_COMPLETE)
                                switch (u) {
                                case r.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                                    console.error("glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
                                    break;
                                case r.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                                    console.error("glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
                                    break;
                                case r.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                                    console.error("glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
                                    break;
                                case r.FRAMEBUFFER_UNSUPPORTED:
                                    console.error("glCheckFramebufferStatus() - FRAMEBUFFER_UNSUPPORTED")
                                }
                            t.stateCache.glFramebuffer !== e.glFramebuffer && r.bindFramebuffer(r.FRAMEBUFFER, t.stateCache.glFramebuffer)
                        }
                    }(xa.instance, this._gpuFramebuffer)
                }
                ,
                i.destroy = function() {
                    var t, e;
                    this._gpuFramebuffer && (t = xa.instance,
                    (e = this._gpuFramebuffer).glFramebuffer && (t.gl.deleteFramebuffer(e.glFramebuffer),
                    e.glFramebuffer = null),
                    this._gpuFramebuffer = null)
                }
                ,
                Je(e, [{
                    key: "gpuFramebuffer",
                    get: function() {
                        return this._gpuFramebuffer
                    }
                }]),
                e
            }(he)
              , uo = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuInputAssembler = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    if (0 !== t.vertexBuffers.length) {
                        if (this._attributes = t.attributes,
                        this._attributesHash = this.computeAttributesHash(),
                        this._vertexBuffers = t.vertexBuffers,
                        t.indexBuffer)
                            this._indexBuffer = t.indexBuffer,
                            this._drawInfo.indexCount = this._indexBuffer.size / this._indexBuffer.stride,
                            this._drawInfo.firstIndex = 0;
                        else {
                            var e = this._vertexBuffers[0];
                            this._drawInfo.vertexCount = e.size / e.stride,
                            this._drawInfo.firstVertex = 0,
                            this._drawInfo.vertexOffset = 0
                        }
                        this._drawInfo.instanceCount = 0,
                        this._drawInfo.firstInstance = 0,
                        this._indirectBuffer = t.indirectBuffer || null;
                        for (var i = new Array(t.vertexBuffers.length), r = 0; r < t.vertexBuffers.length; ++r) {
                            var n = t.vertexBuffers[r];
                            n.gpuBuffer && (i[r] = n.gpuBuffer)
                        }
                        var s = null
                          , a = 0;
                        if (t.indexBuffer && (s = t.indexBuffer.gpuBuffer))
                            switch (s.stride) {
                            case 1:
                                a = 5121;
                                break;
                            case 2:
                                a = 5123;
                                break;
                            case 4:
                                a = 5125;
                                break;
                            default:
                                console.error("Illegal index buffer stride.")
                            }
                        var o = null;
                        t.indirectBuffer && (o = t.indirectBuffer.gpuBuffer),
                        this._gpuInputAssembler = {
                            attributes: t.attributes,
                            gpuVertexBuffers: i,
                            gpuIndexBuffer: s,
                            gpuIndirectBuffer: o,
                            glAttribs: [],
                            glIndexType: a,
                            glVAOs: new Map
                        },
                        function(t, e) {
                            var i = t.gl;
                            e.glAttribs = new Array(e.attributes.length);
                            for (var r = [0, 0, 0, 0, 0, 0, 0, 0], n = 0; n < e.attributes.length; ++n) {
                                var s = e.attributes[n]
                                  , a = void 0 !== s.stream ? s.stream : 0
                                  , o = e.gpuVertexBuffers[a]
                                  , l = Oa(s.format, i)
                                  , h = Jt[s.format].size;
                                e.glAttribs[n] = {
                                    name: s.name,
                                    glBuffer: o.glBuffer,
                                    glType: l,
                                    size: h,
                                    count: Jt[s.format].count,
                                    stride: o.stride,
                                    componentCount: La(l, i),
                                    isNormalized: void 0 !== s.isNormalized && s.isNormalized,
                                    isInstanced: void 0 !== s.isInstanced && s.isInstanced,
                                    offset: r[a]
                                },
                                r[a] += h
                            }
                        }(xa.instance, this._gpuInputAssembler)
                    } else
                        console.error("InputAssemblerInfo.vertexBuffers is null.")
                }
                ,
                i.destroy = function() {
                    var t = xa.instance;
                    this._gpuInputAssembler && t.extensions.useVAO && function(t, e) {
                        for (var i = e.glVAOs.values(), r = i.next(); !r.done; )
                            t.gl.deleteVertexArray(r.value),
                            r = i.next();
                        e.glVAOs.clear()
                    }(t, this._gpuInputAssembler),
                    this._gpuInputAssembler = null
                }
                ,
                Je(e, [{
                    key: "gpuInputAssembler",
                    get: function() {
                        return this._gpuInputAssembler
                    }
                }]),
                e
            }(ue)
              , co = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuDescriptorSetLayout = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    Array.prototype.push.apply(this._bindings, t.bindings);
                    for (var e = 0, i = -1, r = [], n = 0; n < this._bindings.length; n++) {
                        var s = this._bindings[n];
                        r.push(e),
                        e += s.count,
                        s.binding > i && (i = s.binding)
                    }
                    this._bindingIndices = Array(i + 1).fill(-1);
                    for (var a = this._descriptorIndices = Array(i + 1).fill(-1), o = 0; o < this._bindings.length; o++) {
                        var l = this._bindings[o];
                        this._bindingIndices[l.binding] = o,
                        a[l.binding] = r[o]
                    }
                    for (var h = [], u = 0; u < this._bindings.length; u++) {
                        var c = this._bindings[u];
                        if (c.descriptorType & te)
                            for (var _ = 0; _ < c.count; _++)
                                h.push(c.binding)
                    }
                    this._gpuDescriptorSetLayout = {
                        bindings: this._bindings,
                        dynamicBindings: h,
                        descriptorIndices: a,
                        descriptorCount: e
                    }
                }
                ,
                i.destroy = function() {
                    this._bindings.length = 0
                }
                ,
                Je(e, [{
                    key: "gpuDescriptorSetLayout",
                    get: function() {
                        return this._gpuDescriptorSetLayout
                    }
                }]),
                e
            }(ce)
              , _o = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuPipelineLayout = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    Array.prototype.push.apply(this._setLayouts, t.setLayouts);
                    for (var e = [], i = [], r = 0, n = [], s = 0; s < this._setLayouts.length; s++) {
                        for (var a = this._setLayouts[s], o = a.gpuDescriptorSetLayout.dynamicBindings, l = Array(a.bindingIndices.length).fill(-1), h = 0; h < o.length; h++) {
                            var u = o[h];
                            l[u] < 0 && (l[u] = r + h)
                        }
                        i.push(a.gpuDescriptorSetLayout),
                        e.push(l),
                        n.push(r),
                        r += o.length
                    }
                    this._gpuPipelineLayout = {
                        gpuSetLayouts: i,
                        dynamicOffsetIndices: e,
                        dynamicOffsetCount: r,
                        dynamicOffsetOffsets: n
                    }
                }
                ,
                i.destroy = function() {
                    this._setLayouts.length = 0
                }
                ,
                Je(e, [{
                    key: "gpuPipelineLayout",
                    get: function() {
                        return this._gpuPipelineLayout
                    }
                }]),
                e
            }(_e)
              , po = [0, 1, 3, 2, 0, 0, 0, 4, 5, 6, 0, 0, 0, 0]
              , fo = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuPipelineState = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._primitive = t.primitive,
                    this._shader = t.shader,
                    this._pipelineLayout = t.pipelineLayout;
                    var e = this._bs;
                    if (t.blendState) {
                        var i = t.blendState
                          , r = i.targets;
                        r && r.forEach((function(t, i) {
                            e.setTarget(i, t)
                        }
                        )),
                        void 0 !== i.isA2C && (e.isA2C = i.isA2C),
                        void 0 !== i.isIndepend && (e.isIndepend = i.isIndepend),
                        void 0 !== i.blendColor && (e.blendColor = i.blendColor)
                    }
                    Object.assign(this._rs, t.rasterizerState),
                    Object.assign(this._dss, t.depthStencilState),
                    this._is = t.inputState,
                    this._renderPass = t.renderPass,
                    this._dynamicStates = t.dynamicStates;
                    for (var n = [], s = 0; s < 31; s++)
                        this._dynamicStates & 1 << s && n.push(1 << s);
                    this._gpuPipelineState = {
                        glPrimitive: po[t.primitive],
                        gpuShader: t.shader.gpuShader,
                        gpuPipelineLayout: t.pipelineLayout.gpuPipelineLayout,
                        rs: t.rasterizerState,
                        dss: t.depthStencilState,
                        bs: t.blendState,
                        gpuRenderPass: t.renderPass.gpuRenderPass,
                        dynamicStates: n
                    }
                }
                ,
                i.destroy = function() {
                    this._gpuPipelineState = null
                }
                ,
                Je(e, [{
                    key: "gpuPipelineState",
                    get: function() {
                        return this._gpuPipelineState
                    }
                }]),
                e
            }(ye)
              , go = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.beginRenderPass = function(t, e, i, r, n, s) {
                    Qa(xa.instance, t.gpuRenderPass, e.gpuFramebuffer, i, r, n, s),
                    this._isInRenderPass = !0
                }
                ,
                i.draw = function(t) {
                    if (this._isInRenderPass) {
                        this._isStateInvalied && this.bindStates();
                        var e = "drawInfo"in t ? t.drawInfo : t;
                        to(xa.instance, e),
                        ++this._numDrawCalls,
                        this._numInstances += e.instanceCount;
                        var i = e.indexCount || e.vertexCount;
                        if (this._curGPUPipelineState)
                            switch (this._curGPUPipelineState.glPrimitive) {
                            case 4:
                                this._numTris += i / 3 * Math.max(e.instanceCount, 1);
                                break;
                            case 5:
                            case 6:
                                this._numTris += (i - 2) * Math.max(e.instanceCount, 1)
                            }
                    } else
                        console.error("Command 'draw' must be recorded inside a render pass.")
                }
                ,
                i.setViewport = function(t) {
                    var e = xa.instance
                      , i = e.stateCache
                      , r = e.gl;
                    i.viewport.left === t.left && i.viewport.top === t.top && i.viewport.width === t.width && i.viewport.height === t.height || (r.viewport(t.left, t.top, t.width, t.height),
                    i.viewport.left = t.left,
                    i.viewport.top = t.top,
                    i.viewport.width = t.width,
                    i.viewport.height = t.height)
                }
                ,
                i.setScissor = function(t) {
                    var e = xa.instance
                      , i = e.stateCache
                      , r = e.gl;
                    i.scissorRect.x === t.x && i.scissorRect.y === t.y && i.scissorRect.width === t.width && i.scissorRect.height === t.height || (r.scissor(t.x, t.y, t.width, t.height),
                    i.scissorRect.x = t.x,
                    i.scissorRect.y = t.y,
                    i.scissorRect.width = t.width,
                    i.scissorRect.height = t.height)
                }
                ,
                i.updateBuffer = function(t, e, i) {
                    if (this._isInRenderPass)
                        console.error("Command 'updateBuffer' must be recorded outside a render pass.");
                    else {
                        var r, n = t.gpuBuffer;
                        n && (r = void 0 !== i ? i : t.usage & f.INDIRECT ? 0 : e.byteLength,
                        Ka(xa.instance, n, e, 0, r))
                    }
                }
                ,
                i.copyBuffersToTexture = function(t, e, i) {
                    if (this._isInRenderPass)
                        console.error("Command 'copyBufferToTexture' must be recorded outside a render pass.");
                    else {
                        var r = e.gpuTexture;
                        r && ro(xa.instance, t, r, i)
                    }
                }
                ,
                i.execute = function(t, e) {
                    for (var i = 0; i < e; ++i) {
                        var r = t[i];
                        io(xa.instance, r.cmdPackage),
                        this._numDrawCalls += r._numDrawCalls,
                        this._numInstances += r._numInstances,
                        this._numTris += r._numTris
                    }
                }
                ,
                i.bindStates = function() {
                    $a(xa.instance, this._curGPUPipelineState, this._curGPUInputAssembler, this._curGPUDescriptorSets, this._curDynamicOffsets, this._curDynamicStates),
                    this._isStateInvalied = !1
                }
                ,
                e
            }(lo)
              , mo = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this).numDrawCalls = 0,
                    e.numInstances = 0,
                    e.numTris = 0,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._type = t.type
                }
                ,
                i.destroy = function() {}
                ,
                i.submit = function(t) {
                    for (var e = 0; e < t.length; e++) {
                        var i = t[e];
                        this.numDrawCalls += i.numDrawCalls,
                        this.numInstances += i.numInstances,
                        this.numTris += i.numTris
                    }
                }
                ,
                i.clear = function() {
                    this.numDrawCalls = 0,
                    this.numInstances = 0,
                    this.numTris = 0
                }
                ,
                e
            }(ve)
              , yo = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuRenderPass = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._colorInfos = t.colorAttachments,
                    this._depthStencilInfo = t.depthStencilAttachment,
                    this._subpasses = t.subpasses,
                    this._gpuRenderPass = {
                        colorAttachments: this._colorInfos,
                        depthStencilAttachment: this._depthStencilInfo
                    },
                    this._hash = this.computeHash()
                }
                ,
                i.destroy = function() {
                    this._gpuRenderPass = null
                }
                ,
                Je(e, [{
                    key: "gpuRenderPass",
                    get: function() {
                        return this._gpuRenderPass
                    }
                }]),
                e
            }(Se)
              , vo = function(t) {
                function e(e, i) {
                    var r, n, s, a, o;
                    return (r = t.call(this, e, i) || this)._gpuSampler = null,
                    r._gpuSampler = {
                        glSampler: null,
                        minFilter: r._info.minFilter,
                        magFilter: r._info.magFilter,
                        mipFilter: r._info.mipFilter,
                        addressU: r._info.addressU,
                        addressV: r._info.addressV,
                        addressW: r._info.addressW,
                        glMinFilter: 0,
                        glMagFilter: 0,
                        glWrapS: 0,
                        glWrapT: 0,
                        glWrapR: 0
                    },
                    n = xa.instance,
                    s = r._gpuSampler,
                    (o = (a = n.gl).createSampler()) && (s.minFilter === A.LINEAR || s.minFilter === A.ANISOTROPIC ? s.mipFilter === A.LINEAR || s.mipFilter === A.ANISOTROPIC ? s.glMinFilter = a.LINEAR_MIPMAP_LINEAR : s.mipFilter === A.POINT ? s.glMinFilter = a.LINEAR_MIPMAP_NEAREST : s.glMinFilter = a.LINEAR : s.mipFilter === A.LINEAR || s.mipFilter === A.ANISOTROPIC ? s.glMinFilter = a.NEAREST_MIPMAP_LINEAR : s.mipFilter === A.POINT ? s.glMinFilter = a.NEAREST_MIPMAP_NEAREST : s.glMinFilter = a.NEAREST,
                    s.magFilter === A.LINEAR || s.magFilter === A.ANISOTROPIC ? s.glMagFilter = a.LINEAR : s.glMagFilter = a.NEAREST,
                    s.glWrapS = Da[s.addressU],
                    s.glWrapT = Da[s.addressV],
                    s.glWrapR = Da[s.addressW],
                    s.glSampler = o,
                    a.samplerParameteri(o, a.TEXTURE_MIN_FILTER, s.glMinFilter),
                    a.samplerParameteri(o, a.TEXTURE_MAG_FILTER, s.glMagFilter),
                    a.samplerParameteri(o, a.TEXTURE_WRAP_S, s.glWrapS),
                    a.samplerParameteri(o, a.TEXTURE_WRAP_T, s.glWrapT),
                    a.samplerParameteri(o, a.TEXTURE_WRAP_R, s.glWrapR),
                    a.samplerParameterf(o, a.TEXTURE_MIN_LOD, 0),
                    a.samplerParameterf(o, a.TEXTURE_MAX_LOD, 1e3)),
                    r
                }
                return qe(e, t),
                e.prototype.destroy = function() {
                    var t, e;
                    this._gpuSampler && (t = xa.instance,
                    (e = this._gpuSampler).glSampler && (t.gl.deleteSampler(e.glSampler),
                    e.glSampler = null),
                    this._gpuSampler = null)
                }
                ,
                Je(e, [{
                    key: "gpuSampler",
                    get: function() {
                        return this._gpuSampler
                    }
                }]),
                e
            }(Te)
              , So = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuShader = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._name = t.name,
                    this._stages = t.stages,
                    this._attributes = t.attributes,
                    this._blocks = t.blocks,
                    this._samplers = t.samplers,
                    this._gpuShader = {
                        name: t.name,
                        blocks: t.blocks.slice(),
                        samplerTextures: t.samplerTextures.slice(),
                        subpassInputs: t.subpassInputs.slice(),
                        gpuStages: new Array(t.stages.length),
                        glProgram: null,
                        glInputs: [],
                        glUniforms: [],
                        glBlocks: [],
                        glSamplerTextures: []
                    };
                    for (var e = 0; e < t.stages.length; ++e) {
                        var i = t.stages[e];
                        this._gpuShader.gpuStages[e] = {
                            type: i.stage,
                            source: i.source,
                            glShader: null
                        }
                    }
                    !function(t, e) {
                        for (var i = t.gl, r = function(t) {
                            var r = e.gpuStages[t]
                              , n = 0
                              , s = ""
                              , a = 1;
                            switch (r.type) {
                            case O.VERTEX:
                                s = "VertexShader",
                                n = i.VERTEX_SHADER;
                                break;
                            case O.FRAGMENT:
                                s = "FragmentShader",
                                n = i.FRAGMENT_SHADER;
                                break;
                            default:
                                return console.error("Unsupported ShaderType."),
                                {
                                    v: void 0
                                }
                            }
                            var o = i.createShader(n);
                            if (o && (r.glShader = o,
                            i.shaderSource(r.glShader, "#version 300 es\n" + r.source),
                            i.compileShader(r.glShader),
                            !i.getShaderParameter(r.glShader, i.COMPILE_STATUS))) {
                                console.error(s + " in '" + e.name + "' compilation failed."),
                                console.error("Shader source dump:", r.source.replace(/^|\n/g, (function() {
                                    return "\n" + a++ + " "
                                }
                                ))),
                                console.error(i.getShaderInfoLog(r.glShader));
                                for (var l = 0; l < e.gpuStages.length; l++) {
                                    var h = e.gpuStages[t];
                                    h.glShader && (i.deleteShader(h.glShader),
                                    h.glShader = null)
                                }
                                return {
                                    v: void 0
                                }
                            }
                        }, n = 0; n < e.gpuStages.length; n++) {
                            var s = r(n);
                            if ("object" == typeof s)
                                return s.v
                        }
                        var a = i.createProgram();
                        if (a) {
                            e.glProgram = a;
                            for (var o = 0; o < e.gpuStages.length; o++) {
                                var l = e.gpuStages[o];
                                i.attachShader(e.glProgram, l.glShader)
                            }
                            i.linkProgram(e.glProgram);
                            for (var h = 0; h < e.gpuStages.length; h++) {
                                var u = e.gpuStages[h];
                                u.glShader && (i.detachShader(e.glProgram, u.glShader),
                                i.deleteShader(u.glShader),
                                u.glShader = null)
                            }
                            if (!i.getProgramParameter(e.glProgram, i.LINK_STATUS))
                                return console.error("Failed to link shader '" + e.name + "'."),
                                void console.error(i.getProgramInfoLog(e.glProgram));
                            $e("Shader '" + e.name + "' compilation succeeded.");
                            var c = i.getProgramParameter(e.glProgram, i.ACTIVE_ATTRIBUTES);
                            e.glInputs = new Array(c);
                            for (var _ = 0; _ < c; ++_) {
                                var d = i.getActiveAttrib(e.glProgram, _);
                                if (d) {
                                    var f, g = d.name.indexOf("[");
                                    f = -1 !== g ? d.name.substr(0, g) : d.name;
                                    var m = i.getAttribLocation(e.glProgram, f)
                                      , y = Ma(d.type, i)
                                      , v = Ia(d.type, i);
                                    e.glInputs[_] = {
                                        name: f,
                                        type: y,
                                        stride: v,
                                        count: d.size,
                                        size: v * d.size,
                                        glType: d.type,
                                        glLoc: m
                                    }
                                }
                            }
                            var S, T, b, E, A = i.getProgramParameter(e.glProgram, i.ACTIVE_UNIFORM_BLOCKS);
                            if (A) {
                                e.glBlocks = new Array(A);
                                for (var C = 0; C < A; ++C) {
                                    var R = (S = i.getActiveUniformBlockName(e.glProgram, C)).indexOf("[");
                                    -1 !== R && (S = S.substr(0, R)),
                                    E = null;
                                    for (var B = 0; B < e.blocks.length; B++)
                                        if (e.blocks[B].name === S) {
                                            E = e.blocks[B];
                                            break
                                        }
                                    if (E) {
                                        T = C,
                                        b = i.getActiveUniformBlockParameter(e.glProgram, T, i.UNIFORM_BLOCK_DATA_SIZE);
                                        var x = E.binding + (t.bindingMappingInfo.bufferOffsets[E.set] || 0);
                                        i.uniformBlockBinding(e.glProgram, T, x),
                                        e.glBlocks[C] = {
                                            set: E.set,
                                            binding: E.binding,
                                            idx: T,
                                            name: S,
                                            size: b,
                                            glBinding: x
                                        }
                                    } else
                                        ti("Block '" + S + "' does not bound")
                                }
                            }
                            for (var D = 0; D < e.subpassInputs.length; ++D) {
                                var w = e.subpassInputs[D];
                                e.samplerTextures.push(new vt(w.set,w.binding,w.name,p.SAMPLER2D,w.count))
                            }
                            if (e.samplerTextures.length > 0) {
                                e.glSamplerTextures = new Array(e.samplerTextures.length);
                                for (var P = 0; P < e.samplerTextures.length; ++P) {
                                    var M = e.samplerTextures[P];
                                    e.glSamplerTextures[P] = {
                                        set: M.set,
                                        binding: M.binding,
                                        name: M.name,
                                        type: M.type,
                                        count: M.count,
                                        units: [],
                                        glUnits: null,
                                        glType: Pa(M.type, i),
                                        glLoc: null
                                    }
                                }
                            }
                            for (var I = [], L = [], F = t.stateCache.texUnitCacheMap, N = 0, k = 0; k < e.blocks.length; ++k)
                                e.blocks[k].set === t.bindingMappingInfo.flexibleSet && N++;
                            for (var G = 0, z = 0; z < e.samplerTextures.length; ++z) {
                                var U = e.samplerTextures[z]
                                  , H = i.getUniformLocation(e.glProgram, U.name);
                                if (H && -1 !== H.id && (I.push(e.glSamplerTextures[z]),
                                L.push(H)),
                                void 0 === F[U.name]) {
                                    var V = U.binding + t.bindingMappingInfo.samplerOffsets[U.set] + G;
                                    U.set === t.bindingMappingInfo.flexibleSet && (V -= N),
                                    F[U.name] = V % t.capabilities.maxTextureUnits,
                                    G += U.count - 1
                                }
                            }
                            if (I.length) {
                                for (var W = [], X = 0; X < I.length; ++X) {
                                    var j = I[X]
                                      , Y = F[j.name];
                                    if (void 0 !== Y) {
                                        j.glLoc = L[X];
                                        for (var K = 0; K < j.count; ++K) {
                                            for (; W[Y]; )
                                                Y = (Y + 1) % t.capabilities.maxTextureUnits;
                                            j.units.push(Y),
                                            W[Y] = !0
                                        }
                                    }
                                }
                                for (var Z = 0, q = 0; q < I.length; ++q) {
                                    var J = I[q];
                                    if (!J.glLoc) {
                                        for (J.glLoc = L[q]; W[Z]; )
                                            Z++;
                                        for (var Q = 0; Q < J.count; ++Q) {
                                            for (; W[Z]; )
                                                Z = (Z + 1) % t.capabilities.maxTextureUnits;
                                            void 0 === F[J.name] && (F[J.name] = Z),
                                            J.units.push(Z),
                                            W[Z] = !0
                                        }
                                    }
                                }
                                t.stateCache.glProgram !== e.glProgram && i.useProgram(e.glProgram);
                                for (var $ = 0; $ < I.length; $++) {
                                    var tt = I[$];
                                    tt.glUnits = new Int32Array(tt.units),
                                    i.uniform1iv(tt.glLoc, tt.glUnits)
                                }
                                t.stateCache.glProgram !== e.glProgram && i.useProgram(t.stateCache.glProgram)
                            }
                            e.glSamplerTextures = I
                        }
                    }(xa.instance, this._gpuShader)
                }
                ,
                i.destroy = function() {
                    var t, e;
                    this._gpuShader && (t = xa.instance,
                    (e = this._gpuShader).glProgram && (t.gl.deleteProgram(e.glProgram),
                    e.glProgram = null),
                    this._gpuShader = null)
                }
                ,
                Je(e, [{
                    key: "gpuShader",
                    get: function() {
                        return this._gpuShader
                    }
                }]),
                e
            }(be)
              , To = function() {
                function t() {
                    this.glArrayBuffer = null,
                    this.glElementArrayBuffer = null,
                    this.glUniformBuffer = null,
                    this.glBindUBOs = [],
                    this.glBindUBOOffsets = [],
                    this.glVAO = null,
                    this.texUnit = 0,
                    this.glTexUnits = [],
                    this.glSamplerUnits = [],
                    this.glRenderbuffer = null,
                    this.glFramebuffer = null,
                    this.glReadFramebuffer = null,
                    this.viewport = new nt,
                    this.scissorRect = new J(0,0,0,0),
                    this.rs = new de,
                    this.dss = new pe,
                    this.bs = new ge,
                    this.glProgram = null,
                    this.glEnabledAttribLocs = [],
                    this.glCurrentAttribLocs = [],
                    this.texUnitCacheMap = {}
                }
                return t.prototype.initialize = function(t, e, i) {
                    for (var r = 0; r < t; ++r)
                        this.glTexUnits.push({
                            glTexture: null
                        });
                    this.glSamplerUnits.length = t,
                    this.glSamplerUnits.fill(null),
                    this.glBindUBOs.length = e,
                    this.glBindUBOs.fill(null),
                    this.glBindUBOOffsets.length = e,
                    this.glBindUBOOffsets.fill(0),
                    this.glEnabledAttribLocs.length = i,
                    this.glEnabledAttribLocs.fill(!1),
                    this.glCurrentAttribLocs.length = i,
                    this.glCurrentAttribLocs.fill(!1)
                }
                ,
                t
            }()
              , bo = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._gpuTexture = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t, e) {
                    "texture"in t ? console.log("WebGL2 does not support texture view.") : (this._type = t.type,
                    this._usage = t.usage,
                    this._format = t.format,
                    this._width = t.width,
                    this._height = t.height,
                    this._depth = t.depth,
                    this._layerCount = t.layerCount,
                    this._levelCount = t.levelCount,
                    this._samples = t.samples,
                    this._flags = t.flags,
                    this._isPowerOf2 = ie(this._width) && ie(this._height),
                    this._size = ne(this._format, this.width, this.height, this.depth, this._levelCount) * this._layerCount,
                    this._gpuTexture = {
                        type: this._type,
                        format: this._format,
                        usage: this._usage,
                        width: this._width,
                        height: this._height,
                        depth: this._depth,
                        size: this._size,
                        arrayLayer: this._layerCount,
                        mipLevel: this._levelCount,
                        samples: this._samples,
                        flags: this._flags,
                        isPowerOf2: this._isPowerOf2,
                        glTarget: 0,
                        glInternalFmt: 0,
                        glFormat: 0,
                        glType: 0,
                        glUsage: 0,
                        glTexture: null,
                        glRenderbuffer: null,
                        glWrapS: 0,
                        glWrapT: 0,
                        glMinFilter: 0,
                        glMagFilter: 0,
                        isSwapchainTexture: e || !1
                    },
                    Za(xa.instance, this._gpuTexture),
                    xa.instance.memoryStatus.textureSize += this._size)
                }
                ,
                i.destroy = function() {
                    this._gpuTexture && (qa(xa.instance, this._gpuTexture),
                    xa.instance.memoryStatus.textureSize -= this._size,
                    this._gpuTexture = null)
                }
                ,
                i.resize = function(t, e) {
                    var i = this._size;
                    this._width = t,
                    this._height = e,
                    this._size = ne(this._format, this.width, this.height, this.depth, this._levelCount) * this._layerCount,
                    this._gpuTexture && (this._gpuTexture.width = t,
                    this._gpuTexture.height = e,
                    this._gpuTexture.size = this._size,
                    function(t, e) {
                        if (e.size) {
                            var i = t.gl
                              , r = e.width
                              , n = e.height;
                            switch (e.type) {
                            case v.TEX2D:
                                e.glTarget = i.TEXTURE_2D;
                                var s = Math.max(r, n);
                                if (s > t.capabilities.maxTextureSize && Qe(9100, s, t.capabilities.maxTextureSize),
                                e.samples === b.ONE) {
                                    var a = t.stateCache.glTexUnits[t.stateCache.texUnit];
                                    if (a.glTexture !== e.glTexture && (i.bindTexture(i.TEXTURE_2D, e.glTexture),
                                    a.glTexture = e.glTexture),
                                    Jt[e.format].isCompressed)
                                        for (var o = 0; o < e.mipLevel; ++o) {
                                            var l = re(e.format, r, n, 1)
                                              , h = new Uint8Array(l);
                                            i.compressedTexImage2D(i.TEXTURE_2D, o, e.glInternalFmt, r, n, 0, h),
                                            r = Math.max(1, r >> 1),
                                            n = Math.max(1, n >> 1)
                                        }
                                    else
                                        qa(t, e),
                                        Za(t, e)
                                } else
                                    e.glRenderbuffer && (t.stateCache.glRenderbuffer !== e.glRenderbuffer && (i.bindRenderbuffer(i.RENDERBUFFER, e.glRenderbuffer),
                                    t.stateCache.glRenderbuffer = e.glRenderbuffer),
                                    i.renderbufferStorageMultisample(i.RENDERBUFFER, e.samples, e.glInternalFmt, e.width, e.height));
                                break;
                            case v.CUBE:
                                e.type = v.CUBE,
                                e.glTarget = i.TEXTURE_CUBE_MAP;
                                var u = Math.max(r, n);
                                u > t.capabilities.maxCubeMapTextureSize && Qe(9100, u, t.capabilities.maxTextureSize);
                                var c = t.stateCache.glTexUnits[t.stateCache.texUnit];
                                if (c.glTexture !== e.glTexture && (i.bindTexture(i.TEXTURE_CUBE_MAP, e.glTexture),
                                c.glTexture = e.glTexture),
                                Jt[e.format].isCompressed)
                                    for (var _ = 0; _ < 6; ++_) {
                                        r = e.width,
                                        n = e.height;
                                        for (var d = 0; d < e.mipLevel; ++d) {
                                            var p = re(e.format, r, n, 1)
                                              , f = new Uint8Array(p);
                                            i.compressedTexImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + _, d, e.glInternalFmt, r, n, 0, f),
                                            r = Math.max(1, r >> 1),
                                            n = Math.max(1, n >> 1)
                                        }
                                    }
                                else
                                    qa(t, e),
                                    Za(t, e);
                                break;
                            default:
                                console.error("Unsupported TextureType, create texture failed."),
                                e.type = v.TEX2D,
                                e.glTarget = i.TEXTURE_2D
                            }
                        }
                    }(xa.instance, this._gpuTexture),
                    xa.instance.memoryStatus.textureSize -= i,
                    xa.instance.memoryStatus.textureSize += this._size)
                }
                ,
                i.initAsSwapchainTexture = function(t) {
                    var e = new pt;
                    e.format = t.format,
                    e.usage = Jt[t.format].hasDepth ? S.DEPTH_STENCIL_ATTACHMENT : S.COLOR_ATTACHMENT,
                    e.width = t.width,
                    e.height = t.height,
                    this.initialize(e, !0)
                }
                ,
                Je(e, [{
                    key: "gpuTexture",
                    get: function() {
                        return this._gpuTexture
                    }
                }]),
                e
            }(Ee)
              , Eo = "webglcontextlost";
            function Ao(t, e) {
                for (var i = ["", "WEBKIT_", "MOZ_"], r = 0; r < i.length; ++r) {
                    var n = t.getExtension(i[r] + e);
                    if (n)
                        return n
                }
                return null
            }
            function Co(t) {
                return {
                    EXT_texture_filter_anisotropic: Ao(t, "EXT_texture_filter_anisotropic"),
                    EXT_color_buffer_half_float: Ao(t, "EXT_color_buffer_half_float"),
                    EXT_color_buffer_float: Ao(t, "EXT_color_buffer_float"),
                    WEBGL_multi_draw: Ao(t, "WEBGL_multi_draw"),
                    WEBGL_compressed_texture_etc1: Ao(t, "WEBGL_compressed_texture_etc1"),
                    WEBGL_compressed_texture_etc: Ao(t, "WEBGL_compressed_texture_etc"),
                    WEBGL_compressed_texture_pvrtc: Ao(t, "WEBGL_compressed_texture_pvrtc"),
                    WEBGL_compressed_texture_astc: Ao(t, "WEBGL_compressed_texture_astc"),
                    WEBGL_compressed_texture_s3tc: Ao(t, "WEBGL_compressed_texture_s3tc"),
                    WEBGL_compressed_texture_s3tc_srgb: Ao(t, "WEBGL_compressed_texture_s3tc_srgb"),
                    WEBGL_debug_shaders: Ao(t, "WEBGL_debug_shaders"),
                    WEBGL_lose_context: Ao(t, "WEBGL_lose_context"),
                    WEBGL_debug_renderer_info: Ao(t, "WEBGL_debug_renderer_info"),
                    OES_texture_half_float_linear: Ao(t, "OES_texture_half_float_linear"),
                    OES_texture_float_linear: Ao(t, "OES_texture_float_linear"),
                    useVAO: !0
                }
            }
            var Ro, Bo = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this).stateCache = new To,
                    e.nullTex2D = null,
                    e.nullTexCube = null,
                    e._canvas = null,
                    e._webGL2ContextLostHandler = null,
                    e._extensions = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    this._canvas = t.windowHandle,
                    this._webGL2ContextLostHandler = this._onWebGLContextLost.bind(this),
                    this._canvas.addEventListener(Eo, this._onWebGLContextLost);
                    var e = xa.instance.gl;
                    this.stateCache.initialize(xa.instance.capabilities.maxTextureUnits, xa.instance.capabilities.maxUniformBufferBindings, xa.instance.capabilities.maxVertexAttributes),
                    this._extensions = Co(e),
                    function(t) {
                        t.activeTexture(t.TEXTURE0),
                        t.pixelStorei(t.PACK_ALIGNMENT, 1),
                        t.pixelStorei(t.UNPACK_ALIGNMENT, 1),
                        t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, !1),
                        t.bindFramebuffer(t.FRAMEBUFFER, null),
                        t.enable(t.SCISSOR_TEST),
                        t.enable(t.CULL_FACE),
                        t.cullFace(t.BACK),
                        t.frontFace(t.CCW),
                        t.polygonOffset(0, 0),
                        t.enable(t.DEPTH_TEST),
                        t.depthMask(!0),
                        t.depthFunc(t.LESS),
                        t.stencilFuncSeparate(t.FRONT, t.ALWAYS, 1, 65535),
                        t.stencilOpSeparate(t.FRONT, t.KEEP, t.KEEP, t.KEEP),
                        t.stencilMaskSeparate(t.FRONT, 65535),
                        t.stencilFuncSeparate(t.BACK, t.ALWAYS, 1, 65535),
                        t.stencilOpSeparate(t.BACK, t.KEEP, t.KEEP, t.KEEP),
                        t.stencilMaskSeparate(t.BACK, 65535),
                        t.disable(t.STENCIL_TEST),
                        t.disable(t.SAMPLE_ALPHA_TO_COVERAGE),
                        t.disable(t.BLEND),
                        t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD),
                        t.blendFuncSeparate(t.ONE, t.ZERO, t.ONE, t.ZERO),
                        t.colorMask(!0, !0, !0, !0),
                        t.blendColor(0, 0, 0, 0)
                    }(e);
                    var i = _.RGBA8
                      , r = _.DEPTH_STENCIL
                      , n = e.getParameter(e.DEPTH_BITS)
                      , s = e.getParameter(e.STENCIL_BITS);
                    n && s ? r = _.DEPTH_STENCIL : n && (r = _.DEPTH),
                    this._colorTexture = new bo,
                    this._colorTexture.initAsSwapchainTexture({
                        swapchain: this,
                        format: i,
                        width: t.width,
                        height: t.height
                    }),
                    this._depthStencilTexture = new bo,
                    this._depthStencilTexture.initAsSwapchainTexture({
                        swapchain: this,
                        format: r,
                        width: t.width,
                        height: t.height
                    }),
                    this.nullTex2D = xa.instance.createTexture(new pt(v.TEX2D,S.SAMPLED,_.RGBA8,2,2,T.NONE)),
                    this.nullTexCube = xa.instance.createTexture(new pt(v.CUBE,S.SAMPLED,_.RGBA8,2,2,T.NONE,6));
                    var a = new rt;
                    a.texExtent.width = 2,
                    a.texExtent.height = 2;
                    var o = new Uint8Array(this.nullTex2D.size);
                    o.fill(0),
                    xa.instance.copyBuffersToTexture([o], this.nullTex2D, [a]),
                    a.texSubres.layerCount = 6,
                    xa.instance.copyBuffersToTexture([o, o, o, o, o, o], this.nullTexCube, [a])
                }
                ,
                i.destroy = function() {
                    this._canvas && this._webGL2ContextLostHandler && (this._canvas.removeEventListener(Eo, this._webGL2ContextLostHandler),
                    this._webGL2ContextLostHandler = null),
                    this.nullTex2D && (this.nullTex2D.destroy(),
                    this.nullTex2D = null),
                    this.nullTexCube && (this.nullTexCube.destroy(),
                    this.nullTexCube = null),
                    this._extensions = null,
                    this._canvas = null
                }
                ,
                i.resize = function(t, e) {
                    this._colorTexture.width === t && this._colorTexture.height === e || ($e("Resizing swapchain: " + t + "x" + e),
                    this._canvas.width = t,
                    this._canvas.height = e,
                    this._colorTexture.resize(t, e),
                    this._depthStencilTexture.resize(t, e))
                }
                ,
                i._onWebGLContextLost = function(t) {
                    ii(11e3),
                    ri(t)
                }
                ,
                Je(e, [{
                    key: "extensions",
                    get: function() {
                        return this._extensions
                    }
                }]),
                e
            }(le), xo = t("WebGL2Device", function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._swapchain = null,
                    e._context = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t) {
                    xa.setInstance(this),
                    this._gfxAPI = h.WEBGL2,
                    this._bindingMappingInfo = t.bindingMappingInfo,
                    this._bindingMappingInfo.bufferOffsets.length || this._bindingMappingInfo.bufferOffsets.push(0),
                    this._bindingMappingInfo.samplerOffsets.length || this._bindingMappingInfo.samplerOffsets.push(0);
                    var e = this._context = function(t) {
                        var e = null;
                        try {
                            var i = {
                                alpha: li.ENABLE_TRANSPARENT_CANVAS,
                                antialias: hi || li.ENABLE_WEBGL_ANTIALIAS,
                                depth: !0,
                                stencil: !0,
                                premultipliedAlpha: !1,
                                preserveDrawingBuffer: !1,
                                powerPreference: "default",
                                failIfMajorPerformanceCaveat: !1
                            };
                            e = t.getContext("webgl2", i)
                        } catch (t) {
                            return null
                        }
                        return e
                    }(oe.canvas);
                    if (!e)
                        return console.error("This device does not support WebGL."),
                        !1;
                    this._queue = this.createQueue(new Vt(W.GRAPHICS)),
                    this._cmdBuff = this.createCommandBuffer(new Ht(this._queue)),
                    this._caps.maxVertexAttributes = e.getParameter(e.MAX_VERTEX_ATTRIBS),
                    this._caps.maxVertexUniformVectors = e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),
                    this._caps.maxFragmentUniformVectors = e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),
                    this._caps.maxTextureUnits = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),
                    this._caps.maxVertexTextureUnits = e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),
                    this._caps.maxUniformBufferBindings = e.getParameter(e.MAX_UNIFORM_BUFFER_BINDINGS),
                    this._caps.maxUniformBlockSize = e.getParameter(e.MAX_UNIFORM_BLOCK_SIZE),
                    this._caps.maxTextureSize = e.getParameter(e.MAX_TEXTURE_SIZE),
                    this._caps.maxCubeMapTextureSize = e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),
                    this._caps.uboOffsetAlignment = e.getParameter(e.UNIFORM_BUFFER_OFFSET_ALIGNMENT);
                    var i = e.getSupportedExtensions()
                      , r = "";
                    if (i)
                        for (var n, s = ui(i); !(n = s()).done; )
                            r += n.value + " ";
                    var a = Co(e);
                    a.WEBGL_debug_renderer_info ? (this._renderer = e.getParameter(a.WEBGL_debug_renderer_info.UNMASKED_RENDERER_WEBGL),
                    this._vendor = e.getParameter(a.WEBGL_debug_renderer_info.UNMASKED_VENDOR_WEBGL)) : (this._renderer = e.getParameter(e.RENDERER),
                    this._vendor = e.getParameter(e.VENDOR));
                    var o = e.getParameter(e.VERSION);
                    this._features.fill(!1),
                    this._features[c.TEXTURE_FLOAT] = !0,
                    this._features[c.TEXTURE_HALF_FLOAT] = !0,
                    this._features[c.FORMAT_R11G11B10F] = !0,
                    this._features[c.FORMAT_SRGB] = !0,
                    this._features[c.FORMAT_RGB8] = !0,
                    this._features[c.ELEMENT_INDEX_UINT] = !0,
                    this._features[c.INSTANCED_ARRAYS] = !0,
                    this._features[c.MULTIPLE_RENDER_TARGETS] = !0,
                    this._features[c.BLEND_MINMAX] = !0,
                    a.EXT_color_buffer_float && (this._features[c.COLOR_FLOAT] = !0,
                    this._features[c.COLOR_HALF_FLOAT] = !0),
                    a.OES_texture_float_linear && (this._features[c.TEXTURE_FLOAT_LINEAR] = !0),
                    a.OES_texture_half_float_linear && (this._features[c.TEXTURE_HALF_FLOAT_LINEAR] = !0);
                    var l = "";
                    return a.WEBGL_compressed_texture_etc1 && (this._features[c.FORMAT_ETC1] = !0,
                    l += "etc1 "),
                    a.WEBGL_compressed_texture_etc && (this._features[c.FORMAT_ETC2] = !0,
                    l += "etc2 "),
                    a.WEBGL_compressed_texture_s3tc && (this._features[c.FORMAT_DXT] = !0,
                    l += "dxt "),
                    a.WEBGL_compressed_texture_pvrtc && (this._features[c.FORMAT_PVRTC] = !0,
                    l += "pvrtc "),
                    a.WEBGL_compressed_texture_astc && (this._features[c.FORMAT_ASTC] = !0,
                    l += "astc "),
                    $e("WebGL2 device initialized."),
                    $e("RENDERER: " + this._renderer),
                    $e("VENDOR: " + this._vendor),
                    $e("VERSION: " + o),
                    $e("COMPRESSED_FORMAT: " + l),
                    $e("EXTENSIONS: " + r),
                    !0
                }
                ,
                i.destroy = function() {
                    this._queue && (this._queue.destroy(),
                    this._queue = null),
                    this._cmdBuff && (this._cmdBuff.destroy(),
                    this._cmdBuff = null);
                    for (var t = this._samplers.values(), e = t.next(); !e.done; )
                        e.value.destroy(),
                        e = t.next();
                    this._swapchain = null
                }
                ,
                i.flushCommands = function() {}
                ,
                i.acquire = function() {}
                ,
                i.present = function() {
                    var t = this._queue;
                    this._numDrawCalls = t.numDrawCalls,
                    this._numInstances = t.numInstances,
                    this._numTris = t.numTris,
                    t.clear()
                }
                ,
                i.createCommandBuffer = function(t) {
                    var e = new (t.type === j.PRIMARY ? go : lo);
                    return e.initialize(t),
                    e
                }
                ,
                i.createSwapchain = function(t) {
                    var e = new Bo;
                    return this._swapchain = e,
                    e.initialize(t),
                    e
                }
                ,
                i.createBuffer = function(t) {
                    var e = new so;
                    return e.initialize(t),
                    e
                }
                ,
                i.createTexture = function(t) {
                    var e = new bo;
                    return e.initialize(t),
                    e
                }
                ,
                i.createDescriptorSet = function(t) {
                    var e = new Ba;
                    return e.initialize(t),
                    e
                }
                ,
                i.createShader = function(t) {
                    var e = new So;
                    return e.initialize(t),
                    e
                }
                ,
                i.createInputAssembler = function(t) {
                    var e = new uo;
                    return e.initialize(t),
                    e
                }
                ,
                i.createRenderPass = function(t) {
                    var e = new yo;
                    return e.initialize(t),
                    e
                }
                ,
                i.createFramebuffer = function(t) {
                    var e = new ho;
                    return e.initialize(t),
                    e
                }
                ,
                i.createDescriptorSetLayout = function(t) {
                    var e = new co;
                    return e.initialize(t),
                    e
                }
                ,
                i.createPipelineLayout = function(t) {
                    var e = new _o;
                    return e.initialize(t),
                    e
                }
                ,
                i.createPipelineState = function(t) {
                    var e = new fo;
                    return e.initialize(t),
                    e
                }
                ,
                i.createQueue = function(t) {
                    var e = new mo;
                    return e.initialize(t),
                    e
                }
                ,
                i.getSampler = function(t) {
                    var e = Te.computeHash(t);
                    return this._samplers.has(e) || this._samplers.set(e, new vo(t,e)),
                    this._samplers.get(e)
                }
                ,
                i.getGlobalBarrier = function(t) {
                    var e = Ae.computeHash(t);
                    return this._globalBarriers.has(e) || this._globalBarriers.set(e, new Ae(t,e)),
                    this._globalBarriers.get(e)
                }
                ,
                i.getTextureBarrier = function(t) {
                    var e = Ce.computeHash(t);
                    return this._textureBarriers.has(e) || this._textureBarriers.set(e, new Ce(t,e)),
                    this._textureBarriers.get(e)
                }
                ,
                i.copyBuffersToTexture = function(t, e, i) {
                    ro(this, t, e.gpuTexture, i)
                }
                ,
                i.copyTextureToBuffers = function(t, e, i) {
                    !function(t, e, i, r) {
                        var n = t.gl
                          , s = t.stateCache
                          , a = n.createFramebuffer();
                        n.bindFramebuffer(n.FRAMEBUFFER, a);
                        var o = 0
                          , l = 0
                          , h = 1
                          , u = 1;
                        switch (e.glTarget) {
                        case n.TEXTURE_2D:
                            for (var c = 0; c < r.length; c++) {
                                var _ = r[c];
                                n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, e.glTarget, e.glTexture, _.texSubres.mipLevel),
                                o = _.texOffset.x,
                                l = _.texOffset.y,
                                h = _.texExtent.width,
                                u = _.texExtent.height,
                                n.readPixels(o, l, h, u, e.glFormat, e.glType, i[c])
                            }
                            break;
                        default:
                            console.error("Unsupported GL texture type, copy texture to buffers failed.")
                        }
                        n.bindFramebuffer(n.FRAMEBUFFER, null),
                        s.glFramebuffer = null,
                        n.deleteFramebuffer(a)
                    }(this, t.gpuTexture, e, i)
                }
                ,
                i.copyTexImagesToTexture = function(t, e, i) {
                    !function(t, e, i, r) {
                        var n = t.gl
                          , s = t.stateCache.glTexUnits[t.stateCache.texUnit];
                        s.glTexture !== i.glTexture && (n.bindTexture(i.glTarget, i.glTexture),
                        s.glTexture = i.glTexture);
                        var a = 0
                          , o = 0;
                        switch (i.glTarget) {
                        case n.TEXTURE_2D:
                            for (var l = 0; l < r.length; l++) {
                                var h = r[l];
                                n.texSubImage2D(n.TEXTURE_2D, h.texSubres.mipLevel, h.texOffset.x, h.texOffset.y, i.glFormat, i.glType, e[a++])
                            }
                            break;
                        case n.TEXTURE_CUBE_MAP:
                            for (var u = 0; u < r.length; u++) {
                                var c = r[u]
                                  , _ = c.texSubres.baseArrayLayer + c.texSubres.layerCount;
                                for (o = c.texSubres.baseArrayLayer; o < _; ++o)
                                    n.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + o, c.texSubres.mipLevel, c.texOffset.x, c.texOffset.y, i.glFormat, i.glType, e[a++])
                            }
                            break;
                        default:
                            console.error("Unsupported GL texture type, copy buffer to texture failed.")
                        }
                        i.flags & T.GEN_MIPMAP && n.generateMipmap(i.glTarget)
                    }(this, t, e.gpuTexture, i)
                }
                ,
                Je(e, [{
                    key: "gl",
                    get: function() {
                        return this._context
                    }
                }, {
                    key: "extensions",
                    get: function() {
                        return this._swapchain.extensions
                    }
                }, {
                    key: "stateCache",
                    get: function() {
                        return this._swapchain.stateCache
                    }
                }, {
                    key: "nullTex2D",
                    get: function() {
                        return this._swapchain.nullTex2D
                    }
                }, {
                    key: "nullTexCube",
                    get: function() {
                        return this._swapchain.nullTexCube
                    }
                }]),
                e
            }(oe));
            ci.WebGL2Device = xo,
            function(t) {
                t[t.positions = qt.ATTR_POSITION] = "positions",
                t[t.normals = qt.ATTR_NORMAL] = "normals",
                t[t.uvs = qt.ATTR_TEX_COORD] = "uvs",
                t[t.colors = qt.ATTR_COLOR] = "colors"
            }(Ro || (Ro = {}));
            var Do = [new Rt(qt.ATTR_POSITION,_.RGB32F), new Rt(qt.ATTR_NORMAL,_.RGB32F), new Rt(qt.ATTR_TEX_COORD,_.RG32F), new Rt(qt.ATTR_TANGENT,_.RGBA32F), new Rt(qt.ATTR_COLOR,_.RGBA32F)]
              , wo = new di;
            function Oo(t, e, i) {
                i = i || {};
                var r, n = [], s = 0, a = [], o = 0, l = t.positions.slice();
                if (l.length > 0) {
                    if (r = null,
                    t.attributes)
                        for (var h, u = ui(t.attributes); !(h = u()).done; ) {
                            var c = h.value;
                            if (c.name === qt.ATTR_POSITION) {
                                r = c;
                                break
                            }
                        }
                    r || (r = Do[0]),
                    n.push(r);
                    var d = Jt[r.format];
                    o = Math.max(o, Math.floor(l.length / d.count)),
                    a.push({
                        offset: s,
                        data: l,
                        attribute: r
                    }),
                    s += d.size
                }
                if (t.normals && t.normals.length > 0) {
                    if (r = null,
                    t.attributes)
                        for (var p, f = ui(t.attributes); !(p = f()).done; ) {
                            var g = p.value;
                            if (g.name === qt.ATTR_NORMAL) {
                                r = g;
                                break
                            }
                        }
                    r || (r = Do[1]);
                    var m = Jt[r.format];
                    n.push(r),
                    o = Math.max(o, Math.floor(t.normals.length / m.count)),
                    a.push({
                        offset: s,
                        data: t.normals,
                        attribute: r
                    }),
                    s += m.size
                }
                if (t.uvs && t.uvs.length > 0) {
                    if (r = null,
                    t.attributes)
                        for (var y, v = ui(t.attributes); !(y = v()).done; ) {
                            var S = y.value;
                            if (S.name === qt.ATTR_TEX_COORD) {
                                r = S;
                                break
                            }
                        }
                    r || (r = Do[2]);
                    var T = Jt[r.format];
                    n.push(r),
                    o = Math.max(o, Math.floor(t.uvs.length / T.count)),
                    a.push({
                        offset: s,
                        data: t.uvs,
                        attribute: r
                    }),
                    s += T.size
                }
                if (t.tangents && t.tangents.length > 0) {
                    if (r = null,
                    t.attributes)
                        for (var b, E = ui(t.attributes); !(b = E()).done; ) {
                            var A = b.value;
                            if (A.name === qt.ATTR_TANGENT) {
                                r = A;
                                break
                            }
                        }
                    r || (r = Do[3]);
                    var C = Jt[r.format];
                    n.push(r),
                    o = Math.max(o, Math.floor(t.tangents.length / C.count)),
                    a.push({
                        offset: s,
                        data: t.tangents,
                        attribute: r
                    }),
                    s += C.size
                }
                if (t.colors && t.colors.length > 0) {
                    if (r = null,
                    t.attributes)
                        for (var R, B = ui(t.attributes); !(R = B()).done; ) {
                            var x = R.value;
                            if (x.name === qt.ATTR_COLOR) {
                                r = x;
                                break
                            }
                        }
                    r || (r = Do[4]);
                    var D = Jt[r.format];
                    n.push(r),
                    o = Math.max(o, Math.floor(t.colors.length / D.count)),
                    a.push({
                        offset: s,
                        data: t.colors,
                        attribute: r
                    }),
                    s += D.size
                }
                if (t.customAttributes)
                    for (var w, O = ui(t.customAttributes); !(w = O()).done; ) {
                        var P = w.value
                          , M = Jt[P.attr.format];
                        n.push(P.attr),
                        o = Math.max(o, Math.floor(P.values.length / M.count)),
                        a.push({
                            offset: s,
                            data: P.values,
                            attribute: P.attr
                        }),
                        s += M.size
                    }
                for (var I = new gi, L = new ArrayBuffer(o * s), F = new DataView(L), k = 0, G = a; k < G.length; k++) {
                    var z = G[k];
                    pi(F, z.data, z.attribute.format, z.offset, s)
                }
                I.setNextAlignment(0);
                var U = {
                    attributes: n,
                    view: {
                        offset: I.getLength(),
                        length: L.byteLength,
                        count: o,
                        stride: s
                    }
                };
                I.addBuffer(L);
                var H = null
                  , V = 0;
                if (t.indices) {
                    var W = t.indices;
                    V = W.length,
                    H = new ArrayBuffer(2 * V);
                    var X = new DataView(H);
                    pi(X, W, _.R16UI)
                }
                var j = {
                    primitiveMode: t.primitiveMode || N.TRIANGLE_LIST,
                    vertexBundelIndices: [0]
                };
                H && (I.setNextAlignment(2),
                j.indexView = {
                    offset: I.getLength(),
                    length: H.byteLength,
                    count: V,
                    stride: 2
                },
                I.addBuffer(H));
                var Y = t.minPos;
                if (!Y && i.calculateBounds) {
                    Y = di.set(new di, 1 / 0, 1 / 0, 1 / 0);
                    for (var K = 0; K < o; ++K)
                        di.set(wo, l[3 * K + 0], l[3 * K + 1], l[3 * K + 2]),
                        di.min(Y, Y, wo)
                }
                var Z = t.maxPos;
                if (!Z && i.calculateBounds) {
                    Z = di.set(new di, -1 / 0, -1 / 0, -1 / 0);
                    for (var q = 0; q < o; ++q)
                        di.set(wo, l[3 * q + 0], l[3 * q + 1], l[3 * q + 2]),
                        di.max(Z, Z, wo)
                }
                var J = {
                    vertexBundles: [U],
                    primitives: [j]
                };
                return Y && (J.minPosition = new di(Y.x,Y.y,Y.z)),
                Z && (J.maxPosition = new di(Z.x,Z.y,Z.z)),
                e || (e = new fi),
                e.reset({
                    struct: J,
                    data: new Uint8Array(I.getCombined())
                }),
                e
            }
            var Po = Object.freeze({
                __proto__: null,
                find: mi,
                toPPM: function(t, e, i) {
                    return "P3 " + e + " " + i + " 255\n" + t.filter((function(t, e) {
                        return e % 4 < 3
                    }
                    )).toString() + "\n"
                },
                readMesh: function(t, e) {
                    void 0 === e && (e = 0);
                    for (var i, r = {
                        positions: []
                    }, n = new DataView(t.data.buffer,t.data.byteOffset,t.data.byteLength), s = t.struct, a = s.primitives[e], o = ui(a.vertexBundelIndices); !(i = o()).done; )
                        for (var l, h = i.value, u = s.vertexBundles[h], c = u.view.offset, d = u.view, p = d.length, f = d.stride, g = ui(u.attributes); !(l = g()).done; ) {
                            var m = l.value
                              , y = Ro[m.name];
                            y && (r[y] = (r[y] || []).concat(_i(n, m.format, c, p, f))),
                            c += Jt[m.format].size
                        }
                    var v = a.indexView;
                    return r.indices = _i(n, _["R" + 8 * v.stride + "UI"], v.offset, v.length),
                    r
                },
                createMesh: Oo,
                readBuffer: _i,
                writeBuffer: pi,
                mapBuffer: yi
            });
            t("utils", Po);
            var Mo, Io, Lo, Fo, No, ko, Go, zo, Uo, Ho, Vo, Wo, Xo, jo, Yo, Ko, Zo, qo, Jo, Qo, $o, tl, el, il, rl, nl, sl, al, ol, ll, hl, ul, cl, _l, dl, pl, fl, gl, ml, yl, vl, Sl, Tl, bl, El, Al, Cl, Rl, Bl, xl, Dl, wl, Ol, Pl = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._morphRenderingInstance = null,
                    e._usedMaterials = new Set,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.getMacroPatches = function(t) {
                    return this._morphRenderingInstance ? this._morphRenderingInstance.requiredPatches(t) : null
                }
                ,
                i.initSubModel = function(e, i, r) {
                    return t.prototype.initSubModel.call(this, e, i, this._launderMaterial(r))
                }
                ,
                i.destroy = function() {
                    t.prototype.destroy.call(this),
                    this._morphRenderingInstance = null
                }
                ,
                i.setSubModelMaterial = function(e, i) {
                    return t.prototype.setSubModelMaterial.call(this, e, this._launderMaterial(i))
                }
                ,
                i._updateLocalDescriptors = function(e, i) {
                    t.prototype._updateLocalDescriptors.call(this, e, i),
                    this._morphRenderingInstance && this._morphRenderingInstance.adaptPipelineState(e, i)
                }
                ,
                i._launderMaterial = function(t) {
                    return t
                }
                ,
                i.setMorphRendering = function(t) {
                    this._morphRenderingInstance = t
                }
                ,
                e
            }(vi), Ml = Si({
                OFF: 0,
                ON: 1
            }), Il = Si({
                OFF: 0,
                ON: 1
            }), Ll = (Mo = Ti("cc.ModelLightmapSettings"),
            Io = bi("_recieveShadow"),
            Mo((Vo = function() {
                function t() {
                    Oi(this, "texture", No, this),
                    Oi(this, "uvParam", ko, this),
                    Oi(this, "_bakeable", Go, this),
                    Oi(this, "_castShadow", zo, this),
                    Oi(this, "_receiveShadow", Uo, this),
                    Oi(this, "_lightmapSize", Ho, this)
                }
                return Je(t, [{
                    key: "bakeable",
                    get: function() {
                        return this._bakeable
                    },
                    set: function(t) {
                        this._bakeable = t
                    }
                }, {
                    key: "castShadow",
                    get: function() {
                        return this._castShadow
                    },
                    set: function(t) {
                        this._castShadow = t
                    }
                }, {
                    key: "receiveShadow",
                    get: function() {
                        return this._receiveShadow
                    },
                    set: function(t) {
                        this._receiveShadow = t
                    }
                }, {
                    key: "lightmapSize",
                    get: function() {
                        return this._lightmapSize
                    },
                    set: function(t) {
                        this._lightmapSize = t
                    }
                }]),
                t
            }(),
            No = Ei((Fo = Vo).prototype, "texture", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            ko = Ei(Fo.prototype, "uvParam", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Mi
                }
            }),
            Go = Ei(Fo.prototype, "_bakeable", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            zo = Ei(Fo.prototype, "_castShadow", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Uo = Ei(Fo.prototype, "_receiveShadow", [Io], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Ho = Ei(Fo.prototype, "_lightmapSize", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 64
                }
            }),
            Ei(Fo.prototype, "bakeable", [Ai], Object.getOwnPropertyDescriptor(Fo.prototype, "bakeable"), Fo.prototype),
            Ei(Fo.prototype, "castShadow", [Ai], Object.getOwnPropertyDescriptor(Fo.prototype, "castShadow"), Fo.prototype),
            Ei(Fo.prototype, "receiveShadow", [Ai], Object.getOwnPropertyDescriptor(Fo.prototype, "receiveShadow"), Fo.prototype),
            Ei(Fo.prototype, "lightmapSize", [Ai], Object.getOwnPropertyDescriptor(Fo.prototype, "lightmapSize"), Fo.prototype),
            Lo = Fo)) || Lo), Fl = (Wo = Ti("cc.MeshRenderer"),
            Xo = Ii(),
            jo = Li(100),
            Yo = Fi(),
            Ko = Ci(Ml),
            Zo = Ni(),
            qo = Ci(Il),
            Jo = Ni(),
            Qo = Ci(fi),
            $o = Ni(),
            tl = ki(),
            ul = Wo(el = Xo(el = jo(el = Yo(el = Ri((hl = ll = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "lightmapSettings", rl, Gi(e)),
                    Oi(e, "_mesh", nl, Gi(e)),
                    Oi(e, "_shadowCastingMode", sl, Gi(e)),
                    Oi(e, "_shadowReceivingMode", al, Gi(e)),
                    e._subMeshShapesWeights = [],
                    e._modelType = void 0,
                    e._model = null,
                    e._morphInstance = null,
                    Oi(e, "_enableMorph", ol, Gi(e)),
                    e._modelType = vi,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onLoad = function() {
                    this._mesh && this._mesh.initialize(),
                    this._validateShapeWeights() || this._initSubMeshShapesWeights(),
                    this._watchMorphInMesh(),
                    this._updateModels(),
                    this._updateCastShadow(),
                    this._updateReceiveShadow()
                }
                ,
                i.onRestore = function() {
                    this._updateModels(),
                    this._updateCastShadow(),
                    this._updateReceiveShadow()
                }
                ,
                i.onEnable = function() {
                    this._model || this._updateModels(),
                    this._updateCastShadow(),
                    this._updateReceiveShadow(),
                    this._attachToScene()
                }
                ,
                i.onDisable = function() {
                    this._model && this._detachFromScene()
                }
                ,
                i.onDestroy = function() {
                    this._model && (ci.director.root.destroyModel(this._model),
                    this._model = null,
                    this._models.length = 0),
                    this._morphInstance && this._morphInstance.destroy()
                }
                ,
                i.getWeight = function(t, e) {
                    var i = this._subMeshShapesWeights;
                    Bi(t < i.length);
                    var r = this._subMeshShapesWeights[t];
                    return Bi(e < r.length),
                    r[e]
                }
                ,
                i.setWeights = function(t, e) {
                    var i = this._subMeshShapesWeights;
                    e >= i.length || i[e].length === t.length && (i[e] = t.slice(0),
                    this._uploadSubMeshShapesWeights(e))
                }
                ,
                i.setWeight = function(t, e, i) {
                    var r = this._subMeshShapesWeights;
                    if (!(e >= r.length)) {
                        var n = r[e];
                        i >= n.length || (n[i] = t,
                        this._uploadSubMeshShapesWeights(e))
                    }
                }
                ,
                i.setInstancedAttribute = function(t, e) {
                    if (this.model)
                        for (var i = this.model.instancedAttributes, r = i.attributes, n = i.views, s = 0; s < r.length; s++)
                            if (r[s].name === t) {
                                n[s].set(e);
                                break
                            }
                }
                ,
                i._updateLightmap = function(t, e, i, r, n) {
                    this.lightmapSettings.texture = t,
                    this.lightmapSettings.uvParam.x = e,
                    this.lightmapSettings.uvParam.y = i,
                    this.lightmapSettings.uvParam.z = r,
                    this.lightmapSettings.uvParam.w = n,
                    this._onUpdateLightingmap()
                }
                ,
                i._updateModels = function() {
                    if (this.enabledInHierarchy && this._mesh) {
                        var t = this._model;
                        t ? (t.destroy(),
                        t.initialize(),
                        t.node = t.transform = this.node) : this._createModel(),
                        this._model && (this._model.createBoundingShape(this._mesh.struct.minPosition, this._mesh.struct.maxPosition),
                        this._updateModelParams(),
                        this._onUpdateLightingmap())
                    }
                }
                ,
                i._createModel = function() {
                    var t = this._morphInstance && this._modelType === vi ? Pl : this._modelType
                      , e = this._model = ci.director.root.createModel(t);
                    e.visFlags = this.visibility,
                    e.node = e.transform = this.node,
                    this._models.length = 0,
                    this._models.push(this._model),
                    this._morphInstance && e instanceof Pl && e.setMorphRendering(this._morphInstance)
                }
                ,
                i._attachToScene = function() {
                    if (this.node.scene && this._model) {
                        var t = this._getRenderScene();
                        null !== this._model.scene && this._detachFromScene(),
                        t.addModel(this._model)
                    }
                }
                ,
                i._detachFromScene = function() {
                    this._model && this._model.scene && this._model.scene.removeModel(this._model)
                }
                ,
                i._updateModelParams = function() {
                    if (this._mesh && this._model) {
                        this.node.hasChangedFlags |= xi.POSITION,
                        this._model.transform.hasChangedFlags |= xi.POSITION,
                        this._model.isDynamicBatching = this._isBatchingEnabled();
                        var t = this._mesh ? this._mesh.renderingSubMeshes.length : 0
                          , e = this._mesh.renderingSubMeshes;
                        if (e)
                            for (var i = 0; i < t; ++i) {
                                var r = this.getRenderMaterial(i);
                                r && !r.isValid && (r = null);
                                var n = e[i];
                                n && this._model.initSubModel(i, n, r || this._getBuiltinMaterial())
                            }
                        this._model.enabled = !0
                    }
                }
                ,
                i._onUpdateLightingmap = function() {
                    null !== this.model && this.model.updateLightingmap(this.lightmapSettings.texture, this.lightmapSettings.uvParam),
                    this.setInstancedAttribute("a_lightingMapUVParam", [this.lightmapSettings.uvParam.x, this.lightmapSettings.uvParam.y, this.lightmapSettings.uvParam.z, this.lightmapSettings.uvParam.w])
                }
                ,
                i._onMaterialModified = function(t, e) {
                    this._model && this._model.inited && this._onRebuildPSO(t, e || this._getBuiltinMaterial())
                }
                ,
                i._onRebuildPSO = function(t, e) {
                    this._model && this._model.inited && (this._model.isDynamicBatching = this._isBatchingEnabled(),
                    this._model.setSubModelMaterial(t, e),
                    this._onUpdateLightingmap())
                }
                ,
                i._onMeshChanged = function() {}
                ,
                i._clearMaterials = function() {
                    if (this._model)
                        for (var t = this._model.subModels, e = 0; e < t.length; ++e)
                            this._onMaterialModified(e, null)
                }
                ,
                i._getBuiltinMaterial = function() {
                    return Di.get("missing-material")
                }
                ,
                i._onVisibilityChange = function(t) {
                    this._model && (this._model.visFlags = t)
                }
                ,
                i._updateCastShadow = function() {
                    this._model && (this._shadowCastingMode === Ml.OFF ? this._model.castShadow = !1 : (Bi(this._shadowCastingMode === Ml.ON, "ShadowCastingMode " + this._shadowCastingMode + " is not supported."),
                    this._model.castShadow = !0))
                }
                ,
                i._updateReceiveShadow = function() {
                    this._model && (this._shadowReceivingMode === Il.OFF ? this._model.receiveShadow = !1 : this._model.receiveShadow = !0)
                }
                ,
                i._isBatchingEnabled = function() {
                    for (var t = 0; t < this._materials.length; ++t) {
                        var e = this._materials[t];
                        if (e)
                            for (var i = 0; i < e.passes.length; ++i)
                                if (e.passes[i].batchingScheme)
                                    return !0
                    }
                    return !1
                }
                ,
                i._watchMorphInMesh = function() {
                    if (this._morphInstance && (this._morphInstance.destroy(),
                    this._morphInstance = null),
                    this._enableMorph && this._mesh && this._mesh.struct.morph && this._mesh.morphRendering) {
                        this._morphInstance = this._mesh.morphRendering.createInstance();
                        for (var t = this._mesh.struct.primitives.length, e = 0; e < t; ++e)
                            this._uploadSubMeshShapesWeights(e);
                        this._model && this._model instanceof Pl && this._model.setMorphRendering(this._morphInstance)
                    }
                }
                ,
                i._initSubMeshShapesWeights = function() {
                    var t = this._mesh;
                    if (this._subMeshShapesWeights.length = 0,
                    t) {
                        var e = t.struct.morph;
                        if (e) {
                            var i = e.weights;
                            this._subMeshShapesWeights = e.subMeshMorphs.map((function(t) {
                                return t ? t.weights ? t.weights.slice(0) : i ? (Bi(i.length === t.targets.length),
                                i.slice(0)) : new Array(t.targets.length).fill(0) : []
                            }
                            ))
                        }
                    }
                }
                ,
                i._validateShapeWeights = function() {
                    var t = this._mesh
                      , e = this._subMeshShapesWeights;
                    if (!t || !t.struct.morph)
                        return 0 === e.length;
                    var i = t.struct.morph;
                    return i.subMeshMorphs.length === e.length && e.every((function(t, e) {
                        var r, n, s = t.length;
                        return (null !== (r = null === (n = i.subMeshMorphs[e]) || void 0 === n ? void 0 : n.targets.length) && void 0 !== r ? r : 0) === s
                    }
                    ))
                }
                ,
                i._uploadSubMeshShapesWeights = function(t) {
                    var e;
                    null === (e = this._morphInstance) || void 0 === e || e.setWeights(t, this._subMeshShapesWeights[t])
                }
                ,
                Je(e, [{
                    key: "shadowCastingMode",
                    get: function() {
                        return this._shadowCastingMode
                    },
                    set: function(t) {
                        this._shadowCastingMode = t,
                        this._updateCastShadow()
                    }
                }, {
                    key: "receiveShadow",
                    get: function() {
                        return this._shadowReceivingMode
                    },
                    set: function(t) {
                        this._shadowReceivingMode = t,
                        this._updateReceiveShadow()
                    }
                }, {
                    key: "mesh",
                    get: function() {
                        return this._mesh
                    },
                    set: function(t) {
                        var e = this._mesh
                          , i = this._mesh = t;
                        null == i || i.initialize(),
                        this._initSubMeshShapesWeights(),
                        this._watchMorphInMesh(),
                        this._onMeshChanged(e),
                        this._updateModels(),
                        this.enabledInHierarchy && this._attachToScene(),
                        this._updateCastShadow(),
                        this._updateReceiveShadow()
                    }
                }, {
                    key: "model",
                    get: function() {
                        return this._model
                    }
                }, {
                    key: "enableMorph",
                    get: function() {
                        return this._enableMorph
                    },
                    set: function(t) {
                        this._enableMorph = t
                    }
                }]),
                e
            }(zi),
            ll.ShadowCastingMode = Ml,
            ll.ShadowReceivingMode = Il,
            rl = Ei((il = hl).prototype, "lightmapSettings", [Pi, Ai, wi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Ll
                }
            }),
            nl = Ei(il.prototype, "_mesh", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            sl = Ei(il.prototype, "_shadowCastingMode", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Ml.OFF
                }
            }),
            al = Ei(il.prototype, "_shadowReceivingMode", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Il.ON
                }
            }),
            Ei(il.prototype, "shadowCastingMode", [Ko, Zo, wi], Object.getOwnPropertyDescriptor(il.prototype, "shadowCastingMode"), il.prototype),
            Ei(il.prototype, "receiveShadow", [qo, Jo, wi], Object.getOwnPropertyDescriptor(il.prototype, "receiveShadow"), il.prototype),
            Ei(il.prototype, "mesh", [Qo, $o], Object.getOwnPropertyDescriptor(il.prototype, "mesh"), il.prototype),
            Ei(il.prototype, "enableMorph", [tl, wi], Object.getOwnPropertyDescriptor(il.prototype, "enableMorph"), il.prototype),
            ol = Ei(il.prototype, "_enableMorph", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            el = il)) || el) || el) || el) || el) || el,
            t({
                MeshRenderer: ul,
                ModelComponent: ul
            }),
            ul);
            function Nl(t, e) {
                var i = t.sharedMaterials.length;
                if (i !== e.sharedMaterials.length)
                    return !1;
                for (var r = 0; r < i; r++)
                    if (t.getRenderMaterial(r) !== e.getRenderMaterial(r))
                        return !1;
                return !0
            }
            t("BatchingUtility", function() {
                function t() {}
                return t.batchStaticModel = function(t, e) {
                    var i = t.getComponentsInChildren(Fl);
                    if (i.length < 2)
                        return console.error("the number of static models to batch is less than 2,it needn't batch."),
                        !1;
                    for (var r = 1; r < i.length; r++) {
                        if (!i[0].mesh.validateMergingMesh(i[r].mesh))
                            return console.error("the meshes of " + i[0].node.name + " and " + i[r].node.name + " can't be merged"),
                            !1;
                        if (!Nl(i[0], i[r]))
                            return console.error("the materials of " + i[0].node.name + " and " + i[r].node.name + " can't be merged"),
                            !1
                    }
                    var n = new fi
                      , s = new Ui
                      , a = new Ui;
                    t.getWorldMatrix(a),
                    Ui.invert(a, a);
                    for (var o = 0; o < i.length; o++) {
                        var l = i[o];
                        l.node.getWorldMatrix(s),
                        Ui.multiply(s, a, s),
                        n.merge(i[o].mesh, s),
                        l.enabled = !1
                    }
                    var h = e.addComponent(Fl);
                    return h.mesh = n,
                    h.sharedMaterials = i[0].sharedMaterials,
                    !0
                }
                ,
                t.unbatchStaticModel = function(t, e) {
                    for (var i = t.getComponentsInChildren(Fl), r = 0; r < i.length; r++)
                        i[r].enabled = !0;
                    var n = e.getComponent(Fl);
                    return n && (n.mesh && n.mesh.destroyRenderingMesh(),
                    n.destroy()),
                    !0
                }
                ,
                t
            }()),
            Hi(Fl.prototype, "MeshRenderer.prototype", [{
                name: "enableDynamicBatching"
            }, {
                name: "recieveShadows"
            }]),
            ci.ModelComponent = Fl,
            Vi.setClassAlias(Fl, "cc.ModelComponent");
            var kl, Gl, zl, Ul, Hl, Vl, Wl, Xl, jl, Yl, Kl, Zl, ql, Jl, Ql, $l, th, eh, ih, rh, nh, sh, ah, oh, lh, hh, uh, ch, _h, dh, ph, fh, gh, mh, yh, vh, Sh, Th, bh, Eh, Ah, Ch, Rh, Bh, xh, Dh, wh, Oh, Ph, Mh = Si({
                LUMINOUS_FLUX: 0,
                LUMINANCE: 1
            }), Ih = new di, Lh = Ti("cc.StaticLightSettings")((ml = function() {
                function t() {
                    Oi(this, "_baked", dl, this),
                    Oi(this, "_editorOnly", pl, this),
                    Oi(this, "_bakeable", fl, this),
                    Oi(this, "_castShadow", gl, this)
                }
                return Je(t, [{
                    key: "editorOnly",
                    get: function() {
                        return this._editorOnly
                    },
                    set: function(t) {
                        this._editorOnly = t
                    }
                }, {
                    key: "baked",
                    get: function() {
                        return this._baked
                    },
                    set: function(t) {
                        this._baked = t
                    }
                }, {
                    key: "bakeable",
                    get: function() {
                        return this._bakeable
                    },
                    set: function(t) {
                        this._bakeable = t
                    }
                }, {
                    key: "castShadow",
                    get: function() {
                        return this._castShadow
                    },
                    set: function(t) {
                        this._castShadow = t
                    }
                }]),
                t
            }(),
            dl = Ei((_l = ml).prototype, "_baked", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            pl = Ei(_l.prototype, "_editorOnly", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            fl = Ei(_l.prototype, "_bakeable", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            gl = Ei(_l.prototype, "_castShadow", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Ei(_l.prototype, "editorOnly", [Ai], Object.getOwnPropertyDescriptor(_l.prototype, "editorOnly"), _l.prototype),
            Ei(_l.prototype, "bakeable", [Ai], Object.getOwnPropertyDescriptor(_l.prototype, "bakeable"), _l.prototype),
            Ei(_l.prototype, "castShadow", [Ai], Object.getOwnPropertyDescriptor(_l.prototype, "castShadow"), _l.prototype),
            cl = _l)) || cl, Fh = function(e) {
                return t({
                    Light: e,
                    LightComponent: e
                }),
                e
            }((yl = Ti("cc.Light"),
            vl = Ni(),
            Sl = Ni(),
            Tl = ji(),
            bl = Ni(),
            El = Ci(Lh),
            yl((Ol = wl = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_color", Rl, Gi(e)),
                    Oi(e, "_useColorTemperature", Bl, Gi(e)),
                    Oi(e, "_colorTemperature", xl, Gi(e)),
                    Oi(e, "_staticSettings", Dl, Gi(e)),
                    e._type = Wi.UNKNOWN,
                    e._lightType = void 0,
                    e._light = null,
                    e._lightType = Yi,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onLoad = function() {
                    this._createLight()
                }
                ,
                i.onEnable = function() {
                    this._attachToScene()
                }
                ,
                i.onDisable = function() {
                    this._detachFromScene()
                }
                ,
                i.onDestroy = function() {
                    this._destroyLight()
                }
                ,
                i._createLight = function() {
                    this._light || (this._light = ci.director.root.createLight(this._lightType)),
                    this.color = this._color,
                    this.useColorTemperature = this._useColorTemperature,
                    this.colorTemperature = this._colorTemperature,
                    this._light.node = this.node,
                    this._light.baked = this.baked
                }
                ,
                i._destroyLight = function() {
                    this._light && (ci.director.root.destroyLight(this),
                    this._light = null)
                }
                ,
                i._attachToScene = function() {
                    if (this._detachFromScene(),
                    this._light && !this._light.scene && this.node.scene) {
                        var t = this._getRenderScene();
                        switch (this._type) {
                        case Wi.DIRECTIONAL:
                            t.addDirectionalLight(this._light),
                            t.setMainLight(this._light);
                            break;
                        case Wi.SPHERE:
                            t.addSphereLight(this._light);
                            break;
                        case Wi.SPOT:
                            t.addSpotLight(this._light)
                        }
                    }
                }
                ,
                i._detachFromScene = function() {
                    if (this._light && this._light.scene) {
                        var t = this._light.scene;
                        switch (this._type) {
                        case Wi.DIRECTIONAL:
                            t.removeDirectionalLight(this._light),
                            t.unsetMainLight(this._light);
                            break;
                        case Wi.SPHERE:
                            t.removeSphereLight(this._light);
                            break;
                        case Wi.SPOT:
                            t.removeSpotLight(this._light)
                        }
                    }
                }
                ,
                Je(e, [{
                    key: "color",
                    get: function() {
                        return this._color
                    },
                    set: function(t) {
                        this._color = t,
                        this._light && (Ih.x = t.r / 255,
                        Ih.y = t.g / 255,
                        Ih.z = t.b / 255,
                        this._light.color = Ih)
                    }
                }, {
                    key: "useColorTemperature",
                    get: function() {
                        return this._useColorTemperature
                    },
                    set: function(t) {
                        this._useColorTemperature = t,
                        this._light && (this._light.useColorTemperature = t)
                    }
                }, {
                    key: "colorTemperature",
                    get: function() {
                        return this._colorTemperature
                    },
                    set: function(t) {
                        this._colorTemperature = t,
                        this._light && (this._light.colorTemperature = t)
                    }
                }, {
                    key: "staticSettings",
                    get: function() {
                        return this._staticSettings
                    },
                    set: function(t) {
                        this._staticSettings = t
                    }
                }, {
                    key: "type",
                    get: function() {
                        return this._type
                    }
                }, {
                    key: "baked",
                    get: function() {
                        return this.staticSettings.baked
                    },
                    set: function(t) {
                        this.staticSettings.baked = t,
                        null !== this._light && (this._light.baked = t)
                    }
                }]),
                e
            }(Ki),
            wl.Type = Wi,
            wl.PhotometricTerm = Mh,
            Rl = Ei((Cl = Ol).prototype, "_color", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Zi.WHITE.clone()
                }
            }),
            Bl = Ei(Cl.prototype, "_useColorTemperature", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            xl = Ei(Cl.prototype, "_colorTemperature", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 6550
                }
            }),
            Dl = Ei(Cl.prototype, "_staticSettings", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Lh
                }
            }),
            Ei(Cl.prototype, "color", [vl], Object.getOwnPropertyDescriptor(Cl.prototype, "color"), Cl.prototype),
            Ei(Cl.prototype, "useColorTemperature", [Sl], Object.getOwnPropertyDescriptor(Cl.prototype, "useColorTemperature"), Cl.prototype),
            Ei(Cl.prototype, "colorTemperature", [Xi, Tl, bl], Object.getOwnPropertyDescriptor(Cl.prototype, "colorTemperature"), Cl.prototype),
            Ei(Cl.prototype, "staticSettings", [El], Object.getOwnPropertyDescriptor(Cl.prototype, "staticSettings"), Cl.prototype),
            Al = Cl)) || Al)), Nh = function(e) {
                return t({
                    DirectionalLight: e,
                    DirectionalLightComponent: e
                }),
                e
            }((kl = Ti("cc.DirectionalLight"),
            Gl = Ii(),
            zl = Fi(),
            Ul = bi("_illuminance"),
            Hl = Ni(),
            kl(Vl = Gl(Vl = zl(Vl = Ri((Yl = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_illuminanceHDR", Xl, Gi(e)),
                    Oi(e, "_illuminanceLDR", jl, Gi(e)),
                    e._type = Wi.DIRECTIONAL,
                    e._light = null,
                    e._lightType = Ji,
                    e
                }
                return qe(e, t),
                e.prototype._createLight = function() {
                    t.prototype._createLight.call(this),
                    this._illuminanceLDR = this._illuminanceHDR * qi.standardExposureValue,
                    this._light && (this._light.illuminanceHDR = this._illuminanceHDR,
                    this._light.illuminanceLDR = this._illuminanceLDR)
                }
                ,
                Je(e, [{
                    key: "illuminance",
                    get: function() {
                        return ci.director.root.pipeline.pipelineSceneData.isHDR ? this._illuminanceHDR : this._illuminanceLDR
                    },
                    set: function(t) {
                        ci.director.root.pipeline.pipelineSceneData.isHDR ? (this._illuminanceHDR = t,
                        this._light && (this._light.illuminanceHDR = this._illuminanceHDR)) : (this._illuminanceLDR = t,
                        this._light && (this._light.illuminanceLDR = this._illuminanceLDR))
                    }
                }]),
                e
            }(Fh),
            Xl = Ei((Wl = Yl).prototype, "_illuminanceHDR", [Qi, Ul], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 65e3
                }
            }),
            jl = Ei(Wl.prototype, "_illuminanceLDR", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            Ei(Wl.prototype, "illuminance", [Hl], Object.getOwnPropertyDescriptor(Wl.prototype, "illuminance"), Wl.prototype),
            Vl = Wl)) || Vl) || Vl) || Vl) || Vl)), kh = function(e) {
                return t({
                    SphereLight: e,
                    SphereLightComponent: e
                }),
                e
            }((Kl = Ti("cc.SphereLight"),
            Zl = Ii(),
            ql = Fi(),
            Jl = bi("_luminance"),
            Ql = Ni(),
            $l = Ni(),
            th = Ci(Mh),
            eh = Ni(),
            ih = Ni(),
            rh = Ni(),
            Kl(nh = Zl(nh = ql(nh = Ri((ch = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_size", ah, Gi(e)),
                    Oi(e, "_luminanceHDR", oh, Gi(e)),
                    Oi(e, "_luminanceLDR", lh, Gi(e)),
                    Oi(e, "_term", hh, Gi(e)),
                    Oi(e, "_range", uh, Gi(e)),
                    e._type = Wi.SPHERE,
                    e._light = null,
                    e._lightType = $i,
                    e
                }
                return qe(e, t),
                e.prototype._createLight = function() {
                    t.prototype._createLight.call(this),
                    this.size = this._size,
                    this.range = this._range,
                    ci.director.root.pipeline.pipelineSceneData.isHDR ? this._luminanceLDR = this._luminanceHDR * qi.standardExposureValue * qi.standardLightMeterScale : this._luminanceHDR = this._luminanceLDR / qi.standardExposureValue / qi.standardLightMeterScale,
                    this._light && (this._light.luminanceHDR = this._luminanceHDR,
                    this._light.luminanceLDR = this._luminanceLDR)
                }
                ,
                Je(e, [{
                    key: "luminousFlux",
                    get: function() {
                        return ci.director.root.pipeline.pipelineSceneData.isHDR ? this._luminanceHDR * tr(this._size) : this._luminanceLDR
                    },
                    set: function(t) {
                        var e = 0;
                        ci.director.root.pipeline.pipelineSceneData.isHDR ? (this._luminanceHDR = t / tr(this._size),
                        e = this._luminanceHDR) : (this._luminanceLDR = t,
                        e = this._luminanceLDR),
                        this._light && (this._light.luminance = e)
                    }
                }, {
                    key: "luminance",
                    get: function() {
                        return ci.director.root.pipeline.pipelineSceneData.isHDR ? this._luminanceHDR : this._luminanceLDR
                    },
                    set: function(t) {
                        ci.director.root.pipeline.pipelineSceneData.isHDR ? (this._luminanceHDR = t,
                        this._light && (this._light.luminanceHDR = this._luminanceHDR)) : (this._luminanceLDR = t,
                        this._light && (this._light.luminanceLDR = this._luminanceLDR))
                    }
                }, {
                    key: "term",
                    get: function() {
                        return this._term
                    },
                    set: function(t) {
                        this._term = t
                    }
                }, {
                    key: "size",
                    get: function() {
                        return this._size
                    },
                    set: function(t) {
                        this._size = t,
                        this._light && (this._light.size = t)
                    }
                }, {
                    key: "range",
                    get: function() {
                        return this._range
                    },
                    set: function(t) {
                        this._range = t,
                        this._light && (this._light.range = t)
                    }
                }]),
                e
            }(Fh),
            ah = Ei((sh = ch).prototype, "_size", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return .15
                }
            }),
            oh = Ei(sh.prototype, "_luminanceHDR", [Pi, Jl], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1700 / tr(.15)
                }
            }),
            lh = Ei(sh.prototype, "_luminanceLDR", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            hh = Ei(sh.prototype, "_term", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Mh.LUMINOUS_FLUX
                }
            }),
            uh = Ei(sh.prototype, "_range", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            Ei(sh.prototype, "luminousFlux", [Ql], Object.getOwnPropertyDescriptor(sh.prototype, "luminousFlux"), sh.prototype),
            Ei(sh.prototype, "luminance", [$l], Object.getOwnPropertyDescriptor(sh.prototype, "luminance"), sh.prototype),
            Ei(sh.prototype, "term", [th, eh], Object.getOwnPropertyDescriptor(sh.prototype, "term"), sh.prototype),
            Ei(sh.prototype, "size", [ih], Object.getOwnPropertyDescriptor(sh.prototype, "size"), sh.prototype),
            Ei(sh.prototype, "range", [rh], Object.getOwnPropertyDescriptor(sh.prototype, "range"), sh.prototype),
            nh = sh)) || nh) || nh) || nh) || nh)), Gh = function(e) {
                return t({
                    SpotLight: e,
                    SpotLightComponent: e
                }),
                e
            }((_h = Ti("cc.SpotLight"),
            dh = Ii(),
            ph = Fi(),
            fh = bi("_luminance"),
            gh = Ni(),
            mh = Ni(),
            yh = Ci(Mh),
            vh = Ni(),
            Sh = Ni(),
            Th = Ni(),
            bh = ji(),
            Eh = Ni(),
            _h(Ah = dh(Ah = ph(Ah = Ri((Ph = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_size", Rh, Gi(e)),
                    Oi(e, "_luminanceHDR", Bh, Gi(e)),
                    Oi(e, "_luminanceLDR", xh, Gi(e)),
                    Oi(e, "_term", Dh, Gi(e)),
                    Oi(e, "_range", wh, Gi(e)),
                    Oi(e, "_spotAngle", Oh, Gi(e)),
                    e._type = Wi.SPOT,
                    e._light = null,
                    e._lightType = er,
                    e
                }
                return qe(e, t),
                e.prototype._createLight = function() {
                    t.prototype._createLight.call(this),
                    this.size = this._size,
                    this.range = this._range,
                    this.spotAngle = this._spotAngle,
                    ci.director.root.pipeline.pipelineSceneData.isHDR ? this._luminanceLDR = this._luminanceHDR * qi.standardExposureValue * qi.standardLightMeterScale : this._luminanceHDR = this._luminanceLDR / qi.standardExposureValue / qi.standardLightMeterScale,
                    this._light && (this._light.luminanceHDR = this._luminanceHDR,
                    this._light.luminanceLDR = this._luminanceLDR)
                }
                ,
                Je(e, [{
                    key: "luminousFlux",
                    get: function() {
                        return ci.director.root.pipeline.pipelineSceneData.isHDR ? this._luminanceHDR * tr(this._size) : this._luminanceLDR
                    },
                    set: function(t) {
                        var e = 0;
                        ci.director.root.pipeline.pipelineSceneData.isHDR ? (this._luminanceHDR = t / tr(this._size),
                        e = this._luminanceHDR) : (this._luminanceLDR = t,
                        e = this._luminanceLDR),
                        this._light && (this._light.luminance = e)
                    }
                }, {
                    key: "luminance",
                    get: function() {
                        return ci.director.root.pipeline.pipelineSceneData.isHDR ? this._luminanceHDR : this._luminanceLDR
                    },
                    set: function(t) {
                        ci.director.root.pipeline.pipelineSceneData.isHDR ? (this._luminanceHDR = t,
                        this._light && (this._light.luminanceHDR = this._luminanceHDR)) : (this._luminanceLDR = t,
                        this._light && (this._light.luminanceLDR = this._luminanceLDR))
                    }
                }, {
                    key: "term",
                    get: function() {
                        return this._term
                    },
                    set: function(t) {
                        this._term = t
                    }
                }, {
                    key: "size",
                    get: function() {
                        return this._size
                    },
                    set: function(t) {
                        this._size = t,
                        this._light && (this._light.size = t)
                    }
                }, {
                    key: "range",
                    get: function() {
                        return this._range
                    },
                    set: function(t) {
                        this._range = t,
                        this._light && (this._light.range = t)
                    }
                }, {
                    key: "spotAngle",
                    get: function() {
                        return this._spotAngle
                    },
                    set: function(t) {
                        this._spotAngle = t,
                        this._light && (this._light.spotAngle = ir(t))
                    }
                }]),
                e
            }(Fh),
            Rh = Ei((Ch = Ph).prototype, "_size", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return .15
                }
            }),
            Bh = Ei(Ch.prototype, "_luminanceHDR", [Pi, fh], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1700 / tr(.15)
                }
            }),
            xh = Ei(Ch.prototype, "_luminanceLDR", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            Dh = Ei(Ch.prototype, "_term", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Mh.LUMINOUS_FLUX
                }
            }),
            wh = Ei(Ch.prototype, "_range", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            Oh = Ei(Ch.prototype, "_spotAngle", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 60
                }
            }),
            Ei(Ch.prototype, "luminousFlux", [gh], Object.getOwnPropertyDescriptor(Ch.prototype, "luminousFlux"), Ch.prototype),
            Ei(Ch.prototype, "luminance", [mh], Object.getOwnPropertyDescriptor(Ch.prototype, "luminance"), Ch.prototype),
            Ei(Ch.prototype, "term", [yh, vh], Object.getOwnPropertyDescriptor(Ch.prototype, "term"), Ch.prototype),
            Ei(Ch.prototype, "size", [Sh], Object.getOwnPropertyDescriptor(Ch.prototype, "size"), Ch.prototype),
            Ei(Ch.prototype, "range", [Th], Object.getOwnPropertyDescriptor(Ch.prototype, "range"), Ch.prototype),
            Ei(Ch.prototype, "spotAngle", [Xi, bh, Eh], Object.getOwnPropertyDescriptor(Ch.prototype, "spotAngle"), Ch.prototype),
            Ah = Ch)) || Ah) || Ah) || Ah) || Ah));
            ci.LightComponent = Fh,
            Vi.setClassAlias(Fh, "cc.LightComponent"),
            ci.DirectionalLightComponent = Nh,
            Vi.setClassAlias(Nh, "cc.DirectionalLightComponent"),
            ci.SphereLightComponent = kh,
            Vi.setClassAlias(kh, "cc.SphereLightComponent"),
            ci.SpotLightComponent = Gh,
            Vi.setClassAlias(Gh, "cc.SpotLightComponent"),
            rr(Gh.prototype, "SpotLight.prototype", [{
                name: "luminousPower",
                newName: "luminousFlux",
                customGetter: function() {
                    return this.luminousFlux
                },
                customSetter: function(t) {
                    this.luminousFlux = t
                }
            }]),
            rr(kh.prototype, "SphereLight.prototype", [{
                name: "luminousPower",
                newName: "luminousFlux",
                customGetter: function() {
                    return this.luminousFlux
                },
                customSetter: function(t) {
                    this.luminousFlux = t
                }
            }]),
            rr(Fh.PhotometricTerm, "Light.PhotometricTerm", [{
                name: "LUMINOUS_POWER",
                newName: "LUMINOUS_FLUX"
            }]);
            var zh = function(t, e, i) {
                t[e + 0] = i.m00,
                t[e + 1] = i.m01,
                t[e + 2] = i.m02,
                t[e + 3] = i.m12,
                t[e + 4] = i.m04,
                t[e + 5] = i.m05,
                t[e + 6] = i.m06,
                t[e + 7] = i.m13,
                t[e + 8] = i.m08,
                t[e + 9] = i.m09,
                t[e + 10] = i.m10,
                t[e + 11] = i.m14
            };
            function Uh(t, e) {
                var i = 4 / Math.sqrt(e);
                return 12 * Math.ceil(Math.max(480 * i, t) / 12)
            }
            new nr,
            new nr,
            new di,
            new nr,
            new di;
            var Hh = new gt(A.POINT,A.POINT,A.NONE,C.CLAMP,C.CLAMP,C.CLAMP)
              , Vh = new di
              , Wh = new di
              , Xh = new di
              , jh = new di
              , Yh = new Ui
              , Kh = new Ui
              , Zh = new sr
              , qh = Number.MAX_SAFE_INTEGER
              , Jh = function() {
                function t(t) {
                    this._device = void 0,
                    this._pool = void 0,
                    this._textureBuffers = new Map,
                    this._formatSize = void 0,
                    this._pixelsPerJoint = void 0,
                    this._customPool = void 0,
                    this._chunkIdxMap = new Map,
                    this._device = t;
                    var e = function(t) {
                        return t.hasFeature(c.TEXTURE_FLOAT) ? _.RGBA32F : _.RGBA8
                    }(this._device);
                    this._formatSize = Jt[e].size,
                    this._pixelsPerJoint = 48 / this._formatSize,
                    this._pool = new lr(t),
                    this._pool.initialize({
                        format: e,
                        roundUpFn: Uh
                    }),
                    this._customPool = new lr(t),
                    this._customPool.initialize({
                        format: e,
                        roundUpFn: Uh
                    })
                }
                var e = t.prototype;
                return e.clear = function() {
                    this._pool.destroy(),
                    this._textureBuffers.clear()
                }
                ,
                e.registerCustomTextureLayouts = function(t) {
                    for (var e = 0; e < t.length; e++)
                        for (var i = t[e], r = this._customPool.createChunk(i.textureLength), n = 0; n < i.contents.length; n++) {
                            var s = i.contents[n]
                              , a = s.skeleton;
                            this._chunkIdxMap.set(a, r);
                            for (var o = 0; o < s.clips.length; o++) {
                                var l = s.clips[o];
                                this._chunkIdxMap.set(a ^ l, r)
                            }
                        }
                }
                ,
                e.getDefaultPoseTexture = function(t, e, i) {
                    var r = 0 ^ t.hash
                      , n = this._textureBuffers.get(r) || null;
                    if (n && n.bounds.has(e.hash))
                        return n.refCount++,
                        n;
                    var s = t.joints
                      , a = t.bindposes
                      , o = null
                      , l = !1
                      , h = s.length;
                    if (n)
                        n.refCount++;
                    else {
                        var u = 12 * h
                          , c = this._chunkIdxMap.get(r)
                          , _ = void 0 !== c ? this._customPool.alloc(u * Float32Array.BYTES_PER_ELEMENT, c) : this._pool.alloc(u * Float32Array.BYTES_PER_ELEMENT);
                        if (!_)
                            return n;
                        n = {
                            pixelOffset: _.start / this._formatSize,
                            refCount: 1,
                            bounds: new Map,
                            skeletonHash: t.hash,
                            clipHash: 0,
                            readyToBeDeleted: !1,
                            handle: _
                        },
                        o = new Float32Array(u),
                        l = !0
                    }
                    di.set(Xh, qh, qh, qh),
                    di.set(jh, -qh, -qh, -qh);
                    for (var d = e.getBoneSpaceBounds(t), p = 0, f = 0; p < h; p++,
                    f += 12) {
                        var g = i.getChildByPath(s[p])
                          , m = g ? ar(g, i, Yh) : t.inverseBindposes[p]
                          , y = d[p];
                        y && (sr.transform(Zh, y, m),
                        Zh.getBoundary(Vh, Wh),
                        di.min(Xh, Xh, Vh),
                        di.max(jh, jh, Wh)),
                        l && (g && Ui.multiply(m, m, a[p]),
                        zh(o, f, g ? m : Ui.IDENTITY))
                    }
                    var v = [new sr];
                    return n.bounds.set(e.hash, v),
                    sr.fromPoints(v[0], Xh, jh),
                    l && (this._pool.update(n.handle, o.buffer),
                    this._textureBuffers.set(r, n)),
                    n
                }
                ,
                e.getSequencePoseTexture = function(t, e, i, r) {
                    var n = t.hash ^ e.hash
                      , s = this._textureBuffers.get(n) || null;
                    if (s && s.bounds.has(i.hash))
                        return s.refCount++,
                        s;
                    var a = t.joints
                      , o = t.bindposes
                      , l = or.getOrExtract(e).frames
                      , h = null
                      , u = !1
                      , c = a.length;
                    if (s)
                        s.refCount++;
                    else {
                        var _ = 12 * c * l
                          , d = this._chunkIdxMap.get(n)
                          , p = void 0 !== d ? this._customPool.alloc(_ * Float32Array.BYTES_PER_ELEMENT, d) : this._pool.alloc(_ * Float32Array.BYTES_PER_ELEMENT);
                        if (!p)
                            return null;
                        var f = this._createAnimInfos(t, e, r);
                        s = {
                            pixelOffset: p.start / this._formatSize,
                            refCount: 1,
                            bounds: new Map,
                            skeletonHash: t.hash,
                            clipHash: e.hash,
                            readyToBeDeleted: !1,
                            handle: p,
                            animInfos: f
                        },
                        h = new Float32Array(_),
                        u = !0
                    }
                    var g = i.getBoneSpaceBounds(t)
                      , m = [];
                    s.bounds.set(i.hash, m);
                    for (var y = 0; y < l; y++)
                        m.push(new sr(qh,qh,qh,-qh,-qh,-qh));
                    for (var v = 0, S = 0; v < l; v++) {
                        for (var T = m[v], b = 0; b < c; b++,
                        S += 12) {
                            var E = s.animInfos[b]
                              , A = E.curveData
                              , C = E.downstream
                              , R = E.bindposeIdx
                              , B = E.bindposeCorrection
                              , x = void 0
                              , D = !0;
                            A && C ? x = Ui.multiply(Yh, A[v], C) : A ? x = A[v] : C ? x = C : (x = t.inverseBindposes[R],
                            D = !1);
                            var w = g[b];
                            if (w) {
                                var O = B ? Ui.multiply(Kh, x, B) : x;
                                sr.transform(Zh, w, O),
                                Zh.getBoundary(Vh, Wh),
                                di.min(T.center, T.center, Vh),
                                di.max(T.halfExtents, T.halfExtents, Wh)
                            }
                            u && (D && Ui.multiply(Yh, x, o[R]),
                            zh(h, S, D ? Yh : Ui.IDENTITY))
                        }
                        sr.fromPoints(T, T.center, T.halfExtents)
                    }
                    return u && (this._pool.update(s.handle, h.buffer),
                    this._textureBuffers.set(n, s)),
                    s
                }
                ,
                e.releaseHandle = function(t) {
                    if (t.refCount > 0 && t.refCount--,
                    !t.refCount && t.readyToBeDeleted) {
                        var e = t.skeletonHash ^ t.clipHash;
                        (void 0 !== this._chunkIdxMap.get(e) ? this._customPool : this._pool).free(t.handle),
                        this._textureBuffers.get(e) === t && this._textureBuffers.delete(e)
                    }
                }
                ,
                e.releaseSkeleton = function(t) {
                    for (var e = this._textureBuffers.values(), i = e.next(); !i.done; ) {
                        var r = i.value;
                        r.skeletonHash === t.hash && (r.readyToBeDeleted = !0,
                        r.refCount ? this._textureBuffers.delete(r.skeletonHash ^ r.clipHash) : this.releaseHandle(r)),
                        i = e.next()
                    }
                }
                ,
                e.releaseAnimationClip = function(t) {
                    for (var e = this._textureBuffers.values(), i = e.next(); !i.done; ) {
                        var r = i.value;
                        r.clipHash === t.hash && (r.readyToBeDeleted = !0,
                        r.refCount ? this._textureBuffers.delete(r.skeletonHash ^ r.clipHash) : this.releaseHandle(r)),
                        i = e.next()
                    }
                }
                ,
                e._createAnimInfos = function(t, e, i) {
                    for (var r = [], n = t.joints, s = t.bindposes, a = n.length, o = or.getOrExtract(e), l = 0; l < a; l++) {
                        for (var h = n[l], u = o.joints[h], c = i.getChildByPath(h), _ = void 0, d = void 0; !u; ) {
                            var p = h.lastIndexOf("/");
                            if (h = h.substring(0, p),
                            u = o.joints[h],
                            c ? (_ || (_ = new Ui),
                            Ui.fromRTS(Yh, c.rotation, c.position, c.scale),
                            Ui.multiply(_, Yh, _),
                            c = c.parent) : d = h,
                            p < 0)
                                break
                        }
                        var f = l
                          , g = void 0;
                        if (void 0 !== d && u) {
                            f = l - 1;
                            for (var m = 0; m < a; m++)
                                if (n[m] === d) {
                                    f = m,
                                    g = new Ui,
                                    Ui.multiply(g, s[m], t.inverseBindposes[l]);
                                    break
                                }
                        }
                        r.push({
                            curveData: u && u.transforms,
                            downstream: _,
                            bindposeIdx: f,
                            bindposeCorrection: g
                        })
                    }
                    return r
                }
                ,
                Je(t, [{
                    key: "pixelsPerJoint",
                    get: function() {
                        return this._pixelsPerJoint
                    }
                }]),
                t
            }()
              , Qh = function() {
                function t(t) {
                    this._pool = new Map,
                    this._device = void 0,
                    this._device = t
                }
                var e = t.prototype;
                return e.getData = function(t) {
                    void 0 === t && (t = "-1");
                    var e = this._pool.get(t);
                    if (e)
                        return e;
                    var i = this._device.createBuffer(new ht(f.UNIFORM | f.TRANSFER_DST,y.HOST | y.DEVICE,hr.SIZE,hr.SIZE))
                      , r = new Float32Array([0, 0, 0, 0]);
                    i.update(r);
                    var n = {
                        buffer: i,
                        data: r,
                        dirty: !1
                    };
                    return this._setAnimInfoDirty(n, !1),
                    this._pool.set(t, n),
                    n
                }
                ,
                e.destroy = function(t) {
                    var e = this._pool.get(t);
                    e && (e.buffer.destroy(),
                    this._pool.delete(t))
                }
                ,
                e._setAnimInfoDirty = function(t, e) {
                    t.dirty = e
                }
                ,
                e.switchClip = function(t) {
                    return t.data[0] = 0,
                    t.buffer.update(t.data),
                    this._setAnimInfoDirty(t, !1),
                    t
                }
                ,
                e.clear = function() {
                    for (var t, e = ui(this._pool.values()); !(t = e()).done; )
                        t.value.buffer.destroy();
                    this._pool.clear()
                }
                ,
                t
            }()
              , $h = function() {
                function t(t) {
                    this.jointTexturePool = void 0,
                    this.jointAnimationInfo = void 0,
                    this.jointTexturePool = new Jh(t),
                    this.jointAnimationInfo = new Qh(t)
                }
                var e = t.prototype;
                return e.releaseSkeleton = function(t) {
                    this.jointTexturePool.releaseSkeleton(t)
                }
                ,
                e.releaseAnimationClip = function(t) {
                    this.jointTexturePool.releaseAnimationClip(t)
                }
                ,
                e.clear = function() {
                    this.jointTexturePool.clear(),
                    this.jointAnimationInfo.clear()
                }
                ,
                t
            }();
            ci.internal.DataPoolManager = $h;
            var tu = [{
                name: "CC_USE_SKINNING",
                value: !0
            }];
            function eu(t, e, i, r) {
                for (var n = 0; n < i.length; n++) {
                    for (var s = i[n], a = -1, o = 0; o < s.length; o++)
                        if (s[o] === r) {
                            a = o;
                            break
                        }
                    a >= 0 && (e.push(n),
                    t.push(a))
                }
            }
            var iu, ru, nu, su, au, ou, lu, hu, uu, cu, _u, du, pu, fu, gu, mu, yu, vu, Su, Tu, bu, Eu, Au, Cu, Ru, Bu, xu, Du, wu, Ou, Pu, Mu, Iu, Lu, Fu, Nu, ku, Gu, zu, Uu, Hu, Vu, Wu, Xu, ju, Yu = new di, Ku = new di, Zu = new di, qu = new di, Ju = new Ui, Qu = new sr, $u = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this) || this).uploadAnimation = null,
                    e._buffers = [],
                    e._dataArray = [],
                    e._joints = [],
                    e._bufferIndices = null,
                    e.type = fr.SKINNING,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i._init = function() {}
                ,
                i.destroy = function() {
                    if (this.bindSkeleton(),
                    this._buffers.length) {
                        for (var e = 0; e < this._buffers.length; e++)
                            this._buffers[e].destroy();
                        this._buffers.length = 0
                    }
                    t.prototype.destroy.call(this)
                }
                ,
                i.bindSkeleton = function(t, e, i) {
                    void 0 === t && (t = null),
                    void 0 === e && (e = null),
                    void 0 === i && (i = null);
                    for (var r = 0; r < this._joints.length; r++)
                        ur(this._joints[r].target);
                    if (this._bufferIndices = null,
                    this._joints.length = 0,
                    t && e && i) {
                        this.transform = e;
                        var n = i.getBoneSpaceBounds(t)
                          , s = i.struct.jointMaps;
                        this._ensureEnoughBuffers(s && s.length || 1),
                        this._bufferIndices = i.jointBufferIndices;
                        for (var a = 0; a < t.joints.length; a++) {
                            var o = n[a]
                              , l = e.getChildByPath(t.joints[a]);
                            if (o && l) {
                                var h = cr(l, e)
                                  , u = t.bindposes[a]
                                  , c = []
                                  , _ = [];
                                s ? eu(c, _, s, a) : (c.push(a),
                                _.push(0)),
                                this._joints.push({
                                    indices: c,
                                    buffers: _,
                                    bound: o,
                                    target: l,
                                    bindpose: u,
                                    transform: h
                                })
                            }
                        }
                    }
                }
                ,
                i.updateTransform = function(t) {
                    var e = this.transform;
                    (e.hasChangedFlags || e._dirtyFlags) && (e.updateWorldTransform(),
                    this._localDataUpdated = !0),
                    di.set(Yu, 1 / 0, 1 / 0, 1 / 0),
                    di.set(Ku, -1 / 0, -1 / 0, -1 / 0);
                    for (var i = 0; i < this._joints.length; i++) {
                        var r = this._joints[i]
                          , n = r.bound
                          , s = r.transform
                          , a = _r(s, t);
                        sr.transform(Qu, n, a),
                        Qu.getBoundary(Zu, qu),
                        di.min(Yu, Yu, Zu),
                        di.max(Ku, Ku, qu)
                    }
                    var o = this._worldBounds;
                    this._modelBounds && o && (sr.fromPoints(this._modelBounds, Yu, Ku),
                    this._modelBounds.transform(e._mat, e._pos, e._rot, e._scale, this._worldBounds),
                    this._updateNativeBounds())
                }
                ,
                i.updateUBOs = function(e) {
                    t.prototype.updateUBOs.call(this, e);
                    for (var i = 0; i < this._joints.length; i++) {
                        var r = this._joints[i]
                          , n = r.indices
                          , s = r.buffers
                          , a = r.transform
                          , o = r.bindpose;
                        Ui.multiply(Ju, a.world, o);
                        for (var l = 0; l < s.length; l++)
                            zh(this._dataArray[s[l]], 12 * n[l], Ju)
                    }
                    for (var h = 0; h < this._buffers.length; h++)
                        this._buffers[h].update(this._dataArray[h]);
                    return !0
                }
                ,
                i.initSubModel = function(e, i, r) {
                    var n = i.vertexBuffers
                      , s = i.iaInfo;
                    s.vertexBuffers = i.jointMappedBuffers,
                    t.prototype.initSubModel.call(this, e, i, r),
                    s.vertexBuffers = n
                }
                ,
                i.getMacroPatches = function(e) {
                    var i = t.prototype.getMacroPatches.call(this, e);
                    return i ? tu.concat(i) : tu
                }
                ,
                i._updateLocalDescriptors = function(e, i) {
                    t.prototype._updateLocalDescriptors.call(this, e, i);
                    var r = this._buffers[this._bufferIndices[e]];
                    r && i.bindBuffer(dr.BINDING, r)
                }
                ,
                i._updateInstancedAttributes = function(e, i) {
                    i.batchingScheme !== pr.NONE && ii(3936, this.node.name),
                    t.prototype._updateInstancedAttributes.call(this, e, i)
                }
                ,
                i._ensureEnoughBuffers = function(t) {
                    for (var e = 0; e < t; e++)
                        this._buffers[e] || (this._buffers[e] = this._device.createBuffer(new ht(f.UNIFORM | f.TRANSFER_DST,y.HOST | y.DEVICE,dr.SIZE,dr.SIZE))),
                        this._dataArray[e] || (this._dataArray[e] = new Float32Array(dr.COUNT))
                }
                ,
                e
            }(Pl), tc = [{
                name: "CC_USE_SKINNING",
                value: !0
            }, {
                name: "CC_USE_BAKED_ANIMATION",
                value: !0
            }], ec = function(t) {
                function e() {
                    var e;
                    (e = t.call(this) || this).uploadedAnim = void 0,
                    e._jointsMedium = void 0,
                    e._skeleton = null,
                    e._mesh = null,
                    e._dataPoolManager = void 0,
                    e._instAnimInfoIdx = -1,
                    e.type = fr.BAKED_SKINNING,
                    e._dataPoolManager = ci.director.root.dataPoolManager;
                    var i = new Float32Array(4)
                      , r = e._dataPoolManager.jointAnimationInfo.getData();
                    return e._jointsMedium = {
                        buffer: null,
                        jointTextureInfo: i,
                        animInfo: r,
                        texture: null,
                        boundsInfo: null
                    },
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i._init = function() {}
                ,
                i.destroy = function() {
                    this.uploadedAnim = void 0,
                    this._jointsMedium.boundsInfo = null,
                    this._jointsMedium.buffer && (this._jointsMedium.buffer.destroy(),
                    this._jointsMedium.buffer = null),
                    this._applyJointTexture(),
                    this._applyNativeJointMedium(),
                    t.prototype.destroy.call(this)
                }
                ,
                i.bindSkeleton = function(t, e, i) {
                    if (void 0 === t && (t = null),
                    void 0 === e && (e = null),
                    void 0 === i && (i = null),
                    this._skeleton = t,
                    this._mesh = i,
                    t && e && i) {
                        this.transform = e;
                        var r = this._dataPoolManager;
                        this._jointsMedium.animInfo = r.jointAnimationInfo.getData(e.uuid),
                        this._jointsMedium.buffer || (this._jointsMedium.buffer = this._device.createBuffer(new ht(f.UNIFORM | f.TRANSFER_DST,y.DEVICE,gr.SIZE,gr.SIZE)))
                    }
                }
                ,
                i.updateTransform = function(e) {
                    if (t.prototype.updateTransform.call(this, e),
                    this.uploadedAnim) {
                        var i = this._jointsMedium
                          , r = i.animInfo
                          , n = i.boundsInfo[r.data[0]]
                          , s = this._worldBounds;
                        if (s && n) {
                            var a = this.transform;
                            n.transform(a._mat, a._pos, a._rot, a._scale, s)
                        }
                    }
                }
                ,
                i.updateUBOs = function(e) {
                    t.prototype.updateUBOs.call(this, e);
                    var i = this._jointsMedium.animInfo
                      , r = this._instAnimInfoIdx;
                    return r >= 0 ? this.instancedAttributes.views[r][0] = i.data[0] : i.dirty && (i.buffer.update(i.data),
                    i.dirty = !1),
                    !0
                }
                ,
                i._applyNativeJointMedium = function() {}
                ,
                i._updateModelBounds = function(t) {
                    this._modelBounds = t
                }
                ,
                i.uploadAnimation = function(t) {
                    if (this._skeleton && this._mesh && this.uploadedAnim !== t) {
                        this.uploadedAnim = t;
                        var e = this._dataPoolManager
                          , i = null;
                        t ? (i = e.jointTexturePool.getSequencePoseTexture(this._skeleton, t, this._mesh, this.transform),
                        this._jointsMedium.boundsInfo = i && i.bounds.get(this._mesh.hash),
                        this._updateModelBounds(null)) : (i = e.jointTexturePool.getDefaultPoseTexture(this._skeleton, this._mesh, this.transform),
                        this._jointsMedium.boundsInfo = null,
                        this._updateModelBounds(i && i.bounds.get(this._mesh.hash)[0])),
                        this._applyJointTexture(i),
                        this._applyNativeJointMedium()
                    }
                }
                ,
                i._applyJointTexture = function(t) {
                    void 0 === t && (t = null);
                    var e = this._jointsMedium.texture;
                    if (e && e !== t && this._dataPoolManager.jointTexturePool.releaseHandle(e),
                    this._jointsMedium.texture = t,
                    t) {
                        var i = this._jointsMedium
                          , r = i.buffer
                          , n = i.jointTextureInfo;
                        n[0] = t.handle.texture.width,
                        n[1] = this._skeleton.joints.length,
                        n[2] = t.pixelOffset + .1,
                        n[3] = 1 / n[0],
                        this.updateInstancedJointTextureInfo(),
                        r && r.update(n);
                        for (var s = t.handle.texture, a = 0; a < this._subModels.length; ++a)
                            this._subModels[a].descriptorSet.bindTexture(mr, s)
                    }
                }
                ,
                i.getMacroPatches = function(e) {
                    var i = t.prototype.getMacroPatches.call(this, e);
                    return i ? i.concat(tc) : tc
                }
                ,
                i._updateLocalDescriptors = function(e, i) {
                    t.prototype._updateLocalDescriptors.call(this, e, i);
                    var r = this._jointsMedium
                      , n = r.buffer
                      , s = r.texture
                      , a = r.animInfo;
                    if (i.bindBuffer(gr.BINDING, n),
                    i.bindBuffer(hr.BINDING, a.buffer),
                    s) {
                        var o = this._device.getSampler(Hh);
                        i.bindTexture(mr, s.handle.texture),
                        i.bindSampler(mr, o)
                    }
                }
                ,
                i._setInstAnimInfoIdx = function(t) {
                    this._instAnimInfoIdx = t
                }
                ,
                i._updateInstancedAttributes = function(e, i) {
                    t.prototype._updateInstancedAttributes.call(this, e, i),
                    this._setInstAnimInfoIdx(this._getInstancedAttributeIndex(yr)),
                    this.updateInstancedJointTextureInfo()
                }
                ,
                i.updateInstancedJointTextureInfo = function() {
                    var t = this._jointsMedium
                      , e = t.jointTextureInfo
                      , i = t.animInfo
                      , r = this._instAnimInfoIdx;
                    if (r >= 0) {
                        var n = this.instancedAttributes.views[r];
                        n[0] = i.data[0],
                        n[1] = e[1],
                        n[2] = e[2]
                    }
                }
                ,
                e
            }(Pl), ic = function(e) {
                return t({
                    SkinnedMeshRenderer: e,
                    SkinningModelComponent: e
                }),
                e
            }((iu = Ti("cc.SkinnedMeshRenderer"),
            ru = Ii(),
            nu = Li(100),
            su = Fi(),
            au = Ci(vr),
            ou = Ci(Sr),
            lu = Ci(vr),
            hu = Ci(Sr),
            uu = Ni(),
            iu(cu = ru(cu = nu(cu = Ri(cu = su((fu = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_skeleton", du, Gi(e)),
                    Oi(e, "_skinningRoot", pu, Gi(e)),
                    e._clip = null,
                    e._modelType = ec,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.__preload = function() {
                    this._updateModelType()
                }
                ,
                i.uploadAnimation = function(t) {
                    this._clip = t,
                    this.model && this.model.uploadAnimation && this.model.uploadAnimation(t)
                }
                ,
                i.setUseBakedAnimation = function(t, e) {
                    void 0 === t && (t = !0),
                    void 0 === e && (e = !1);
                    var i = t ? ec : $u;
                    (e || this._modelType !== i) && (this._modelType = i,
                    this._model && (ci.director.root.destroyModel(this._model),
                    this._model = null,
                    this._models.length = 0,
                    this._updateModels(),
                    this._updateCastShadow(),
                    this.enabledInHierarchy && this._attachToScene()))
                }
                ,
                i.setMaterial = function(e, i) {
                    t.prototype.setMaterial.call(this, e, i),
                    this._modelType === $u && this.getMaterialInstance(i)
                }
                ,
                i._updateModelParams = function() {
                    this._update(),
                    t.prototype._updateModelParams.call(this)
                }
                ,
                i._updateModelType = function() {
                    if (this._skinningRoot) {
                        var t = this._skinningRoot.getComponent("cc.SkeletalAnimation");
                        t ? this.setUseBakedAnimation(t.useBakedAnimation) : this.setUseBakedAnimation(!1)
                    }
                }
                ,
                i._update = function() {
                    this.model && (this.model.bindSkeleton(this._skeleton, this._skinningRoot, this._mesh),
                    this.model.uploadAnimation && this.model.uploadAnimation(this._clip))
                }
                ,
                Je(e, [{
                    key: "skeleton",
                    get: function() {
                        return this._skeleton
                    },
                    set: function(t) {
                        t !== this._skeleton && (this._skeleton = t,
                        this._update())
                    }
                }, {
                    key: "skinningRoot",
                    get: function() {
                        return this._skinningRoot
                    },
                    set: function(t) {
                        t !== this._skinningRoot && (this._skinningRoot = t,
                        this._updateModelType(),
                        this._update())
                    }
                }, {
                    key: "model",
                    get: function() {
                        return this._model
                    }
                }]),
                e
            }(Fl),
            du = Ei((_u = fu).prototype, "_skeleton", [au], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            pu = Ei(_u.prototype, "_skinningRoot", [ou], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ei(_u.prototype, "skeleton", [lu], Object.getOwnPropertyDescriptor(_u.prototype, "skeleton"), _u.prototype),
            Ei(_u.prototype, "skinningRoot", [hu, uu], Object.getOwnPropertyDescriptor(_u.prototype, "skinningRoot"), _u.prototype),
            cu = _u)) || cu) || cu) || cu) || cu) || cu)), rc = new Rt(qt.ATTR_BATCH_ID,_.R32F), nc = new Rt(qt.ATTR_BATCH_UV,_.RG32F), sc = Jt[rc.format].size + Jt[nc.format].size, ac = function(e) {
                return t({
                    SkinnedMeshUnit: e,
                    SkinningModelUnit: e
                }),
                e
            }((gu = Ti("cc.SkinnedMeshUnit"),
            mu = Ci(fi),
            yu = Ci(vr),
            vu = Ci(Tr),
            Su = Ci(ic),
            gu((Du = function() {
                function t() {
                    Oi(this, "mesh", Eu, this),
                    Oi(this, "skeleton", Au, this),
                    Oi(this, "material", Cu, this),
                    Oi(this, "_localTransform", Ru, this),
                    Oi(this, "_offset", Bu, this),
                    Oi(this, "_size", xu, this)
                }
                return Je(t, [{
                    key: "offset",
                    get: function() {
                        return this._offset
                    },
                    set: function(t) {
                        Br.copy(this._offset, t)
                    }
                }, {
                    key: "size",
                    get: function() {
                        return this._size
                    },
                    set: function(t) {
                        Br.copy(this._size, t)
                    }
                }, {
                    key: "copyFrom",
                    get: function() {
                        return null
                    },
                    set: function(t) {
                        t && (this.mesh = t.mesh,
                        this.skeleton = t.skeleton,
                        this.material = t.getMaterial(0),
                        t.skinningRoot && ar(t.node, t.skinningRoot, this._localTransform))
                    }
                }]),
                t
            }(),
            Eu = Ei((bu = Du).prototype, "mesh", [mu], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Au = Ei(bu.prototype, "skeleton", [yu], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Cu = Ei(bu.prototype, "material", [vu], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ru = Ei(bu.prototype, "_localTransform", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Ui
                }
            }),
            Bu = Ei(bu.prototype, "_offset", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Br(0,0)
                }
            }),
            xu = Ei(bu.prototype, "_size", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Br(1,1)
                }
            }),
            Ei(bu.prototype, "offset", [Ai], Object.getOwnPropertyDescriptor(bu.prototype, "offset"), bu.prototype),
            Ei(bu.prototype, "size", [Ai], Object.getOwnPropertyDescriptor(bu.prototype, "size"), bu.prototype),
            Ei(bu.prototype, "copyFrom", [Su], Object.getOwnPropertyDescriptor(bu.prototype, "copyFrom"), bu.prototype),
            Tu = bu)) || Tu)), oc = new Ui, lc = (new Ui,
            new di), hc = function(e) {
                return t({
                    SkinnedMeshBatchRenderer: e,
                    BatchedSkinningModelComponent: e
                }),
                e
            }((wu = Ti("cc.SkinnedMeshBatchRenderer"),
            Ou = Ii(),
            Pu = Li(100),
            Mu = Fi(),
            Iu = Ni(),
            Lu = Ci([br]),
            Fu = Ni(),
            Nu = Ci([ac]),
            ku = Ni(),
            Gu = ki(),
            zu = ki(),
            wu(Uu = Ou(Uu = Pu(Uu = Ri(Uu = Mu((ju = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "atlasSize", Vu, Gi(e)),
                    Oi(e, "batchableTextureNames", Wu, Gi(e)),
                    Oi(e, "units", Xu, Gi(e)),
                    e._textures = {},
                    e._batchMaterial = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onLoad = function() {
                    t.prototype.onLoad.call(this),
                    this.cook()
                }
                ,
                i.onDestroy = function() {
                    for (var e in this._textures)
                        this._textures[e].destroy();
                    this._textures = {},
                    this._mesh && (this._mesh.destroy(),
                    this._mesh = null),
                    t.prototype.onDestroy.call(this)
                }
                ,
                i._onMaterialModified = function(e) {
                    this.cookMaterials(),
                    t.prototype._onMaterialModified.call(this, e, this.getMaterialInstance(e))
                }
                ,
                i.cook = function() {
                    this.cookMaterials(),
                    this.cookSkeletons(),
                    this.cookMeshes()
                }
                ,
                i.cookMaterials = function() {
                    var t = this;
                    this._batchMaterial || (this._batchMaterial = this.getMaterial(0));
                    var e = this.getMaterialInstance(0);
                    if (e && this._batchMaterial && this._batchMaterial.effectAsset) {
                        e.copy(this._batchMaterial),
                        this.resizeAtlases();
                        for (var i = e.effectAsset.techniques[e.technique], r = function(r) {
                            var n = i.passes[r];
                            if (!n.properties)
                                return "continue";
                            var s = function(i) {
                                if (n.properties[i].type >= p.SAMPLER1D) {
                                    var s = null;
                                    t.batchableTextureNames.find((function(t) {
                                        return t === i
                                    }
                                    )) ? ((s = t._textures[i]) || (s = t.createTexture(i)),
                                    t.cookTextures(s, i, r)) : t.units.some((function(t) {
                                        return s = t.material && t.material.getProperty(i, r)
                                    }
                                    )),
                                    s && e.setProperty(i, s, r)
                                } else {
                                    for (var a = [], o = 0; o < t.units.length; o++) {
                                        var l = t.units[o];
                                        l.material && a.push(l.material.getProperty(i.slice(0, -3), r))
                                    }
                                    e.setProperty(i, a, r)
                                }
                            };
                            for (var a in n.properties)
                                s(a)
                        }, n = 0; n < i.passes.length; n++)
                            r(n)
                    } else
                        console.warn("incomplete batch material!")
                }
                ,
                i.cookSkeletons = function() {
                    if (this._skinningRoot) {
                        for (var t = [], e = [], i = 0; i < this.units.length; i++) {
                            var r = this.units[i];
                            if (r && r.skeleton) {
                                var n = r.skeleton;
                                Ui.invert(oc, r._localTransform);
                                for (var s = function(i) {
                                    var r = n.joints[i];
                                    if (t.findIndex((function(t) {
                                        return t === r
                                    }
                                    )) >= 0)
                                        return "continue";
                                    t.push(r),
                                    e.push(Ui.multiply(new Ui, n.bindposes[i] || Ui.IDENTITY, oc))
                                }, a = 0; a < n.joints.length; a++)
                                    s(a)
                            }
                        }
                        var o = Array.from(Array(t.length).keys()).sort((function(e, i) {
                            return t[e] > t[i] ? 1 : t[e] < t[i] ? -1 : 0
                        }
                        ))
                          , l = new vr;
                        l.joints = t.map((function(t, e, i) {
                            return i[o[e]]
                        }
                        )),
                        l.bindposes = e.map((function(t, e, i) {
                            return i[o[e]]
                        }
                        )),
                        this._skeleton && this._skeleton.destroy(),
                        this.skeleton = l
                    } else
                        console.warn("no skinning root specified!")
                }
                ,
                i.cookMeshes = function() {
                    for (var t = this, e = !1, i = 0; i < this.units.length; i++)
                        if (this.units[i].mesh) {
                            e = !0;
                            break
                        }
                    if (e && this._skinningRoot) {
                        this._mesh ? this._mesh.destroyRenderingMesh() : this._mesh = new fi;
                        for (var r = 0, n = _.UNKNOWN, s = 0, a = _.UNKNOWN, o = 0, l = _.UNKNOWN, h = 0, u = _.UNKNOWN, c = 0, d = _.UNKNOWN, p = new Array(this.units.length), f = this.units.length, g = 0; g < f; g++) {
                            var m = this.units[g];
                            m && m.skeleton && (p[g] = m.skeleton.joints.map((function(e) {
                                return t._skeleton.joints.findIndex((function(t) {
                                    return e === t
                                }
                                ))
                            }
                            )))
                        }
                        for (var y = function(e) {
                            var i = t.units[e];
                            if (!i || !i.mesh || !i.mesh.data)
                                return "continue";
                            var f = t._createUnitMesh(e, i.mesh)
                              , g = new DataView(f.data.buffer);
                            Ui.inverseTranspose(oc, i._localTransform);
                            for (var m = i.offset, y = i.size, v = function(t) {
                                var v = f.struct.vertexBundles[t];
                                r = v.view.offset,
                                n = _.UNKNOWN;
                                for (var S = 0; S < v.attributes.length; S++) {
                                    var T = v.attributes[S];
                                    if (T.name === qt.ATTR_POSITION) {
                                        n = T.format;
                                        break
                                    }
                                    r += Jt[T.format].size
                                }
                                if (n) {
                                    for (var b = _i(g, n, r, v.view.length, v.view.stride), E = 0; E < b.length; E += 3)
                                        di.fromArray(lc, b, E),
                                        di.transformMat4(lc, lc, i._localTransform),
                                        di.toArray(b, lc, E);
                                    pi(g, b, n, r, v.view.stride)
                                }
                                s = v.view.offset,
                                a = _.UNKNOWN;
                                for (var A = 0; A < v.attributes.length; A++) {
                                    var C = v.attributes[A];
                                    if (C.name === qt.ATTR_NORMAL) {
                                        a = C.format;
                                        break
                                    }
                                    s += Jt[C.format].size
                                }
                                if (a) {
                                    for (var R = _i(g, a, s, v.view.length, v.view.stride), B = 0; B < R.length; B += 3)
                                        di.fromArray(lc, R, B),
                                        di.transformMat4Normal(lc, lc, oc),
                                        di.toArray(R, lc, B);
                                    pi(g, R, a, s, v.view.stride)
                                }
                                o = v.view.offset,
                                l = _.UNKNOWN;
                                for (var x = 0; x < v.attributes.length; x++) {
                                    var D = v.attributes[x];
                                    if (D.name === qt.ATTR_TANGENT) {
                                        l = D.format;
                                        break
                                    }
                                    o += Jt[D.format].size
                                }
                                if (l) {
                                    for (var w = _i(g, l, o, v.view.length, v.view.stride), O = 0; O < w.length; O += 3)
                                        di.fromArray(lc, w, O),
                                        di.transformMat4Normal(lc, lc, oc),
                                        di.toArray(w, lc, O);
                                    pi(g, w, l, o, v.view.stride)
                                }
                                h = v.view.offset,
                                u = _.UNKNOWN;
                                for (var P = 0; P < v.attributes.length; P++) {
                                    var M = v.attributes[P];
                                    if (M.name === qt.ATTR_BATCH_UV) {
                                        u = M.format;
                                        break
                                    }
                                    h += Jt[M.format].size
                                }
                                u && yi(g, (function(t, e) {
                                    var i, r = 0 === e ? "x" : "y";
                                    return (t = (i = t) - Math.floor(i)) * y[r] + m[r]
                                }
                                ), u, h, v.view.length, v.view.stride, g);
                                var I = p[e];
                                if (!I)
                                    return "continue";
                                c = v.view.offset,
                                d = _.UNKNOWN;
                                for (var L = 0; L < v.attributes.length; L++) {
                                    var F = v.attributes[L];
                                    if (F.name === qt.ATTR_JOINTS) {
                                        d = F.format;
                                        break
                                    }
                                    c += Jt[F.format].size
                                }
                                d && yi(g, (function(t) {
                                    return I[t]
                                }
                                ), d, c, v.view.length, v.view.stride, g)
                            }, S = 0; S < f.struct.vertexBundles.length; S++)
                                v(S);
                            t._mesh.merge(f)
                        }, v = 0; v < f; v++)
                            y(v);
                        this._onMeshChanged(this._mesh),
                        this._updateModels()
                    }
                }
                ,
                i.cookTextures = function(t, e, i) {
                    for (var r = [], n = [], s = [], a = [], o = 0; o < this.units.length; o++) {
                        var l = this.units[o];
                        if (l.material) {
                            var h = l.material.getProperty(e, i);
                            if (h && h.image && h.image.data) {
                                var u = new rt;
                                u.texOffset.x = l.offset.x * this.atlasSize,
                                u.texOffset.y = l.offset.y * this.atlasSize,
                                u.texExtent.width = l.size.x * this.atlasSize,
                                u.texExtent.height = l.size.y * this.atlasSize;
                                var c = h.image.data;
                                ArrayBuffer.isView(c) ? (s.push(c),
                                a.push(u)) : (r.push(c),
                                n.push(u))
                            }
                        }
                    }
                    var _ = t.getGFXTexture()
                      , d = ci.director.root.device;
                    s.length > 0 && d.copyBuffersToTexture(s, _, a),
                    r.length > 0 && d.copyTexImagesToTexture(r, _, n)
                }
                ,
                i.createTexture = function(t) {
                    var e = new Er;
                    return e.setFilters(Ar.LINEAR, Ar.LINEAR),
                    e.setMipFilter(Ar.NEAREST),
                    e.reset({
                        width: this.atlasSize,
                        height: this.atlasSize,
                        format: Cr.RGBA8888
                    }),
                    this._textures[t] = e,
                    e
                }
                ,
                i.resizeAtlases = function() {
                    for (var t in this._textures)
                        this._textures[t].reset({
                            width: this.atlasSize,
                            height: this.atlasSize,
                            format: Cr.RGBA8888
                        })
                }
                ,
                i._createUnitMesh = function(t, e) {
                    for (var i = JSON.parse(JSON.stringify(e.struct)), r = {}, n = 0; n < e.struct.primitives.length; n++) {
                        for (var s = e.struct.primitives[n], a = 0, o = _.UNKNOWN, l = 0; l < s.vertexBundelIndices.length; l++) {
                            var h = e.struct.vertexBundles[s.vertexBundelIndices[l]];
                            a = h.view.offset,
                            o = _.UNKNOWN;
                            for (var u = 0; u < h.attributes.length; u++) {
                                var c = h.attributes[u];
                                if (c.name === qt.ATTR_TEX_COORD) {
                                    o = c.format;
                                    break
                                }
                                a += Jt[c.format].size
                            }
                            if (o)
                                break
                        }
                        if (void 0 === r[l]) {
                            r[l] = [o, a];
                            var d = i.vertexBundles[l];
                            d.attributes.push(rc),
                            d.attributes.push(nc),
                            d.view.offset = 0,
                            d.view.length += d.view.count * sc,
                            d.view.stride += sc
                        }
                    }
                    for (var p = 0, f = 0; f < i.vertexBundles.length; f++)
                        p += i.vertexBundles[f].view.length;
                    for (var g = 0; g < i.primitives.length; g++) {
                        var m = i.primitives[g];
                        m.indexView && (m.indexView.offset = p,
                        p += m.indexView.length)
                    }
                    var y = new Uint8Array(p)
                      , v = e.data
                      , S = new DataView(y.buffer)
                      , T = new DataView(v.buffer)
                      , b = ci.sys.isLittleEndian;
                    for (var E in r)
                        for (var A = i.vertexBundles[E], C = e.struct.vertexBundles[E], R = r[E], B = R[0], x = R[1], D = _i(T, B, x, C.view.length, C.view.stride), w = C.view, O = A.view, P = w.stride, M = O.stride, I = w.offset, L = O.offset, F = 0; F < O.count; F++) {
                            var N = v.subarray(I, I + P);
                            y.set(N, L),
                            S.setFloat32(L + P, t),
                            S.setFloat32(L + P + 4, D[2 * F], b),
                            S.setFloat32(L + P + 8, D[2 * F + 1], b),
                            L += M,
                            I += P
                        }
                    for (var k = 0; k < i.primitives.length; k++) {
                        var G = e.struct.primitives[k]
                          , z = i.primitives[k];
                        if (G.indexView && z.indexView)
                            for (var U = G.indexView.stride, H = z.indexView.stride, V = G.indexView.offset, W = z.indexView.offset, X = 0; X < z.indexView.count; X++) {
                                var j = v.subarray(V, V + U);
                                y.set(j, W),
                                W += H,
                                V += U
                            }
                    }
                    var Y = new fi;
                    return Y.reset({
                        struct: i,
                        data: y
                    }),
                    Y
                }
                ,
                Je(e, [{
                    key: "mesh",
                    get: function() {
                        return t.prototype.mesh
                    },
                    set: function(t) {
                        this.mesh = t
                    }
                }, {
                    key: "skeleton",
                    get: function() {
                        return t.prototype.skeleton
                    },
                    set: function(t) {
                        this.skeleton = t
                    }
                }]),
                e
            }(ic),
            Vu = Ei((Hu = ju).prototype, "atlasSize", [Pi, Iu], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1024
                }
            }),
            Wu = Ei(Hu.prototype, "batchableTextureNames", [Lu, Pi, Fu], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            Xu = Ei(Hu.prototype, "units", [Nu, Pi, ku], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            Ei(Hu.prototype, "mesh", [Rr, Gu], Object.getOwnPropertyDescriptor(Hu.prototype, "mesh"), Hu.prototype),
            Ei(Hu.prototype, "skeleton", [Rr, zu], Object.getOwnPropertyDescriptor(Hu.prototype, "skeleton"), Hu.prototype),
            Uu = Hu)) || Uu) || Uu) || Uu) || Uu) || Uu));
            ci.SkinningModelComponent = ic,
            Vi.setClassAlias(ic, "cc.SkinningModelComponent"),
            ci.SkinningModelUnit = ac,
            Vi.setClassAlias(ac, "cc.SkinningModelUnit"),
            ci.BatchedSkinningModelComponent = hc,
            Vi.setClassAlias(hc, "cc.BatchedSkinningModelComponent");
            var uc, cc, _c, dc, pc, fc, gc, mc, yc, vc, Sc, Tc, bc, Ec, Ac, Cc, Rc, Bc, xc, Dc, wc = new Ui, Oc = new Ui, Pc = t("SkeletalAnimationState", function(t) {
                function e(e, i) {
                    var r;
                    return void 0 === i && (i = ""),
                    (r = t.call(this, e, i) || this)._frames = 1,
                    r._bakedDuration = 0,
                    r._animInfo = null,
                    r._sockets = [],
                    r._animInfoMgr = void 0,
                    r._comps = [],
                    r._parent = null,
                    r._curvesInited = !1,
                    r._animInfoMgr = ci.director.root.dataPoolManager.jointAnimationInfo,
                    r
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(e) {
                    if (!this._curveLoaded) {
                        this._comps.length = 0;
                        for (var i = e.getComponentsInChildren(ic), r = 0; r < i.length; ++r) {
                            var n = i[r];
                            n.skinningRoot === e && this._comps.push(n)
                        }
                        this._parent = e.getComponent("cc.SkeletalAnimation");
                        var s = this._parent.useBakedAnimation;
                        this._doNotCreateEval = s,
                        t.prototype.initialize.call(this, e),
                        this._curvesInited = !s;
                        var a = or.getOrExtract(this.clip)
                          , o = a.frames
                          , l = a.samples;
                        this._frames = o - 1,
                        this._animInfo = this._animInfoMgr.getData(e.uuid),
                        this._bakedDuration = this._frames / l
                    }
                }
                ,
                i.onPlay = function() {
                    if (t.prototype.onPlay.call(this),
                    this._parent.useBakedAnimation) {
                        this._sampleCurves = this._sampleCurvesBaked,
                        this.duration = this._bakedDuration,
                        this._animInfoMgr.switchClip(this._animInfo, this.clip);
                        for (var e = 0; e < this._comps.length; ++e)
                            this._comps[e].uploadAnimation(this.clip)
                    } else
                        this._sampleCurves = t.prototype._sampleCurves,
                        this.duration = this.clip.duration,
                        this._curvesInited || (this._curveLoaded = !1,
                        t.prototype.initialize.call(this, this._targetNode),
                        this._curvesInited = !0)
                }
                ,
                i.rebuildSocketCurves = function(t) {
                    if (this._sockets.length = 0,
                    this._targetNode)
                        for (var e = this._targetNode, i = 0; i < t.length; ++i) {
                            var r = t[i]
                              , n = e.getChildByPath(r.path);
                            if (r.target) {
                                for (var s = or.getOrExtract(this.clip), a = r.path, o = s.joints[a], l = n, h = void 0; !o; ) {
                                    var u = a.lastIndexOf("/");
                                    if (a = a.substring(0, u),
                                    o = s.joints[a],
                                    l && (h || (h = Ui.identity(Oc)),
                                    Ui.fromRTS(wc, l.rotation, l.position, l.scale),
                                    Ui.multiply(h, wc, h),
                                    l = l.parent),
                                    u < 0)
                                        break
                                }
                                for (var c = o && o.transforms, _ = s.frames, d = [], p = 0; p < _; p++) {
                                    var f;
                                    f = c && h ? Ui.multiply(wc, c[p], h) : c ? c[p] : h || new Ui;
                                    var g = {
                                        pos: new di,
                                        rot: new nr,
                                        scale: new di
                                    };
                                    Ui.toRTS(f, g.rot, g.pos, g.scale),
                                    d.push(g)
                                }
                                this._sockets.push({
                                    target: r.target,
                                    frames: d
                                })
                            }
                        }
                }
                ,
                i._setAnimInfoDirty = function(t, e) {
                    t.dirty = e
                }
                ,
                i._sampleCurvesBaked = function(t) {
                    var e = t / this.duration
                      , i = this._animInfo
                      , r = e * this._frames + .5 | 0;
                    if (r !== i.data[0]) {
                        i.data[0] = r,
                        this._setAnimInfoDirty(i, !0);
                        for (var n = 0; n < this._sockets.length; ++n) {
                            var s = this._sockets[n]
                              , a = s.target
                              , o = s.frames[r]
                              , l = o.pos
                              , h = o.rot
                              , u = o.scale;
                            a.setRTS(h, l, u)
                        }
                    }
                }
                ,
                e
            }(xr)), Mc = t("Socket", (uc = Ti("cc.SkeletalAnimation.Socket"),
            cc = Ci(Sr),
            uc((pc = Ei((dc = function(t, e) {
                void 0 === t && (t = ""),
                void 0 === e && (e = null),
                Oi(this, "path", pc, this),
                Oi(this, "target", fc, this),
                this.path = t,
                this.target = e
            }
            ).prototype, "path", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return ""
                }
            }),
            fc = Ei(dc.prototype, "target", [cc], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            _c = dc)) || _c));
            Vi.setClassAlias(Mc, "cc.SkeletalAnimationComponent.Socket");
            var Ic = new Ui
              , Lc = new Ui;
            function Fc(t, e, i) {
                void 0 === e && (e = ""),
                void 0 === i && (i = []);
                for (var r = 0; r < t.children.length; r++) {
                    var n = t.children[r];
                    if (n) {
                        var s = e ? e + "/" + n.name : n.name;
                        i.push(s),
                        Fc(n, s, i)
                    }
                }
                return i
            }
            var Nc = function(e) {
                return t({
                    SkeletalAnimation: e,
                    SkeletalAnimationComponent: e
                }),
                e
            }((gc = Ti("cc.SkeletalAnimation"),
            mc = Ii(),
            yc = Li(99),
            vc = Fi(),
            Sc = Ci([Mc]),
            Tc = Ni(),
            bc = Ni(),
            Ec = Ci([Mc]),
            gc(Ac = mc(Ac = yc(Ac = Ri(Ac = vc((Dc = xc = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "_useBakedAnimation", Rc, Gi(e)),
                    Oi(e, "_sockets", Bc, Gi(e)),
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onDestroy = function() {
                    t.prototype.onDestroy.call(this),
                    ci.director.root.dataPoolManager.jointAnimationInfo.destroy(this.node.uuid),
                    ci.director.getAnimationManager().removeSockets(this.node, this._sockets)
                }
                ,
                i.start = function() {
                    this.sockets = this._sockets,
                    this.useBakedAnimation = this._useBakedAnimation,
                    t.prototype.start.call(this)
                }
                ,
                i.querySockets = function() {
                    var t = this._defaultClip && Object.keys(or.getOrExtract(this._defaultClip).joints).sort().reduce((function(t, e) {
                        return e.startsWith(t[t.length - 1]) || t.push(e),
                        t
                    }
                    ), []) || [];
                    if (!t.length)
                        return ["please specify a valid default animation clip first"];
                    for (var e = [], i = 0; i < t.length; i++) {
                        var r = t[i]
                          , n = this.node.getChildByPath(r);
                        n && (e.push(r),
                        Fc(n, r, e))
                    }
                    return e
                }
                ,
                i.rebuildSocketAnimations = function() {
                    for (var t, e = ui(this._sockets); !(t = e()).done; ) {
                        var i = t.value
                          , r = this.node.getChildByPath(i.path)
                          , n = i.target;
                        r && n && (n.name = i.path.substring(i.path.lastIndexOf("/") + 1) + " Socket",
                        n.parent = this.node,
                        ar(r, this.node, Ic),
                        Ui.fromRTS(Lc, n.rotation, n.position, n.scale),
                        Ui.equals(Lc, Ic) || (n.matrix = Ic))
                    }
                    for (var s = 0, a = Object.keys(this._nameToState); s < a.length; s++) {
                        var o = a[s];
                        this._nameToState[o].rebuildSocketCurves(this._sockets)
                    }
                }
                ,
                i.createSocket = function(t) {
                    var e = this._sockets.find((function(e) {
                        return e.path === t
                    }
                    ));
                    if (e)
                        return e.target;
                    if (!this.node.getChildByPath(t))
                        return console.warn("illegal socket path"),
                        null;
                    var i = new Sr;
                    return i.parent = this.node,
                    this._sockets.push(new Mc(t,i)),
                    this.rebuildSocketAnimations(),
                    i
                }
                ,
                i._createState = function(t, e) {
                    return new Pc(t,e)
                }
                ,
                i._doCreateState = function(e, i) {
                    var r = t.prototype._doCreateState.call(this, e, i);
                    return r.rebuildSocketCurves(this._sockets),
                    r
                }
                ,
                Je(e, [{
                    key: "sockets",
                    get: function() {
                        return this._sockets
                    },
                    set: function(t) {
                        if (!this._useBakedAnimation) {
                            var e = ci.director.getAnimationManager();
                            e.removeSockets(this.node, this._sockets),
                            e.addSockets(this.node, t)
                        }
                        this._sockets = t,
                        this.rebuildSocketAnimations()
                    }
                }, {
                    key: "useBakedAnimation",
                    get: function() {
                        return this._useBakedAnimation
                    },
                    set: function(t) {
                        this._useBakedAnimation = t;
                        for (var e = this.node.getComponentsInChildren(ic), i = 0; i < e.length; ++i) {
                            var r = e[i];
                            r.skinningRoot === this.node && r.setUseBakedAnimation(this._useBakedAnimation, !0)
                        }
                        this._useBakedAnimation ? ci.director.getAnimationManager().removeSockets(this.node, this._sockets) : ci.director.getAnimationManager().addSockets(this.node, this._sockets)
                    }
                }]),
                e
            }(Dr),
            xc.Socket = Mc,
            Ei((Cc = Dc).prototype, "sockets", [Sc, Tc], Object.getOwnPropertyDescriptor(Cc.prototype, "sockets"), Cc.prototype),
            Ei(Cc.prototype, "useBakedAnimation", [bc], Object.getOwnPropertyDescriptor(Cc.prototype, "useBakedAnimation"), Cc.prototype),
            Rc = Ei(Cc.prototype, "_useBakedAnimation", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            Bc = Ei(Cc.prototype, "_sockets", [Ec], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            Ac = Cc)) || Ac) || Ac) || Ac) || Ac) || Ac));
            ci.SkeletalAnimationComponent = Nc,
            Vi.setClassAlias(Nc, "cc.SkeletalAnimationComponent"),
            ci.utils = Po;
            var kc = new di
              , Gc = new Ui;
            function zc(t, e, i, r) {
                var n = i.data
                  , s = e.acquireBufferBatch()
                  , a = s.byteOffset >> 2
                  , o = i.vertexCount
                  , l = s.indicesOffset
                  , h = s.vertexOffset;
                s.request(o, i.indicesCount) || (s = e.currBufferBatch,
                a = 0,
                l = 0,
                h = 0);
                var u = s.vData
                  , c = s.iData;
                t.getWorldMatrix(Gc);
                for (var _ = 0; _ < o; _++) {
                    var d = n[_];
                    di.set(kc, d.x, d.y, 0),
                    di.transformMat4(kc, kc, Gc),
                    u[a++] = kc.x,
                    u[a++] = kc.y,
                    u[a++] = kc.z,
                    u[a++] = d.u,
                    u[a++] = d.v,
                    Zi.toArray(u, r, a),
                    a += 4
                }
                for (var p = 0, f = o / 4; p < f; p++) {
                    var g = h + 4 * p;
                    c[l++] = g,
                    c[l++] = g + 1,
                    c[l++] = g + 2,
                    c[l++] = g + 1,
                    c[l++] = g + 3,
                    c[l++] = g + 2
                }
            }
            var Uc = function() {
                function t(t, e) {
                    this._texture = void 0,
                    this._width = void 0,
                    this._height = void 0,
                    this._x = void 0,
                    this._y = void 0,
                    this._nexty = void 0,
                    this._innerTextureInfos = {},
                    this._innerSpriteFrames = void 0,
                    this._count = void 0;
                    var i = new Hc;
                    i.initWithSize(t, e),
                    this._texture = i,
                    this._width = t,
                    this._height = e,
                    this._x = 2,
                    this._y = 2,
                    this._nexty = 2,
                    this._innerTextureInfos = {},
                    this._innerSpriteFrames = [],
                    this._count = 0
                }
                var e = t.prototype;
                return e.insertSpriteFrame = function(t) {
                    var e = t.rect
                      , i = t.texture
                      , r = this._innerTextureInfos[i.getId()]
                      , n = e.x
                      , s = e.y;
                    if (r)
                        n += r.x,
                        s += r.y;
                    else {
                        var a = i.width
                          , o = i.height;
                        if (this._x + a + 2 > this._width && (this._x = 2,
                        this._y = this._nexty),
                        this._y + o + 2 > this._nexty && (this._nexty = this._y + o + 2),
                        this._nexty > this._height)
                            return null;
                        ci.internal.dynamicAtlasManager.textureBleeding && ((a <= 8 || o <= 8) && (this._texture.drawTextureAt(i.image, this._x - 1, this._y - 1),
                        this._texture.drawTextureAt(i.image, this._x - 1, this._y + 1),
                        this._texture.drawTextureAt(i.image, this._x + 1, this._y - 1),
                        this._texture.drawTextureAt(i.image, this._x + 1, this._y + 1)),
                        this._texture.drawTextureAt(i.image, this._x - 1, this._y),
                        this._texture.drawTextureAt(i.image, this._x + 1, this._y),
                        this._texture.drawTextureAt(i.image, this._x, this._y - 1),
                        this._texture.drawTextureAt(i.image, this._x, this._y + 1)),
                        this._texture.drawTextureAt(i.image, this._x, this._y),
                        this._innerTextureInfos[i.getId()] = {
                            x: this._x,
                            y: this._y,
                            texture: i
                        },
                        this._count++,
                        n += this._x,
                        s += this._y,
                        this._x += a + 2
                    }
                    var l = {
                        x: n,
                        y: s,
                        texture: this._texture
                    };
                    return this._innerSpriteFrames.push(t),
                    l
                }
                ,
                e.deleteInnerTexture = function(t) {
                    t && this._innerTextureInfos[t.getId()] && (delete this._innerTextureInfos[t.getId()],
                    this._count--)
                }
                ,
                e.isEmpty = function() {
                    return this._count <= 0
                }
                ,
                e.reset = function() {
                    this._x = 2,
                    this._y = 2,
                    this._nexty = 2;
                    for (var t = this._innerSpriteFrames, e = 0, i = t.length; e < i; e++) {
                        var r = t[e];
                        r.isValid && r._resetDynamicAtlasFrame()
                    }
                    this._innerSpriteFrames.length = 0,
                    this._innerTextureInfos = {}
                }
                ,
                e.destroy = function() {
                    this.reset(),
                    this._texture.destroy()
                }
                ,
                t
            }()
              , Hc = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.initWithSize = function(t, e, i) {
                    void 0 === i && (i = Cr.RGBA8888),
                    this.reset({
                        width: t,
                        height: e,
                        format: i
                    })
                }
                ,
                i.drawTextureAt = function(t, e, i) {
                    var r = this.getGFXTexture();
                    if (t && r) {
                        var n = this._getGFXDevice();
                        if (n) {
                            var s = new rt;
                            s.texOffset.x = e,
                            s.texOffset.y = i,
                            s.texExtent.width = t.width,
                            s.texExtent.height = t.height,
                            n.copyTexImagesToTexture([t.data], r, [s])
                        } else
                            console.warn("Unable to get device")
                    }
                }
                ,
                e
            }(Er)
              , Vc = function() {
                function t() {
                    this._atlases = [],
                    this._atlasIndex = -1,
                    this._maxAtlasCount = 5,
                    this._textureSize = 2048,
                    this._maxFrameSize = 512,
                    this._textureBleeding = !0,
                    this._enabled = !1
                }
                var e = t.prototype;
                return e.newAtlas = function() {
                    var t = this._atlases[++this._atlasIndex];
                    return t || (t = new Uc(this._textureSize,this._textureSize),
                    this._atlases.push(t)),
                    t
                }
                ,
                e.beforeSceneLoad = function() {
                    this.reset()
                }
                ,
                e.insertSpriteFrame = function(t) {
                    if (!this._enabled || this._atlasIndex === this._maxAtlasCount || !t || t._original)
                        return null;
                    if (!t.packable)
                        return null;
                    var e = t.texture.getSamplerInfo();
                    if (e.minFilter !== Ar.LINEAR || e.magFilter !== Ar.LINEAR || e.mipFilter !== Ar.NONE)
                        return null;
                    var i = this._atlases[this._atlasIndex];
                    i || (i = this.newAtlas());
                    var r = i.insertSpriteFrame(t);
                    return r || this._atlasIndex === this._maxAtlasCount ? r : (i = this.newAtlas()).insertSpriteFrame(t)
                }
                ,
                e.reset = function() {
                    for (var t = 0, e = this._atlases.length; t < e; t++)
                        this._atlases[t].destroy();
                    this._atlases.length = 0,
                    this._atlasIndex = -1
                }
                ,
                e.deleteAtlasSpriteFrame = function(t) {
                    if (t._original) {
                        for (var e, i = this._atlases.length - 1; i >= 0; i--)
                            e = this._atlases[i],
                            Vi.array.fastRemove(e._innerSpriteFrames, t);
                        var r = t._original._texture;
                        this.deleteAtlasTexture(r)
                    }
                }
                ,
                e.deleteAtlasTexture = function(t) {
                    if (t)
                        for (var e = this._atlases.length - 1; e >= 0; e--)
                            this._atlases[e].deleteInnerTexture(t),
                            this._atlases[e].isEmpty() && (this._atlases[e].destroy(),
                            this._atlases.splice(e, 1),
                            this._atlasIndex--)
                }
                ,
                e.packToDynamicAtlas = function(t, e) {
                    if (!e._original && e.packable) {
                        var i = this.insertSpriteFrame(e);
                        i && e._setDynamicAtlasFrame(i)
                    }
                }
                ,
                Je(t, [{
                    key: "enabled",
                    get: function() {
                        return this._enabled
                    },
                    set: function(t) {
                        this._enabled !== t && (t ? (this.reset(),
                        ci.director.on(ci.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this)) : (this.reset(),
                        ci.director.off(ci.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this)),
                        this._enabled = t)
                    }
                }, {
                    key: "maxAtlasCount",
                    get: function() {
                        return this._maxAtlasCount
                    },
                    set: function(t) {
                        this._maxAtlasCount = t
                    }
                }, {
                    key: "atlasCount",
                    get: function() {
                        return this._atlases.length
                    }
                }, {
                    key: "textureBleeding",
                    get: function() {
                        return this._textureBleeding
                    },
                    set: function(t) {
                        this._textureBleeding = t
                    }
                }, {
                    key: "textureSize",
                    get: function() {
                        return this._textureSize
                    },
                    set: function(t) {
                        this._textureSize = t
                    }
                }, {
                    key: "maxFrameSize",
                    get: function() {
                        return this._maxFrameSize
                    },
                    set: function(t) {
                        this._maxFrameSize = t
                    }
                }]),
                t
            }();
            Vc.instance = void 0;
            var Wc, Xc = t("dynamicAtlasManager", Vc.instance = new Vc);
            ci.internal.dynamicAtlasManager = Xc;
            var jc, Yc, Kc, Zc, qc = [{
                u: 0,
                v: 0
            }, {
                u: 0,
                v: 0
            }, {
                u: 0,
                v: 0
            }, {
                u: 0,
                v: 0
            }], Jc = t("SpriteFrame", Ti("cc.SpriteFrame")(Wc = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this) || this).vertices = null,
                    e.uv = [],
                    e.uvHash = 0,
                    e.unbiasUV = [],
                    e.uvSliced = [],
                    e._rect = new Or,
                    e._offset = new Br,
                    e._originalSize = new Pr,
                    e._rotated = !1,
                    e._capInsets = [0, 0, 0, 0],
                    e._atlasUuid = "",
                    e._texture = void 0,
                    e._isFlipUVY = !1,
                    e._isFlipUVX = !1,
                    e._original = null,
                    e._packable = !0,
                    e
                }
                qe(e, t),
                e.createWithImage = function(t) {
                    var i = t instanceof Ir ? t : new Ir(t)
                      , r = new Er;
                    r.image = i;
                    var n = new e;
                    return n.texture = r,
                    n
                }
                ;
                var i = e.prototype;
                return i.textureLoaded = function() {
                    return !!this.texture
                }
                ,
                i.isRotated = function() {
                    return this._rotated
                }
                ,
                i.setRotated = function(t) {
                    this.rotated = t
                }
                ,
                i.getRect = function(t) {
                    return t ? (t.set(this._rect),
                    t) : this._rect.clone()
                }
                ,
                i.setRect = function(t) {
                    this.rect = t
                }
                ,
                i.getOriginalSize = function(t) {
                    return t ? (t.set(this._originalSize),
                    t) : this._originalSize.clone()
                }
                ,
                i.setOriginalSize = function(t) {
                    this.originalSize = t
                }
                ,
                i.getOffset = function(t) {
                    return t ? (t.set(this._offset),
                    t) : this._offset.clone()
                }
                ,
                i.setOffset = function(t) {
                    this.offset = t
                }
                ,
                i.getGFXTexture = function() {
                    return this._texture.getGFXTexture()
                }
                ,
                i.getGFXSampler = function() {
                    return this._texture.getGFXSampler()
                }
                ,
                i.getHash = function() {
                    return this._texture.getHash()
                }
                ,
                i.getSamplerInfo = function() {
                    return this._texture.getSamplerInfo()
                }
                ,
                i.reset = function(t, e) {
                    void 0 === e && (e = !1);
                    var i = !1;
                    e && (this._originalSize.set(0, 0),
                    this._rect.set(0, 0, 0, 0),
                    this._offset.set(0, 0),
                    this._capInsets = [0, 0, 0, 0],
                    this._rotated = !1,
                    i = !0),
                    t && (t.texture && (this._rect.x = this._rect.y = 0,
                    this._rect.width = t.texture.width,
                    this._rect.height = t.texture.height,
                    this._refreshTexture(t.texture),
                    this.checkRect(this._texture)),
                    t.originalSize && this._originalSize.set(t.originalSize),
                    t.rect && this._rect.set(t.rect),
                    t.offset && this._offset.set(t.offset),
                    void 0 !== t.borderTop && (this._capInsets[1] = t.borderTop),
                    void 0 !== t.borderBottom && (this._capInsets[3] = t.borderBottom),
                    void 0 !== t.borderLeft && (this._capInsets[0] = t.borderLeft),
                    void 0 !== t.borderRight && (this._capInsets[2] = t.borderRight),
                    void 0 !== t.isRotate && (this._rotated = !!t.isRotate),
                    void 0 !== t.isFlipUv && (this._isFlipUVY = !!t.isFlipUv),
                    i = !0),
                    i && this.texture && this._calculateUV()
                }
                ,
                i.checkRect = function(t) {
                    var e = this._rect
                      , i = e.x
                      , r = e.y;
                    return this._rotated ? (i += e.height,
                    r += e.width) : (i += e.width,
                    r += e.height),
                    i > t.width ? (Qe(3300, this.name + "/" + t.name, i, t.width),
                    !1) : !(r > t.height && (Qe(3301, this.name + "/" + t.name, r, t.height),
                    1))
                }
                ,
                i.destroy = function() {
                    return this._packable && Xc && Xc.deleteAtlasSpriteFrame(this),
                    t.prototype.destroy.call(this)
                }
                ,
                i._calculateSlicedUV = function() {
                    var t = this._rect
                      , e = this.texture
                      , i = e.width
                      , r = e.height
                      , n = this._capInsets[0]
                      , s = this._capInsets[2]
                      , a = t.width - n - s
                      , o = this._capInsets[1]
                      , l = this._capInsets[3]
                      , h = t.height - o - l
                      , u = this.uvSliced;
                    if (u.length = 0,
                    this._rotated) {
                        qc[0].u = t.x / i,
                        qc[1].u = (t.x + l) / i,
                        qc[2].u = (t.x + l + h) / i,
                        qc[3].u = (t.x + t.height) / i,
                        qc[3].v = t.y / r,
                        qc[2].v = (t.y + n) / r,
                        qc[1].v = (t.y + n + a) / r,
                        qc[0].v = (t.y + t.width) / r;
                        for (var c = 0; c < 4; ++c)
                            for (var _ = qc[c], d = 0; d < 4; ++d) {
                                var p = qc[3 - d];
                                u.push({
                                    u: _.u,
                                    v: p.v
                                })
                            }
                    } else {
                        qc[0].u = t.x / i,
                        qc[1].u = (t.x + n) / i,
                        qc[2].u = (t.x + n + a) / i,
                        qc[3].u = (t.x + t.width) / i,
                        qc[3].v = t.y / r,
                        qc[2].v = (t.y + o) / r,
                        qc[1].v = (t.y + o + h) / r,
                        qc[0].v = (t.y + t.height) / r;
                        for (var f = 0; f < 4; ++f)
                            for (var g = qc[f], m = 0; m < 4; ++m) {
                                var y = qc[m];
                                u.push({
                                    u: y.u,
                                    v: g.v
                                })
                            }
                    }
                }
                ,
                i._calculateUV = function() {
                    var t = this._rect
                      , e = this.uv
                      , i = this.unbiasUV
                      , r = this.texture
                      , n = r.width
                      , s = r.height;
                    if (this._rotated) {
                        var a = 0 === n ? 0 : t.x / n
                          , o = 0 === n ? 1 : (t.x + t.height) / n
                          , l = 0 === s ? 0 : t.y / s
                          , h = 0 === s ? 1 : (t.y + t.width) / s;
                        this._isFlipUVX && this._isFlipUVY ? (e[0] = o,
                        e[1] = h,
                        e[2] = o,
                        e[3] = l,
                        e[4] = a,
                        e[5] = h,
                        e[6] = a,
                        e[7] = l) : this._isFlipUVX ? (e[0] = o,
                        e[1] = l,
                        e[2] = o,
                        e[3] = h,
                        e[4] = a,
                        e[5] = l,
                        e[6] = a,
                        e[7] = h) : this._isFlipUVY ? (e[0] = a,
                        e[1] = h,
                        e[2] = a,
                        e[3] = l,
                        e[4] = o,
                        e[5] = h,
                        e[6] = o,
                        e[7] = l) : (e[0] = a,
                        e[1] = l,
                        e[2] = a,
                        e[3] = h,
                        e[4] = o,
                        e[5] = l,
                        e[6] = o,
                        e[7] = h);
                        var u = 0 === n ? 0 : t.x / n
                          , c = 0 === n ? 1 : (t.x + t.height) / n
                          , _ = 0 === s ? 0 : t.y / s
                          , d = 0 === s ? 1 : (t.y + t.width) / s;
                        this._isFlipUVX && this._isFlipUVY ? (i[0] = c,
                        i[1] = d,
                        i[2] = c,
                        i[3] = _,
                        i[4] = u,
                        i[5] = d,
                        i[6] = u,
                        i[7] = _) : this._isFlipUVX ? (i[0] = c,
                        i[1] = _,
                        i[2] = c,
                        i[3] = d,
                        i[4] = u,
                        i[5] = _,
                        i[6] = u,
                        i[7] = d) : this._isFlipUVY ? (i[0] = u,
                        i[1] = d,
                        i[2] = u,
                        i[3] = _,
                        i[4] = c,
                        i[5] = d,
                        i[6] = c,
                        i[7] = _) : (i[0] = u,
                        i[1] = _,
                        i[2] = u,
                        i[3] = d,
                        i[4] = c,
                        i[5] = _,
                        i[6] = c,
                        i[7] = d)
                    } else {
                        var p = 0 === n ? 0 : t.x / n
                          , f = 0 === n ? 1 : (t.x + t.width) / n
                          , g = 0 === s ? 1 : (t.y + t.height) / s
                          , m = 0 === s ? 0 : t.y / s;
                        this._isFlipUVX && this._isFlipUVY ? (e[0] = f,
                        e[1] = m,
                        e[2] = p,
                        e[3] = m,
                        e[4] = f,
                        e[5] = g,
                        e[6] = p,
                        e[7] = g) : this._isFlipUVX ? (e[0] = f,
                        e[1] = g,
                        e[2] = p,
                        e[3] = g,
                        e[4] = f,
                        e[5] = m,
                        e[6] = p,
                        e[7] = m) : this._isFlipUVY ? (e[0] = p,
                        e[1] = m,
                        e[2] = f,
                        e[3] = m,
                        e[4] = p,
                        e[5] = g,
                        e[6] = f,
                        e[7] = g) : (e[0] = p,
                        e[1] = g,
                        e[2] = f,
                        e[3] = g,
                        e[4] = p,
                        e[5] = m,
                        e[6] = f,
                        e[7] = m);
                        var y = 0 === n ? 0 : t.x / n
                          , v = 0 === n ? 1 : (t.x + t.width) / n
                          , S = 0 === s ? 1 : (t.y + t.height) / s
                          , T = 0 === s ? 0 : t.y / s;
                        this._isFlipUVX && this._isFlipUVY ? (i[0] = v,
                        i[1] = T,
                        i[2] = y,
                        i[3] = T,
                        i[4] = v,
                        i[5] = S,
                        i[6] = y,
                        i[7] = S) : this._isFlipUVX ? (i[0] = v,
                        i[1] = S,
                        i[2] = y,
                        i[3] = S,
                        i[4] = v,
                        i[5] = T,
                        i[6] = y,
                        i[7] = T) : this._isFlipUVY ? (i[0] = y,
                        i[1] = T,
                        i[2] = v,
                        i[3] = T,
                        i[4] = y,
                        i[5] = S,
                        i[6] = v,
                        i[7] = S) : (i[0] = y,
                        i[1] = S,
                        i[2] = v,
                        i[3] = S,
                        i[4] = y,
                        i[5] = T,
                        i[6] = v,
                        i[7] = T)
                    }
                    for (var b = "", E = 0; E < e.length; E++)
                        b += e[E];
                    this.uvHash = wr(b, 666);
                    var A = this.vertices;
                    if (A) {
                        A.nu.length = 0,
                        A.nv.length = 0;
                        for (var C = 0; C < A.u.length; C++)
                            A.nu[C] = A.u[C] / n,
                            A.nv[C] = A.v[C] / s
                    }
                    this._calculateSlicedUV()
                }
                ,
                i._setDynamicAtlasFrame = function(t) {
                    t && (this._original = {
                        _texture: this._texture,
                        _x: this._rect.x,
                        _y: this._rect.y
                    },
                    this._texture = t.texture,
                    this._rect.x = t.x,
                    this._rect.y = t.y,
                    this._calculateUV())
                }
                ,
                i._resetDynamicAtlasFrame = function() {
                    this._original && (this._rect.x = this._original._x,
                    this._rect.y = this._original._y,
                    this._texture = this._original._texture,
                    this._original = null,
                    this._calculateUV())
                }
                ,
                i._checkPackable = function() {
                    var t = Xc;
                    if (t) {
                        var e = this._texture;
                        if (e instanceof Er && !e.isCompressed) {
                            var i = this.width
                              , r = this.height;
                            !e.image || i > t.maxFrameSize || r > t.maxFrameSize ? this._packable = !1 : e.image && e.image instanceof HTMLCanvasElement && (this._packable = !0)
                        } else
                            this._packable = !1
                    }
                }
                ,
                i._serialize = function() {
                    return null
                }
                ,
                i._deserialize = function(t) {
                    var e = t
                      , i = e.rect;
                    i && (this._rect = new Or(i.x,i.y,i.width,i.height));
                    var r = e.offset;
                    e.offset && (this._offset = new Br(r.x,r.y));
                    var n = e.originalSize;
                    e.originalSize && (this._originalSize = new Pr(n.width,n.height)),
                    this._rotated = !!e.rotated,
                    this._name = e.name,
                    this._packable = !!e.packable;
                    var s = e.capInsets;
                    s && (this._capInsets[0] = s[0],
                    this._capInsets[1] = s[1],
                    this._capInsets[2] = s[2],
                    this._capInsets[3] = s[3]),
                    this.vertices = e.vertices,
                    this.vertices && (this.vertices.nu = [],
                    this.vertices.nv = [])
                }
                ,
                i.clone = function() {
                    var t, i, r, n, s, a, o, l, h = new e, u = this.vertices;
                    return h.vertices = u ? {
                        x: u.x,
                        y: u.y,
                        triangles: u.triangles,
                        nu: null === (t = u.nu) || void 0 === t ? void 0 : t.slice(0),
                        u: null === (i = u.u) || void 0 === i ? void 0 : i.slice(0),
                        nv: null === (r = u.nv) || void 0 === r ? void 0 : r.slice(0),
                        v: null === (n = u.v) || void 0 === n ? void 0 : n.slice(0)
                    } : null,
                    (s = h.uv).splice.apply(s, [0, h.uv.length].concat(this.uv)),
                    h.uvHash = this.uvHash,
                    (a = h.unbiasUV).splice.apply(a, [0, h.unbiasUV.length].concat(this.unbiasUV)),
                    (o = h.uvSliced).splice.apply(o, [0, h.uvSliced.length].concat(this.uvSliced)),
                    h._rect.set(this._rect),
                    h._offset.set(this._offset),
                    h._originalSize.set(this._originalSize),
                    h._rotated = this._rotated,
                    (l = h._capInsets).splice.apply(l, [0, h._capInsets.length].concat(this._capInsets)),
                    h._atlasUuid = this._atlasUuid,
                    h._texture = this._texture,
                    h._isFlipUVX = this._isFlipUVX,
                    h._isFlipUVY = this._isFlipUVY,
                    h
                }
                ,
                i._refreshTexture = function(t) {
                    this._texture = t;
                    var e = this._texture
                      , i = {}
                      , r = !1;
                    0 !== this._rect.width && 0 !== this._rect.height && this.checkRect(e) || (i.rect = new Or(0,0,e.width,e.height),
                    r = !0),
                    (0 === this._originalSize.width || 0 === this._originalSize.height || r) && (i.originalSize = new Pr(e.width,e.height),
                    r = !0),
                    r && (this.reset(i),
                    this.onLoaded()),
                    this._checkPackable()
                }
                ,
                i.initDefault = function(e) {
                    t.prototype.initDefault.call(this, e);
                    var i = new Er;
                    i.initDefault(),
                    this._refreshTexture(i),
                    this._calculateUV()
                }
                ,
                i.validate = function() {
                    return this._texture && this._rect && 0 !== this._rect.width && 0 !== this._rect.height
                }
                ,
                i._calculateTillingOffset = function() {
                    this._rotated ? (this.tillingOffset[0] = this.uv[4] - this.uv[0],
                    this.tillingOffset[1] = this.uv[3] - this.uv[5],
                    this.tillingOffset[2] = this.uv[0],
                    this.tillingOffset[3] = this.uv[5],
                    this.tillingOffset[0] = -this.tillingOffset[0]) : (this.tillingOffset[0] = this.uv[2] - this.uv[0],
                    this.tillingOffset[1] = this.uv[1] - this.uv[5],
                    this.tillingOffset[2] = this.uv[4],
                    this.tillingOffset[3] = this.uv[5])
                }
                ,
                i._calculateSlicedData = function() {
                    var t = this._rect
                      , e = this._capInsets[0]
                      , i = this._capInsets[2]
                      , r = t.width - e - i
                      , n = this._capInsets[1]
                      , s = this._capInsets[3]
                      , a = t.height - n - s
                      , o = this.slicedData;
                    o.length = 0,
                    o[0] = e / t.width,
                    o[1] = n / t.height,
                    o[2] = (e + r) / t.width,
                    o[3] = (n + a) / t.height
                }
                ,
                Je(e, [{
                    key: "insetTop",
                    get: function() {
                        return this._capInsets[1]
                    },
                    set: function(t) {
                        this._capInsets[1] !== t && (this._capInsets[1] = t,
                        this._texture && this._calculateSlicedUV())
                    }
                }, {
                    key: "insetBottom",
                    get: function() {
                        return this._capInsets[3]
                    },
                    set: function(t) {
                        this._capInsets[3] !== t && (this._capInsets[3] = t,
                        this._texture && this._calculateSlicedUV())
                    }
                }, {
                    key: "insetLeft",
                    get: function() {
                        return this._capInsets[0]
                    },
                    set: function(t) {
                        this._capInsets[0] !== t && (this._capInsets[0] = t,
                        this._texture && this._calculateSlicedUV())
                    }
                }, {
                    key: "insetRight",
                    get: function() {
                        return this._capInsets[2]
                    },
                    set: function(t) {
                        this._capInsets[2] !== t && (this._capInsets[2] = t,
                        this._texture && this._calculateSlicedUV())
                    }
                }, {
                    key: "rect",
                    get: function() {
                        return this._rect
                    },
                    set: function(t) {
                        this._rect.equals(t) || (this._rect.set(t),
                        this._texture && this._calculateUV())
                    }
                }, {
                    key: "originalSize",
                    get: function() {
                        return this._originalSize
                    },
                    set: function(t) {
                        this._originalSize.equals(t) || (this._originalSize.set(t),
                        this._texture && this._calculateUV())
                    }
                }, {
                    key: "offset",
                    get: function() {
                        return this._offset
                    },
                    set: function(t) {
                        this._offset.set(t)
                    }
                }, {
                    key: "rotated",
                    get: function() {
                        return this._rotated
                    },
                    set: function(t) {
                        this._rotated !== t && (this._rotated = t,
                        this._texture && this._calculateUV())
                    }
                }, {
                    key: "texture",
                    get: function() {
                        return this._texture
                    },
                    set: function(t) {
                        t ? this.reset({
                            texture: t
                        }, !0) : console.warn("Error Texture in " + this.name)
                    }
                }, {
                    key: "atlasUuid",
                    get: function() {
                        return this._atlasUuid
                    },
                    set: function(t) {
                        this._atlasUuid = t
                    }
                }, {
                    key: "width",
                    get: function() {
                        return this._texture.width
                    }
                }, {
                    key: "height",
                    get: function() {
                        return this._texture.height
                    }
                }, {
                    key: "_textureSource",
                    set: function(t) {
                        window.Build ? this._texture = t : t && (this._refreshTexture(t),
                        this._calculateUV())
                    }
                }, {
                    key: "flipUVX",
                    get: function() {
                        return this._isFlipUVX
                    },
                    set: function(t) {
                        this._isFlipUVX = t,
                        this._calculateUV()
                    }
                }, {
                    key: "flipUVY",
                    get: function() {
                        return this._isFlipUVY
                    },
                    set: function(t) {
                        this._isFlipUVY = t,
                        this._calculateUV()
                    }
                }, {
                    key: "packable",
                    get: function() {
                        return this._packable
                    },
                    set: function(t) {
                        this._packable = t
                    }
                }, {
                    key: "original",
                    get: function() {
                        return this._original
                    }
                }]),
                e
            }(Mr)) || Wc);
            ci.SpriteFrame = Jc;
            var Qc, $c = t("SpriteAtlas", Ti("cc.SpriteAtlas")((Zc = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "spriteFrames", Kc, Gi(e)),
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.getTexture = function() {
                    var t = Object.keys(this.spriteFrames);
                    if (t.length > 0) {
                        var e = this.spriteFrames[t[0]];
                        return e && e.texture
                    }
                    return null
                }
                ,
                i.getSpriteFrame = function(t) {
                    var e = this.spriteFrames[t];
                    return e ? (e.name || (e.name = t),
                    e) : null
                }
                ,
                i.getSpriteFrames = function() {
                    for (var t = [], e = this.spriteFrames, i = 0, r = Object.keys(e); i < r.length; i++) {
                        var n = r[i];
                        t.push(e[n])
                    }
                    return t
                }
                ,
                i._serialize = function() {}
                ,
                i._deserialize = function(t, e) {
                    var i = t;
                    this._name = i.name;
                    var r = i.spriteFrames;
                    this.spriteFrames = Lr();
                    for (var n = 0; n < r.length; n += 2)
                        e.result.push(this.spriteFrames, r[n], r[n + 1], Fr(Jc))
                }
                ,
                e
            }(Mr),
            Kc = Ei((Yc = Zc).prototype, "spriteFrames", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Lr()
                }
            }),
            jc = Yc)) || jc);
            ci.SpriteAtlas = $c;
            var t_, e_, i_, r_, n_ = t("Font", Ti("cc.Font")(Qc = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                return qe(e, t),
                e
            }(Mr)) || Qc);
            ci.Font = n_;
            var s_, a_, o_, l_, h_, u_, c_, __, d_, p_ = t("TTFFont", Ti("cc.TTFFont")((r_ = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "_fontFamily", i_, Gi(e)),
                    e
                }
                return qe(e, t),
                e.prototype.initDefault = function(e) {
                    this._fontFamily = "Arial",
                    t.prototype.initDefault.call(this, e)
                }
                ,
                Je(e, [{
                    key: "_nativeAsset",
                    get: function() {
                        return this._fontFamily
                    },
                    set: function(t) {
                        this._fontFamily = t || "Arial"
                    }
                }, {
                    key: "_nativeDep",
                    get: function() {
                        return {
                            uuid: this._uuid,
                            __nativeName__: this._native,
                            ext: kr(this._native),
                            __isNative__: !0
                        }
                    }
                }]),
                e
            }(n_),
            i_ = Ei((e_ = r_).prototype, "_fontFamily", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ei(e_.prototype, "_nativeAsset", [Rr, Nr], Object.getOwnPropertyDescriptor(e_.prototype, "_nativeAsset"), e_.prototype),
            Ei(e_.prototype, "_nativeDep", [Rr], Object.getOwnPropertyDescriptor(e_.prototype, "_nativeDep"), e_.prototype),
            t_ = e_)) || t_);
            ci.TTFFont = p_;
            var f_, g_ = function() {
                this.u = 0,
                this.v = 0,
                this.w = 0,
                this.h = 0,
                this.offsetX = 0,
                this.offsetY = 0,
                this.textureID = 0,
                this.valid = !1,
                this.xAdvance = 0
            }, m_ = function() {
                function t(t) {
                    this.letterDefinitions = {},
                    this.texture = t
                }
                var e = t.prototype;
                return e.addLetterDefinitions = function(t, e) {
                    this.letterDefinitions[t] = e
                }
                ,
                e.cloneLetterDefinition = function() {
                    for (var t = {}, e = 0, i = Object.keys(this.letterDefinitions); e < i.length; e++) {
                        var r = i[e]
                          , n = new g_;
                        Gr(n, this.letterDefinitions[r]),
                        t[r] = n
                    }
                    return t
                }
                ,
                e.getTexture = function() {
                    return this.texture
                }
                ,
                e.getLetter = function(t) {
                    return this.letterDefinitions[t]
                }
                ,
                e.getLetterDefinitionForChar = function(t) {
                    var e = t.charCodeAt(0);
                    return this.letterDefinitions.hasOwnProperty(e) ? this.letterDefinitions[e] : null
                }
                ,
                e.clear = function() {
                    this.letterDefinitions = {}
                }
                ,
                t
            }(), y_ = t("BitmapFont", (s_ = Ti("cc.BitmapFont"),
            a_ = Ci(Jc),
            s_((d_ = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "fntDataStr", h_, Gi(e)),
                    Oi(e, "spriteFrame", u_, Gi(e)),
                    Oi(e, "fontSize", c_, Gi(e)),
                    Oi(e, "fntConfig", __, Gi(e)),
                    e
                }
                return qe(e, t),
                e.prototype.onLoaded = function() {
                    var t = this.spriteFrame;
                    !this.fontDefDictionary && t && (this.fontDefDictionary = new m_(t.texture));
                    var e = this.fntConfig;
                    if (e) {
                        var i = e.fontDefDictionary;
                        for (var r in i) {
                            var n = new g_
                              , s = i[r].rect;
                            n.offsetX = i[r].xOffset,
                            n.offsetY = i[r].yOffset,
                            n.w = s.width,
                            n.h = s.height,
                            n.u = s.x,
                            n.v = s.y,
                            n.textureID = 0,
                            n.valid = !0,
                            n.xAdvance = i[r].xAdvance,
                            this.fontDefDictionary.addLetterDefinitions(r, n)
                        }
                    } else
                        ri("The fnt config is not exists!")
                }
                ,
                e
            }(n_),
            h_ = Ei((l_ = d_).prototype, "fntDataStr", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return ""
                }
            }),
            u_ = Ei(l_.prototype, "spriteFrame", [a_], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            c_ = Ei(l_.prototype, "fontSize", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return -1
                }
            }),
            __ = Ei(l_.prototype, "fntConfig", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            o_ = l_)) || o_));
            ci.BitmapFont = y_;
            var v_ = t("LabelAtlas", Ti("cc.LabelAtlas")(f_ = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                return qe(e, t),
                e
            }(y_)) || f_);
            ci.LabelAtlas = v_;
            var S_ = t("BASELINE_RATIO", .26)
              , T_ = t("MIDDLE_RATIO", (S_ + 1) / 2 - S_);
            var b_ = new zr(2);
            b_.get = function() {
                return this._get() || {
                    key: "",
                    value: 0,
                    prev: null,
                    next: null
                }
            }
            ;
            var E_, A_ = new (function() {
                function t(t) {
                    this.count = 0,
                    this.limit = 0,
                    this.datas = {},
                    this.limit = t
                }
                var e = t.prototype;
                return e.moveToHead = function(t) {
                    t.next = this.head,
                    t.prev = null,
                    this.head && (this.head.prev = t),
                    this.head = t,
                    this.tail || (this.tail = t),
                    this.count++,
                    this.datas[t.key] = t
                }
                ,
                e.put = function(t, e) {
                    var i = b_.get();
                    if (i.key = t,
                    i.value = e,
                    this.count >= this.limit) {
                        var r = this.tail;
                        delete this.datas[r.key],
                        this.count--,
                        this.tail = r.prev,
                        this.tail.next = null,
                        r.prev = null,
                        r.next = null,
                        b_.put(r)
                    }
                    this.moveToHead(i)
                }
                ,
                e.remove = function(t) {
                    t.prev ? t.prev.next = t.next : this.head = t.next,
                    t.next ? t.next.prev = t.prev : this.tail = t.prev,
                    delete this.datas[t.key],
                    this.count--
                }
                ,
                e.get = function(t) {
                    var e = this.datas[t];
                    return e ? (this.remove(e),
                    this.moveToHead(e),
                    e.value) : null
                }
                ,
                e.clear = function() {
                    this.count = 0,
                    this.datas = {},
                    this.head = null,
                    this.tail = null
                }
                ,
                e.has = function(t) {
                    return !!this.datas[t]
                }
                ,
                e.delete = function(t) {
                    var e = this.datas[t];
                    this.remove(e)
                }
                ,
                t
            }())(100), C_ = /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûа-яА-ЯЁё]+|\S)/, R_ = /^[!,.:;'}\]%\?>、‘“》？。，！]/, B_ = /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]+|\S)$/, x_ = /[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]+$/, D_ = /^[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]/;
            function w_(t) {
                return /^[\u4E00-\u9FFF\u3400-\u4DFF]+$/.test(t) || /[\u3000-\u303F]|[\u3040-\u309F]|[\u30A0-\u30FF]|[\uFF00-\uFFEF]|[\u4E00-\u9FAF]|[\u2605-\u2606]|[\u2190-\u2195]|\u203B/g.test(t) || /^[\u1100-\u11FF]|[\u3130-\u318F]|[\uA960-\uA97F]|[\uAC00-\uD7AF]|[\uD7B0-\uD7FF]+$/.test(t)
            }
            function O_(t) {
                var e = t.charCodeAt(0);
                return e >= 9 && e <= 13 || 32 === e || 133 === e || 160 === e || 5760 === e || e >= 8192 && e <= 8202 || 8232 === e || 8233 === e || 8239 === e || 8287 === e || 12288 === e
            }
            function P_(t, e, i) {
                var r = (i || t.font) + "🎮" + e
                  , n = A_.get(r);
                if (null !== n)
                    return n;
                var s = t.measureText(e)
                  , a = s && s.width || 0;
                return A_.put(r, a),
                a
            }
            function M_(t, e, i) {
                var r = e
                  , n = i
                  , s = t[e];
                if (s >= "\udc00" && s <= "\udfff" && r--,
                void 0 !== i)
                    if (i - 1 !== e) {
                        var a = t[i - 1];
                        a >= "\ud800" && a <= "\udbff" && n--
                    } else
                        s >= "\ud800" && s <= "\udbff" && n++;
                return t.substring(r, n)
            }
            function I_(t, e, i, r) {
                var n = [];
                if (0 === t.length || i < 0)
                    return n.push(""),
                    n;
                for (var s = t; e > i && s.length > 1; ) {
                    for (var a = s.length * (i / e) | 0, o = M_(s, a), l = e - r(o), h = o, u = 0, c = 0; l > i && c++ < 10; )
                        a *= i / l,
                        l = e - r(o = M_(s, a |= 0));
                    for (c = 0; l <= i && c++ < 10; ) {
                        if (o) {
                            var _ = C_.exec(o);
                            u = _ ? _[0].length : 1,
                            h = o
                        }
                        l = e - r(o = M_(s, a += u))
                    }
                    0 == (a -= u) ? (a = 1,
                    h = M_(s, 1)) : 1 === a && s[0] >= "\ud800" && s[0] <= "\udbff" && (a = 2,
                    h = M_(s, 2));
                    var d = M_(s, 0, a)
                      , p = void 0;
                    R_.test(h || o) && (0 == (a -= (p = B_.exec(d)) ? p[0].length : 0) && (a = 1),
                    h = M_(s, a),
                    d = M_(s, 0, a)),
                    D_.test(h) && (p = x_.exec(d)) && d !== p[0] && (h = M_(s, a -= p[0].length),
                    d = M_(s, 0, a)),
                    (0 === n.length || (d = d.trim()).length > 0) && n.push(d),
                    e = r(s = h || o)
                }
                return (0 === n.length || (s = s.trim()).length > 0) && n.push(s),
                n
            }
            var L_, F_, N_, k_, G_, z_, U_, H_, V_, W_, X_, j_, Y_, K_, Z_, q_ = t("CanvasPool", function() {
                function t() {
                    this.pool = []
                }
                t.getInstance = function() {
                    return E_ || (E_ = new t),
                    E_
                }
                ;
                var e = t.prototype;
                return e.get = function() {
                    var t = this.pool.pop();
                    if (!t) {
                        var e = document.createElement("canvas")
                          , i = e.getContext("2d");
                        t = {
                            canvas: e,
                            context: i
                        }
                    }
                    return t
                }
                ,
                e.put = function(t) {
                    this.pool.length >= li.MAX_LABEL_CANVAS_POOL_SIZE || this.pool.push(t)
                }
                ,
                t
            }()), J_ = Zi.WHITE.clone(), Q_ = function() {
                this.u = 0,
                this.v = 0,
                this.w = 0,
                this.h = 0,
                this.texture = null,
                this.offsetX = 0,
                this.offsetY = 0,
                this.valid = !1,
                this.xAdvance = 0
            }, $_ = "rgba(255, 255, 255, " + (1 / 255).toFixed(3) + ")", td = function() {
                function t(t, e) {
                    this.image = null,
                    this.labelInfo = void 0,
                    this.char = void 0,
                    this.data = null,
                    this.canvas = null,
                    this.context = null,
                    this.width = 0,
                    this.height = 0,
                    this.offsetY = 0,
                    this.hash = void 0,
                    this.char = t,
                    this.labelInfo = e,
                    this.hash = t.charCodeAt(0) + e.hash
                }
                var e = t.prototype;
                return e.updateRenderData = function() {
                    this._updateProperties(),
                    this._updateTexture()
                }
                ,
                e.destroy = function() {
                    this.image = null
                }
                ,
                e._updateProperties = function() {
                    if (this.data = q_.getInstance().get(),
                    this.canvas = this.data.canvas,
                    this.context = this.data.context,
                    this.context) {
                        this.context.font = this.labelInfo.fontDesc;
                        var t = P_(this.context, this.char, this.labelInfo.fontDesc)
                          , e = 2 * this.labelInfo.margin + 2;
                        this.width = parseFloat(t.toFixed(2)) + e,
                        this.height = (1 + S_) * this.labelInfo.fontSize + e,
                        this.offsetY = -this.labelInfo.fontSize * S_ / 2
                    }
                    this.canvas.width !== this.width && (this.canvas.width = this.width),
                    this.canvas.height !== this.height && (this.canvas.height = this.height),
                    this.image || (this.image = new Ir),
                    this.image.reset(this.canvas)
                }
                ,
                e._updateTexture = function() {
                    if (this.context && this.canvas) {
                        var t = this.context
                          , e = this.labelInfo
                          , i = this.canvas.width
                          , r = this.canvas.height;
                        t.textAlign = "center",
                        t.textBaseline = "alphabetic",
                        t.clearRect(0, 0, i, r),
                        t.fillStyle = $_,
                        t.fillRect(0, 0, i, r),
                        t.font = e.fontDesc;
                        var n = e.fontSize
                          , s = i / 2
                          , a = r / 2 + n * T_ + 0 * n
                          , o = e.color;
                        if (t.lineJoin = "round",
                        t.fillStyle = "rgba(" + o.r + ", " + o.g + ", " + o.b + ", 1)",
                        e.isOutlined) {
                            var l = e.out || J_;
                            t.strokeStyle = "rgba(" + l.r + ", " + l.g + ", " + l.b + ", " + l.a / 255 + ")",
                            t.lineWidth = 2 * e.margin,
                            t.strokeText(this.char, s, a)
                        }
                        t.fillText(this.char, s, a)
                    }
                }
                ,
                t
            }(), ed = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.initWithSize = function(t, e, i) {
                    void 0 === i && (i = Cr.RGBA8888),
                    this.reset({
                        width: t,
                        height: e,
                        format: i
                    })
                }
                ,
                i.drawTextureAt = function(t, e, i) {
                    var r = this.getGFXTexture();
                    if (t && r) {
                        var n = this._getGFXDevice();
                        if (n) {
                            var s = new rt;
                            s.texOffset.x = e,
                            s.texOffset.y = i,
                            s.texExtent.width = t.width,
                            s.texExtent.height = t.height,
                            n.copyTexImagesToTexture([t.data], r, [s])
                        } else
                            console.warn("Unable to get device")
                    }
                }
                ,
                e
            }(Er), id = function() {
                function t(t, e) {
                    this._x = 0,
                    this._y = 0,
                    this._nextY = 0,
                    this._width = 0,
                    this._height = 0,
                    this._halfBleed = 0,
                    this._dirty = !1;
                    var i = new ed;
                    i.initWithSize(t, e),
                    this.fontDefDictionary = new m_(i),
                    this._halfBleed = 1,
                    this._width = t,
                    this._height = e,
                    Ur.on(Hr.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this)
                }
                var e = t.prototype;
                return e.insertLetterTexture = function(t) {
                    var e = t.image
                      , i = Ur.root.device;
                    if (!e || !this.fontDefDictionary || !i)
                        return null;
                    var r = e.width
                      , n = e.height;
                    if (this._x + r + 0 > this._width && (this._x = 0,
                    this._y = this._nextY),
                    this._y + n > this._nextY && (this._nextY = this._y + n + 0),
                    this._nextY > this._height)
                        return ii(12100),
                        null;
                    this.fontDefDictionary.texture.drawTextureAt(e, this._x, this._y),
                    this._dirty = !0;
                    var s = new Q_;
                    return s.u = this._x + this._halfBleed,
                    s.v = this._y + this._halfBleed,
                    s.texture = this.fontDefDictionary.texture,
                    s.valid = !0,
                    s.w = t.width - 2,
                    s.h = t.height - 2,
                    s.xAdvance = s.w,
                    s.offsetY = t.offsetY,
                    this._x += r + 0,
                    this.fontDefDictionary.addLetterDefinitions(t.hash, s),
                    s
                }
                ,
                e.update = function() {
                    this._dirty && (this._dirty = !1)
                }
                ,
                e.reset = function() {
                    this._x = 0,
                    this._y = 0,
                    this._nextY = 0,
                    this.fontDefDictionary.clear()
                }
                ,
                e.destroy = function() {
                    this.reset(),
                    this.fontDefDictionary && (this.fontDefDictionary.texture.destroy(),
                    this.fontDefDictionary.texture = null)
                }
                ,
                e.getTexture = function() {
                    return this.fontDefDictionary.getTexture()
                }
                ,
                e.beforeSceneLoad = function() {
                    this.clearAllCache()
                }
                ,
                e.clearAllCache = function() {
                    this.destroy();
                    var t = new ed;
                    t.initWithSize(this._width, this._height),
                    this.fontDefDictionary.texture = t
                }
                ,
                e.getLetter = function(t) {
                    return this.fontDefDictionary.letterDefinitions[t]
                }
                ,
                e.getLetterDefinitionForChar = function(t, e) {
                    var i = t.charCodeAt(0) + e.hash
                      , r = this.fontDefDictionary.letterDefinitions[i];
                    if (!r) {
                        var n = new td(t,e);
                        n.updateRenderData(),
                        r = this.insertLetterTexture(n),
                        n.destroy()
                    }
                    return r
                }
                ,
                Je(t, [{
                    key: "width",
                    get: function() {
                        return this._width
                    }
                }, {
                    key: "height",
                    get: function() {
                        return this._height
                    }
                }]),
                t
            }(), rd = {
                fontAtlas: null,
                fontSize: 0,
                lineHeight: 0,
                hAlign: 0,
                vAlign: 0,
                hash: "",
                fontFamily: "",
                fontDesc: "Arial",
                color: Zi.WHITE.clone(),
                isOutlined: !1,
                out: Zi.WHITE.clone(),
                margin: 0
            }, nd = function() {
                this.material = null,
                this.vertexCount = 0,
                this.indicesCount = 0
            }, sd = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this).vData = null,
                    e.uvDirty = !0,
                    e.vertDirty = !0,
                    e._data = [],
                    e._indices = [],
                    e._pivotX = 0,
                    e._pivotY = 0,
                    e._width = 0,
                    e._height = 0,
                    e.renderScene = null,
                    e.layer = 0,
                    e.nodeDirty = !0,
                    e.blendHash = -1,
                    e.passDirty = !0,
                    e.frame = void 0,
                    e.textureHash = 0,
                    e.textureDirty = !0,
                    e.hashDirty = !0,
                    e.dataHash = 0,
                    e
                }
                qe(e, t),
                e.add = function() {
                    return ld.add()
                }
                ,
                e.remove = function(t) {
                    var e = ld.data.indexOf(t);
                    -1 !== e && (ld.data[e].clear(),
                    ld.removeAt(e))
                }
                ;
                var i = e.prototype;
                return i.updateNode = function(t) {
                    this.renderScene = t.node.scene ? t._getRenderScene() : null,
                    this.layer = t.node.layer,
                    this.nodeDirty = !1,
                    this.hashDirty = !0
                }
                ,
                i.updatePass = function(t) {
                    this.material = t.getRenderMaterial(0),
                    this.blendHash = t.blendHash,
                    this.passDirty = !1,
                    this.hashDirty = !0
                }
                ,
                i.updateTexture = function(t) {
                    this.frame = t,
                    this.textureHash = t.getHash(),
                    this.textureDirty = !1,
                    this.hashDirty = !0
                }
                ,
                i.updateHash = function() {
                    var t = " " + this.layer + " " + this.blendHash + " " + this.textureHash;
                    this.dataHash = wr(t, 666),
                    this.hashDirty = !1
                }
                ,
                i.updateRenderData = function(t, e) {
                    if (this.passDirty && (this.material = t.getRenderMaterial(0),
                    this.blendHash = t.blendHash,
                    this.passDirty = !1,
                    this.hashDirty = !0),
                    this.nodeDirty && (this.renderScene = t.node.scene ? t._getRenderScene() : null,
                    this.layer = t.node.layer,
                    null !== this.renderScene && (this.nodeDirty = !1),
                    this.hashDirty = !0),
                    this.textureDirty && (this.frame = e,
                    this.textureHash = e.getHash(),
                    this.textureDirty = !1,
                    this.hashDirty = !0),
                    this.hashDirty) {
                        var i = " " + this.layer + " " + this.blendHash + " " + this.textureHash;
                        this.dataHash = wr(i, 666),
                        this.hashDirty = !1
                    }
                }
                ,
                i.updateSizeNPivot = function(t, e, i, r) {
                    t === this._width && e === this._height && i === this._pivotX && r === this._pivotY || (this._width = t,
                    this._height = e,
                    this._pivotX = i,
                    this._pivotY = r,
                    this.vertDirty = !0)
                }
                ,
                i.clear = function() {
                    this._data.length = 0,
                    this._indices.length = 0,
                    this._pivotX = 0,
                    this._pivotY = 0,
                    this._width = 0,
                    this._height = 0,
                    this.uvDirty = !0,
                    this.vertDirty = !0,
                    this.material = null,
                    this.vertexCount = 0,
                    this.indicesCount = 0,
                    this.nodeDirty = !0,
                    this.passDirty = !0,
                    this.textureDirty = !0,
                    this.hashDirty = !0,
                    this.renderScene = null,
                    this.layer = 0,
                    this.blendHash = -1,
                    this.frame = null,
                    this.textureHash = 0,
                    this.dataHash = 0
                }
                ,
                Je(e, [{
                    key: "dataLength",
                    get: function() {
                        return this._data.length
                    },
                    set: function(t) {
                        var e = this._data;
                        if (e.length !== t) {
                            var i = e.length
                              , r = 0;
                            for (r = t; r < i; r++)
                                od.free(e[r]);
                            for (r = i; r < t; r++)
                                e[r] = od.alloc();
                            e.length = t
                        }
                    }
                }, {
                    key: "data",
                    get: function() {
                        return this._data
                    }
                }]),
                e
            }(nd), ad = function(t) {
                function e(e) {
                    var i;
                    return void 0 === e && (e = 9),
                    (i = t.call(this) || this).vData = void 0,
                    i.iData = void 0,
                    i.vertexStart = 0,
                    i.indicesStart = 0,
                    i.byteStart = 0,
                    i.byteCount = 0,
                    i.lastFilledIndices = 0,
                    i.lastFilledVertex = 0,
                    i._formatByte = void 0,
                    i._formatByte = e * Float32Array.BYTES_PER_ELEMENT,
                    i.vData = new Float32Array(256 * e * Float32Array.BYTES_PER_ELEMENT),
                    i.iData = new Uint16Array(1536),
                    i
                }
                qe(e, t),
                e.add = function() {
                    return hd.add()
                }
                ,
                e.remove = function(t) {
                    var e = hd.data.indexOf(t);
                    -1 !== e && (hd.data[e].reset(),
                    hd.removeAt(e))
                }
                ;
                var i = e.prototype;
                return i.request = function(t, e) {
                    var i = this.byteCount + t * this._formatByte;
                    return this.reserve(t, e),
                    this.vertexCount += t,
                    this.indicesCount += e,
                    this.byteCount = i,
                    !0
                }
                ,
                i.reserve = function(t, e) {
                    var i = this.byteCount + t * this._formatByte
                      , r = this.indicesCount + e;
                    if (t + this.vertexCount > 65535)
                        return !1;
                    var n = this.vData.byteLength
                      , s = this.iData.length
                      , a = this.vData.length
                      , o = this.iData.length;
                    if (i > n || r > s) {
                        for (; n < i || s < r; )
                            n = 4 * (a *= 2),
                            s = o *= 2;
                        this._reallocBuffer(a, o)
                    }
                    return !0
                }
                ,
                i.advance = function(t, e) {
                    this.vertexCount += t,
                    this.indicesCount += e,
                    this.byteCount += t * this._formatByte
                }
                ,
                i.reset = function() {
                    this.vertexCount = 0,
                    this.indicesCount = 0,
                    this.byteCount = 0,
                    this.vertexStart = 0,
                    this.indicesStart = 0,
                    this.byteStart = 0,
                    this.lastFilledIndices = 0,
                    this.lastFilledVertex = 0
                }
                ,
                i._reallocBuffer = function(t, e) {
                    var i = this.vData;
                    this.vData = new Float32Array(t),
                    this.vData.set(i, 0);
                    var r = this.iData;
                    this.iData = new Uint16Array(e),
                    this.iData.set(r, 0)
                }
                ,
                Je(e, [{
                    key: "formatByte",
                    get: function() {
                        return this._formatByte
                    },
                    set: function(t) {
                        this._formatByte = t
                    }
                }, {
                    key: "floatStride",
                    get: function() {
                        return this._formatByte >> 2
                    }
                }, {
                    key: "vDataOffset",
                    get: function() {
                        return this.byteCount >>> 2
                    }
                }]),
                e
            }(nd), od = (function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                i._fillQuadBuffer = function() {
                    for (var t = this.iData.length / 6, e = this.iData, i = 0, r = 0; i < t; i++) {
                        var n = 4 * i;
                        e[r++] = n,
                        e[r++] = n + 1,
                        e[r++] = n + 2,
                        e[r++] = n + 1,
                        e[r++] = n + 3,
                        e[r++] = n + 2
                    }
                }
                ,
                i._reallocBuffer = function(e, i) {
                    t.prototype._reallocBuffer.call(this, e, i),
                    this._fillQuadBuffer()
                }
            }(ad),
            new e((function() {
                return {
                    x: 0,
                    y: 0,
                    z: 0,
                    u: 0,
                    v: 0,
                    color: Zi.WHITE.clone()
                }
            }
            ),128)), ld = new i((function() {
                return new sd
            }
            ),32), hd = new i((function() {
                return new ad
            }
            ),32), ud = new Br, cd = new Br, _d = new di, dd = new Ui, pd = new Ui, fd = new Ui, gd = new Ui(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), md = new Or, yd = function(e) {
                return t({
                    UITransform: e,
                    UITransformComponent: e
                }),
                e
            }((L_ = Ti("cc.UITransform"),
            F_ = Ii(),
            N_ = Li(110),
            k_ = Fi(),
            G_ = Xr(),
            z_ = Ni(),
            U_ = Xr(),
            H_ = Ni(),
            L_(V_ = F_(V_ = N_(V_ = k_(V_ = Vr(V_ = Ri((K_ = Y_ = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this) || this)._priority = 0,
                    Oi(e, "_contentSize", X_, Gi(e)),
                    Oi(e, "_anchorPoint", j_, Gi(e)),
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.__preload = function() {
                    this.node._uiProps.uiTransformComp = this
                }
                ,
                i.onLoad = function() {
                    this.node.parent && e.insertChangeMap(this.node.parent)
                }
                ,
                i.onEnable = function() {
                    this.node.on(Wr.PARENT_CHANGED, this._parentChanged, this),
                    this._markRenderDataDirty()
                }
                ,
                i.onDisable = function() {
                    this.node.off(Wr.PARENT_CHANGED, this._parentChanged, this)
                }
                ,
                i.onDestroy = function() {
                    this.node._uiProps.uiTransformComp = null
                }
                ,
                i.setContentSize = function(t, e) {
                    var i = this._contentSize;
                    if (void 0 === e) {
                        if ((t = t).width === i.width && t.height === i.height)
                            return;
                        i.width = t.width,
                        i.height = t.height
                    } else {
                        if (t === i.width && e === i.height)
                            return;
                        i.width = t,
                        i.height = e
                    }
                    this.node.emit(Wr.SIZE_CHANGED),
                    this._markRenderDataDirty()
                }
                ,
                i.setAnchorPoint = function(t, e) {
                    var i = this._anchorPoint;
                    if (void 0 === e) {
                        if ((t = t).x === i.x && t.y === i.y)
                            return;
                        i.x = t.x,
                        i.y = t.y
                    } else {
                        if (t === i.x && e === i.y)
                            return;
                        i.x = t,
                        i.y = e
                    }
                    this.node.emit(Wr.ANCHOR_CHANGED, this._anchorPoint),
                    this._markRenderDataDirty()
                }
                ,
                i.isHit = function(t) {
                    for (var e, i = this._contentSize.width, r = this._contentSize.height, n = ud, s = cd, a = null === (e = this.node) || void 0 === e ? void 0 : e.eventProcessor, o = this._getRenderScene().cameras, l = 0; l < o.length; l++) {
                        var h = o[l];
                        if (h.visibility & this.node.layer) {
                            h.node.getWorldRT(dd);
                            var u = dd.m12
                              , c = dd.m13
                              , _ = jr.center;
                            if (dd.m12 = _.x - (dd.m00 * u + dd.m04 * c),
                            dd.m13 = _.y - (dd.m01 * u + dd.m05 * c),
                            Ui.invert(dd, dd),
                            Br.transformMat4(n, t, dd),
                            this.node.getWorldMatrix(fd),
                            Ui.invert(dd, fd),
                            !Ui.strictEquals(dd, gd)) {
                                Br.transformMat4(s, n, dd),
                                s.x += this._anchorPoint.x * i,
                                s.y += this._anchorPoint.y * r;
                                var d = !1;
                                if (s.x >= 0 && s.y >= 0 && s.x <= i && s.y <= r && (d = !0,
                                a && a.maskList))
                                    for (var p = a.maskList, f = this.node, g = p ? p.length : 0, m = 0, y = 0; f && y < g; ++m,
                                    f = f.parent) {
                                        var v = p[y];
                                        if (m === v.index) {
                                            if (f !== v.comp.node) {
                                                p.length = y;
                                                break
                                            }
                                            var S = v.comp;
                                            if (S && S._enabled && !S.isHit(n)) {
                                                d = !1;
                                                break
                                            }
                                            y++
                                        } else if (m > v.index) {
                                            p.length = y;
                                            break
                                        }
                                    }
                                if (d)
                                    return !0
                            }
                        }
                    }
                    return !1
                }
                ,
                i.convertToNodeSpaceAR = function(t, e) {
                    return this.node.getWorldMatrix(fd),
                    Ui.invert(dd, fd),
                    e || (e = new di),
                    di.transformMat4(e, t, dd)
                }
                ,
                i.convertToWorldSpaceAR = function(t, e) {
                    return this.node.getWorldMatrix(fd),
                    e || (e = new di),
                    di.transformMat4(e, t, fd)
                }
                ,
                i.getBoundingBox = function() {
                    Ui.fromRTS(pd, this.node.getRotation(), this.node.getPosition(), this.node.getScale());
                    var t = this._contentSize.width
                      , e = this._contentSize.height
                      , i = new Or(-this._anchorPoint.x * t,-this._anchorPoint.y * e,t,e);
                    return i.transformMat4(pd),
                    i
                }
                ,
                i.getBoundingBoxToWorld = function() {
                    return this.node.parent ? (this.node.parent.getWorldMatrix(fd),
                    this.getBoundingBoxTo(fd)) : this.getBoundingBox()
                }
                ,
                i.getBoundingBoxTo = function(t) {
                    Ui.fromRTS(pd, this.node.getRotation(), this.node.getPosition(), this.node.getScale());
                    var i = this._contentSize.width
                      , r = this._contentSize.height
                      , n = new Or(-this._anchorPoint.x * i,-this._anchorPoint.y * r,i,r);
                    if (Ui.multiply(fd, t, pd),
                    n.transformMat4(fd),
                    !this.node.children)
                        return n;
                    for (var s, a = this.node.children, o = ui(a); !(s = o()).done; ) {
                        var l = s.value;
                        if (l && l.active) {
                            var h = l.getComponent(e);
                            if (h) {
                                var u = h.getBoundingBoxTo(t);
                                u && Or.union(n, n, u)
                            }
                        }
                    }
                    return n
                }
                ,
                i.getComputeAABB = function(t) {
                    var e = this._contentSize.width
                      , i = this._contentSize.height;
                    md.set(-this._anchorPoint.x * e, -this._anchorPoint.y * i, e, i),
                    md.transformMat4(this.node.worldMatrix);
                    var r = md.x + .5 * md.width
                      , n = md.y + .5 * md.height
                      , s = this.node.worldPosition.z
                      , a = md.width / 2
                      , o = md.height / 2;
                    return null != t ? (sr.set(t, r, n, s, a, o, .001),
                    t) : new sr(r,n,s,a,o,.001)
                }
                ,
                i._parentChanged = function() {
                    this.node.getComponent("cc.RenderRoot2D") || this.node.parent && e.insertChangeMap(this.node.parent)
                }
                ,
                i._markRenderDataDirty = function() {
                    var t = this.node._uiProps.uiComp;
                    t && (t.markForUpdateRenderData(),
                    t.renderData && (t.renderData.vertDirty = !0))
                }
                ,
                i.checkAndUpdateRect = function(t, e) {
                    if (this._rectDirty) {
                        this._rectWithScale.x = e.x * this.width,
                        this._rectWithScale.y = e.y * this.height,
                        this._rectWithScale.z = e.z;
                        var i = (.5 - this.anchorPoint.x) * this.width * e.x
                          , r = (.5 - this.anchorPoint.y) * this.height * e.y;
                        di.transformQuat(this._anchorCache, _d.set(i, r, 0), t)
                    }
                }
                ,
                i.setRectDirty = function(t) {
                    t & xi.RS && (this._rectDirty = !0)
                }
                ,
                e.insertChangeMap = function(t) {
                    var i = t.uuid;
                    e.priorityChangeNodeMap.has(i) || e.priorityChangeNodeMap.set(i, t)
                }
                ,
                e._sortChildrenSibling = function(t) {
                    var e = t.children;
                    e && e.sort((function(t, e) {
                        var i = t._uiProps.uiTransformComp
                          , r = e._uiProps.uiTransformComp
                          , n = (i ? i._priority : 0) - (r ? r._priority : 0);
                        return 0 === n ? t.getSiblingIndex() - e.getSiblingIndex() : n
                    }
                    ))
                }
                ,
                e._sortSiblings = function() {
                    e.priorityChangeNodeMap.forEach((function(t) {
                        e._sortChildrenSibling(t),
                        t._updateSiblingIndex(),
                        t.emit("childrenSiblingOrderChanged")
                    }
                    )),
                    e.priorityChangeNodeMap.clear()
                }
                ,
                e._cleanChangeMap = function() {
                    e.priorityChangeNodeMap.clear()
                }
                ,
                Je(e, [{
                    key: "contentSize",
                    get: function() {
                        return this._contentSize
                    },
                    set: function(t) {
                        this._contentSize.equals(t) || (this._contentSize.set(t),
                        this.node.emit(Wr.SIZE_CHANGED),
                        this._markRenderDataDirty())
                    }
                }, {
                    key: "width",
                    get: function() {
                        return this._contentSize.width
                    },
                    set: function(t) {
                        this._contentSize.width !== t && (this._contentSize.width = t,
                        this.node.emit(Wr.SIZE_CHANGED),
                        this._markRenderDataDirty())
                    }
                }, {
                    key: "height",
                    get: function() {
                        return this._contentSize.height
                    },
                    set: function(t) {
                        this.contentSize.height !== t && (this._contentSize.height = t,
                        this.node.emit(Wr.SIZE_CHANGED),
                        this._markRenderDataDirty())
                    }
                }, {
                    key: "anchorPoint",
                    get: function() {
                        return this._anchorPoint
                    },
                    set: function(t) {
                        this._anchorPoint.equals(t) || (this._anchorPoint.set(t),
                        this.node.emit(Wr.ANCHOR_CHANGED, this._anchorPoint),
                        this._markRenderDataDirty())
                    }
                }, {
                    key: "anchorX",
                    get: function() {
                        return this._anchorPoint.x
                    },
                    set: function(t) {
                        this._anchorPoint.x !== t && (this._anchorPoint.x = t,
                        this.node.emit(Wr.ANCHOR_CHANGED, this._anchorPoint),
                        this._markRenderDataDirty())
                    }
                }, {
                    key: "anchorY",
                    get: function() {
                        return this._anchorPoint.y
                    },
                    set: function(t) {
                        this._anchorPoint.y !== t && (this._anchorPoint.y = t,
                        this.node.emit(Wr.ANCHOR_CHANGED, this._anchorPoint),
                        this._markRenderDataDirty())
                    }
                }, {
                    key: "priority",
                    get: function() {
                        return this._priority
                    },
                    set: function(t) {
                        this._priority !== t && (this.node.getComponent("cc.RenderRoot2D") ? ii(6706) : (this._priority = t,
                        this.node.parent && e.insertChangeMap(this.node.parent)))
                    }
                }, {
                    key: "visibility",
                    get: function() {
                        var t = Ur.root.batcher2D.getFirstRenderCamera(this.node);
                        return t ? t.visibility : 0
                    }
                }, {
                    key: "cameraPriority",
                    get: function() {
                        var t = Ur.root.batcher2D.getFirstRenderCamera(this.node);
                        return t ? t.priority : 0
                    }
                }]),
                e
            }(Ki),
            Y_.EventType = Wr,
            Y_.priorityChangeNodeMap = new Map,
            Ei((W_ = K_).prototype, "contentSize", [G_, z_], Object.getOwnPropertyDescriptor(W_.prototype, "contentSize"), W_.prototype),
            Ei(W_.prototype, "anchorPoint", [U_, H_], Object.getOwnPropertyDescriptor(W_.prototype, "anchorPoint"), W_.prototype),
            X_ = Ei(W_.prototype, "_contentSize", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Pr(100,100)
                }
            }),
            j_ = Ei(W_.prototype, "_anchorPoint", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Br(.5,.5)
                }
            }),
            V_ = W_)) || V_) || V_) || V_) || V_) || V_) || V_));
            Ur.on(Hr.EVENT_AFTER_UPDATE, yd._sortSiblings),
            Ur.on(Hr.EVENT_BEFORE_SCENE_LAUNCH, yd._cleanChangeMap),
            function(t) {
                t[t.DISABLED = 0] = "DISABLED",
                t[t.CLEAR = 1] = "CLEAR",
                t[t.ENTER_LEVEL = 2] = "ENTER_LEVEL",
                t[t.ENABLED = 3] = "ENABLED",
                t[t.EXIT_LEVEL = 4] = "EXIT_LEVEL",
                t[t.CLEAR_INVERTED = 5] = "CLEAR_INVERTED",
                t[t.ENTER_LEVEL_INVERTED = 6] = "ENTER_LEVEL_INVERTED"
            }(Z_ || (Z_ = {}));
            var vd, Sd, Td, bd, Ed, Ad, Cd, Rd, Bd, xd, Dd, wd, Od, Pd, Md, Id, Ld, Fd, Nd, kd, Gd = t("StencilManager", function() {
                function t() {
                    this.stage = Z_.DISABLED,
                    this._maskStack = [],
                    this._stencilPattern = {
                        stencilTest: !0,
                        func: R.ALWAYS,
                        stencilMask: 65535,
                        writeMask: 65535,
                        failOp: B.KEEP,
                        zFailOp: B.KEEP,
                        passOp: B.KEEP,
                        ref: 1
                    },
                    this.stencilStateMap = new Map,
                    this.stencilStateMapWithDepth = new Map
                }
                var e = t.prototype;
                return e.pushMask = function(t) {
                    this._maskStack.push(t)
                }
                ,
                e.clear = function(t) {
                    t.stencilStage = t.inverted ? Z_.CLEAR_INVERTED : Z_.CLEAR
                }
                ,
                e.enterLevel = function(t) {
                    t.graphics.stencilStage = t.inverted ? Z_.ENTER_LEVEL_INVERTED : Z_.ENTER_LEVEL
                }
                ,
                e.enableMask = function() {
                    this.stage = Z_.ENABLED
                }
                ,
                e.exitMask = function() {
                    0 !== this._maskStack.length && (this._maskStack.pop(),
                    0 === this._maskStack.length ? this.stage = Z_.DISABLED : this.stage = Z_.ENABLED)
                }
                ,
                e.getWriteMask = function() {
                    return 1 << this._maskStack.length - 1
                }
                ,
                e.getExitWriteMask = function() {
                    return 1 << this._maskStack.length
                }
                ,
                e.getStencilRef = function() {
                    for (var t = 0, e = 0; e < this._maskStack.length; ++e)
                        t += 1 << e;
                    return t
                }
                ,
                e.reset = function() {
                    this._maskStack.length = 0,
                    this.stage = Z_.DISABLED
                }
                ,
                e.destroy = function() {
                    this.stencilStateMap.forEach((function(t) {
                        t.destroy()
                    }
                    )),
                    this.stencilStateMap.clear()
                }
                ,
                e.getStencilStage = function(t, e) {
                    var i = 0
                      , r = !1
                      , n = !1
                      , s = R.LESS
                      , a = this.stencilStateMap;
                    if (e && e.passes[0]) {
                        var o = e.passes[0].depthStencilState
                          , l = 0
                          , h = 0;
                        o.depthTest && (l = 1),
                        o.depthWrite && (h = 1),
                        i = l | h << 1 | o.depthFunc << 2 | t << 6 | this._maskStack.length << 9,
                        r = o.depthTest,
                        n = o.depthWrite,
                        s = o.depthFunc,
                        a = this.stencilStateMapWithDepth
                    } else
                        i = t << 16 | this._maskStack.length;
                    if (a && a.has(i))
                        return a.get(i);
                    this.setStateFromStage(t);
                    var u = new pe(r,n,s,this._stencilPattern.stencilTest,this._stencilPattern.func,this._stencilPattern.stencilMask,this._stencilPattern.writeMask,this._stencilPattern.failOp,this._stencilPattern.zFailOp,this._stencilPattern.passOp,this._stencilPattern.ref,this._stencilPattern.stencilTest,this._stencilPattern.func,this._stencilPattern.stencilMask,this._stencilPattern.writeMask,this._stencilPattern.failOp,this._stencilPattern.zFailOp,this._stencilPattern.passOp,this._stencilPattern.ref);
                    return a.set(i, u),
                    u
                }
                ,
                e.getStencilHash = function(t) {
                    return t << 8 | this._maskStack.length
                }
                ,
                e.setStateFromStage = function(t) {
                    var e = this._stencilPattern;
                    t === Z_.DISABLED ? (e.stencilTest = !1,
                    e.func = R.ALWAYS,
                    e.failOp = B.KEEP,
                    e.stencilMask = e.writeMask = 65535,
                    e.ref = 1) : (e.stencilTest = !0,
                    t === Z_.ENABLED ? (e.func = R.EQUAL,
                    e.failOp = B.KEEP,
                    e.stencilMask = e.ref = this.getStencilRef(),
                    e.writeMask = this.getWriteMask()) : t === Z_.CLEAR ? (e.func = R.NEVER,
                    e.failOp = B.ZERO,
                    e.writeMask = e.stencilMask = e.ref = this.getWriteMask()) : t === Z_.CLEAR_INVERTED || t === Z_.ENTER_LEVEL ? (e.func = R.NEVER,
                    e.failOp = B.REPLACE,
                    e.writeMask = e.stencilMask = e.ref = this.getWriteMask()) : t === Z_.ENTER_LEVEL_INVERTED && (e.func = R.NEVER,
                    e.failOp = B.ZERO,
                    e.writeMask = e.stencilMask = e.ref = this.getWriteMask()))
                }
                ,
                Je(t, [{
                    key: "pattern",
                    get: function() {
                        return this._stencilPattern
                    }
                }]),
                t
            }());
            Gd.sharedManager = null,
            Gd.sharedManager = new Gd,
            Yr(x),
            function(t) {
                t[t.ADD_COLOR = 0] = "ADD_COLOR",
                t[t.ADD_COLOR_AND_TEXTURE = 1] = "ADD_COLOR_AND_TEXTURE",
                t[t.GRAYSCALE = 2] = "GRAYSCALE",
                t[t.USE_ALPHA_SEPARATED = 3] = "USE_ALPHA_SEPARATED",
                t[t.USE_ALPHA_SEPARATED_AND_GRAY = 4] = "USE_ALPHA_SEPARATED_AND_GRAY"
            }(kd || (kd = t("InstanceMaterialType", {})));
            var zd, Ud, Hd, Vd, Wd, Xd, jd, Yd, Kd, Zd, qd, Jd, Qd, $d, tp, ep, ip, rp, np, sp, ap, op, lp, hp, up, cp, _p, dp, pp, fp, gp, mp, yp, vp, Sp, Tp, bp, Ep, Ap, Cp, Rp, Bp, xp, Dp, wp, Op, Pp, Mp, Ip, Lp, Fp, Np, kp, Gp, zp, Up, Hp, Vp, Wp, Xp, jp, Yp, Kp, Zp, qp, Jp, Qp, $p, tf, ef = function(e) {
                return t({
                    Renderable2D: e,
                    RenderComponent: e,
                    UIRenderable: e
                }),
                e
            }((vd = Ti("cc.Renderable2D"),
            Sd = Zr(yd),
            Td = ki(),
            bd = Ci(Tr),
            Ed = Ci(Tr),
            Ad = Xr(),
            Cd = Ni(),
            Rd = qr(),
            Bd = Xr(),
            xd = Ni(),
            vd(Dd = Sd(Dd = Vr(Dd = Ri((Nd = Fd = function(t) {
                qe(i, t);
                var e = i.prototype;
                function i() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_materials", Od, Gi(e)),
                    Oi(e, "_customMaterial", Pd, Gi(e)),
                    e.stencilStage = Z_.DISABLED,
                    Oi(e, "_srcBlendFactor", Md, Gi(e)),
                    Oi(e, "_dstBlendFactor", Id, Gi(e)),
                    Oi(e, "_color", Ld, Gi(e)),
                    e._assembler = null,
                    e._postAssembler = null,
                    e._renderData = null,
                    e._renderDataFlag = !0,
                    e._renderFlag = !0,
                    e._delegateSrc = null,
                    e._instanceMaterialType = -1,
                    e._blendState = new ge,
                    e._blendHash = 0,
                    e._colorDirty = !0,
                    e._lastParent = null,
                    e
                }
                return e.updateMaterial = function() {
                    if (this._customMaterial)
                        return this.setMaterial(this._customMaterial, 0),
                        this._renderData && (this._renderData.material = this._customMaterial,
                        this.markForUpdateRenderData(),
                        this._renderData.passDirty = !0),
                        void (this._blendHash = -1);
                    var t = this._updateBuiltinMaterial();
                    this.setMaterial(t, 0),
                    this._renderData && (this._renderData.material = t,
                    this.markForUpdateRenderData()),
                    this._updateBlendFunc()
                }
                ,
                e.updateBlendHash = function() {
                    var t = this._blendState.targets[0].blendDst << 4;
                    this._blendHash = t | this._blendState.targets[0].blendSrc
                }
                ,
                e.__preload = function() {
                    this.node._uiProps.uiComp = this,
                    this._flushAssembler && this._flushAssembler(),
                    Kr.markOpacityTree(this.node)
                }
                ,
                e.onEnable = function() {
                    this.node.on(Wr.ANCHOR_CHANGED, this._nodeStateChange, this),
                    this.node.on(Wr.SIZE_CHANGED, this._nodeStateChange, this),
                    this.updateMaterial(),
                    this._renderFlag = this._canRender()
                }
                ,
                e.onRestore = function() {
                    this.updateMaterial(),
                    this._renderFlag = this._canRender()
                }
                ,
                e.onDisable = function() {
                    this.node.off(Wr.ANCHOR_CHANGED, this._nodeStateChange, this),
                    this.node.off(Wr.SIZE_CHANGED, this._nodeStateChange, this),
                    this._renderFlag = !1
                }
                ,
                e.onDestroy = function() {
                    if (this.node._uiProps.uiComp === this && (this.node._uiProps.uiComp = null),
                    this.destroyRenderData(),
                    this._materialInstances)
                        for (var t = 0; t < this._materialInstances.length; t++)
                            this._materialInstances[t] && this._materialInstances[t].destroy();
                    this._renderData = null,
                    this._blendState && this._blendState.destroy()
                }
                ,
                e.markForUpdateRenderData = function(t) {
                    if (void 0 === t && (t = !0),
                    this._renderFlag = this._canRender(),
                    t && this._renderFlag) {
                        var e = this._renderData;
                        e && (e.vertDirty = !0),
                        this._renderDataFlag = t
                    } else
                        t || (this._renderDataFlag = t)
                }
                ,
                e.requestRenderData = function() {
                    var t = sd.add();
                    return this._renderData = t,
                    t
                }
                ,
                e.destroyRenderData = function() {
                    this._renderData && (sd.remove(this._renderData),
                    this._renderData = null)
                }
                ,
                e.updateAssembler = function(t) {
                    this._updateColor(),
                    this._renderFlag && (this._checkAndUpdateRenderData(),
                    this._render(t))
                }
                ,
                e.postUpdateAssembler = function(t) {
                    this._renderFlag && this._postRender(t)
                }
                ,
                e._render = function() {}
                ,
                e._postRender = function() {}
                ,
                e._checkAndUpdateRenderData = function() {
                    this._renderDataFlag && (this._assembler.updateRenderData(this),
                    this._renderDataFlag = !1)
                }
                ,
                e._canRender = function() {
                    return this.isValid && null !== this.getMaterial(0) && this.enabled && (this._delegateSrc ? this._delegateSrc.activeInHierarchy : this.enabledInHierarchy) && this.node._uiProps.opacity > 0
                }
                ,
                e._postCanRender = function() {}
                ,
                e._updateColor = function() {
                    this._colorDirty && this._assembler && this._assembler.updateColor && (this._assembler.updateColor(this),
                    this._renderFlag = this._canRender(),
                    this._colorDirty = !1)
                }
                ,
                e.markColorDirty = function() {
                    this._colorDirty = !0
                }
                ,
                e._updateBlendFunc = function() {
                    var t = this._blendState.targets[0];
                    t || (t = new fe,
                    this._blendState.setTarget(0, t)),
                    t.blendDst === this._dstBlendFactor && t.blendSrc === this._srcBlendFactor || (t.blend = !0,
                    t.blendDstAlpha = x.ONE_MINUS_SRC_ALPHA,
                    t.blendDst = this._dstBlendFactor,
                    t.blendSrc = this._srcBlendFactor,
                    this.renderData && (this.renderData.passDirty = !0)),
                    this.updateBlendHash()
                }
                ,
                e.getBlendState = function() {
                    return this._blendState
                }
                ,
                e._nodeStateChange = function() {
                    this._renderData && this.markForUpdateRenderData();
                    for (var t = 0; t < this.node.children.length; ++t) {
                        var e = this.node.children[t].getComponent(i);
                        e && e.markForUpdateRenderData()
                    }
                }
                ,
                e._onMaterialModified = function(e, i) {
                    this._renderData && (this.markForUpdateRenderData(),
                    this._renderData.passDirty = !0),
                    t.prototype._onMaterialModified.call(this, e, i)
                }
                ,
                e._updateBuiltinMaterial = function() {
                    var t;
                    switch (this._instanceMaterialType) {
                    case kd.ADD_COLOR:
                        t = Di.get("ui-base-material");
                        break;
                    case kd.GRAYSCALE:
                        t = Di.get("ui-sprite-gray-material");
                        break;
                    case kd.USE_ALPHA_SEPARATED:
                        t = Di.get("ui-sprite-alpha-sep-material");
                        break;
                    case kd.USE_ALPHA_SEPARATED_AND_GRAY:
                        t = Di.get("ui-sprite-gray-alpha-sep-material");
                        break;
                    default:
                        t = Di.get("ui-sprite-material")
                    }
                    return t
                }
                ,
                e.setNodeDirty = function() {
                    this.renderData && (this.renderData.nodeDirty = !0)
                }
                ,
                e.setTextureDirty = function() {
                    this.renderData && (this.renderData.textureDirty = !0)
                }
                ,
                Je(i, [{
                    key: "sharedMaterials",
                    get: function() {
                        return this._materials
                    },
                    set: function(t) {
                        for (var e = 0; e < t.length; e++)
                            t[e] !== this._materials[e] && this.setMaterial(t[e], e);
                        if (t.length < this._materials.length) {
                            for (var i = t.length; i < this._materials.length; i++)
                                this.setMaterial(null, i);
                            this._materials.splice(t.length)
                        }
                    }
                }, {
                    key: "customMaterial",
                    get: function() {
                        return this._customMaterial
                    },
                    set: function(t) {
                        this._customMaterial = t,
                        this.updateMaterial()
                    }
                }, {
                    key: "srcBlendFactor",
                    get: function() {
                        return this._customMaterial && ii(12001),
                        this._srcBlendFactor
                    },
                    set: function(t) {
                        this._customMaterial ? ii(12001) : this._srcBlendFactor !== t && (this._srcBlendFactor = t,
                        this._updateBlendFunc())
                    }
                }, {
                    key: "dstBlendFactor",
                    get: function() {
                        return this._customMaterial && ii(12001),
                        this._dstBlendFactor
                    },
                    set: function(t) {
                        this._customMaterial ? ii(12001) : this._dstBlendFactor !== t && (this._dstBlendFactor = t,
                        this._updateBlendFunc())
                    }
                }, {
                    key: "color",
                    get: function() {
                        return this._color
                    },
                    set: function(t) {
                        if (!this._color.equals(t)) {
                            var e = this._color.a;
                            this._color.set(t),
                            e !== this.color.a && Kr.markOpacityTree(this.node),
                            this._colorDirty = !0
                        }
                    }
                }, {
                    key: "renderData",
                    get: function() {
                        return this._renderData
                    }
                }, {
                    key: "delegateSrc",
                    set: function(t) {
                        this._delegateSrc = t
                    }
                }, {
                    key: "blendHash",
                    get: function() {
                        return this._blendHash
                    }
                }]),
                i
            }(zi),
            Fd.BlendState = x,
            Fd.Assembler = null,
            Fd.PostAssembler = null,
            Od = Ei((wd = Nd).prototype, "_materials", [Rr], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            Ei(wd.prototype, "sharedMaterials", [Rr, Td], Object.getOwnPropertyDescriptor(wd.prototype, "sharedMaterials"), wd.prototype),
            Pd = Ei(wd.prototype, "_customMaterial", [bd], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ei(wd.prototype, "customMaterial", [Ed, Ad, Cd, Rd], Object.getOwnPropertyDescriptor(wd.prototype, "customMaterial"), wd.prototype),
            Ei(wd.prototype, "color", [Bd, xd], Object.getOwnPropertyDescriptor(wd.prototype, "color"), wd.prototype),
            Md = Ei(wd.prototype, "_srcBlendFactor", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return x.SRC_ALPHA
                }
            }),
            Id = Ei(wd.prototype, "_dstBlendFactor", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return x.ONE_MINUS_SRC_ALPHA
                }
            }),
            Ld = Ei(wd.prototype, "_color", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Zi.WHITE.clone()
                }
            }),
            Dd = wd)) || Dd) || Dd) || Dd) || Dd));
            ci.internal.Renderable2D = ef,
            function(t) {
                t[t.LEFT = 0] = "LEFT",
                t[t.CENTER = 1] = "CENTER",
                t[t.RIGHT = 2] = "RIGHT"
            }(Jp || (Jp = t("HorizontalTextAlignment", {}))),
            Yr(Jp),
            function(t) {
                t[t.TOP = 0] = "TOP",
                t[t.CENTER = 1] = "CENTER",
                t[t.BOTTOM = 2] = "BOTTOM"
            }(Qp || (Qp = t("VerticalTextAlignment", {}))),
            Yr(Qp),
            function(t) {
                t[t.NONE = 0] = "NONE",
                t[t.CLAMP = 1] = "CLAMP",
                t[t.SHRINK = 2] = "SHRINK",
                t[t.RESIZE_HEIGHT = 3] = "RESIZE_HEIGHT"
            }($p || ($p = t("Overflow", {}))),
            Yr($p),
            function(t) {
                t[t.NONE = 0] = "NONE",
                t[t.BITMAP = 1] = "BITMAP",
                t[t.CHAR = 2] = "CHAR"
            }(tf || (tf = t("CacheMode", {}))),
            Yr(tf);
            var rf, nf, sf, af = function(e) {
                return t({
                    Label: e,
                    LabelComponent: e
                }),
                e
            }((zd = Ti("cc.Label"),
            Ud = Ii(),
            Hd = Li(110),
            Vd = Fi(),
            Wd = Xr(),
            Xd = Ni(),
            jd = Ci(Jp),
            Yd = Xr(),
            Kd = Ni(),
            Zd = Ci(Qp),
            qd = Xr(),
            Jd = Ni(),
            Qd = Xr(),
            $d = Ni(),
            tp = Xr(),
            ep = ki(),
            ip = Ni(),
            rp = Xr(),
            np = Ni(),
            sp = ki(),
            ap = Xr(),
            op = Ni(),
            lp = Ci($p),
            hp = Xr(),
            up = Ni(),
            cp = Xr(),
            _p = Ni(),
            dp = Ci(n_),
            pp = Xr(),
            fp = ki(),
            gp = Ni(),
            mp = Xr(),
            yp = Ni(),
            vp = Ci(tf),
            Sp = Xr(),
            Tp = Ni(),
            bp = Xr(),
            Ep = Ni(),
            Ap = Xr(),
            Cp = Ni(),
            Rp = Xr(),
            Bp = Ni(),
            xp = ki(),
            Dp = Xr(),
            wp = Ni(),
            zd(Op = Ud(Op = Hd(Op = Vd((qp = Zp = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_string", Mp, Gi(e)),
                    Oi(e, "_horizontalAlign", Ip, Gi(e)),
                    Oi(e, "_verticalAlign", Lp, Gi(e)),
                    Oi(e, "_actualFontSize", Fp, Gi(e)),
                    Oi(e, "_fontSize", Np, Gi(e)),
                    Oi(e, "_fontFamily", kp, Gi(e)),
                    Oi(e, "_lineHeight", Gp, Gi(e)),
                    Oi(e, "_overflow", zp, Gi(e)),
                    Oi(e, "_enableWrapText", Up, Gi(e)),
                    Oi(e, "_font", Hp, Gi(e)),
                    Oi(e, "_isSystemFontUsed", Vp, Gi(e)),
                    e._spacingX = 0,
                    Oi(e, "_isItalic", Wp, Gi(e)),
                    Oi(e, "_isBold", Xp, Gi(e)),
                    Oi(e, "_isUnderline", jp, Gi(e)),
                    Oi(e, "_underlineHeight", Yp, Gi(e)),
                    Oi(e, "_cacheMode", Kp, Gi(e)),
                    e._N$file = null,
                    e._texture = null,
                    e._ttfSpriteFrame = null,
                    e._userDefinedFont = null,
                    e._assemblerData = null,
                    e._fontAtlas = null,
                    e._letterTexture = null,
                    e._ttfSpriteFrame = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onEnable = function() {
                    t.prototype.onEnable.call(this),
                    this._font || this._isSystemFontUsed || (this.useSystemFont = !0),
                    this._isSystemFontUsed && !this._fontFamily && (this.fontFamily = "Arial"),
                    this._applyFontTexture()
                }
                ,
                i.onDisable = function() {
                    t.prototype.onDisable.call(this)
                }
                ,
                i.onDestroy = function() {
                    if (this._assembler && this._assembler.resetAssemblerData && this._assembler.resetAssemblerData(this._assemblerData),
                    this._assemblerData = null,
                    this._ttfSpriteFrame) {
                        this._ttfSpriteFrame._resetDynamicAtlasFrame();
                        var e = this._ttfSpriteFrame.texture;
                        if (this._ttfSpriteFrame.destroy(),
                        e) {
                            var i = e;
                            i.image && i.image.destroy(),
                            e.destroy()
                        }
                        this._ttfSpriteFrame = null
                    }
                    this._letterTexture = null,
                    t.prototype.onDestroy.call(this)
                }
                ,
                i.updateRenderData = function(t) {
                    void 0 === t && (t = !1),
                    this.markForUpdateRenderData(),
                    t && (this._flushAssembler(),
                    this.renderData && (this.renderData.vertDirty = !0),
                    this._applyFontTexture(),
                    this._assembler && this._assembler.updateRenderData(this))
                }
                ,
                i._render = function(t) {
                    t.commitComp(this, this._texture, this._assembler, null)
                }
                ,
                i._updateColor = function() {
                    this._colorDirty && (this.updateRenderData(!1),
                    this._colorDirty = !1)
                }
                ,
                i._canRender = function() {
                    if (!t.prototype._canRender.call(this) || !this._string)
                        return !1;
                    var e = this._font;
                    if (e && e instanceof y_) {
                        var i = e.spriteFrame;
                        if (!i || !i.texture)
                            return !1
                    }
                    return !0
                }
                ,
                i._flushAssembler = function() {
                    var t = e.Assembler.getAssembler(this);
                    this._assembler !== t && (this.destroyRenderData(),
                    this._assembler = t),
                    this._renderData || this._assembler && this._assembler.createData && (this._renderData = this._assembler.createData(this),
                    this._renderData.material = this.material)
                }
                ,
                i._applyFontTexture = function() {
                    this.markForUpdateRenderData();
                    var t = this._font;
                    if (t instanceof y_) {
                        var e = t.spriteFrame;
                        e && e.texture && (this._texture = e,
                        this.renderData && (this.renderData.textureDirty = !0),
                        this.changeMaterialForDefine(),
                        this._assembler && this._assembler.updateRenderData(this))
                    } else {
                        if (this.cacheMode === tf.CHAR)
                            this._letterTexture = this._assembler.getAssemblerData(),
                            this._texture = this._letterTexture;
                        else if (!this._ttfSpriteFrame) {
                            this._ttfSpriteFrame = new Jc,
                            this._assemblerData = this._assembler.getAssemblerData();
                            var i = new Ir(this._assemblerData.canvas)
                              , r = new Er;
                            r.image = i,
                            this._ttfSpriteFrame.texture = r
                        }
                        this.cacheMode !== tf.CHAR && (this._texture = this._ttfSpriteFrame),
                        this.changeMaterialForDefine()
                    }
                }
                ,
                i.changeMaterialForDefine = function() {
                    if (this._texture) {
                        var t = !1;
                        if (this.cacheMode !== tf.CHAR) {
                            var e = this._texture.texture;
                            if (e instanceof Jr) {
                                var i = e.getPixelFormat();
                                t = i === Cr.RGBA_ETC1 || i === Cr.RGB_A_PVRTC_4BPPV1 || i === Cr.RGB_A_PVRTC_2BPPV1
                            }
                        }
                        this._instanceMaterialType = t ? kd.USE_ALPHA_SEPARATED : kd.ADD_COLOR_AND_TEXTURE,
                        this.updateMaterial()
                    }
                }
                ,
                Je(e, [{
                    key: "string",
                    get: function() {
                        return this._string
                    },
                    set: function(t) {
                        t ? t += "" : t = "",
                        this._string !== t && (this._string = t,
                        this.updateRenderData())
                    }
                }, {
                    key: "horizontalAlign",
                    get: function() {
                        return this._horizontalAlign
                    },
                    set: function(t) {
                        this._horizontalAlign !== t && (this._horizontalAlign = t,
                        this.updateRenderData())
                    }
                }, {
                    key: "verticalAlign",
                    get: function() {
                        return this._verticalAlign
                    },
                    set: function(t) {
                        this._verticalAlign !== t && (this._verticalAlign = t,
                        this.updateRenderData())
                    }
                }, {
                    key: "actualFontSize",
                    get: function() {
                        return this._actualFontSize
                    },
                    set: function(t) {
                        this._actualFontSize = t
                    }
                }, {
                    key: "fontSize",
                    get: function() {
                        return this._fontSize
                    },
                    set: function(t) {
                        this._fontSize !== t && (this._fontSize = t,
                        this.updateRenderData())
                    }
                }, {
                    key: "fontFamily",
                    get: function() {
                        return this._fontFamily
                    },
                    set: function(t) {
                        this._fontFamily !== t && (this._fontFamily = t,
                        this.updateRenderData())
                    }
                }, {
                    key: "lineHeight",
                    get: function() {
                        return this._lineHeight
                    },
                    set: function(t) {
                        this._lineHeight !== t && (this._lineHeight = t,
                        this.updateRenderData())
                    }
                }, {
                    key: "spacingX",
                    get: function() {
                        return this._spacingX
                    },
                    set: function(t) {
                        this._spacingX !== t && (this._spacingX = t,
                        this.updateRenderData())
                    }
                }, {
                    key: "overflow",
                    get: function() {
                        return this._overflow
                    },
                    set: function(t) {
                        this._overflow !== t && (this._overflow = t,
                        this.updateRenderData())
                    }
                }, {
                    key: "enableWrapText",
                    get: function() {
                        return this._enableWrapText
                    },
                    set: function(t) {
                        this._enableWrapText !== t && (this._enableWrapText = t,
                        this.updateRenderData())
                    }
                }, {
                    key: "font",
                    get: function() {
                        return this._font
                    },
                    set: function(t) {
                        this._font !== t && (this._isSystemFontUsed = !t,
                        this._font = t,
                        this._renderData && (this.destroyRenderData(),
                        this._renderData = null),
                        this._fontAtlas = null,
                        this.updateRenderData(!0))
                    }
                }, {
                    key: "useSystemFont",
                    get: function() {
                        return this._isSystemFontUsed
                    },
                    set: function(t) {
                        this._isSystemFontUsed !== t && (this.destroyRenderData(),
                        this._renderData = null,
                        this._isSystemFontUsed = !!t,
                        t && (this.font = null),
                        this._flushAssembler(),
                        this.updateRenderData())
                    }
                }, {
                    key: "cacheMode",
                    get: function() {
                        return this._cacheMode
                    },
                    set: function(t) {
                        this._cacheMode !== t && (this._cacheMode !== tf.BITMAP || this._font instanceof y_ || !this._ttfSpriteFrame || this._ttfSpriteFrame._resetDynamicAtlasFrame(),
                        this._cacheMode === tf.CHAR && (this._ttfSpriteFrame = null),
                        this._cacheMode = t,
                        this.updateRenderData(!0))
                    }
                }, {
                    key: "spriteFrame",
                    get: function() {
                        return this._texture
                    }
                }, {
                    key: "ttfSpriteFrame",
                    get: function() {
                        return this._ttfSpriteFrame
                    }
                }, {
                    key: "isBold",
                    get: function() {
                        return this._isBold
                    },
                    set: function(t) {
                        this._isBold !== t && (this._isBold = t,
                        this.updateRenderData())
                    }
                }, {
                    key: "isItalic",
                    get: function() {
                        return this._isItalic
                    },
                    set: function(t) {
                        this._isItalic !== t && (this._isItalic = t,
                        this.updateRenderData())
                    }
                }, {
                    key: "isUnderline",
                    get: function() {
                        return this._isUnderline
                    },
                    set: function(t) {
                        this._isUnderline !== t && (this._isUnderline = t,
                        this.updateRenderData())
                    }
                }, {
                    key: "underlineHeight",
                    get: function() {
                        return this._underlineHeight
                    },
                    set: function(t) {
                        this._underlineHeight !== t && (this._underlineHeight = t,
                        this.updateRenderData())
                    }
                }, {
                    key: "assemblerData",
                    get: function() {
                        return this._assemblerData
                    }
                }, {
                    key: "fontAtlas",
                    get: function() {
                        return this._fontAtlas
                    },
                    set: function(t) {
                        this._fontAtlas = t
                    }
                }, {
                    key: "_bmFontOriginalSize",
                    get: function() {
                        return this._font instanceof y_ ? this._font.fontSize : -1
                    }
                }]),
                e
            }(ef),
            Zp.HorizontalAlign = Jp,
            Zp.VerticalAlign = Qp,
            Zp.Overflow = $p,
            Zp.CacheMode = tf,
            Zp._canvasPool = q_.getInstance(),
            Ei((Pp = qp).prototype, "string", [Wd, Xd, Qr], Object.getOwnPropertyDescriptor(Pp.prototype, "string"), Pp.prototype),
            Ei(Pp.prototype, "horizontalAlign", [jd, Yd, Kd], Object.getOwnPropertyDescriptor(Pp.prototype, "horizontalAlign"), Pp.prototype),
            Ei(Pp.prototype, "verticalAlign", [Zd, qd, Jd], Object.getOwnPropertyDescriptor(Pp.prototype, "verticalAlign"), Pp.prototype),
            Ei(Pp.prototype, "fontSize", [Qd, $d], Object.getOwnPropertyDescriptor(Pp.prototype, "fontSize"), Pp.prototype),
            Ei(Pp.prototype, "fontFamily", [tp, ep, ip], Object.getOwnPropertyDescriptor(Pp.prototype, "fontFamily"), Pp.prototype),
            Ei(Pp.prototype, "lineHeight", [rp, np], Object.getOwnPropertyDescriptor(Pp.prototype, "lineHeight"), Pp.prototype),
            Ei(Pp.prototype, "spacingX", [sp, ap, op], Object.getOwnPropertyDescriptor(Pp.prototype, "spacingX"), Pp.prototype),
            Ei(Pp.prototype, "overflow", [lp, hp, up], Object.getOwnPropertyDescriptor(Pp.prototype, "overflow"), Pp.prototype),
            Ei(Pp.prototype, "enableWrapText", [cp, _p], Object.getOwnPropertyDescriptor(Pp.prototype, "enableWrapText"), Pp.prototype),
            Ei(Pp.prototype, "font", [dp, pp, fp, gp], Object.getOwnPropertyDescriptor(Pp.prototype, "font"), Pp.prototype),
            Ei(Pp.prototype, "useSystemFont", [mp, yp], Object.getOwnPropertyDescriptor(Pp.prototype, "useSystemFont"), Pp.prototype),
            Ei(Pp.prototype, "cacheMode", [vp, Sp, Tp], Object.getOwnPropertyDescriptor(Pp.prototype, "cacheMode"), Pp.prototype),
            Ei(Pp.prototype, "isBold", [bp, Ep], Object.getOwnPropertyDescriptor(Pp.prototype, "isBold"), Pp.prototype),
            Ei(Pp.prototype, "isItalic", [Ap, Cp], Object.getOwnPropertyDescriptor(Pp.prototype, "isItalic"), Pp.prototype),
            Ei(Pp.prototype, "isUnderline", [Rp, Bp], Object.getOwnPropertyDescriptor(Pp.prototype, "isUnderline"), Pp.prototype),
            Ei(Pp.prototype, "underlineHeight", [xp, Ai, Dp, wp], Object.getOwnPropertyDescriptor(Pp.prototype, "underlineHeight"), Pp.prototype),
            Mp = Ei(Pp.prototype, "_string", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return "label"
                }
            }),
            Ip = Ei(Pp.prototype, "_horizontalAlign", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Jp.CENTER
                }
            }),
            Lp = Ei(Pp.prototype, "_verticalAlign", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Qp.CENTER
                }
            }),
            Fp = Ei(Pp.prototype, "_actualFontSize", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Np = Ei(Pp.prototype, "_fontSize", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 40
                }
            }),
            kp = Ei(Pp.prototype, "_fontFamily", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return "Arial"
                }
            }),
            Gp = Ei(Pp.prototype, "_lineHeight", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 40
                }
            }),
            zp = Ei(Pp.prototype, "_overflow", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return $p.NONE
                }
            }),
            Up = Ei(Pp.prototype, "_enableWrapText", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            Hp = Ei(Pp.prototype, "_font", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Vp = Ei(Pp.prototype, "_isSystemFontUsed", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            Wp = Ei(Pp.prototype, "_isItalic", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Xp = Ei(Pp.prototype, "_isBold", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            jp = Ei(Pp.prototype, "_isUnderline", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Yp = Ei(Pp.prototype, "_underlineHeight", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 2
                }
            }),
            Kp = Ei(Pp.prototype, "_cacheMode", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return tf.NONE
                }
            }),
            Op = Pp)) || Op) || Op) || Op) || Op));
            !function(t) {
                t[t.BUTT = 0] = "BUTT",
                t[t.ROUND = 1] = "ROUND",
                t[t.SQUARE = 2] = "SQUARE"
            }(rf || (rf = {})),
            Yr(rf),
            function(t) {
                t[t.BEVEL = 0] = "BEVEL",
                t[t.ROUND = 1] = "ROUND",
                t[t.MITER = 2] = "MITER"
            }(nf || (nf = {})),
            Yr(nf),
            function(t) {
                t[t.PT_CORNER = 1] = "PT_CORNER",
                t[t.PT_LEFT = 2] = "PT_LEFT",
                t[t.PT_BEVEL = 4] = "PT_BEVEL",
                t[t.PT_INNERBEVEL = 8] = "PT_INNERBEVEL"
            }(sf || (sf = {})),
            Yr(sf);
            var of = Math.PI
              , lf = Math.min
              , hf = Math.max
              , uf = Math.cos
              , cf = Math.sin
              , _f = Math.abs
              , df = Math.sign
              , pf = .5522847493;
            function ff(t, e, i, r, n) {
                t.moveTo(e - r, i),
                t.bezierCurveTo(e - r, i + n * pf, e - r * pf, i + n, e, i + n),
                t.bezierCurveTo(e + r * pf, i + n, e + r, i + n * pf, e + r, i),
                t.bezierCurveTo(e + r, i - n * pf, e + r * pf, i - n, e, i - n),
                t.bezierCurveTo(e - r * pf, i - n, e - r, i - n * pf, e - r, i),
                t.close()
            }
            function gf(t, e, i, r, n, s, a, o, l, h, u) {
                var c, _, d, p, f, g, m, y, v, S, T, b, E, A, C, R;
                h > 10 || (f = .5 * (s + o),
                g = .5 * (a + l),
                m = .5 * ((c = .5 * (e + r)) + (d = .5 * (r + s))),
                y = .5 * ((_ = .5 * (i + n)) + (p = .5 * (n + a))),
                ((C = _f((r - o) * (A = l - i) - (n - l) * (E = o - e))) + (R = _f((s - o) * A - (a - l) * E))) * (C + R) < t.tessTol * (E * E + A * A) ? t.addPoint(o, l, 0 === u ? u | sf.PT_BEVEL : u) : (gf(t, e, i, c, _, m, y, T = .5 * (m + (v = .5 * (d + f))), b = .5 * (y + (S = .5 * (p + g))), h + 1, 0),
                gf(t, T, b, v, S, f, g, o, l, h + 1, u)))
            }
            var mf, yf, vf, Sf, Tf, bf, Ef, Af, Cf, Rf, Bf, xf, Df, wf, Of, Pf, Mf, If, Lf, Ff, Nf, kf, Gf, zf = function(t) {
                function e(e, i) {
                    var r;
                    return (r = t.call(this, e, i) || this).dx = 0,
                    r.dy = 0,
                    r.dmx = 0,
                    r.dmy = 0,
                    r.flags = 0,
                    r.len = 0,
                    r.reset(),
                    r
                }
                return qe(e, t),
                e.prototype.reset = function() {
                    this.dx = 0,
                    this.dy = 0,
                    this.dmx = 0,
                    this.dmy = 0,
                    this.flags = 0,
                    this.len = 0
                }
                ,
                e
            }(Br), Uf = function() {
                function t() {
                    this.closed = !1,
                    this.bevel = 0,
                    this.complex = !0,
                    this.points = [],
                    this.reset()
                }
                return t.prototype.reset = function() {
                    this.closed = !1,
                    this.bevel = 0,
                    this.complex = !0,
                    this.points ? this.points.length = 0 : this.points = []
                }
                ,
                t
            }(), Hf = function() {
                function t() {
                    this.dataOffset = 0,
                    this.updatePathOffset = !1,
                    this.pathLength = 0,
                    this.pathOffset = 0,
                    this.paths = [],
                    this.tessTol = .25,
                    this.distTol = .01,
                    this.fillColor = Zi.WHITE.clone(),
                    this.lineCap = rf.BUTT,
                    this.strokeColor = Zi.BLACK.clone(),
                    this.lineJoin = nf.MITER,
                    this.lineWidth = 0,
                    this.pointsOffset = 0,
                    this._commandX = 0,
                    this._commandY = 0,
                    this._points = [],
                    this._renderDataList = [],
                    this._curPath = null
                }
                var e = t.prototype;
                return e.moveTo = function(t, e) {
                    this.updatePathOffset && (this.pathOffset = this.pathLength,
                    this.updatePathOffset = !1),
                    this._addPath(),
                    this.addPoint(t, e, sf.PT_CORNER),
                    this._commandX = t,
                    this._commandY = e
                }
                ,
                e.lineTo = function(t, e) {
                    this.addPoint(t, e, sf.PT_CORNER),
                    this._commandX = t,
                    this._commandY = e
                }
                ,
                e.bezierCurveTo = function(t, e, i, r, n, s) {
                    var a = this._curPath
                      , o = a.points[a.points.length - 1];
                    o && (o.x !== t || o.y !== e || i !== n || r !== s ? (gf(this, o.x, o.y, t, e, i, r, n, s, 0, sf.PT_CORNER),
                    this._commandX = n,
                    this._commandY = s) : this.lineTo(n, s))
                }
                ,
                e.quadraticCurveTo = function(t, e, i, r) {
                    var n = this._commandX
                      , s = this._commandY;
                    this.bezierCurveTo(n + 2 / 3 * (t - n), s + 2 / 3 * (e - s), i + 2 / 3 * (t - i), r + 2 / 3 * (e - r), i, r)
                }
                ,
                e.arc = function(t, e, i, r, n, s) {
                    !function(t, e, i, r, n, s, a) {
                        var o, l, h = 0, u = 0, c = 0, _ = 0, d = 0, p = 0, f = 0, g = 0, m = 0, y = 0, v = 0, S = 0, T = 0, b = 0;
                        if (u = s - n,
                        a = a || !1)
                            if (_f(u) >= 2 * of)
                                u = 2 * of;
                            else
                                for (; u < 0; )
                                    u += 2 * of;
                        else if (_f(u) >= 2 * of)
                            u = 2 * -of;
                        else
                            for (; u > 0; )
                                u -= 2 * of;
                        for (l = 0 | hf(1, lf(_f(u) / (.5 * of) + .5, 5)),
                        c = _f(4 / 3 * (1 - uf(o = u / l / 2)) / cf(o)),
                        a || (c = -c),
                        b = 0; b <= l; b++)
                            p = e + (_ = uf(h = n + u * (b / l))) * r,
                            f = i + (d = cf(h)) * r,
                            g = -d * r * c,
                            m = _ * r * c,
                            0 === b ? t.moveTo(p, f) : t.bezierCurveTo(y + S, v + T, p - g, f - m, p, f),
                            y = p,
                            v = f,
                            S = g,
                            T = m
                    }(this, t, e, i, r, n, s)
                }
                ,
                e.ellipse = function(t, e, i, r) {
                    ff(this, t, e, i, r),
                    this._curPath.complex = !1
                }
                ,
                e.circle = function(t, e, i) {
                    ff(this, t, e, i, i),
                    this._curPath.complex = !1
                }
                ,
                e.rect = function(t, e, i, r) {
                    this.moveTo(t, e),
                    this.lineTo(t + i, e),
                    this.lineTo(t + i, e + r),
                    this.lineTo(t, e + r),
                    this.close(),
                    this._curPath.complex = !1
                }
                ,
                e.roundRect = function(t, e, i, r, n) {
                    !function(t, e, i, r, n, s) {
                        if (s < .1)
                            t.rect(e, i, r, n);
                        else {
                            var a = lf(s, .5 * _f(r)) * df(r)
                              , o = lf(s, .5 * _f(n)) * df(n);
                            t.moveTo(e, i + o),
                            t.lineTo(e, i + n - o),
                            t.bezierCurveTo(e, i + n - o * (1 - pf), e + a * (1 - pf), i + n, e + a, i + n),
                            t.lineTo(e + r - a, i + n),
                            t.bezierCurveTo(e + r - a * (1 - pf), i + n, e + r, i + n - o * (1 - pf), e + r, i + n - o),
                            t.lineTo(e + r, i + o),
                            t.bezierCurveTo(e + r, i + o * (1 - pf), e + r - a * (1 - pf), i, e + r - a, i),
                            t.lineTo(e + a, i),
                            t.bezierCurveTo(e + a * (1 - pf), i, e, i + o * (1 - pf), e, i + o),
                            t.close()
                        }
                    }(this, t, e, i, r, n),
                    this._curPath.complex = !1
                }
                ,
                e.clear = function() {
                    this.pathLength = 0,
                    this.pathOffset = 0,
                    this.pointsOffset = 0,
                    this.dataOffset = 0,
                    this._curPath = null,
                    this.paths.length = 0,
                    this._points.length = 0;
                    for (var t = this._renderDataList, e = 0, i = t.length; e < i; e++) {
                        var r = t[e];
                        r && ad.remove(r)
                    }
                    this._renderDataList.length = 0
                }
                ,
                e.close = function() {
                    this._curPath.closed = !0
                }
                ,
                e.requestRenderData = function() {
                    var t = ad.add();
                    return this._renderDataList.push(t),
                    t
                }
                ,
                e.getRenderDataList = function() {
                    return 0 === this._renderDataList.length && this.requestRenderData(),
                    this._renderDataList
                }
                ,
                e.addPoint = function(t, e, i) {
                    var r = this._curPath;
                    if (r) {
                        var n = this._points
                          , s = r.points
                          , a = n[this.pointsOffset++];
                        a ? (a.x = t,
                        a.y = e) : (a = new zf(t,e),
                        n.push(a)),
                        a.flags = i,
                        s.push(a)
                    }
                }
                ,
                e._addPath = function() {
                    var t = this.pathLength
                      , e = this.paths[t];
                    return e ? e.reset() : (e = new Uf,
                    this.paths.push(e)),
                    this.pathLength++,
                    this._curPath = e,
                    e
                }
                ,
                t
            }(), Vf = [new Rt(qt.ATTR_POSITION,_.RGB32F)], Wf = [new Rt(qt.ATTR_POSITION,_.RGB32F), new Rt(qt.ATTR_COLOR,_.RGBA32F)], Xf = [new Rt(qt.ATTR_POSITION,_.RGB32F), new Rt(qt.ATTR_TEX_COORD,_.RG32F), new Rt(qt.ATTR_COLOR,_.RGBA32F)], jf = [new Rt(qt.ATTR_POSITION,_.RGB32F), new Rt(qt.ATTR_TEX_COORD,_.RG32F), new Rt(qt.ATTR_COLOR,_.RGBA32F), new Rt(qt.ATTR_COLOR2,_.RGBA32F)];
            function Yf(t) {
                for (var e = 0, i = 0; i < t.length; i++) {
                    var r = t[i];
                    e += Jt[r.format].count
                }
                return e
            }
            function Kf(t) {
                for (var e = 0, i = 0; i < t.length; i++) {
                    var r = t[i];
                    e += Jt[r.format].size
                }
                return e
            }
            ci.internal.vfmtPosUvColor = Xf,
            ci.internal.vfmtPosUvTwoColor = jf,
            t("UIVertexFormat", Object.freeze({
                __proto__: null,
                vfmt: Vf,
                vfmtPosColor: Wf,
                vfmtPosUvColor: Xf,
                vfmtPosUvTwoColor: jf,
                getComponentPerVertex: Yf,
                getAttributeStride: Kf
            }));
            var Zf, qf, Jf, Qf, $f, tg, eg, ig, rg, ng, sg, ag, og, lg, hg, ug, cg, _g, dg, pg, fg, gg, mg, yg, vg, Sg, Tg = Wf.concat([new Rt("a_dist",_.R32F)]), bg = Yf(Tg), Eg = Kf(Tg), Ag = function(e) {
                return t({
                    Graphics: e,
                    GraphicsComponent: e
                }),
                e
            }((mf = Ti("cc.Graphics"),
            yf = Ii(),
            vf = Li(110),
            Sf = Fi(),
            Tf = Ni(),
            bf = Ci(nf),
            Ef = Ni(),
            Af = Ci(rf),
            Cf = Ni(),
            Rf = Ni(),
            Bf = Ni(),
            xf = Ni(),
            Df = ki(),
            mf(wf = yf(wf = vf(wf = Sf((Gf = kf = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this) || this).impl = null,
                    e.model = null,
                    Oi(e, "_lineWidth", Pf, Gi(e)),
                    Oi(e, "_strokeColor", Mf, Gi(e)),
                    Oi(e, "_lineJoin", If, Gi(e)),
                    Oi(e, "_lineCap", Lf, Gi(e)),
                    Oi(e, "_fillColor", Ff, Gi(e)),
                    Oi(e, "_miterLimit", Nf, Gi(e)),
                    e._isDrawing = !1,
                    e._isNeedUploadData = !0,
                    e._graphicsUseSubMeshes = [],
                    e._instanceMaterialType = kd.ADD_COLOR,
                    e.impl = new Hf,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onRestore = function() {
                    this.impl || this._flushAssembler()
                }
                ,
                i.onLoad = function() {
                    this.model = Ur.root.createModel(vi),
                    this.model.node = this.model.transform = this.node,
                    this._flushAssembler()
                }
                ,
                i.onEnable = function() {
                    t.prototype.onEnable.call(this),
                    this._updateMtlForGraphics()
                }
                ,
                i.onDisable = function() {
                    t.prototype.onDisable.call(this)
                }
                ,
                i.onDestroy = function() {
                    t.prototype.onDestroy.call(this),
                    this._sceneGetter = null,
                    this.model && (Ur.root.destroyModel(this.model),
                    this.model = null);
                    var e = this._graphicsUseSubMeshes.length;
                    if (e > 0) {
                        for (var i = 0; i < e; ++i)
                            this._graphicsUseSubMeshes[i].destroy();
                        this._graphicsUseSubMeshes.length = 0
                    }
                    this.impl && (this._isDrawing = !1,
                    this.impl.clear(),
                    this.impl = null)
                }
                ,
                i.moveTo = function(t, e) {
                    this.impl && this.impl.moveTo(t, e)
                }
                ,
                i.lineTo = function(t, e) {
                    this.impl && this.impl.lineTo(t, e)
                }
                ,
                i.bezierCurveTo = function(t, e, i, r, n, s) {
                    this.impl && this.impl.bezierCurveTo(t, e, i, r, n, s)
                }
                ,
                i.quadraticCurveTo = function(t, e, i, r) {
                    this.impl && this.impl.quadraticCurveTo(t, e, i, r)
                }
                ,
                i.arc = function(t, e, i, r, n, s) {
                    this.impl && this.impl.arc(t, e, i, r, n, s)
                }
                ,
                i.ellipse = function(t, e, i, r) {
                    this.impl && this.impl.ellipse(t, e, i, r)
                }
                ,
                i.circle = function(t, e, i) {
                    this.impl && this.impl.circle(t, e, i)
                }
                ,
                i.rect = function(t, e, i, r) {
                    this.impl && this.impl.rect(t, e, i, r)
                }
                ,
                i.roundRect = function(t, e, i, r, n) {
                    this.impl && this.impl.roundRect(t, e, i, r, n)
                }
                ,
                i.fillRect = function(t, e, i, r) {
                    this.rect(t, e, i, r),
                    this.fill()
                }
                ,
                i.clear = function() {
                    if (this.impl) {
                        if (this.impl.clear(),
                        this._isDrawing = !1,
                        this.model)
                            for (var t = 0; t < this.model.subModels.length; t++)
                                this.model.subModels[t].inputAssembler.indexCount = 0;
                        this.markForUpdateRenderData()
                    }
                }
                ,
                i.close = function() {
                    this.impl && this.impl.close()
                }
                ,
                i.stroke = function() {
                    this._assembler || this._flushAssembler(),
                    this._isDrawing = !0,
                    this._isNeedUploadData = !0,
                    this._assembler.stroke(this)
                }
                ,
                i.fill = function() {
                    this._assembler || this._flushAssembler(),
                    this._isDrawing = !0,
                    this._isNeedUploadData = !0,
                    this._assembler.fill(this)
                }
                ,
                i._updateMtlForGraphics = function() {
                    var t;
                    this._customMaterial ? t = this.getMaterialInstance(0) : (t = Di.get("ui-graphics-material"),
                    this.setMaterial(t, 0),
                    (t = this.getMaterialInstance(0)).recompileShaders({
                        USE_LOCAL: !0
                    }))
                }
                ,
                i.activeSubModel = function(t) {
                    if (this.model) {
                        if (this.model.subModels.length <= t) {
                            var e = ci.director.root.device
                              , i = e.createBuffer(new ht(f.VERTEX | f.TRANSFER_DST,y.DEVICE,65535 * Eg,Eg))
                              , r = e.createBuffer(new ht(f.INDEX | f.TRANSFER_DST,y.DEVICE,131070 * Uint16Array.BYTES_PER_ELEMENT,Uint16Array.BYTES_PER_ELEMENT))
                              , n = new $r([i],Tg,N.TRIANGLE_LIST,r);
                            n.subMeshIdx = 0,
                            this.model.initSubModel(t, n, this.getMaterialInstance(0)),
                            this._graphicsUseSubMeshes.push(n)
                        }
                    } else
                        ii(4500, this.node.name)
                }
                ,
                i._uploadData = function() {
                    var t = this.impl;
                    if (t) {
                        var e = t && t.getRenderDataList();
                        if (!(e.length <= 0) && this.model) {
                            for (var i = this.model.subModels, r = 0; r < e.length; r++) {
                                var n = e[r]
                                  , s = i[r].inputAssembler;
                                if (n.lastFilledVertex !== n.vertexStart) {
                                    var a = new Float32Array(n.vData.buffer,0,n.vertexStart * bg);
                                    s.vertexBuffers[0].update(a),
                                    s.vertexCount = n.vertexStart;
                                    var o = new Uint16Array(n.iData.buffer,0,n.indicesStart);
                                    s.indexBuffer.update(o),
                                    s.indexCount = n.indicesStart,
                                    n.lastFilledVertex = n.vertexStart,
                                    n.lastFilledIndices = n.indicesStart
                                }
                            }
                            this._isNeedUploadData = !1
                        }
                    }
                }
                ,
                i._render = function(t) {
                    if (this._isNeedUploadData) {
                        if (this.impl) {
                            var e = this.impl.getRenderDataList()
                              , i = this.model.subModels.length;
                            if (e.length > i)
                                for (var r = i; r < e.length; r++)
                                    this.activeSubModel(r)
                        }
                        this._uploadData()
                    }
                    t.commitModel(this, this.model, this.getMaterialInstance(0))
                }
                ,
                i._flushAssembler = function() {
                    var t = e.Assembler.getAssembler(this);
                    this._assembler !== t && (this._assembler = t)
                }
                ,
                i._canRender = function() {
                    return !!t.prototype._canRender.call(this) && !!this.model && this._isDrawing
                }
                ,
                Je(e, [{
                    key: "lineWidth",
                    get: function() {
                        return this._lineWidth
                    },
                    set: function(t) {
                        this._lineWidth = t,
                        this.impl && (this.impl.lineWidth = t)
                    }
                }, {
                    key: "lineJoin",
                    get: function() {
                        return this._lineJoin
                    },
                    set: function(t) {
                        this._lineJoin = t,
                        this.impl && (this.impl.lineJoin = t)
                    }
                }, {
                    key: "lineCap",
                    get: function() {
                        return this._lineCap
                    },
                    set: function(t) {
                        this._lineCap = t,
                        this.impl && (this.impl.lineCap = t)
                    }
                }, {
                    key: "strokeColor",
                    get: function() {
                        return this._strokeColor
                    },
                    set: function(t) {
                        this.impl && (this._strokeColor.set(t),
                        this.impl.strokeColor = this._strokeColor)
                    }
                }, {
                    key: "fillColor",
                    get: function() {
                        return this._fillColor
                    },
                    set: function(t) {
                        this.impl && (this._fillColor.set(t),
                        this.impl.fillColor = this._fillColor)
                    }
                }, {
                    key: "miterLimit",
                    get: function() {
                        return this._miterLimit
                    },
                    set: function(t) {
                        this._miterLimit = t
                    }
                }, {
                    key: "color",
                    get: function() {
                        return this._color
                    },
                    set: function(t) {
                        this._color !== t && this._color.set(t)
                    }
                }, {
                    key: "srcBlendFactor",
                    get: function() {
                        return this._srcBlendFactor
                    },
                    set: function() {}
                }, {
                    key: "dstBlendFactor",
                    get: function() {
                        return this._dstBlendFactor
                    },
                    set: function() {}
                }]),
                e
            }(ef),
            kf.LineJoin = nf,
            kf.LineCap = rf,
            Ei((Of = Gf).prototype, "lineWidth", [Ai, Tf], Object.getOwnPropertyDescriptor(Of.prototype, "lineWidth"), Of.prototype),
            Ei(Of.prototype, "lineJoin", [bf, Ef], Object.getOwnPropertyDescriptor(Of.prototype, "lineJoin"), Of.prototype),
            Ei(Of.prototype, "lineCap", [Af, Cf], Object.getOwnPropertyDescriptor(Of.prototype, "lineCap"), Of.prototype),
            Ei(Of.prototype, "strokeColor", [Rf], Object.getOwnPropertyDescriptor(Of.prototype, "strokeColor"), Of.prototype),
            Ei(Of.prototype, "fillColor", [Bf], Object.getOwnPropertyDescriptor(Of.prototype, "fillColor"), Of.prototype),
            Ei(Of.prototype, "miterLimit", [xf], Object.getOwnPropertyDescriptor(Of.prototype, "miterLimit"), Of.prototype),
            Ei(Of.prototype, "color", [Rr, Df], Object.getOwnPropertyDescriptor(Of.prototype, "color"), Of.prototype),
            Pf = Ei(Of.prototype, "_lineWidth", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            Mf = Ei(Of.prototype, "_strokeColor", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Zi.BLACK.clone()
                }
            }),
            If = Ei(Of.prototype, "_lineJoin", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return nf.MITER
                }
            }),
            Lf = Ei(Of.prototype, "_lineCap", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return rf.BUTT
                }
            }),
            Ff = Ei(Of.prototype, "_fillColor", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Zi.WHITE.clone()
                }
            }),
            Nf = Ei(Of.prototype, "_miterLimit", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 10
                }
            }),
            wf = Of)) || wf) || wf) || wf) || wf)), Cg = new Ui, Rg = new Br, Bg = new Ui, xg = [];
            !function(t) {
                t[t.RECT = 0] = "RECT",
                t[t.ELLIPSE = 1] = "ELLIPSE",
                t[t.GRAPHICS_STENCIL = 2] = "GRAPHICS_STENCIL",
                t[t.IMAGE_STENCIL = 3] = "IMAGE_STENCIL"
            }(Sg || (Sg = {})),
            Yr(Sg);
            var Dg = function(e) {
                return t({
                    Mask: e,
                    MaskComponent: e
                }),
                e
            }((Zf = Ti("cc.Mask"),
            qf = Ii(),
            Jf = Li(110),
            Qf = Fi(),
            $f = Ci(Sg),
            tg = Xr(),
            eg = Ni(),
            ig = Xr(),
            rg = Ni(),
            ng = ki(),
            sg = Ci(Jc),
            ag = ki(),
            og = ki(),
            lg = ji(),
            hg = ki(),
            ug = ki(),
            Zf(cg = qf(cg = Jf(cg = Qf((vg = yg = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this) || this)._clearStencilMtl = null,
                    e._clearModel = null,
                    Oi(e, "_type", dg, Gi(e)),
                    Oi(e, "_inverted", pg, Gi(e)),
                    Oi(e, "_segments", fg, Gi(e)),
                    Oi(e, "_spriteFrame", gg, Gi(e)),
                    Oi(e, "_alphaThreshold", mg, Gi(e)),
                    e._graphics = null,
                    e._clearModelMesh = null,
                    e._instanceMaterialType = kd.ADD_COLOR,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onLoad = function() {
                    this._createClearModel(),
                    this._createGraphics(),
                    this._graphics && this._graphics.onLoad()
                }
                ,
                i.onEnable = function() {
                    t.prototype.onEnable.call(this),
                    this._updateGraphics(),
                    this._enableGraphics()
                }
                ,
                i.onRestore = function() {
                    this._createGraphics(),
                    t.prototype.updateMaterial.call(this),
                    this._updateGraphics(),
                    this._renderFlag = this._canRender()
                }
                ,
                i.onDisable = function() {
                    t.prototype.onDisable.call(this),
                    this._disableGraphics()
                }
                ,
                i.onDestroy = function() {
                    t.prototype.onDestroy.call(this),
                    this._clearModel && this._clearModelMesh && (Ur.root.destroyModel(this._clearModel),
                    this._clearModelMesh.destroy()),
                    this._clearStencilMtl && this._clearStencilMtl.destroy(),
                    this._removeGraphics()
                }
                ,
                i.isHit = function(t) {
                    var e = this.node._uiProps.uiTransformComp
                      , i = e.contentSize
                      , r = i.width
                      , n = i.height
                      , s = Rg;
                    this.node.getWorldMatrix(Cg),
                    Ui.invert(Bg, Cg),
                    Br.transformMat4(s, t, Bg);
                    var a = e.anchorPoint;
                    s.x += a.x * r,
                    s.y += a.y * n;
                    var o = !1;
                    if (this.type === Sg.RECT || this.type === Sg.GRAPHICS_STENCIL)
                        o = s.x >= 0 && s.y >= 0 && s.x <= r && s.y <= n;
                    else if (this.type === Sg.ELLIPSE) {
                        var l = r / 2
                          , h = n / 2
                          , u = s.x - .5 * r
                          , c = s.y - .5 * n;
                        o = u * u / (l * l) + c * c / (h * h) < 1
                    }
                    return this._inverted && (o = !o),
                    o
                }
                ,
                i._render = function(t) {
                    t.commitComp(this, null, this._assembler, null)
                }
                ,
                i._postRender = function(t) {
                    this._postAssembler && t.commitComp(this, null, this._postAssembler, null)
                }
                ,
                i._nodeStateChange = function(e) {
                    t.prototype._nodeStateChange.call(this, e),
                    this._updateGraphics()
                }
                ,
                i._canRender = function() {
                    return !!t.prototype._canRender.call(this) && null !== this._graphics && (this._type !== Sg.IMAGE_STENCIL || null !== this._spriteFrame)
                }
                ,
                i._flushAssembler = function() {
                    var t = e.Assembler.getAssembler(this)
                      , i = e.PostAssembler.getAssembler(this);
                    this._assembler !== t && (this.destroyRenderData(),
                    this._assembler = t),
                    this._postAssembler !== i && (this._postAssembler = i),
                    this._useRenderData()
                }
                ,
                i._createGraphics = function() {
                    if (!this._graphics) {
                        var t = this._graphics = new Ag;
                        t._objFlags |= tn.Flags.IsOnLoadCalled,
                        t.node = this.node,
                        t.node.getWorldMatrix(),
                        t.lineWidth = 0;
                        var e = Zi.WHITE.clone();
                        e.a = 0,
                        t.fillColor = e
                    }
                    this._updateMaterial()
                }
                ,
                i._updateGraphics = function() {
                    if (this._graphics && (this._type === Sg.RECT || this._type === Sg.ELLIPSE)) {
                        var t = this.node._uiProps.uiTransformComp
                          , e = this._graphics;
                        e.clear();
                        var i = t.contentSize
                          , r = i.width
                          , n = i.height
                          , s = t.anchorPoint
                          , a = -r * s.x
                          , o = -n * s.y;
                        if (this._type === Sg.RECT)
                            e.rect(a, o, r, n);
                        else if (this._type === Sg.ELLIPSE) {
                            for (var l = function(t, e, i) {
                                xg.length = 0;
                                for (var r = 2 * Math.PI / i, n = 0; n < i; ++n)
                                    xg.push(new di(e.x * Math.cos(r * n) + t.x,e.y * Math.sin(r * n) + t.y,0));
                                return xg
                            }(new di(a + r / 2,o + n / 2,0), new di(r / 2,n / 2,0), this._segments), h = 0; h < l.length; ++h) {
                                var u = l[h];
                                0 === h ? e.moveTo(u.x, u.y) : e.lineTo(u.x, u.y)
                            }
                            e.close()
                        }
                        e.fill()
                    }
                }
                ,
                i._createClearModel = function() {
                    if (!this._clearModel) {
                        var t = Di.get("default-clear-stencil");
                        this._clearStencilMtl = new en({
                            parent: t,
                            owner: this,
                            subModelIdx: 0
                        }),
                        this._clearModel = Ur.root.createModel(vi),
                        this._clearModel.node = this._clearModel.transform = this.node;
                        var e = Kf(Vf)
                          , i = ci.director.root.device
                          , r = i.createBuffer(new ht(f.VERTEX | f.TRANSFER_DST,y.DEVICE,4 * e,e))
                          , n = new Float32Array([-1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0]);
                        r.update(n);
                        var s = i.createBuffer(new ht(f.INDEX | f.TRANSFER_DST,y.DEVICE,6 * Uint16Array.BYTES_PER_ELEMENT,Uint16Array.BYTES_PER_ELEMENT))
                          , a = new Uint16Array([0, 1, 2, 2, 1, 3]);
                        s.update(a),
                        this._clearModelMesh = new $r([r],Vf,N.TRIANGLE_LIST,s),
                        this._clearModelMesh.subMeshIdx = 0,
                        this._clearModel.initSubModel(0, this._clearModelMesh, this._clearStencilMtl)
                    }
                }
                ,
                i._updateMaterial = function() {
                    if (this._graphics) {
                        var t, e = this._graphics;
                        e.stencilStage = Z_.DISABLED,
                        this._type === Sg.IMAGE_STENCIL ? (t = Di.get("ui-alpha-test-material"),
                        e.setMaterial(t, 0),
                        (t = e.getMaterialInstance(0)).setProperty("alphaThreshold", this._alphaThreshold)) : (t = Di.get("ui-graphics-material"),
                        e.setMaterial(t, 0),
                        e.getMaterialInstance(0))
                    }
                }
                ,
                i._enableGraphics = function() {
                    this._graphics && (this._graphics._renderFlag = this._graphics._canRender())
                }
                ,
                i._disableGraphics = function() {
                    this._graphics && this._graphics.onDisable()
                }
                ,
                i._removeGraphics = function() {
                    this._graphics && (this._graphics.destroy(),
                    this._graphics._destroyImmediate(),
                    this._graphics = null)
                }
                ,
                i._useRenderData = function() {
                    this._type !== Sg.IMAGE_STENCIL || this._renderData || this._assembler && this._assembler.createData && (this._renderData = this._assembler.createData(this),
                    this.markForUpdateRenderData())
                }
                ,
                Je(e, [{
                    key: "type",
                    get: function() {
                        return this._type
                    },
                    set: function(t) {
                        this._type !== t && (this._type = t,
                        this.markForUpdateRenderData(!1),
                        this._updateMaterial(),
                        this._type !== Sg.IMAGE_STENCIL ? (this._spriteFrame = null,
                        this._updateGraphics(),
                        this._renderData && (this.destroyRenderData(),
                        this._renderData = null)) : (this._useRenderData(),
                        this._graphics && this._graphics.clear()))
                    }
                }, {
                    key: "inverted",
                    get: function() {
                        return this._inverted
                    },
                    set: function(t) {
                        this._inverted = t,
                        this.stencilStage = Z_.DISABLED,
                        this._graphics && (this._graphics.stencilStage = Z_.DISABLED)
                    }
                }, {
                    key: "segments",
                    get: function() {
                        return this._segments
                    },
                    set: function(t) {
                        this._segments !== t && (this._segments = nn(t, 3, 1e4),
                        this._updateGraphics())
                    }
                }, {
                    key: "spriteFrame",
                    get: function() {
                        return this._spriteFrame
                    },
                    set: function(t) {
                        if (this._spriteFrame !== t) {
                            var e = this._spriteFrame;
                            this._spriteFrame = t,
                            this._type === Sg.IMAGE_STENCIL && !e && t && this.markForUpdateRenderData()
                        }
                    }
                }, {
                    key: "alphaThreshold",
                    get: function() {
                        return this._alphaThreshold
                    },
                    set: function(t) {
                        this._alphaThreshold !== t && (this._alphaThreshold = t,
                        this.type === Sg.IMAGE_STENCIL && this._graphics && this._graphics.getMaterialInstance(0).setProperty("alphaThreshold", this._alphaThreshold))
                    }
                }, {
                    key: "graphics",
                    get: function() {
                        return this._graphics
                    }
                }, {
                    key: "dstBlendFactor",
                    get: function() {
                        return this._dstBlendFactor
                    },
                    set: function(t) {
                        this._dstBlendFactor !== t && (this._dstBlendFactor = t,
                        this._updateBlendFunc())
                    }
                }, {
                    key: "srcBlendFactor",
                    get: function() {
                        return this._srcBlendFactor
                    },
                    set: function(t) {
                        this._srcBlendFactor !== t && (this._srcBlendFactor = t,
                        this._updateBlendFunc())
                    }
                }, {
                    key: "color",
                    get: function() {
                        return this._color
                    },
                    set: function(t) {
                        this._color !== t && (this._color.set(t),
                        this.markForUpdateRenderData())
                    }
                }, {
                    key: "customMaterial",
                    get: function() {
                        return this._customMaterial
                    },
                    set: function() {}
                }]),
                e
            }(ef),
            yg.Type = Sg,
            Ei((_g = vg).prototype, "type", [$f, tg, eg], Object.getOwnPropertyDescriptor(_g.prototype, "type"), _g.prototype),
            Ei(_g.prototype, "inverted", [ig, rg], Object.getOwnPropertyDescriptor(_g.prototype, "inverted"), _g.prototype),
            Ei(_g.prototype, "segments", [ng], Object.getOwnPropertyDescriptor(_g.prototype, "segments"), _g.prototype),
            Ei(_g.prototype, "spriteFrame", [sg, ag], Object.getOwnPropertyDescriptor(_g.prototype, "spriteFrame"), _g.prototype),
            Ei(_g.prototype, "alphaThreshold", [og, lg, Xi], Object.getOwnPropertyDescriptor(_g.prototype, "alphaThreshold"), _g.prototype),
            Ei(_g.prototype, "color", [Rr, hg], Object.getOwnPropertyDescriptor(_g.prototype, "color"), _g.prototype),
            Ei(_g.prototype, "customMaterial", [Rr, ug], Object.getOwnPropertyDescriptor(_g.prototype, "customMaterial"), _g.prototype),
            dg = Ei(_g.prototype, "_type", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Sg.RECT
                }
            }),
            pg = Ei(_g.prototype, "_inverted", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            fg = Ei(_g.prototype, "_segments", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 64
                }
            }),
            gg = Ei(_g.prototype, "_spriteFrame", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            mg = Ei(_g.prototype, "_alphaThreshold", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return .1
                }
            }),
            cg = _g)) || cg) || cg) || cg) || cg));
            rn._maskComp = Dg,
            ci.Mask = Dg;
            var wg, Og, Pg, Mg, Ig, Lg, Fg, Ng, kg, Gg, zg, Ug, Hg, Vg, Wg, Xg, jg, Yg, Kg, Zg, qg, Jg, Qg, $g, tm, em, im, rm, nm, sm, am, om, lm, hm, um, cm, _m, dm, pm, fm, gm, mm, ym, vm, Sm, Tm, bm, Em, Am, Cm, Rm, Bm, xm, Dm, wm, Om, Pm, Mm, Im, Lm, Fm = /^(click)(\s)*=|(param)(\s)*=/, Nm = /(\s)*src(\s)*=|(\s)*height(\s)*=|(\s)*width(\s)*=|(\s)*align(\s)*=|(\s)*offset(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/, km = t("HtmlTextParser", function() {
                function t() {
                    this._specialSymbolArray = [],
                    this._stack = [],
                    this._resultObjectArray = [],
                    this._specialSymbolArray.push([/&lt;/g, "<"]),
                    this._specialSymbolArray.push([/&gt;/g, ">"]),
                    this._specialSymbolArray.push([/&amp;/g, "&"]),
                    this._specialSymbolArray.push([/&quot;/g, '"']),
                    this._specialSymbolArray.push([/&apos;/g, "'"])
                }
                var e = t.prototype;
                return e.parse = function(t) {
                    this._resultObjectArray.length = 0,
                    this._stack.length = 0;
                    for (var e = 0, i = t.length; e < i; ) {
                        var r = t.indexOf(">", e)
                          , n = -1;
                        if (r >= 0 && (n = t.lastIndexOf("<", r)) < e - 1 && (n = t.indexOf("<", r + 1),
                        r = t.indexOf(">", n + 1)),
                        n < 0)
                            this._stack.pop(),
                            this._processResult(t.substring(e)),
                            e = i;
                        else {
                            var s = t.substring(e, n)
                              , a = t.substring(n + 1, r);
                            "" === a && (s = t.substring(e, r + 1)),
                            this._processResult(s),
                            -1 === r ? r = n : "/" === t.charAt(n + 1) ? this._stack.pop() : this._addToStack(a),
                            e = r + 1
                        }
                    }
                    return this._resultObjectArray
                }
                ,
                e._attributeToObject = function(t) {
                    t = t.trim();
                    var e = {}
                      , i = /^(color|size)(\s)*=/.exec(t)
                      , r = ""
                      , n = 0
                      , s = "";
                    if (i) {
                        if (r = i[0],
                        "" === (t = t.substring(r.length).trim()))
                            return e;
                        switch (n = t.indexOf(" "),
                        r[0]) {
                        case "c":
                            e.color = n > -1 ? t.substring(0, n).trim() : t;
                            break;
                        case "s":
                            e.size = parseInt(t)
                        }
                        return n > -1 && (s = t.substring(n + 1).trim(),
                        e.event = this._processEventHandler(s)),
                        e
                    }
                    if ((i = /^(br(\s)*\/)/.exec(t)) && i[0].length > 0 && (r = i[0].trim()).startsWith("br") && "/" === r[r.length - 1])
                        return e.isNewLine = !0,
                        this._resultObjectArray.push({
                            text: "",
                            style: {
                                isNewLine: !0
                            }
                        }),
                        e;
                    var a = "";
                    if ((i = /^(img(\s)*src(\s)*=[^>]+\/)/.exec(t)) && i[0].length > 0 && (r = i[0].trim()).startsWith("img") && "/" === r[r.length - 1]) {
                        var o;
                        i = Nm.exec(t);
                        for (var l = !1; i; ) {
                            if (r = (t = t.substring(t.indexOf(i[0]))).substr(0, i[0].length),
                            o = (n = (a = t.substring(r.length).trim()).indexOf(" ")) > -1 ? a.substr(0, n) : a,
                            r = (r = r.replace(/[^a-zA-Z]/g, "").trim()).toLowerCase(),
                            t = a.substring(n).trim(),
                            o.endsWith("/") && (o = o.slice(0, -1)),
                            "src" === r) {
                                switch (o.charCodeAt(0)) {
                                case 34:
                                case 39:
                                    l = !0,
                                    o = o.slice(1, -1)
                                }
                                e.isImage = !0,
                                e.src = o
                            } else if ("height" === r)
                                e.imageHeight = parseInt(o);
                            else if ("width" === r)
                                e.imageWidth = parseInt(o);
                            else if ("align" === r) {
                                switch (o.charCodeAt(0)) {
                                case 34:
                                case 39:
                                    o = o.slice(1, -1)
                                }
                                e.imageAlign = o.toLowerCase()
                            } else
                                "offset" === r ? e.imageOffset = o : "click" === r && (e.event = this._processEventHandler(r + "=" + o));
                            e.event && "param" === r && (e.event[r] = o.replace(/^"|"$/g, "")),
                            i = Nm.exec(t)
                        }
                        return l && e.isImage && this._resultObjectArray.push({
                            text: "",
                            style: e
                        }),
                        {}
                    }
                    if (i = /^(outline(\s)*[^>]*)/.exec(t)) {
                        var h = {
                            color: "#ffffff",
                            width: 1
                        };
                        if (t = i[0].substring("outline".length).trim()) {
                            var u, c = /(\s)*color(\s)*=|(\s)*width(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
                            for (i = c.exec(t); i; )
                                r = (t = t.substring(t.indexOf(i[0]))).substr(0, i[0].length),
                                u = (n = (a = t.substring(r.length).trim()).indexOf(" ")) > -1 ? a.substr(0, n) : a,
                                r = (r = r.replace(/[^a-zA-Z]/g, "").trim()).toLowerCase(),
                                t = a.substring(n).trim(),
                                "click" === r ? e.event = this._processEventHandler(r + "=" + u) : "color" === r ? h.color = u : "width" === r && (h.width = parseInt(u)),
                                e.event && "param" === r && (e.event[r] = u.replace(/^"|"$/g, "")),
                                i = c.exec(t)
                        }
                        e.outline = h
                    }
                    if ((i = /^(on|u|b|i)(\s)*/.exec(t)) && i[0].length > 0) {
                        switch (r = i[0],
                        t = t.substring(r.length).trim(),
                        r[0]) {
                        case "u":
                            e.underline = !0;
                            break;
                        case "i":
                            e.italic = !0;
                            break;
                        case "b":
                            e.bold = !0
                        }
                        if ("" === t)
                            return e;
                        e.event = this._processEventHandler(t)
                    }
                    return e
                }
                ,
                e._processEventHandler = function(t) {
                    for (var e = {}, i = 0, r = !1, n = Fm.exec(t); n; ) {
                        var s = n[0]
                          , a = "";
                        if (r = !1,
                        '"' === (t = t.substring(s.length).trim()).charAt(0))
                            (i = t.indexOf('"', 1)) > -1 && (a = t.substring(1, i).trim(),
                            r = !0),
                            i++;
                        else if ("'" === t.charAt(0))
                            (i = t.indexOf("'", 1)) > -1 && (a = t.substring(1, i).trim(),
                            r = !0),
                            i++;
                        else {
                            var o = /(\S)+/.exec(t);
                            i = (a = o ? o[0] : "").length
                        }
                        r && (e[s = s.substring(0, s.length - 1).trim()] = a),
                        t = t.substring(i).trim(),
                        n = Fm.exec(t)
                    }
                    return e
                }
                ,
                e._addToStack = function(t) {
                    var e = this._attributeToObject(t);
                    if (0 === this._stack.length)
                        this._stack.push(e);
                    else {
                        if (e.isNewLine || e.isImage)
                            return;
                        var i = this._stack[this._stack.length - 1];
                        for (var r in i)
                            e[r] || (e[r] = i[r]);
                        this._stack.push(e)
                    }
                }
                ,
                e._processResult = function(t) {
                    0 !== t.length && (t = this._escapeSpecialSymbol(t),
                    this._stack.length > 0 ? this._resultObjectArray.push({
                        text: t,
                        style: this._stack[this._stack.length - 1]
                    }) : this._resultObjectArray.push({
                        text: t
                    }))
                }
                ,
                e._escapeSpecialSymbol = function(t) {
                    for (var e, i = ui(this._specialSymbolArray); !(e = i()).done; ) {
                        var r = e.value
                          , n = r[0]
                          , s = r[1];
                        t = t.replace(n, s)
                    }
                    return t
                }
                ,
                t
            }()), Gm = function(e) {
                return t({
                    LabelOutline: e,
                    LabelOutlineComponent: e
                }),
                e
            }((wg = Ti("cc.LabelOutline"),
            Og = Ii(),
            Pg = Li(110),
            Mg = Fi(),
            Ig = Zr(af),
            Lg = Ni(),
            Fg = Ni(),
            wg(Ng = Og(Ng = Pg(Ng = Mg(Ng = Ig(Ng = Ri((Ug = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "_color", Gg, Gi(e)),
                    Oi(e, "_width", zg, Gi(e)),
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onEnable = function() {
                    this._updateRenderData()
                }
                ,
                i.onDisable = function() {
                    this._updateRenderData()
                }
                ,
                i._updateRenderData = function() {
                    var t = this.node.getComponent(af);
                    t && t.updateRenderData(!0)
                }
                ,
                Je(e, [{
                    key: "color",
                    get: function() {
                        return this._color
                    },
                    set: function(t) {
                        this._color !== t && (this._color.set(t),
                        this._updateRenderData())
                    }
                }, {
                    key: "width",
                    get: function() {
                        return this._width
                    },
                    set: function(t) {
                        this._width !== t && (this._width = t,
                        this._updateRenderData())
                    }
                }]),
                e
            }(Ki),
            Gg = Ei((kg = Ug).prototype, "_color", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Zi(0,0,0,255)
                }
            }),
            zg = Ei(kg.prototype, "_width", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 2
                }
            }),
            Ei(kg.prototype, "color", [Lg], Object.getOwnPropertyDescriptor(kg.prototype, "color"), kg.prototype),
            Ei(kg.prototype, "width", [Fg], Object.getOwnPropertyDescriptor(kg.prototype, "width"), kg.prototype),
            Ng = kg)) || Ng) || Ng) || Ng) || Ng) || Ng) || Ng));
            !function(t) {
                t[t.SIMPLE = 0] = "SIMPLE",
                t[t.SLICED = 1] = "SLICED",
                t[t.TILED = 2] = "TILED",
                t[t.FILLED = 3] = "FILLED"
            }(Pm || (Pm = {})),
            Yr(Pm),
            function(t) {
                t[t.HORIZONTAL = 0] = "HORIZONTAL",
                t[t.VERTICAL = 1] = "VERTICAL",
                t[t.RADIAL = 2] = "RADIAL"
            }(Mm || (Mm = {})),
            Yr(Mm),
            function(t) {
                t[t.CUSTOM = 0] = "CUSTOM",
                t[t.TRIMMED = 1] = "TRIMMED",
                t[t.RAW = 2] = "RAW"
            }(Im || (Im = {})),
            Yr(Im),
            function(t) {
                t.SPRITE_FRAME_CHANGED = "spriteframe-changed"
            }(Lm || (Lm = {}));
            var zm, Um, Hm, Vm, Wm, Xm, jm, Ym, Km, Zm, qm, Jm, Qm, $m, ty, ey = function(e) {
                return t({
                    Sprite: e,
                    SpriteComponent: e
                }),
                e
            }((Hg = Ti("cc.Sprite"),
            Vg = Ii(),
            Wg = Li(110),
            Xg = Fi(),
            jg = Ci(Tr),
            Yg = Xr(),
            Kg = qr(),
            Zg = Ci($c),
            qg = Xr(),
            Jg = Ni(),
            Qg = Ci(Jc),
            $g = Xr(),
            tm = Ni(),
            em = Ci(Pm),
            im = Xr(),
            rm = Ni(),
            nm = Ci(Mm),
            sm = Ni(),
            am = Ni(),
            om = ji(),
            lm = Ni(),
            hm = ji(),
            um = Ni(),
            cm = ki(),
            _m = Xr(),
            dm = Ni(),
            pm = Ni(),
            fm = Ci(Im),
            gm = Xr(),
            mm = Ni(),
            Hg(ym = Vg(ym = Wg(ym = Xg((Om = wm = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_spriteFrame", Sm, Gi(e)),
                    Oi(e, "_type", Tm, Gi(e)),
                    Oi(e, "_fillType", bm, Gi(e)),
                    Oi(e, "_sizeMode", Em, Gi(e)),
                    Oi(e, "_fillCenter", Am, Gi(e)),
                    Oi(e, "_fillStart", Cm, Gi(e)),
                    Oi(e, "_fillRange", Rm, Gi(e)),
                    Oi(e, "_isTrimmedMode", Bm, Gi(e)),
                    Oi(e, "_useGrayscale", xm, Gi(e)),
                    Oi(e, "_atlas", Dm, Gi(e)),
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.__preload = function() {
                    this.changeMaterialForDefine(),
                    t.prototype.__preload.call(this)
                }
                ,
                i.onEnable = function() {
                    t.prototype.onEnable.call(this),
                    this._activateMaterial(),
                    this._markForUpdateUvDirty()
                }
                ,
                i.onDestroy = function() {
                    this.destroyRenderData(),
                    t.prototype.onDestroy.call(this)
                }
                ,
                i.changeSpriteFrameFromAtlas = function(t) {
                    if (this._atlas) {
                        var e = this._atlas.getSpriteFrame(t);
                        this.spriteFrame = e
                    } else
                        console.warn("SpriteAtlas is null.")
                }
                ,
                i.changeMaterialForDefine = function() {
                    var t, e = this._instanceMaterialType;
                    this._spriteFrame && (t = this._spriteFrame.texture);
                    var i = !1;
                    if (t instanceof Jr) {
                        var r = t.getPixelFormat();
                        i = r === Cr.RGBA_ETC1 || r === Cr.RGB_A_PVRTC_4BPPV1 || r === Cr.RGB_A_PVRTC_2BPPV1
                    }
                    i && this.grayscale ? this._instanceMaterialType = kd.USE_ALPHA_SEPARATED_AND_GRAY : i ? this._instanceMaterialType = kd.USE_ALPHA_SEPARATED : this.grayscale ? this._instanceMaterialType = kd.GRAYSCALE : this._instanceMaterialType = kd.ADD_COLOR_AND_TEXTURE,
                    e !== this._instanceMaterialType && this.updateMaterial()
                }
                ,
                i._updateBuiltinMaterial = function() {
                    var e = t.prototype._updateBuiltinMaterial.call(this);
                    if (this.spriteFrame && this.spriteFrame.texture instanceof sn) {
                        var i = an({
                            SAMPLE_FROM_RT: !0
                        }, e.passes[0].defines)
                          , r = new Tr;
                        r.initialize({
                            effectAsset: e.effectAsset,
                            defines: i
                        }),
                        e = r
                    }
                    return e
                }
                ,
                i._render = function(t) {
                    t.commitComp(this, this._spriteFrame, this._assembler, null)
                }
                ,
                i._canRender = function() {
                    if (!t.prototype._canRender.call(this))
                        return !1;
                    var e = this._spriteFrame;
                    return !(!e || !e.texture)
                }
                ,
                i._flushAssembler = function() {
                    var t = e.Assembler.getAssembler(this);
                    this._assembler !== t && (this.destroyRenderData(),
                    this._assembler = t),
                    this._renderData || this._assembler && this._assembler.createData && (this._renderData = this._assembler.createData(this),
                    this._renderData.material = this.getRenderMaterial(0),
                    this.markForUpdateRenderData(),
                    this._colorDirty = !0,
                    this._updateColor())
                }
                ,
                i._applySpriteSize = function() {
                    if (this._spriteFrame) {
                        if (!this._spriteFrame.isDefault)
                            if (Im.RAW === this._sizeMode) {
                                var t = this._spriteFrame.originalSize;
                                this.node._uiProps.uiTransformComp.setContentSize(t)
                            } else if (Im.TRIMMED === this._sizeMode) {
                                var e = this._spriteFrame.getRect();
                                this.node._uiProps.uiTransformComp.setContentSize(e.width, e.height)
                            }
                        this._activateMaterial()
                    }
                }
                ,
                i._resized = function() {}
                ,
                i._activateMaterial = function() {
                    var t = this._spriteFrame
                      , e = this.getRenderMaterial(0);
                    t && e && this.markForUpdateRenderData(),
                    this._renderData && (this._renderData.material = e)
                }
                ,
                i._applySpriteFrame = function(t) {
                    var e = this._spriteFrame;
                    this._renderData && (this._renderData.uvDirty || (this._renderData.uvDirty = !t || !e || t.uvHash !== e.uvHash),
                    this._renderDataFlag = this._renderData.uvDirty);
                    var i = !1;
                    e && (t && t.texture === e.texture || (i = !0),
                    i && (this._renderData && (this._renderData.textureDirty = !0),
                    this.changeMaterialForDefine()),
                    this._applySpriteSize())
                }
                ,
                i._markForUpdateUvDirty = function() {
                    this._renderData && (this._renderData.uvDirty = !0,
                    this._renderDataFlag = !0)
                }
                ,
                i._calculateSlicedData = function(t) {
                    var e = this.node._uiProps.uiTransformComp.contentSize
                      , i = e.width
                      , r = e.height
                      , n = this.spriteFrame.insetLeft
                      , s = i - n - this.spriteFrame.insetRight
                      , a = this.spriteFrame.insetTop
                      , o = r - a - this.spriteFrame.insetBottom;
                    return t.length = 0,
                    t[0] = n / i,
                    t[1] = a / r,
                    t[2] = (n + s) / i,
                    t[3] = (a + o) / r,
                    t
                }
                ,
                i.calculateTiledData = function(t) {
                    var e = this.node._uiProps.uiTransformComp.contentSize
                      , i = this.spriteFrame.rect;
                    t.x = e.width / i.width,
                    t.y = e.height / i.height
                }
                ,
                i._updateUVWithTrim = function() {
                    this.tillingOffsetWithTrim.length = 0;
                    var t = this.spriteFrame
                      , e = t.originalSize
                      , i = t.rect
                      , r = t.texture
                      , n = r.width
                      , s = r.height
                      , a = 0
                      , o = 0;
                    t.original && (a = i.x - t.original._x,
                    o = i.y - t.original._y);
                    var l = 0 === n ? 0 : a / n
                      , h = 0 === n ? 1 : (a + e.width) / n
                      , u = 0 === s ? 1 : (o + e.height) / s
                      , c = 0 === s ? 0 : o / s;
                    t.rotated && (l = 0 === n ? 0 : a / n,
                    h = 0 === n ? 1 : (a + e.height) / n,
                    c = 0 === s ? 0 : o / s,
                    u = 0 === s ? 1 : (o + e.width) / s),
                    this.tillingOffsetWithTrim[0] = h - l,
                    this.tillingOffsetWithTrim[1] = u - c,
                    this.tillingOffsetWithTrim[2] = l,
                    this.tillingOffsetWithTrim[3] = c,
                    t.rotated && (this.tillingOffsetWithTrim[0] = -this.tillingOffsetWithTrim[0])
                }
                ,
                Je(e, [{
                    key: "customMaterial",
                    get: function() {
                        return this._customMaterial
                    },
                    set: function(t) {
                        this._customMaterial = t,
                        this.updateMaterial()
                    }
                }, {
                    key: "spriteAtlas",
                    get: function() {
                        return this._atlas
                    },
                    set: function(t) {
                        this._atlas !== t && (this._atlas = t)
                    }
                }, {
                    key: "spriteFrame",
                    get: function() {
                        return this._spriteFrame
                    },
                    set: function(t) {
                        if (this._spriteFrame !== t) {
                            var e = this._spriteFrame;
                            this._spriteFrame = t,
                            this.markForUpdateRenderData(!1),
                            this._applySpriteFrame(e)
                        }
                    }
                }, {
                    key: "type",
                    get: function() {
                        return this._type
                    },
                    set: function(t) {
                        this._type !== t && (this._type = t,
                        this._flushAssembler())
                    }
                }, {
                    key: "fillType",
                    get: function() {
                        return this._fillType
                    },
                    set: function(t) {
                        this._fillType !== t && (t === Mm.RADIAL || this._fillType === Mm.RADIAL ? (this.destroyRenderData(),
                        this._renderData = null) : this._renderData && this.markForUpdateRenderData(!0)),
                        this._fillType = t,
                        this._flushAssembler()
                    }
                }, {
                    key: "fillCenter",
                    get: function() {
                        return this._fillCenter
                    },
                    set: function(t) {
                        this._fillCenter.x = t.x,
                        this._fillCenter.y = t.y,
                        this._type === Pm.FILLED && this._renderData && this.markForUpdateRenderData()
                    }
                }, {
                    key: "fillStart",
                    get: function() {
                        return this._fillStart
                    },
                    set: function(t) {
                        this._fillStart = nn(t, 0, 1),
                        this._type === Pm.FILLED && this._renderData && (this.markForUpdateRenderData(),
                        this._renderData.uvDirty = !0)
                    }
                }, {
                    key: "fillRange",
                    get: function() {
                        return this._fillRange
                    },
                    set: function(t) {
                        this._fillRange = nn(t, -1, 1),
                        this._type === Pm.FILLED && this._renderData && (this.markForUpdateRenderData(),
                        this._renderData.uvDirty = !0)
                    }
                }, {
                    key: "trim",
                    get: function() {
                        return this._isTrimmedMode
                    },
                    set: function(t) {
                        this._isTrimmedMode !== t && (this._isTrimmedMode = t,
                        this._type === Pm.SIMPLE && this._renderData && this.markForUpdateRenderData(!0))
                    }
                }, {
                    key: "grayscale",
                    get: function() {
                        return this._useGrayscale
                    },
                    set: function(t) {
                        this._useGrayscale !== t && (this._useGrayscale = t,
                        this._instanceMaterialType = !0 === t ? kd.GRAYSCALE : kd.ADD_COLOR_AND_TEXTURE,
                        this.updateMaterial())
                    }
                }, {
                    key: "sizeMode",
                    get: function() {
                        return this._sizeMode
                    },
                    set: function(t) {
                        this._sizeMode !== t && (this._sizeMode = t,
                        t !== Im.CUSTOM && this._applySpriteSize())
                    }
                }]),
                e
            }(ef),
            wm.FillType = Mm,
            wm.Type = Pm,
            wm.SizeMode = Im,
            wm.EventType = Lm,
            Ei((vm = Om).prototype, "customMaterial", [jg, Yg, Kg, Rr], Object.getOwnPropertyDescriptor(vm.prototype, "customMaterial"), vm.prototype),
            Ei(vm.prototype, "spriteAtlas", [Zg, qg, Jg], Object.getOwnPropertyDescriptor(vm.prototype, "spriteAtlas"), vm.prototype),
            Ei(vm.prototype, "spriteFrame", [Qg, $g, tm], Object.getOwnPropertyDescriptor(vm.prototype, "spriteFrame"), vm.prototype),
            Ei(vm.prototype, "type", [em, im, rm], Object.getOwnPropertyDescriptor(vm.prototype, "type"), vm.prototype),
            Ei(vm.prototype, "fillType", [nm, sm], Object.getOwnPropertyDescriptor(vm.prototype, "fillType"), vm.prototype),
            Ei(vm.prototype, "fillCenter", [am], Object.getOwnPropertyDescriptor(vm.prototype, "fillCenter"), vm.prototype),
            Ei(vm.prototype, "fillStart", [om, lm], Object.getOwnPropertyDescriptor(vm.prototype, "fillStart"), vm.prototype),
            Ei(vm.prototype, "fillRange", [hm, um], Object.getOwnPropertyDescriptor(vm.prototype, "fillRange"), vm.prototype),
            Ei(vm.prototype, "trim", [cm, _m, dm], Object.getOwnPropertyDescriptor(vm.prototype, "trim"), vm.prototype),
            Ei(vm.prototype, "grayscale", [Ai, pm], Object.getOwnPropertyDescriptor(vm.prototype, "grayscale"), vm.prototype),
            Ei(vm.prototype, "sizeMode", [fm, gm, mm], Object.getOwnPropertyDescriptor(vm.prototype, "sizeMode"), vm.prototype),
            Sm = Ei(vm.prototype, "_spriteFrame", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Tm = Ei(vm.prototype, "_type", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Pm.SIMPLE
                }
            }),
            bm = Ei(vm.prototype, "_fillType", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Mm.HORIZONTAL
                }
            }),
            Em = Ei(vm.prototype, "_sizeMode", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Im.TRIMMED
                }
            }),
            Am = Ei(vm.prototype, "_fillCenter", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Br(0,0)
                }
            }),
            Cm = Ei(vm.prototype, "_fillStart", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Rm = Ei(vm.prototype, "_fillRange", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Bm = Ei(vm.prototype, "_isTrimmedMode", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            xm = Ei(vm.prototype, "_useGrayscale", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Dm = Ei(vm.prototype, "_atlas", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            ym = vm)) || ym) || ym) || ym) || ym)), iy = t("RenderRoot2D", Ti("cc.RenderRoot2D")(zm = Li(100)(zm = Fi()(zm = Zr(yd)(zm = Vr(zm = Ri(zm = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.onEnable = function() {
                    ci.director.root.batcher2D.addScreen(this)
                }
                ,
                i.onDisable = function() {
                    ci.director.root.batcher2D.removeScreen(this)
                }
                ,
                i.onDestroy = function() {
                    ci.director.root.batcher2D.removeScreen(this)
                }
                ,
                e
            }(Ki)) || zm) || zm) || zm) || zm) || zm) || zm), ry = new di, ny = Si({
                OVERLAY: 0,
                INTERSPERSE: 1
            }), sy = function(e) {
                return t({
                    Canvas: e,
                    CanvasComponent: e
                }),
                e
            }((Um = Ti("cc.Canvas"),
            Hm = Ii(),
            Vm = Li(100),
            Wm = Fi(),
            Xm = Ci(on),
            jm = Ni(),
            Ym = Ni(),
            Km = Ci(on),
            Um(Zm = Hm(Zm = Vm(Zm = Wm(Zm = Ri(Zm = Vr(($m = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_cameraComponent", Jm, Gi(e)),
                    Oi(e, "_alignCanvasWithScreen", Qm, Gi(e)),
                    e._thisOnCameraResized = void 0,
                    e._fitDesignResolution = void 0,
                    e._pos = new di,
                    e._renderMode = ny.OVERLAY,
                    e._thisOnCameraResized = e._onResizeCamera.bind(Gi(e)),
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.__preload = function() {
                    var t = this.getComponent("cc.Widget");
                    t && t.updateAlignment(),
                    this._cameraComponent && (this._cameraComponent._createCamera(),
                    this._cameraComponent.node.on(on.TARGET_TEXTURE_CHANGE, this._thisOnCameraResized)),
                    this._onResizeCamera(),
                    this.node.on(Wr.TRANSFORM_CHANGED, this._thisOnCameraResized)
                }
                ,
                i.onEnable = function() {
                    t.prototype.onEnable.call(this),
                    this._cameraComponent && this._cameraComponent.node.on(on.TARGET_TEXTURE_CHANGE, this._thisOnCameraResized)
                }
                ,
                i.onDisable = function() {
                    t.prototype.onDisable.call(this),
                    this._cameraComponent && this._cameraComponent.node.off(on.TARGET_TEXTURE_CHANGE, this._thisOnCameraResized)
                }
                ,
                i.onDestroy = function() {
                    t.prototype.onDestroy.call(this),
                    this.node.off(Wr.TRANSFORM_CHANGED, this._thisOnCameraResized)
                }
                ,
                i._onResizeCamera = function() {
                    if (this._cameraComponent && this._alignCanvasWithScreen) {
                        if (this._cameraComponent.targetTexture)
                            this._cameraComponent.orthoHeight = jr.height / 2;
                        else {
                            var t = hn.windowSize;
                            this._cameraComponent.orthoHeight = t.height / ln.getScaleY() / 2
                        }
                        this.node.getWorldPosition(ry),
                        this._cameraComponent.node.setWorldPosition(ry.x, ry.y, 1e3)
                    }
                }
                ,
                i._getViewPriority = function() {
                    if (this._cameraComponent) {
                        var t, e = null === (t = this.cameraComponent) || void 0 === t ? void 0 : t.priority;
                        return this._renderMode === ny.OVERLAY ? e | 1 << 30 : e & ~(1 << 30)
                    }
                    return 0
                }
                ,
                Je(e, [{
                    key: "renderMode",
                    get: function() {
                        return this._renderMode
                    },
                    set: function(t) {
                        this._renderMode = t,
                        this._cameraComponent && (this._cameraComponent.priority = this._getViewPriority())
                    }
                }, {
                    key: "cameraComponent",
                    get: function() {
                        return this._cameraComponent
                    },
                    set: function(t) {
                        this._cameraComponent !== t && (this._cameraComponent = t,
                        this._onResizeCamera())
                    }
                }, {
                    key: "alignCanvasWithScreen",
                    get: function() {
                        return this._alignCanvasWithScreen
                    },
                    set: function(t) {
                        this._alignCanvasWithScreen = t,
                        this._onResizeCamera()
                    }
                }]),
                e
            }(iy),
            Ei((qm = $m).prototype, "cameraComponent", [Xm, jm], Object.getOwnPropertyDescriptor(qm.prototype, "cameraComponent"), qm.prototype),
            Ei(qm.prototype, "alignCanvasWithScreen", [Ym], Object.getOwnPropertyDescriptor(qm.prototype, "alignCanvasWithScreen"), qm.prototype),
            Jm = Ei(qm.prototype, "_cameraComponent", [Km], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Qm = Ei(qm.prototype, "_alignCanvasWithScreen", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            Zm = qm)) || Zm) || Zm) || Zm) || Zm) || Zm) || Zm));
            ci.Canvas = sy;
            var ay, oy, ly, hy, uy, cy, _y, dy, py, fy, gy, my, yy, vy, Sy, Ty, by, Ey, Ay, Cy, Ry, By, xy, Dy, wy, Oy, Py, My, Iy, Ly, Fy, Ny, ky, Gy, zy, Uy = t("UIComponent", Ti("cc.UIComponent")(ty = Zr(yd)(ty = Li(110)(ty = Vr(ty = Ri(ty = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._lastParent = null,
                    e.stencilStage = Z_.DISABLED,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.__preload = function() {
                    this.node._uiProps.uiComp = this
                }
                ,
                i.onEnable = function() {}
                ,
                i.onDisable = function() {}
                ,
                i.onDestroy = function() {
                    this.node._uiProps.uiComp === this && (this.node._uiProps.uiComp = null)
                }
                ,
                i.updateAssembler = function() {}
                ,
                i.postUpdateAssembler = function() {}
                ,
                i.markForUpdateRenderData = function() {}
                ,
                i.setNodeDirty = function() {}
                ,
                i.setTextureDirty = function() {}
                ,
                e
            }(Ki)) || ty) || ty) || ty) || ty) || ty);
            Hi(Uy.prototype, "UIComponent", [{
                name: "_visibility"
            }, {
                name: "setVisibility"
            }]),
            rr(sy.prototype, "Canvas.prototype", [{
                name: "camera",
                newName: "cameraComponent.camera",
                customGetter: function() {
                    return this._cameraComponent.camera
                }
            }, {
                name: "clearFlag",
                newName: "cameraComponent.clearFlags",
                customGetter: function() {
                    return this._cameraComponent ? this._cameraComponent.clearFlags : 0
                },
                customSetter: function(t) {
                    this._cameraComponent && (this._cameraComponent.clearFlags = t)
                }
            }, {
                name: "color",
                newName: "cameraComponent.clearColor",
                customGetter: function() {
                    return this._cameraComponent ? this._cameraComponent.clearColor : Zi.BLACK
                },
                customSetter: function(t) {
                    this._cameraComponent && (this._cameraComponent.clearColor = t)
                }
            }, {
                name: "priority",
                newName: "cameraComponent.priority",
                customGetter: function() {
                    return this._cameraComponent ? this._cameraComponent.priority : 0
                },
                customSetter: function(t) {
                    this._cameraComponent && (this._cameraComponent.priority = t)
                }
            }, {
                name: "targetTexture",
                newName: "cameraComponent.targetTexture",
                customGetter: function() {
                    return this._cameraComponent ? this._cameraComponent.targetTexture : null
                },
                customSetter: function(t) {
                    this._cameraComponent && (this._cameraComponent.targetTexture = t)
                }
            }, {
                name: "visibility",
                newName: "cameraComponent.visibility",
                customGetter: function() {
                    return this._cameraComponent ? this._cameraComponent.visibility : 0
                }
            }]),
            un(ef.prototype, "Renderable2D.prototype", [{
                name: "srcBlendFactor",
                suggest: "Please use a custom material to specify blending options instead."
            }, {
                name: "dstBlendFactor",
                suggest: "Please use a custom material to specify blending options instead."
            }]),
            un(yd.prototype, "UITransform.prototype", [{
                name: "priority",
                suggest: "Please use setSiblingIndex to change index of the current node in its parent's children array."
            }]),
            ci.UITransformComponent = yd,
            Vi.setClassAlias(yd, "cc.UITransformComponent"),
            Vi.setClassAlias(ef, "cc.RenderComponent"),
            ci.CanvasComponent = sy,
            Vi.setClassAlias(sy, "cc.CanvasComponent");
            var Hy = new km
              , Vy = "RICHTEXT_CHILD"
              , Wy = "RICHTEXT_Image_CHILD"
              , Xy = new zr((function(t) {
                if (!ci.isValid(t.node))
                    return !1;
                var e = t.node.getComponent(Gm);
                return e && (e.width = 0),
                !0
            }
            ),20)
              , jy = new zr((function(t) {
                return ci.isValid(t.node)
            }
            ),10);
            function Yy(t) {
                return {
                    node: new Sr(t),
                    comp: null,
                    lineCount: 0,
                    styleIndex: 0,
                    imageOffset: "",
                    clickParam: "",
                    clickHandler: "",
                    type: t
                }
            }
            function Ky(t, e) {
                var i;
                t === Vy ? i = Xy._get() : t === Wy && (i = jy._get());
                var r = (i = i || Yy(t)).node;
                return r || (r = new Sr(t)),
                r.hideFlags |= tn.Flags.DontSave | tn.Flags.HideInHierarchy,
                t === Wy ? (i.comp = r.getComponent(ey) || r.addComponent(ey),
                i.comp.spriteFrame = e,
                i.comp.type = ey.Type.SLICED,
                i.comp.sizeMode = ey.SizeMode.CUSTOM) : (i.comp = r.getComponent(af) || r.addComponent(af),
                i.comp.string = e,
                i.comp.horizontalAlign = Jp.LEFT,
                i.comp.verticalAlign = Qp.TOP),
                r.setPosition(0, 0, 0),
                r._uiProps.uiTransformComp.setAnchorPoint(.5, .5),
                i.node = r,
                i.lineCount = 0,
                i.styleIndex = 0,
                i.imageOffset = "",
                i.clickParam = "",
                i.clickHandler = "",
                i
            }
            var Zy, qy = function(e) {
                return t({
                    RichText: e,
                    RichTextComponent: e
                }),
                e
            }((ay = Ti("cc.RichText"),
            oy = Ii(),
            ly = Li(110),
            hy = Fi(),
            uy = Ni(),
            cy = Ci(Jp),
            _y = Ni(),
            dy = Ni(),
            py = Ni(),
            fy = Ci(n_),
            gy = Ni(),
            my = Ni(),
            yy = Ci(tf),
            vy = Ni(),
            Sy = Ni(),
            Ty = Ni(),
            by = Ci($c),
            Ey = Ni(),
            Ay = Ni(),
            ay(Cy = oy(Cy = ly(Cy = hy(Cy = Ri((zy = Gy = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_lineHeight", By, Gi(e)),
                    Oi(e, "_string", xy, Gi(e)),
                    Oi(e, "_horizontalAlign", Dy, Gi(e)),
                    Oi(e, "_fontSize", wy, Gi(e)),
                    Oi(e, "_maxWidth", Oy, Gi(e)),
                    Oi(e, "_fontFamily", Py, Gi(e)),
                    Oi(e, "_font", My, Gi(e)),
                    Oi(e, "_isSystemFontUsed", Iy, Gi(e)),
                    Oi(e, "_userDefinedFont", Ly, Gi(e)),
                    Oi(e, "_cacheMode", Fy, Gi(e)),
                    Oi(e, "_imageAtlas", Ny, Gi(e)),
                    Oi(e, "_handleTouchEvent", ky, Gi(e)),
                    e._textArray = [],
                    e._segments = [],
                    e._labelSegmentsCache = [],
                    e._linesWidth = [],
                    e._lineCount = 1,
                    e._labelWidth = 0,
                    e._labelHeight = 0,
                    e._layoutDirty = !0,
                    e._lineOffsetX = 0,
                    e._updateRichTextStatus = void 0,
                    e._updateRichTextStatus = e._updateRichText,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onLoad = function() {
                    this.node.on(Wr.LAYER_CHANGED, this._applyLayer, this)
                }
                ,
                i.onEnable = function() {
                    this.handleTouchEvent && this._addEventListeners(),
                    this._updateRichText(),
                    this._activateChildren(!0)
                }
                ,
                i.onDisable = function() {
                    this.handleTouchEvent && this._removeEventListeners(),
                    this._activateChildren(!1)
                }
                ,
                i.start = function() {
                    this._onTTFLoaded(),
                    this.node.on(Wr.ANCHOR_CHANGED, this._updateRichTextPosition, this)
                }
                ,
                i.onRestore = function() {}
                ,
                i.onDestroy = function() {
                    for (var t, e = ui(this._segments); !(t = e()).done; ) {
                        var i = t.value;
                        i.node.removeFromParent(),
                        i.type === Vy ? Xy.put(i) : i.type === Wy && jy.put(i)
                    }
                    this.node.off(Wr.ANCHOR_CHANGED, this._updateRichTextPosition, this),
                    this.node.off(Wr.LAYER_CHANGED, this._applyLayer, this)
                }
                ,
                i._addEventListeners = function() {
                    this.node.on(Wr.TOUCH_END, this._onTouchEnded, this)
                }
                ,
                i._removeEventListeners = function() {
                    this.node.off(Wr.TOUCH_END, this._onTouchEnded, this)
                }
                ,
                i._updateLabelSegmentTextAttributes = function() {
                    var t = this;
                    this._segments.forEach((function(e) {
                        t._applyTextAttribute(e)
                    }
                    ))
                }
                ,
                i._createFontLabel = function(t) {
                    return Ky(Vy, t)
                }
                ,
                i._createImage = function(t) {
                    return Ky(Wy, t)
                }
                ,
                i._onTTFLoaded = function() {
                    this._font,
                    this._layoutDirty = !0,
                    this._updateRichText()
                }
                ,
                i._measureText = function(t, e) {
                    var i = this
                      , r = function(e) {
                        var r;
                        return 0 === i._labelSegmentsCache.length ? (r = i._createFontLabel(e),
                        i._labelSegmentsCache.push(r)) : (r = i._labelSegmentsCache[0]).node.getComponent(af).string = e,
                        r.styleIndex = t,
                        i._applyTextAttribute(r),
                        r.node._uiProps.uiTransformComp.contentSize.width
                    };
                    return e ? r(e) : r
                }
                ,
                i._onTouchEnded = function(t) {
                    for (var e, i = this, r = this.node.getComponents(Ki), n = function() {
                        var n = e.value
                          , s = n.clickHandler
                          , a = n.clickParam;
                        s && i._containsTouchLocation(n, t.touch.getUILocation()) && (r.forEach((function(e) {
                            var i = e[s];
                            e.enabledInHierarchy && i && i.call(e, t, a)
                        }
                        )),
                        t.propagationStopped = !0)
                    }, s = ui(this._segments); !(e = s()).done; )
                        n()
                }
                ,
                i._containsTouchLocation = function(t, e) {
                    var i = t.node.getComponent(yd);
                    return !!i && i.getBoundingBoxToWorld().contains(e)
                }
                ,
                i._resetState = function() {
                    for (var t = this.node.children, e = t.length - 1; e >= 0; e--) {
                        var i = t[e];
                        if (i.name === Vy || i.name === Wy) {
                            i.parent === this.node ? i.parent = null : t.splice(e, 1);
                            var r = Yy(i.name);
                            r.node = i,
                            i.name === Vy ? (r.comp = i.getComponent(af),
                            Xy.put(r)) : (r.comp = i.getComponent(ey),
                            jy.put(r))
                        }
                    }
                    t.length = 0,
                    this._segments.length = 0,
                    this._labelSegmentsCache.length = 0,
                    this._linesWidth.length = 0,
                    this._lineOffsetX = 0,
                    this._lineCount = 1,
                    this._labelWidth = 0,
                    this._labelHeight = 0,
                    this._layoutDirty = !0
                }
                ,
                i._activateChildren = function(t) {
                    for (var e = this.node.children.length - 1; e >= 0; e--) {
                        var i = this.node.children[e];
                        i.name !== Vy && i.name !== Wy || (i.active = t)
                    }
                }
                ,
                i._addLabelSegment = function(t, e) {
                    var i;
                    if (0 === this._labelSegmentsCache.length)
                        i = this._createFontLabel(t);
                    else {
                        var r = (i = this._labelSegmentsCache.pop()).node.getComponent(af);
                        r && (r.string = t)
                    }
                    return i.styleIndex = e,
                    i.lineCount = this._lineCount,
                    i.node._uiProps.uiTransformComp.setAnchorPoint(0, 0),
                    i.node.layer = this.node.layer,
                    this.node.addChild(i.node),
                    this._applyTextAttribute(i),
                    this._segments.push(i),
                    i
                }
                ,
                i._updateRichTextWithMaxWidth = function(t, e, i) {
                    var r = e;
                    if (this._lineOffsetX > 0 && r + this._lineOffsetX > this._maxWidth)
                        for (var n = 0; this._lineOffsetX <= this._maxWidth; ) {
                            var s = this._getFirstWordLen(t, n, t.length)
                              , a = t.substr(n, s)
                              , o = this._measureText(i, a);
                            if (!(this._lineOffsetX + o <= this._maxWidth)) {
                                if (n > 0) {
                                    var l = t.substr(0, n);
                                    this._addLabelSegment(l, i),
                                    t = t.substr(n, t.length),
                                    r = this._measureText(i, t)
                                }
                                this._updateLineInfo();
                                break
                            }
                            this._lineOffsetX += o,
                            n += s
                        }
                    if (r > this._maxWidth)
                        for (var h = I_(t, r, this._maxWidth, this._measureText(i)), u = 0; u < h.length; ++u) {
                            var c = h[u]
                              , _ = this._addLabelSegment(c, i).node._uiProps.uiTransformComp.contentSize;
                            this._lineOffsetX += _.width,
                            h.length > 1 && u < h.length - 1 && this._updateLineInfo()
                        }
                    else
                        this._lineOffsetX += r,
                        this._addLabelSegment(t, i)
                }
                ,
                i._isLastComponentCR = function(t) {
                    return t.length - 1 === t.lastIndexOf("\n")
                }
                ,
                i._updateLineInfo = function() {
                    this._linesWidth.push(this._lineOffsetX),
                    this._lineOffsetX = 0,
                    this._lineCount++
                }
                ,
                i._needsUpdateTextLayout = function(t) {
                    if (this._layoutDirty || !this._textArray || !t)
                        return !0;
                    if (this._textArray.length !== t.length)
                        return !0;
                    for (var e = 0; e < this._textArray.length; e++) {
                        var i = this._textArray[e]
                          , r = t[e];
                        if (i.text !== r.text)
                            return !0;
                        var n = i.style
                          , s = r.style;
                        if (n) {
                            if (s) {
                                if (!!s.outline != !!n.outline)
                                    return !0;
                                if (n.size !== s.size || n.italic !== s.italic || n.isImage !== s.isImage)
                                    return !0;
                                if (n.src !== s.src || n.imageAlign !== s.imageAlign || n.imageHeight !== s.imageHeight || n.imageWidth !== s.imageWidth || n.imageOffset !== s.imageOffset)
                                    return !0
                            } else if (n.size || n.italic || n.isImage || n.outline)
                                return !0
                        } else if (s && (s.size || s.italic || s.isImage || s.outline))
                            return !0
                    }
                    return !1
                }
                ,
                i._addRichTextImageElement = function(t) {
                    if (t.style) {
                        var e = t.style
                          , i = e.src
                          , r = this._imageAtlas && i && this._imageAtlas.getSpriteFrame(i);
                        if (r) {
                            var n = this._createImage(r);
                            switch (n.comp,
                            e.imageAlign) {
                            case "top":
                                n.node._uiProps.uiTransformComp.setAnchorPoint(0, 1);
                                break;
                            case "center":
                                n.node._uiProps.uiTransformComp.setAnchorPoint(0, .5);
                                break;
                            default:
                                n.node._uiProps.uiTransformComp.setAnchorPoint(0, 0)
                            }
                            e.imageOffset && (n.imageOffset = e.imageOffset),
                            n.node.layer = this.node.layer,
                            this.node.addChild(n.node),
                            this._segments.push(n);
                            var s = r.rect.clone()
                              , a = 1
                              , o = s.width
                              , l = s.height
                              , h = e.imageWidth || 0
                              , u = e.imageHeight || 0;
                            u > 0 ? (o *= a = u / l,
                            l *= a) : (o *= a = this._lineHeight / l,
                            l *= a),
                            h > 0 && (o = h),
                            this._maxWidth > 0 ? (this._lineOffsetX + o > this._maxWidth && this._updateLineInfo(),
                            this._lineOffsetX += o) : (this._lineOffsetX += o,
                            this._lineOffsetX > this._labelWidth && (this._labelWidth = this._lineOffsetX)),
                            n.node._uiProps.uiTransformComp.setContentSize(o, l),
                            n.lineCount = this._lineCount,
                            n.clickHandler = "",
                            n.clickParam = "";
                            var c = e.event;
                            c && (n.clickHandler = c.click,
                            n.clickParam = c.param)
                        } else
                            ii(4400)
                    }
                }
                ,
                i._updateRichText = function() {
                    if (this.enabledInHierarchy) {
                        var t = Hy.parse(this._string);
                        if (!this._needsUpdateTextLayout(t))
                            return this._textArray = t.slice(),
                            void this._updateLabelSegmentTextAttributes();
                        this._textArray = t.slice(),
                        this._resetState();
                        for (var e, i = !1, r = 0; r < this._textArray.length; ++r) {
                            var n = this._textArray[r]
                              , s = n.text;
                            if (void 0 !== s) {
                                if ("" === s) {
                                    if (n.style && n.style.isNewLine) {
                                        this._updateLineInfo();
                                        continue
                                    }
                                    if (n.style && n.style.isImage && this._imageAtlas) {
                                        this._addRichTextImageElement(n);
                                        continue
                                    }
                                }
                                for (var a = s.split("\n"), o = 0; o < a.length; ++o) {
                                    var l = a[o];
                                    if ("" !== l)
                                        if (i = !1,
                                        this._maxWidth > 0) {
                                            var h = this._measureText(r, l);
                                            this._updateRichTextWithMaxWidth(l, h, r),
                                            a.length > 1 && o < a.length - 1 && this._updateLineInfo()
                                        } else
                                            e = this._addLabelSegment(l, r),
                                            this._lineOffsetX += e.node._uiProps.uiTransformComp.width,
                                            this._lineOffsetX > this._labelWidth && (this._labelWidth = this._lineOffsetX),
                                            a.length > 1 && o < a.length - 1 && this._updateLineInfo();
                                    else {
                                        if (this._isLastComponentCR(s) && o === a.length - 1)
                                            continue;
                                        this._updateLineInfo(),
                                        i = !0
                                    }
                                }
                            }
                        }
                        i || this._linesWidth.push(this._lineOffsetX),
                        this._maxWidth > 0 && (this._labelWidth = this._maxWidth),
                        this._labelHeight = (this._lineCount + S_) * this._lineHeight,
                        this.node._uiProps.uiTransformComp.setContentSize(this._labelWidth, this._labelHeight),
                        this._updateRichTextPosition(),
                        this._layoutDirty = !1
                    }
                }
                ,
                i._getFirstWordLen = function(t, e, i) {
                    var r = t.charAt(e);
                    if (w_(r) || O_(r))
                        return 1;
                    for (var n = 1, s = e + 1; s < i && !O_(r = t.charAt(s)) && !w_(r); ++s)
                        n++;
                    return n
                }
                ,
                i._updateRichTextPosition = function() {
                    for (var t = 0, e = 1, i = this._lineCount, r = this.node._uiProps.uiTransformComp, n = r.anchorX, s = r.anchorY, a = 0; a < this._segments.length; ++a) {
                        var o = this._segments[a]
                          , l = o.lineCount;
                        l > e && (t = 0,
                        e = l);
                        var h = this._labelWidth * (.5 * this._horizontalAlign - n);
                        switch (this._horizontalAlign) {
                        case Jp.LEFT:
                            break;
                        case Jp.CENTER:
                            h -= this._linesWidth[l - 1] / 2;
                            break;
                        case Jp.RIGHT:
                            h -= this._linesWidth[l - 1]
                        }
                        var u = o.node.position;
                        if (o.node.setPosition(t + h, this._lineHeight * (i - l) - this._labelHeight * s, u.z),
                        l === e && (t += o.node._uiProps.uiTransformComp.width),
                        o.node.getComponent(ey)) {
                            var c = o.node.position.clone()
                              , _ = this._lineHeight
                              , d = this._lineHeight * (1 + S_);
                            switch (o.node._uiProps.uiTransformComp.anchorY) {
                            case 1:
                                c.y += _ + (d - _) / 2;
                                break;
                            case .5:
                                c.y += d / 2;
                                break;
                            default:
                                c.y += (d - _) / 2
                            }
                            if (o.imageOffset) {
                                var p = o.imageOffset.split(",");
                                if (1 === p.length && p[0]) {
                                    var f = parseFloat(p[0]);
                                    Number.isInteger(f) && (c.y += f)
                                } else if (2 === p.length) {
                                    var g = parseFloat(p[0])
                                      , m = parseFloat(p[1]);
                                    Number.isInteger(g) && (c.x += g),
                                    Number.isInteger(m) && (c.y += m)
                                }
                            }
                            o.node.position = c
                        }
                        var y = o.node.getComponent(Gm);
                        if (y) {
                            var v = o.node.position.clone();
                            v.y -= y.width,
                            o.node.position = v
                        }
                    }
                }
                ,
                i._convertLiteralColorValue = function(t) {
                    var e = t.toUpperCase();
                    return Zi[e] ? Zi[e] : (new Zi).fromHEX(t)
                }
                ,
                i._applyTextAttribute = function(t) {
                    var e = t.node.getComponent(af);
                    if (e) {
                        this._resetLabelState(e);
                        var i, r = t.styleIndex;
                        if (this._textArray[r] && (i = this._textArray[r].style),
                        i) {
                            if (e.color = this._convertLiteralColorValue(i.color || "white"),
                            e.isBold = !!i.bold,
                            e.isItalic = !!i.italic,
                            e.isUnderline = !!i.underline,
                            i.outline) {
                                var n = t.node.getComponent(Gm);
                                n || (n = t.node.addComponent(Gm)),
                                n.color = this._convertLiteralColorValue(i.outline.color),
                                n.width = i.outline.width
                            }
                            e.fontSize = i.size || this._fontSize,
                            t.clickHandler = "",
                            t.clickParam = "";
                            var s = i.event;
                            s && (t.clickHandler = s.click || "",
                            t.clickParam = s.param || "")
                        }
                        e.cacheMode = this._cacheMode,
                        this._font instanceof n_ && !this._isSystemFontUsed ? e.font = this._font : e.fontFamily = this._fontFamily,
                        e.useSystemFont = this._isSystemFontUsed,
                        e.lineHeight = this._lineHeight,
                        e.updateRenderData(!0);
                        var a = e._assembler;
                        a && a.updateRenderData(e)
                    }
                }
                ,
                i._applyLayer = function() {
                    for (var t, e = ui(this._segments); !(t = e()).done; )
                        t.value.node.layer = this.node.layer
                }
                ,
                i._resetLabelState = function(t) {
                    t.fontSize = this._fontSize,
                    t.color = Zi.WHITE,
                    t.isBold = !1,
                    t.isItalic = !1,
                    t.isUnderline = !1
                }
                ,
                Je(e, [{
                    key: "string",
                    get: function() {
                        return this._string
                    },
                    set: function(t) {
                        this._string !== t && (this._string = t,
                        this._updateRichTextStatus())
                    }
                }, {
                    key: "horizontalAlign",
                    get: function() {
                        return this._horizontalAlign
                    },
                    set: function(t) {
                        this.horizontalAlign !== t && (this._horizontalAlign = t,
                        this._layoutDirty = !0,
                        this._updateRichTextStatus())
                    }
                }, {
                    key: "fontSize",
                    get: function() {
                        return this._fontSize
                    },
                    set: function(t) {
                        this._fontSize !== t && (this._fontSize = t,
                        this._layoutDirty = !0,
                        this._updateRichTextStatus())
                    }
                }, {
                    key: "fontFamily",
                    get: function() {
                        return this._fontFamily
                    },
                    set: function(t) {
                        this._fontFamily !== t && (this._fontFamily = t,
                        this._layoutDirty = !0,
                        this._updateRichTextStatus())
                    }
                }, {
                    key: "font",
                    get: function() {
                        return this._font
                    },
                    set: function(t) {
                        this._font !== t && (this._font = t,
                        this._layoutDirty = !0,
                        this._font ? (this.useSystemFont = !1,
                        this._onTTFLoaded()) : this.useSystemFont = !0,
                        this._updateRichTextStatus())
                    }
                }, {
                    key: "useSystemFont",
                    get: function() {
                        return this._isSystemFontUsed
                    },
                    set: function(t) {
                        this._isSystemFontUsed !== t && (this._isSystemFontUsed = t,
                        this._layoutDirty = !0,
                        this._updateRichTextStatus())
                    }
                }, {
                    key: "cacheMode",
                    get: function() {
                        return this._cacheMode
                    },
                    set: function(t) {
                        this._cacheMode !== t && (this._cacheMode = t,
                        this._updateRichTextStatus())
                    }
                }, {
                    key: "maxWidth",
                    get: function() {
                        return this._maxWidth
                    },
                    set: function(t) {
                        this._maxWidth !== t && (this._maxWidth = t,
                        this._layoutDirty = !0,
                        this._updateRichTextStatus())
                    }
                }, {
                    key: "lineHeight",
                    get: function() {
                        return this._lineHeight
                    },
                    set: function(t) {
                        this._lineHeight !== t && (this._lineHeight = t,
                        this._layoutDirty = !0,
                        this._updateRichTextStatus())
                    }
                }, {
                    key: "imageAtlas",
                    get: function() {
                        return this._imageAtlas
                    },
                    set: function(t) {
                        this._imageAtlas !== t && (this._imageAtlas = t,
                        this._layoutDirty = !0,
                        this._updateRichTextStatus())
                    }
                }, {
                    key: "handleTouchEvent",
                    get: function() {
                        return this._handleTouchEvent
                    },
                    set: function(t) {
                        this._handleTouchEvent !== t && (this._handleTouchEvent = t,
                        this.enabledInHierarchy && (this.handleTouchEvent ? this._addEventListeners() : this._removeEventListeners()))
                    }
                }]),
                e
            }(Uy),
            Gy.HorizontalAlign = Jp,
            Gy.VerticalAlign = Qp,
            Ei((Ry = zy).prototype, "string", [Qr, uy], Object.getOwnPropertyDescriptor(Ry.prototype, "string"), Ry.prototype),
            Ei(Ry.prototype, "horizontalAlign", [cy, _y], Object.getOwnPropertyDescriptor(Ry.prototype, "horizontalAlign"), Ry.prototype),
            Ei(Ry.prototype, "fontSize", [dy], Object.getOwnPropertyDescriptor(Ry.prototype, "fontSize"), Ry.prototype),
            Ei(Ry.prototype, "fontFamily", [py], Object.getOwnPropertyDescriptor(Ry.prototype, "fontFamily"), Ry.prototype),
            Ei(Ry.prototype, "font", [fy, gy], Object.getOwnPropertyDescriptor(Ry.prototype, "font"), Ry.prototype),
            Ei(Ry.prototype, "useSystemFont", [my], Object.getOwnPropertyDescriptor(Ry.prototype, "useSystemFont"), Ry.prototype),
            Ei(Ry.prototype, "cacheMode", [yy, vy], Object.getOwnPropertyDescriptor(Ry.prototype, "cacheMode"), Ry.prototype),
            Ei(Ry.prototype, "maxWidth", [Sy], Object.getOwnPropertyDescriptor(Ry.prototype, "maxWidth"), Ry.prototype),
            Ei(Ry.prototype, "lineHeight", [Ty], Object.getOwnPropertyDescriptor(Ry.prototype, "lineHeight"), Ry.prototype),
            Ei(Ry.prototype, "imageAtlas", [by, Ey], Object.getOwnPropertyDescriptor(Ry.prototype, "imageAtlas"), Ry.prototype),
            Ei(Ry.prototype, "handleTouchEvent", [Ay], Object.getOwnPropertyDescriptor(Ry.prototype, "handleTouchEvent"), Ry.prototype),
            By = Ei(Ry.prototype, "_lineHeight", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 40
                }
            }),
            xy = Ei(Ry.prototype, "_string", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return "<color=#00ff00>Rich</color><color=#0fffff>Text</color>"
                }
            }),
            Dy = Ei(Ry.prototype, "_horizontalAlign", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Jp.LEFT
                }
            }),
            wy = Ei(Ry.prototype, "_fontSize", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 40
                }
            }),
            Oy = Ei(Ry.prototype, "_maxWidth", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Py = Ei(Ry.prototype, "_fontFamily", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return "Arial"
                }
            }),
            My = Ei(Ry.prototype, "_font", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Iy = Ei(Ry.prototype, "_isSystemFontUsed", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            Ly = Ei(Ry.prototype, "_userDefinedFont", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Fy = Ei(Ry.prototype, "_cacheMode", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return tf.NONE
                }
            }),
            Ny = Ei(Ry.prototype, "_imageAtlas", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            ky = Ei(Ry.prototype, "_handleTouchEvent", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            Cy = Ry)) || Cy) || Cy) || Cy) || Cy) || Cy)), Jy = function(e) {
                return t({
                    UIMeshRenderer: e,
                    UIModelComponent: e
                }),
                e
            }(Ti("cc.UIMeshRenderer")(Zy = Ii()(Zy = Li(110)(Zy = Fi()(Zy = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._models = null,
                    e._modelComponent = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onLoad = function() {
                    this.node._uiProps.uiTransformComp || this.node.addComponent("cc.UITransform"),
                    this._modelComponent = this.getComponent("cc.RenderableComponent"),
                    this._modelComponent ? this._models = this._modelComponent._collectModels() : console.warn("node '" + (this.node && this.node.name) + "' doesn't have any renderable component")
                }
                ,
                i.onEnable = function() {
                    t.prototype.onEnable.call(this)
                }
                ,
                i.onDisable = function() {
                    t.prototype.onDisable.call(this)
                }
                ,
                i.onDestroy = function() {
                    t.prototype.onDestroy.call(this),
                    this._modelComponent = this.getComponent("cc.RenderableComponent"),
                    this._modelComponent && (this._modelComponent._sceneGetter = null,
                    this._models = null)
                }
                ,
                i.updateAssembler = function(t) {
                    if (this._models) {
                        this._modelComponent._detachFromScene();
                        for (var e, i = ui(this._models); !(e = i()).done; ) {
                            var r = e.value;
                            t.commitModel.call(t, this, r, this._modelComponent.material)
                        }
                        return !0
                    }
                    return !1
                }
                ,
                i.update = function() {
                    this._fitUIRenderQueue()
                }
                ,
                i._fitUIRenderQueue = function() {
                    if (this._modelComponent)
                        for (var t = this._modelComponent.sharedMaterials.length, e = 0; e < t; e++) {
                            var i = this._modelComponent.getMaterialInstance(e);
                            if (null != i)
                                for (var r = i.passes, n = r.length, s = 0; s < n; s++)
                                    r[s]._priority = cn.MAX - 11,
                                    i.recompileShaders({
                                        CC_FORCE_FORWARD_SHADING: !0
                                    }, s)
                        }
                }
                ,
                Je(e, [{
                    key: "modelComponent",
                    get: function() {
                        return this._modelComponent
                    }
                }]),
                e
            }(Uy)) || Zy) || Zy) || Zy) || Zy), Qy = t("MeshBuffer", function(t) {
                function e(e) {
                    var i;
                    return (i = t.call(this) || this).vData = null,
                    i.iData = null,
                    i.byteStart = 0,
                    i.byteOffset = 0,
                    i.indicesStart = 0,
                    i.indicesOffset = 0,
                    i.vertexStart = 0,
                    i.vertexOffset = 0,
                    i.lastByteOffset = 1,
                    i._attributes = null,
                    i._vertexBuffers = [],
                    i._indexBuffer = null,
                    i._iaInfo = null,
                    i._batcher = void 0,
                    i._dirty = !1,
                    i._vertexFormatBytes = 0,
                    i._initVDataCount = 0,
                    i._initIDataCount = 1536,
                    i._outOfCallback = null,
                    i._hInputAssemblers = [],
                    i._nextFreeIAHandle = 0,
                    i._lastUsedVDataSize = 0,
                    i._lastUsedIDataSize = 0,
                    i._batcher = e,
                    i
                }
                qe(e, t);
                var i = e.prototype;
                return i.initialize = function(t, e) {
                    this._outOfCallback = e;
                    var i = Yf(t);
                    this._vertexFormatBytes = i * Float32Array.BYTES_PER_ELEMENT,
                    this._initVDataCount = 256 * this._vertexFormatBytes;
                    var r = Float32Array.BYTES_PER_ELEMENT * i;
                    this.vertexBuffers.length || this.vertexBuffers.push(this._batcher.device.createBuffer(new ht(f.VERTEX | f.TRANSFER_DST,y.HOST | y.DEVICE,r,r)));
                    var n = Uint16Array.BYTES_PER_ELEMENT;
                    this.indexBuffer || (this._indexBuffer = this._batcher.device.createBuffer(new ht(f.INDEX | f.TRANSFER_DST,y.HOST | y.DEVICE,n,n))),
                    this._attributes = t,
                    this._iaInfo = new xt(this.attributes,this.vertexBuffers,this.indexBuffer),
                    this.vData && this.iData || this._reallocBuffer()
                }
                ,
                i.request = function(t, e) {
                    void 0 === t && (t = 4),
                    void 0 === e && (e = 6),
                    this.lastByteOffset = this.byteOffset;
                    var i = this.byteOffset + t * this._vertexFormatBytes
                      , r = this.indicesOffset + e;
                    if (t + this.vertexOffset > 65535)
                        return this._outOfCallback && this._outOfCallback.call(this._batcher, t, e),
                        !1;
                    var n = this.vData.byteLength
                      , s = this.iData.length;
                    if (i > n || r > s) {
                        for (; n < i || s < r; )
                            this._initVDataCount *= 2,
                            this._initIDataCount *= 2,
                            n = 4 * this._initVDataCount,
                            s = this._initIDataCount;
                        this._reallocBuffer()
                    }
                    return this.vertexOffset += t,
                    this.indicesOffset += e,
                    this.byteOffset = i,
                    this._dirty = !0,
                    !0
                }
                ,
                i.reset = function() {
                    this.byteStart = 0,
                    this.byteOffset = 0,
                    this.indicesStart = 0,
                    this.indicesOffset = 0,
                    this.vertexStart = 0,
                    this.vertexOffset = 0,
                    this.lastByteOffset = 0,
                    this._nextFreeIAHandle = 0,
                    this._dirty = !1
                }
                ,
                i.tryShrink = function() {
                    if (!this._dirty && this.vData && this.iData && this.vData.byteLength >> 2 > this._lastUsedVDataSize && this.iData.length >> 2 > this._lastUsedIDataSize) {
                        var t = Math.max(256 * this._vertexFormatBytes, this._initVDataCount >> 1)
                          , e = Math.max(1536, this._initIDataCount >> 1);
                        t === this._initVDataCount && e === this._initIDataCount || (this._initIDataCount = e,
                        this._initVDataCount = t,
                        this._reallocBuffer())
                    }
                }
                ,
                i.destroy = function() {
                    this._attributes = null,
                    this.vertexBuffers[0].destroy(),
                    this.vertexBuffers.length = 0,
                    this.indexBuffer.destroy(),
                    this._indexBuffer = null;
                    for (var e = 0; e < this._hInputAssemblers.length; e++)
                        this._hInputAssemblers[e].destroy();
                    this._hInputAssemblers.length = 0,
                    t.prototype.destroy.call(this)
                }
                ,
                i.recordBatch = function() {
                    var t = this.indicesOffset - this.indicesStart;
                    if (!t)
                        return null;
                    this._hInputAssemblers.length <= this._nextFreeIAHandle && this._hInputAssemblers.push(this._batcher.device.createInputAssembler(this._iaInfo));
                    var e = this._hInputAssemblers[this._nextFreeIAHandle++];
                    return e.firstIndex = this.indicesStart,
                    e.indexCount = t,
                    e
                }
                ,
                i.uploadBuffers = function() {
                    if (0 !== this.byteOffset && this._dirty) {
                        var t = new Float32Array(this.vData.buffer,0,this.byteOffset >> 2)
                          , e = new Uint16Array(this.iData.buffer,0,this.indicesOffset);
                        this.byteOffset > this.vertexBuffers[0].size && this.vertexBuffers[0].resize(this.byteOffset),
                        this.vertexBuffers[0].update(t),
                        2 * this.indicesOffset > this.indexBuffer.size && this.indexBuffer.resize(2 * this.indicesOffset),
                        this.indexBuffer.update(e),
                        this._lastUsedVDataSize = this.byteOffset,
                        this._lastUsedIDataSize = this.indicesOffset,
                        this._dirty = !1
                    }
                }
                ,
                i._reallocBuffer = function() {
                    this._reallocVData(!0),
                    this._reallocIData(!0)
                }
                ,
                i._reallocVData = function(t) {
                    var e;
                    if (this.vData && (e = new Uint8Array(this.vData.buffer)),
                    this.vData = new Float32Array(this._initVDataCount),
                    e && t)
                        for (var i = new Uint8Array(this.vData.buffer), r = 0, n = e.length; r < n; r++)
                            i[r] = e[r]
                }
                ,
                i._reallocIData = function(t) {
                    var e = this.iData;
                    if (this.iData = new Uint16Array(this._initIDataCount),
                    e && t)
                        for (var i = this.iData, r = 0, n = e.length; r < n; r++)
                            i[r] = e[r]
                }
                ,
                Je(e, [{
                    key: "attributes",
                    get: function() {
                        return this._attributes
                    }
                }, {
                    key: "vertexBuffers",
                    get: function() {
                        return this._vertexBuffers
                    }
                }, {
                    key: "indexBuffer",
                    get: function() {
                        return this._indexBuffer
                    }
                }, {
                    key: "vertexFormatBytes",
                    get: function() {
                        return this._vertexFormatBytes
                    }
                }]),
                e
            }(_n));
            Qy.OPACITY_OFFSET = 8;
            var $y, tv, ev, iv, rv, nv, sv, av, ov, lv, hv, uv, cv, _v, dv, pv, fv, gv, mv, yv, vv, Sv, Tv, bv, Ev, Av, Cv, Rv, Bv, xv, Dv, wv = dn.Enum.NONE | dn.Enum.UI_3D, Ov = t("UIDrawBatch", function() {
                function t() {
                    this.bufferBatch = null,
                    this.camera = null,
                    this.renderScene = null,
                    this.model = null,
                    this.texture = null,
                    this.sampler = null,
                    this.useLocalData = null,
                    this.isStatic = !1,
                    this.textureHash = 0,
                    this.samplerHash = 0,
                    this._passes = [],
                    this._shaders = [],
                    this._visFlags = wv,
                    this._inputAssember = null,
                    this._descriptorSet = null
                }
                var e = t.prototype;
                return e.destroy = function() {
                    this._passes = []
                }
                ,
                e.clear = function() {
                    this.bufferBatch = null,
                    this.inputAssembler = null,
                    this.descriptorSet = null,
                    this.camera = null,
                    this.texture = null,
                    this.sampler = null,
                    this.model = null,
                    this.isStatic = !1,
                    this.useLocalData = null,
                    this.visFlags = wv,
                    this.renderScene = null
                }
                ,
                e.fillPasses = function(t, e, i, r, n, s) {
                    if (t) {
                        var a = t.passes;
                        if (!a)
                            return;
                        var o = 0;
                        this._shaders.length = a.length;
                        for (var l = 0; l < a.length; l++) {
                            this._passes[l] || (this._passes[l] = new pn(ci.director.root));
                            var h = a[l]
                              , u = this._passes[l];
                            h.update(),
                            e || (e = h.depthStencilState,
                            i = 0),
                            r || (r = h.blendState,
                            n = 0),
                            -1 === n && (n = 0),
                            o = i << 16 | n,
                            u._initPassFromTarget(h, e, r, o),
                            this._shaders[l] = u.getShaderVariant(s)
                        }
                    }
                }
                ,
                Je(t, [{
                    key: "native",
                    get: function() {
                        return this._nativeObj
                    }
                }, {
                    key: "inputAssembler",
                    get: function() {
                        return this._inputAssember
                    },
                    set: function(t) {
                        this._inputAssember = t
                    }
                }, {
                    key: "descriptorSet",
                    get: function() {
                        return this._descriptorSet
                    },
                    set: function(t) {
                        this._descriptorSet = t
                    }
                }, {
                    key: "visFlags",
                    get: function() {
                        return this._visFlags
                    },
                    set: function(t) {
                        this._visFlags = t
                    }
                }, {
                    key: "passes",
                    get: function() {
                        return this._passes
                    }
                }, {
                    key: "shaders",
                    get: function() {
                        return this._shaders
                    }
                }]),
                t
            }()), Pv = function(e) {
                return t({
                    UIStaticBatch: e,
                    UIStaticBatchComponent: e
                }),
                e
            }(($y = Ti("cc.UIStaticBatch"),
            tv = Ii(),
            ev = Fi(),
            iv = Li(110),
            rv = ki(),
            $y(nv = tv(nv = ev(nv = iv((av = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._init = !1,
                    e._meshBuffer = null,
                    e._dirty = !0,
                    e._lastMeshBuffer = null,
                    e._uiDrawBatchList = [],
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onLoad = function() {
                    var t = this._getBatcher();
                    if (t) {
                        var e = Xf
                          , i = new Qy(t);
                        i.initialize(e, this._arrivalMaxBuffer.bind(this)),
                        this._meshBuffer = i
                    }
                }
                ,
                i.onDestroy = function() {
                    t.prototype.onDestroy.call(this),
                    this._clearData(),
                    this._meshBuffer && (this._meshBuffer.destroy(),
                    this._meshBuffer = null)
                }
                ,
                i.updateAssembler = function(t) {
                    t.currIsStatic = !0,
                    this._dirty && (t.finishMergeBatches(),
                    this._lastMeshBuffer = t.currBufferBatch,
                    t.currBufferBatch = this._meshBuffer,
                    t.currStaticRoot = this),
                    this._init && (t.finishMergeBatches(),
                    t.commitStaticBatch(this))
                }
                ,
                i.postUpdateAssembler = function(t) {
                    this._dirty && (t.finishMergeBatches(),
                    t.currBufferBatch = this._lastMeshBuffer,
                    t.currStaticRoot = null,
                    this._dirty = !1,
                    this._init = !0,
                    this.node._static = !0,
                    this._meshBuffer.uploadBuffers()),
                    t.currIsStatic = !1
                }
                ,
                i.markAsDirty = function() {
                    this._getBatcher() && (this.node._static = !1,
                    this._dirty = !0,
                    this._init = !1,
                    this._clearData())
                }
                ,
                i._requireDrawBatch = function() {
                    var t = new Ov;
                    return t.isStatic = !0,
                    this._uiDrawBatchList.push(t),
                    t
                }
                ,
                i._clearData = function() {
                    if (this._meshBuffer) {
                        this._meshBuffer.reset();
                        for (var t = this._getBatcher(), e = 0; e < this._uiDrawBatchList.length; e++)
                            this._uiDrawBatchList[e].destroy(t)
                    }
                    this._uiDrawBatchList.length = 0,
                    this._init = !1
                }
                ,
                i._getBatcher = function() {
                    return Ur.root && Ur.root.batcher2D ? Ur.root.batcher2D : (ii(9301),
                    null)
                }
                ,
                i._arrivalMaxBuffer = function() {
                    var t = this._getBatcher();
                    t && t.autoMergeBatches(),
                    ii(9300)
                }
                ,
                Je(e, [{
                    key: "color",
                    get: function() {
                        return this._color
                    },
                    set: function(t) {
                        this._color !== t && this._color.set(t)
                    }
                }, {
                    key: "drawBatchList",
                    get: function() {
                        return this._uiDrawBatchList
                    }
                }]),
                e
            }(ef),
            Ei((sv = av).prototype, "color", [Rr, rv], Object.getOwnPropertyDescriptor(sv.prototype, "color"), sv.prototype),
            nv = sv)) || nv) || nv) || nv) || nv)), Mv = t("LabelShadow", (ov = Ti("cc.LabelShadow"),
            lv = Ii(),
            hv = Li(110),
            uv = Fi(),
            cv = Zr(af),
            _v = Ni(),
            dv = Ni(),
            pv = Ni(),
            ov(fv = lv(fv = hv(fv = uv(fv = cv(fv = Ri((Sv = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "_color", mv, Gi(e)),
                    Oi(e, "_offset", yv, Gi(e)),
                    Oi(e, "_blur", vv, Gi(e)),
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onEnable = function() {
                    this._updateRenderData()
                }
                ,
                i.onDisable = function() {
                    this._updateRenderData()
                }
                ,
                i._updateRenderData = function() {
                    var t = this.node.getComponent(af);
                    t && t.updateRenderData(!0)
                }
                ,
                Je(e, [{
                    key: "color",
                    get: function() {
                        return this._color
                    },
                    set: function(t) {
                        this._color !== t && (this._color.set(t),
                        this._updateRenderData())
                    }
                }, {
                    key: "offset",
                    get: function() {
                        return this._offset
                    },
                    set: function(t) {
                        this._offset = t,
                        this._updateRenderData()
                    }
                }, {
                    key: "blur",
                    get: function() {
                        return this._blur
                    },
                    set: function(t) {
                        this._blur = t,
                        this._updateRenderData()
                    }
                }]),
                e
            }(Ki),
            mv = Ei((gv = Sv).prototype, "_color", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Zi(0,0,0,255)
                }
            }),
            yv = Ei(gv.prototype, "_offset", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Br(2,2)
                }
            }),
            vv = Ei(gv.prototype, "_blur", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 2
                }
            }),
            Ei(gv.prototype, "color", [_v], Object.getOwnPropertyDescriptor(gv.prototype, "color"), gv.prototype),
            Ei(gv.prototype, "offset", [dv], Object.getOwnPropertyDescriptor(gv.prototype, "offset"), gv.prototype),
            Ei(gv.prototype, "blur", [pv], Object.getOwnPropertyDescriptor(gv.prototype, "blur"), gv.prototype),
            fv = gv)) || fv) || fv) || fv) || fv) || fv) || fv)), Iv = function(e) {
                return t({
                    UIOpacity: e,
                    UIOpacityComponent: e
                }),
                e
            }((Tv = Ti("cc.UIOpacity"),
            bv = Ii(),
            Ev = Li(110),
            Av = Fi(),
            Cv = Ni(),
            Tv(Rv = bv(Rv = Ev(Rv = Av(Rv = Ri((Dv = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "_opacity", xv, Gi(e)),
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onEnable = function() {
                    this.node._uiProps.localOpacity = this._opacity / 255
                }
                ,
                i.onDisable = function() {
                    this.node._uiProps.localOpacity = 1
                }
                ,
                Je(e, [{
                    key: "opacity",
                    get: function() {
                        return this._opacity
                    },
                    set: function(t) {
                        this._opacity !== t && (t = fn(t, 0, 255),
                        this._opacity = t,
                        this.node._uiProps.localOpacity = t / 255)
                    }
                }]),
                e
            }(Ki),
            Ei((Bv = Dv).prototype, "opacity", [Ai, Cv], Object.getOwnPropertyDescriptor(Bv.prototype, "opacity"), Bv.prototype),
            xv = Ei(Bv.prototype, "_opacity", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 255
                }
            }),
            Rv = Bv)) || Rv) || Rv) || Rv) || Rv) || Rv));
            ci.MaskComponent = Dg,
            Vi.setClassAlias(Dg, "cc.MaskComponent"),
            ci.LabelComponent = af,
            Vi.setClassAlias(af, "cc.LabelComponent"),
            ci.LabelOutlineComponent = Gm,
            Vi.setClassAlias(Gm, "cc.LabelOutlineComponent"),
            ci.RichTextComponent = qy,
            Vi.setClassAlias(qy, "cc.RichTextComponent"),
            ci.SpriteComponent = ey,
            Vi.setClassAlias(ey, "cc.SpriteComponent"),
            ci.UIModelComponent = Jy,
            Vi.setClassAlias(Jy, "cc.UIModelComponent"),
            ci.GraphicsComponent = Ag,
            Vi.setClassAlias(Ag, "cc.GraphicsComponent"),
            Vi.setClassAlias(Pv, "cc.UIStaticBatchComponent"),
            Vi.setClassAlias(Iv, "cc.UIOpacityComponent");
            var Lv = function(t, e, i) {
                this.i = void 0,
                this.x = void 0,
                this.y = void 0,
                this.prev = null,
                this.next = null,
                this.z = 0,
                this.prevZ = null,
                this.nextZ = null,
                this.steiner = !1,
                this.i = t,
                this.x = e,
                this.y = i
            };
            function Fv(t, e, i, r, n) {
                var s = 0
                  , a = null;
                if (n === function(t, e, i, r) {
                    for (var n = 0, s = e, a = i - r; s < i; s += r)
                        n += (t[a] - t[s]) * (t[s + 1] + t[a + 1]),
                        a = s;
                    return n
                }(t, e, i, r) > 0)
                    for (s = e; s < i; s += r)
                        a = tS(s, t[s], t[s + 1], a);
                else
                    for (s = i - r; s >= e; s -= r)
                        a = tS(s, t[s], t[s + 1], a);
                return a && qv(a, a.next) && (eS(a),
                a = a.next),
                a
            }
            function Nv(t, e) {
                if (void 0 === e && (e = null),
                !t)
                    return t;
                e || (e = t);
                var i = t
                  , r = !1;
                do {
                    if (r = !1,
                    i.steiner || !qv(i, i.next) && 0 !== Zv(i.prev, i, i.next))
                        i = i.next;
                    else {
                        if (eS(i),
                        (i = e = i.prev) === i.next)
                            return null;
                        r = !0
                    }
                } while (r || i !== e);
                return e
            }
            function kv(t, e, i, r, n, s, a) {
                if (void 0 === a && (a = 0),
                t) {
                    !a && s && function(t, e, i, r) {
                        var n = t;
                        do {
                            null === n.z && (n.z = Xv(n.x, n.y, e, i, r)),
                            n.prevZ = n.prev,
                            n.nextZ = n.next,
                            n = n.next
                        } while (n !== t);
                        n.prevZ.nextZ = null,
                        n.prevZ = null,
                        function(t) {
                            var e = 0
                              , i = null
                              , r = null
                              , n = null
                              , s = null
                              , a = 0
                              , o = 0
                              , l = 0
                              , h = 1;
                            do {
                                for (i = t,
                                t = null,
                                s = null,
                                a = 0; i; ) {
                                    for (a++,
                                    r = i,
                                    o = 0,
                                    e = 0; e < h && (o++,
                                    r = r.nextZ); e++)
                                        ;
                                    for (l = h; o > 0 || l > 0 && r; )
                                        0 === o ? (n = r,
                                        r = r.nextZ,
                                        l--) : 0 !== l && r ? i.z <= r.z ? (n = i,
                                        i = i.nextZ,
                                        o--) : (n = r,
                                        r = r.nextZ,
                                        l--) : (n = i,
                                        i = i.nextZ,
                                        o--),
                                        s ? s.nextZ = n : t = n,
                                        n.prevZ = s,
                                        s = n;
                                    i = r
                                }
                                s.nextZ = null,
                                h *= 2
                            } while (a > 1)
                        }(n)
                    }(t, r, n, s);
                    for (var o = t, l = null, h = null; t.prev !== t.next; )
                        if (l = t.prev,
                        h = t.next,
                        s ? zv(t, r, n, s) : Gv(t))
                            e.push(l.i / i),
                            e.push(t.i / i),
                            e.push(h.i / i),
                            eS(t),
                            t = h.next,
                            o = h.next;
                        else if ((t = h) === o) {
                            a ? 1 === a ? kv(t = Uv(t, e, i), e, i, r, n, s, 2) : 2 === a && Hv(t, e, i, r, n, s) : kv(Nv(t), e, i, r, n, s, 1);
                            break
                        }
                }
            }
            function Gv(t) {
                var e = t.prev
                  , i = t
                  , r = t.next;
                if (Zv(e, i, r) >= 0)
                    return !1;
                for (var n = t.next.next; n !== t.prev; ) {
                    if (Yv(e.x, e.y, i.x, i.y, r.x, r.y, n.x, n.y) && Zv(n.prev, n, n.next) >= 0)
                        return !1;
                    n = n.next
                }
                return !0
            }
            function zv(t, e, i, r) {
                var n = t.prev
                  , s = t
                  , a = t.next;
                if (Zv(n, s, a) >= 0)
                    return !1;
                for (var o = n.x < s.x ? n.x < a.x ? n.x : a.x : s.x < a.x ? s.x : a.x, l = n.y < s.y ? n.y < a.y ? n.y : a.y : s.y < a.y ? s.y : a.y, h = n.x > s.x ? n.x > a.x ? n.x : a.x : s.x > a.x ? s.x : a.x, u = n.y > s.y ? n.y > a.y ? n.y : a.y : s.y > a.y ? s.y : a.y, c = Xv(o, l, e, i, r), _ = Xv(h, u, e, i, r), d = t.nextZ; d && d.z <= _; ) {
                    if (d !== t.prev && d !== t.next && Yv(n.x, n.y, s.x, s.y, a.x, a.y, d.x, d.y) && Zv(d.prev, d, d.next) >= 0)
                        return !1;
                    d = d.nextZ
                }
                for (d = t.prevZ; d && d.z >= c; ) {
                    if (d !== t.prev && d !== t.next && Yv(n.x, n.y, s.x, s.y, a.x, a.y, d.x, d.y) && Zv(d.prev, d, d.next) >= 0)
                        return !1;
                    d = d.prevZ
                }
                return !0
            }
            function Uv(t, e, i) {
                var r = t;
                do {
                    var n = r.prev
                      , s = r.next.next;
                    !qv(n, s) && Jv(n, r, r.next, s) && Qv(n, s) && Qv(s, n) && (e.push(n.i / i),
                    e.push(r.i / i),
                    e.push(s.i / i),
                    eS(r),
                    eS(r.next),
                    r = t = s),
                    r = r.next
                } while (r !== t);
                return r
            }
            function Hv(t, e, i, r, n, s) {
                var a = t;
                do {
                    for (var o = a.next.next; o !== a.prev; ) {
                        if (a.i !== o.i && Kv(a, o)) {
                            var l = $v(a, o);
                            return a = Nv(a, a.next),
                            l = Nv(l, l.next),
                            kv(a, e, i, r, n, s),
                            void kv(l, e, i, r, n, s)
                        }
                        o = o.next
                    }
                    a = a.next
                } while (a !== t)
            }
            function Vv(t, e) {
                return t.x - e.x
            }
            function Wv(t, e) {
                if (e = function(t, e) {
                    var i = e
                      , r = t.x
                      , n = t.y
                      , s = -1 / 0
                      , a = null;
                    do {
                        if (n <= i.y && n >= i.next.y) {
                            var o = i.x + (n - i.y) * (i.next.x - i.x) / (i.next.y - i.y);
                            if (o <= r && o > s) {
                                if (s = o,
                                o === r) {
                                    if (n === i.y)
                                        return i;
                                    if (n === i.next.y)
                                        return i.next
                                }
                                a = i.x < i.next.x ? i : i.next
                            }
                        }
                        i = i.next
                    } while (i !== e);
                    if (!a)
                        return null;
                    if (r === s)
                        return a.prev;
                    var l, h = a, u = a.x, c = a.y, _ = 1 / 0;
                    for (i = a.next; i !== h; )
                        r >= i.x && i.x >= u && Yv(n < c ? r : s, n, u, c, n < c ? s : r, n, i.x, i.y) && ((l = Math.abs(n - i.y) / (r - i.x)) < _ || l === _ && i.x > a.x) && Qv(i, t) && (a = i,
                        _ = l),
                        i = i.next;
                    return a
                }(t, e)) {
                    var i = $v(e, t);
                    Nv(i, i.next)
                }
            }
            function Xv(t, e, i, r, n) {
                return (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = 32767 * (t - i) / n) | t << 8)) | t << 4)) | t << 2)) | t << 1)) | (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - r) / n) | e << 8)) | e << 4)) | e << 2)) | e << 1)) << 1
            }
            function jv(t) {
                var e = t
                  , i = t;
                do {
                    e.x < i.x && (i = e),
                    e = e.next
                } while (e !== t);
                return i
            }
            function Yv(t, e, i, r, n, s, a, o) {
                return (n - a) * (e - o) - (t - a) * (s - o) >= 0 && (t - a) * (r - o) - (i - a) * (e - o) >= 0 && (i - a) * (s - o) - (n - a) * (r - o) >= 0
            }
            function Kv(t, e) {
                return t.next.i !== e.i && t.prev.i !== e.i && !function(t, e) {
                    var i = t;
                    do {
                        if (i.i !== t.i && i.next.i !== t.i && i.i !== e.i && i.next.i !== e.i && Jv(i, i.next, t, e))
                            return !0;
                        i = i.next
                    } while (i !== t);
                    return !1
                }(t, e) && Qv(t, e) && Qv(e, t) && function(t, e) {
                    var i = t
                      , r = !1
                      , n = (t.x + e.x) / 2
                      , s = (t.y + e.y) / 2;
                    do {
                        i.y > s != i.next.y > s && n < (i.next.x - i.x) * (s - i.y) / (i.next.y - i.y) + i.x && (r = !r),
                        i = i.next
                    } while (i !== t);
                    return r
                }(t, e)
            }
            function Zv(t, e, i) {
                return (e.y - t.y) * (i.x - e.x) - (e.x - t.x) * (i.y - e.y)
            }
            function qv(t, e) {
                return t.x === e.x && t.y === e.y
            }
            function Jv(t, e, i, r) {
                return !!(qv(t, e) && qv(i, r) || qv(t, r) && qv(i, e)) || Zv(t, e, i) > 0 != Zv(t, e, r) > 0 && Zv(i, r, t) > 0 != Zv(i, r, e) > 0
            }
            function Qv(t, e) {
                return Zv(t.prev, t, t.next) < 0 ? Zv(t, e, t.next) >= 0 && Zv(t, t.prev, e) >= 0 : Zv(t, e, t.prev) < 0 || Zv(t, t.next, e) < 0
            }
            function $v(t, e) {
                var i = new Lv(t.i,t.x,t.y)
                  , r = new Lv(e.i,e.x,e.y)
                  , n = t.next
                  , s = e.prev;
                return t.next = e,
                e.prev = t,
                i.next = n,
                n.prev = i,
                r.next = i,
                i.prev = r,
                s.next = r,
                r.prev = s,
                r
            }
            function tS(t, e, i, r) {
                var n = new Lv(t,e,i);
                return r ? (n.next = r.next,
                n.prev = r,
                r.next.prev = n,
                r.next = n) : (n.prev = n,
                n.next = n),
                n
            }
            function eS(t) {
                t.next.prev = t.prev,
                t.prev.next = t.next,
                t.prevZ && (t.prevZ.nextZ = t.nextZ),
                t.nextZ && (t.nextZ.prevZ = t.prevZ)
            }
            function iS(t, e, i) {
                i = i || 3;
                var r = e ? e.length : 0
                  , n = r ? e[0] * i : t.length
                  , s = Fv(t, 0, n, i, !0)
                  , a = [];
                if (!s)
                    return a;
                var o = 0
                  , l = 0
                  , h = 0
                  , u = 0
                  , c = 0
                  , _ = 0
                  , d = 0;
                if (r && (s = function(t, e, i, r) {
                    var n, s = [], a = 0, o = null;
                    for (a = 0,
                    n = e.length; a < n; a++)
                        (o = Fv(t, e[a] * r, a < n - 1 ? e[a + 1] * r : t.length, r, !1)) && (o === o.next && (o.steiner = !0),
                        s.push(jv(o)));
                    if (s.sort(Vv),
                    !i)
                        return i;
                    for (a = 0; a < s.length; a++)
                        Wv(s[a], i),
                        i = Nv(i, i.next);
                    return i
                }(t, e, s, i)),
                t.length > 80 * i) {
                    o = h = t[0],
                    l = u = t[1];
                    for (var p = i; p < n; p += i)
                        (c = t[p]) < o && (o = c),
                        (_ = t[p + 1]) < l && (l = _),
                        c > h && (h = c),
                        _ > u && (u = _);
                    d = Math.max(h - o, u - l)
                }
                return kv(s, a, i, o, l, d),
                a
            }
            for (var rS = Math.PI, nS = Math.min, sS = Math.max, aS = Math.ceil, oS = Math.acos, lS = Math.cos, hS = Math.sin, uS = Math.atan2, cS = null, _S = null, dS = new Zi, pS = [], fS = 0; fS < 4; fS++)
                pS.push(new di);
            function gS(t, e, i) {
                return t < e ? e : t > i ? i : t
            }
            var mS = {
                useModel: !0,
                updateRenderData: function() {},
                fillBuffers: function() {},
                renderIA: function() {},
                getRenderData: function(t, e) {
                    if (!_S)
                        return null;
                    var i = _S.getRenderDataList()
                      , r = i[_S.dataOffset];
                    if (!r)
                        return null;
                    var n = r
                      , s = n ? n.vertexStart + e : 0;
                    return (s > 65535 || 3 * s > 131070) && (++_S.dataOffset,
                    _S.dataOffset < i.length ? r = i[_S.dataOffset] : (r = _S.requestRenderData(),
                    i[_S.dataOffset] = r),
                    n = r),
                    n && n.vertexCount < s && n.request(e, 3 * e),
                    r
                },
                stroke: function(t) {
                    Zi.copy(dS, t.strokeColor),
                    t.impl && (this._flattenPaths(t.impl),
                    this._expandStroke(t),
                    t.impl.updatePathOffset = !0,
                    this.end(t))
                },
                fill: function(t) {
                    Zi.copy(dS, t.fillColor),
                    this._expandFill(t),
                    t.impl && (t.impl.updatePathOffset = !0),
                    this.end(t)
                },
                end: function(t) {
                    t.markForUpdateRenderData()
                },
                _expandStroke: function(t) {
                    var e, i, r, n, s = .5 * t.lineWidth, a = t.lineCap, o = t.lineJoin, l = t.miterLimit;
                    if (_S = t.impl) {
                        var h = (e = s,
                        i = rS,
                        r = _S.tessTol,
                        n = 2 * oS(e / (e + r)),
                        sS(2, aS(i / n)));
                        this._calculateJoins(_S, s, o, l);
                        for (var u = _S.paths, c = 0, _ = _S.pathOffset, d = _S.pathLength; _ < d; _++) {
                            var p = u[_]
                              , f = p.points.length;
                            o === nf.ROUND ? c += 2 * (f + p.bevel * (h + 2) + 1) : c += 2 * (f + 5 * p.bevel + 1),
                            p.closed || (a === rf.ROUND ? c += 2 * (2 * h + 2) : c += 12)
                        }
                        var g = cS = this.getRenderData(t, c);
                        if (g) {
                            for (var m = g.vData, y = g.iData, v = _S.pathOffset, S = _S.pathLength; v < S; v++) {
                                var T = u[v]
                                  , b = T.points
                                  , E = b.length
                                  , A = g.vertexStart
                                  , C = void 0
                                  , R = void 0
                                  , B = 0
                                  , x = 0
                                  , D = T.closed;
                                if (D ? (C = b[E - 1],
                                R = b[0],
                                B = 0,
                                x = E) : (C = b[0],
                                R = b[1],
                                B = 1,
                                x = E - 1),
                                R = R || C,
                                !D) {
                                    var w = new zf(R.x,R.y);
                                    w.subtract(C),
                                    w.normalize();
                                    var O = w.x
                                      , P = w.y;
                                    a === rf.BUTT ? this._buttCapStart(C, O, P, s, 0) : a === rf.SQUARE ? this._buttCapStart(C, O, P, s, s) : a === rf.ROUND && this._roundCapStart(C, O, P, s, h)
                                }
                                for (var M = B; M < x; ++M)
                                    o === nf.ROUND ? this._roundJoin(C, R, s, s, h) : 0 != (R.flags & (sf.PT_BEVEL | sf.PT_INNERBEVEL)) ? this._bevelJoin(C, R, s, s) : (this._vSet(R.x + R.dmx * s, R.y + R.dmy * s, 1),
                                    this._vSet(R.x - R.dmx * s, R.y - R.dmy * s, -1)),
                                    C = R,
                                    R = b[M + 1];
                                if (D) {
                                    var I = 8 * A;
                                    this._vSet(m[I], m[I + 1], 1),
                                    this._vSet(m[I + 8], m[I + 8 + 1], -1)
                                } else {
                                    var L = new zf(R.x,R.y);
                                    L.subtract(C),
                                    L.normalize();
                                    var F = L.x
                                      , N = L.y;
                                    a === rf.BUTT ? this._buttCapEnd(R, F, N, s, 0) : a === rf.SQUARE ? this._buttCapEnd(R, F, N, s, s) : a === rf.ROUND && this._roundCapEnd(R, F, N, s, h)
                                }
                                for (var k = g.indicesStart, G = A + 2, z = g.vertexStart; G < z; G++)
                                    y[k++] = G - 2,
                                    y[k++] = G - 1,
                                    y[k++] = G;
                                g.indicesStart = k
                            }
                            cS = null,
                            _S = null
                        }
                    }
                },
                _expandFill: function(t) {
                    if (_S = t.impl) {
                        for (var e = _S.paths, i = 0, r = _S.pathOffset, n = _S.pathLength; r < n; r++)
                            i += e[r].points.length;
                        var s = cS = this.getRenderData(t, i);
                        if (s) {
                            for (var a = s, o = a.vData, l = a.iData, h = _S.pathOffset, u = _S.pathLength; h < u; h++) {
                                var c = e[h]
                                  , _ = c.points
                                  , d = _.length;
                                if (0 !== d) {
                                    for (var p = s.vertexStart, f = 0; f < d; ++f)
                                        this._vSet(_[f].x, _[f].y);
                                    var g = s.indicesStart;
                                    if (c.complex) {
                                        for (var m = [], y = p, v = s.vertexStart; y < v; y++) {
                                            var S = 8 * y;
                                            m.push(o[S++]),
                                            m.push(o[S++]),
                                            m.push(o[S++])
                                        }
                                        var T = iS(m, null, 3);
                                        if (!T || 0 === T.length)
                                            continue;
                                        for (var b = 0, E = T.length; b < E; b++)
                                            l[g++] = T[b] + p
                                    } else
                                        for (var A = p, C = p + 2, R = a.vertexStart; C < R; C++)
                                            l[g++] = A,
                                            l[g++] = C - 1,
                                            l[g++] = C;
                                    a.indicesStart = g
                                }
                            }
                            cS = null,
                            _S = null
                        }
                    }
                },
                _calculateJoins: function(t, e, i, r) {
                    var n = 0;
                    e > 0 && (n = 1 / e);
                    for (var s = t.paths, a = t.pathOffset, o = t.pathLength; a < o; a++) {
                        var l = s[a]
                          , h = l.points
                          , u = h.length
                          , c = h[u - 1]
                          , _ = h[0];
                        l.bevel = 0;
                        for (var d = 0; d < u; d++) {
                            var p, f, g = c.dy, m = -c.dx, y = _.dy, v = -_.dx;
                            if (_.dmx = .5 * (g + y),
                            _.dmy = .5 * (m + v),
                            (p = _.dmx * _.dmx + _.dmy * _.dmy) > 1e-6) {
                                var S = 1 / p;
                                S > 600 && (S = 600),
                                _.dmx *= S,
                                _.dmy *= S
                            }
                            _.dx * c.dy - c.dx * _.dy > 0 && (_.flags |= sf.PT_LEFT),
                            p * (f = sS(11, nS(c.len, _.len) * n)) * f < 1 && (_.flags |= sf.PT_INNERBEVEL),
                            _.flags & sf.PT_CORNER && (p * r * r < 1 || i === nf.BEVEL || i === nf.ROUND) && (_.flags |= sf.PT_BEVEL),
                            0 != (_.flags & (sf.PT_BEVEL | sf.PT_INNERBEVEL)) && l.bevel++,
                            c = _,
                            _ = h[d + 1]
                        }
                    }
                },
                _flattenPaths: function(t) {
                    for (var e = t.paths, i = t.pathOffset, r = t.pathLength; i < r; i++) {
                        var n = e[i]
                          , s = n.points
                          , a = s[s.length - 1]
                          , o = s[0];
                        s.length > 2 && a.equals(o) && (n.closed = !0,
                        s.pop(),
                        a = s[s.length - 1]);
                        for (var l = 0, h = s.length; l < h; l++) {
                            var u = new zf(o.x,o.y);
                            u.subtract(a),
                            a.len = u.length(),
                            (u.x || u.y) && u.normalize(),
                            a.dx = u.x,
                            a.dy = u.y,
                            a = o,
                            o = s[l + 1]
                        }
                    }
                },
                _chooseBevel: function(t, e, i, r) {
                    var n = i.x
                      , s = i.y
                      , a = 0
                      , o = 0
                      , l = 0
                      , h = 0;
                    return 0 !== t ? (a = n + e.dy * r,
                    o = s - e.dx * r,
                    l = n + i.dy * r,
                    h = s - i.dx * r) : (a = l = n + i.dmx * r,
                    o = h = s + i.dmy * r),
                    [a, o, l, h]
                },
                _buttCapStart: function(t, e, i, r, n) {
                    var s = t.x - e * n
                      , a = t.y - i * n
                      , o = i
                      , l = -e;
                    this._vSet(s + o * r, a + l * r, 1),
                    this._vSet(s - o * r, a - l * r, -1)
                },
                _buttCapEnd: function(t, e, i, r, n) {
                    var s = t.x + e * n
                      , a = t.y + i * n
                      , o = i
                      , l = -e;
                    this._vSet(s + o * r, a + l * r, 1),
                    this._vSet(s - o * r, a - l * r, -1)
                },
                _roundCapStart: function(t, e, i, r, n) {
                    for (var s = t.x, a = t.y, o = i, l = -e, h = 0; h < n; h++) {
                        var u = h / (n - 1) * rS
                          , c = lS(u) * r
                          , _ = hS(u) * r;
                        this._vSet(s - o * c - e * _, a - l * c - i * _, 1),
                        this._vSet(s, a, 0)
                    }
                    this._vSet(s + o * r, a + l * r, 1),
                    this._vSet(s - o * r, a - l * r, -1)
                },
                _roundCapEnd: function(t, e, i, r, n) {
                    var s = t.x
                      , a = t.y
                      , o = i
                      , l = -e;
                    this._vSet(s + o * r, a + l * r, 1),
                    this._vSet(s - o * r, a - l * r, -1);
                    for (var h = 0; h < n; h++) {
                        var u = h / (n - 1) * rS
                          , c = lS(u) * r
                          , _ = hS(u) * r;
                        this._vSet(s, a, 0),
                        this._vSet(s - o * c + e * _, a - l * c + i * _, 1)
                    }
                },
                _roundJoin: function(t, e, i, r, n) {
                    var s = t.dy
                      , a = -t.dx
                      , o = e.dy
                      , l = -e.dx
                      , h = e.x
                      , u = e.y;
                    if (0 != (e.flags & sf.PT_LEFT)) {
                        var c = this._chooseBevel(e.flags & sf.PT_INNERBEVEL, t, e, i)
                          , _ = c[0]
                          , d = c[1]
                          , p = c[2]
                          , f = c[3]
                          , g = uS(-a, -s)
                          , m = uS(-l, -o);
                        m > g && (m -= 2 * rS),
                        this._vSet(_, d, 1),
                        this._vSet(h - s * r, e.y - a * r, -1);
                        for (var y = gS(aS((g - m) / rS) * n, 2, n), v = 0; v < y; v++) {
                            var S = g + v / (y - 1) * (m - g)
                              , T = h + lS(S) * r
                              , b = u + hS(S) * r;
                            this._vSet(h, u, 0),
                            this._vSet(T, b, -1)
                        }
                        this._vSet(p, f, 1),
                        this._vSet(h - o * r, u - l * r, -1)
                    } else {
                        var E = this._chooseBevel(e.flags & sf.PT_INNERBEVEL, t, e, -r)
                          , A = E[0]
                          , C = E[1]
                          , R = E[2]
                          , B = E[3]
                          , x = uS(a, s)
                          , D = uS(l, o);
                        D < x && (D += 2 * rS),
                        this._vSet(h + s * r, u + a * r, 1),
                        this._vSet(A, C, -1);
                        for (var w = gS(aS((D - x) / rS) * n, 2, n), O = 0; O < w; O++) {
                            var P = x + O / (w - 1) * (D - x)
                              , M = h + lS(P) * i
                              , I = u + hS(P) * i;
                            this._vSet(M, I, 1),
                            this._vSet(h, u, 0)
                        }
                        this._vSet(h + o * r, u + l * r, 1),
                        this._vSet(R, B, -1)
                    }
                },
                _bevelJoin: function(t, e, i, r) {
                    var n = 0
                      , s = 0
                      , a = 0
                      , o = 0
                      , l = 0
                      , h = 0
                      , u = 0
                      , c = 0
                      , _ = t.dy
                      , d = -t.dx
                      , p = e.dy
                      , f = -e.dx;
                    if (e.flags & sf.PT_LEFT) {
                        var g = this._chooseBevel(e.flags & sf.PT_INNERBEVEL, t, e, i);
                        l = g[0],
                        h = g[1],
                        u = g[2],
                        c = g[3],
                        this._vSet(l, h, 1),
                        this._vSet(e.x - _ * r, e.y - d * r, -1),
                        this._vSet(u, c, 1),
                        this._vSet(e.x - p * r, e.y - f * r, -1)
                    } else {
                        var m = this._chooseBevel(e.flags & sf.PT_INNERBEVEL, t, e, -r);
                        n = m[0],
                        s = m[1],
                        a = m[2],
                        o = m[3],
                        this._vSet(e.x + _ * i, e.y + d * i, 1),
                        this._vSet(n, s, -1),
                        this._vSet(e.x + p * i, e.y + f * i, 1),
                        this._vSet(a, o, -1)
                    }
                },
                _vSet: function(t, e, i) {
                    if (void 0 === i && (i = 0),
                    cS) {
                        var r = cS
                          , n = 8 * r.vertexStart
                          , s = r.vData;
                        s[n++] = t,
                        s[n++] = e,
                        s[n++] = 0,
                        Zi.toArray(s, dS, n),
                        n += 4,
                        s[n++] = i,
                        r.vertexStart++
                    }
                }
            }
              , yS = t("graphicsAssembler", {
                getAssembler: function() {
                    return mS
                }
            });
            Ag.Assembler = yS;
            var vS = function() {
                this.char = "",
                this.valid = !0,
                this.x = 0,
                this.y = 0,
                this.line = 0,
                this.hash = ""
            }
              , SS = new Or
              , TS = null
              , bS = null
              , ES = []
              , AS = []
              , CS = []
              , RS = []
              , BS = new Pr
              , xS = new Pr
              , DS = new Br
              , wS = null
              , OS = 0
              , PS = 0
              , MS = 0
              , IS = 0
              , LS = 0
              , FS = 1
              , NS = null
              , kS = ""
              , GS = 0
              , zS = 0
              , US = 0
              , HS = 0
              , VS = 0
              , WS = 0
              , XS = 0
              , jS = !1
              , YS = 0
              , KS = 0
              , ZS = 0
              , qS = {
                updateRenderData: function(t) {
                    t.renderData && TS !== t && (t.renderData.vertDirty && (bS = (TS = t).node._uiProps.uiTransformComp,
                    this._updateFontFamily(t),
                    this._updateProperties(t),
                    this._updateLabelInfo(t),
                    this._updateContent(),
                    TS.actualFontSize = GS,
                    bS.setContentSize(xS),
                    TS.renderData.vertDirty = TS.renderData.uvDirty = !1,
                    TS.markForUpdateRenderData(!1),
                    TS = null,
                    this._resetProperties()),
                    t.spriteFrame && t.renderData.updateRenderData(t, t.spriteFrame))
                },
                _updateFontScale: function() {
                    FS = GS / zS
                },
                _updateFontFamily: function(t) {
                    var e = t.font;
                    NS = e.spriteFrame,
                    wS = e.fntConfig,
                    rd.fontAtlas = e.fontDefDictionary,
                    Xc.packToDynamicAtlas(t, NS)
                },
                _updateLabelInfo: function() {
                    rd.hash = "",
                    rd.margin = 0
                },
                _updateProperties: function(t) {
                    kS = t.string.toString(),
                    GS = t.fontSize,
                    zS = wS ? wS.fontSize : t.fontSize,
                    US = t.horizontalAlign,
                    HS = t.verticalAlign,
                    VS = t.spacingX,
                    XS = t.overflow,
                    WS = t._lineHeight;
                    var e = bS.contentSize;
                    xS.width = e.width,
                    xS.height = e.height,
                    XS === $p.NONE ? (jS = !1,
                    xS.width += 2 * rd.margin,
                    xS.height += 2 * rd.margin) : XS === $p.RESIZE_HEIGHT ? (jS = !0,
                    xS.height += 2 * rd.margin) : jS = t.enableWrapText,
                    rd.lineHeight = WS,
                    rd.fontSize = GS,
                    this._setupBMFontOverflowMetrics()
                },
                _resetProperties: function() {
                    wS = null,
                    NS = null,
                    rd.hash = "",
                    rd.margin = 0
                },
                _updateContent: function() {
                    this._updateFontScale(),
                    this._computeHorizontalKerningForText(),
                    this._alignText()
                },
                _computeHorizontalKerningForText: function() {
                    for (var t = kS, e = t.length, i = wS.kerningDict, r = ES, n = -1, s = 0; s < e; ++s) {
                        var a = t.charCodeAt(s)
                          , o = i[n << 16 | 65535 & a] || 0;
                        r[s] = s < e - 1 ? o : 0,
                        n = a
                    }
                },
                _multilineTextWrap: function(t) {
                    for (var e = kS.length, i = 0, r = 0, n = 0, s = 0, a = 0, o = 0, l = 0, h = null, u = 0; u < e; ) {
                        var c = kS.charAt(u);
                        if ("\n" !== c) {
                            for (var _ = t(kS, u, e), d = o, p = l, f = a, g = r, m = !1, y = 0; y < _; ++y) {
                                var v = u + y;
                                if ("\r" !== (c = kS.charAt(v)))
                                    if (h = rd.fontAtlas.getLetterDefinitionForChar(c, rd)) {
                                        var S = g + h.offsetX * FS - rd.margin;
                                        if (jS && ZS > 0 && r > 0 && S + h.w * FS > ZS && !O_(c)) {
                                            CS.push(a),
                                            a = 0,
                                            i++,
                                            r = 0,
                                            n -= WS * this._getFontScale() + 0,
                                            m = !0;
                                            break
                                        }
                                        DS.x = S,
                                        DS.y = n - h.offsetY * FS,
                                        this._recordLetterInfo(DS, c, v, i),
                                        v + 1 < ES.length && v < e - 1 && (g += ES[v + 1]),
                                        g += h.xAdvance * FS + VS,
                                        f = DS.x + h.w * FS,
                                        d < DS.y && (d = DS.y),
                                        p > DS.y - h.h * FS && (p = DS.y - h.h * FS)
                                    } else
                                        this._recordPlaceholderInfo(v, c),
                                        console.log("Can't find letter definition in texture atlas " + wS.atlasName + " for letter:" + c);
                                else
                                    this._recordPlaceholderInfo(v, c)
                            }
                            m || (r = g,
                            o < d && (o = d),
                            l > p && (l = p),
                            s < (a = f) && (s = a),
                            u += _)
                        } else
                            CS.push(a),
                            a = 0,
                            i++,
                            r = 0,
                            n -= WS * this._getFontScale() + 0,
                            this._recordPlaceholderInfo(u, c),
                            u++
                    }
                    return CS.push(a),
                    PS = (OS = i + 1) * WS * this._getFontScale(),
                    OS > 1 && (PS += 0 * (OS - 1)),
                    xS.width = YS,
                    xS.height = KS,
                    YS <= 0 && (xS.width = parseFloat(s.toFixed(2)) + 2 * rd.margin),
                    KS <= 0 && (xS.height = parseFloat(PS.toFixed(2)) + 2 * rd.margin),
                    IS = xS.height,
                    LS = 0,
                    o > 0 && (IS = xS.height + o),
                    l < -PS && (LS = PS + l),
                    !0
                },
                _getFirstCharLen: function() {
                    return 1
                },
                _getFontScale: function() {
                    return XS === $p.SHRINK ? FS : 1
                },
                _getFirstWordLen: function(t, e, i) {
                    var r = t.charAt(e);
                    if (w_(r) || "\n" === r || O_(r))
                        return 1;
                    var n = 1
                      , s = rd.fontAtlas.getLetterDefinitionForChar(r, rd);
                    if (!s)
                        return n;
                    for (var a = s.xAdvance * FS + VS, o = e + 1; o < i && (r = t.charAt(o),
                    s = rd.fontAtlas.getLetterDefinitionForChar(r, rd)); ++o) {
                        if (a + s.offsetX * FS + s.w * FS > ZS && !O_(r) && ZS > 0)
                            return n;
                        if (a += s.xAdvance * FS + VS,
                        "\n" === r || O_(r) || w_(r))
                            break;
                        n++
                    }
                    return n
                },
                _multilineTextWrapByWord: function() {
                    return this._multilineTextWrap(this._getFirstWordLen)
                },
                _multilineTextWrapByChar: function() {
                    return this._multilineTextWrap(this._getFirstCharLen)
                },
                _recordPlaceholderInfo: function(t, e) {
                    if (t >= AS.length) {
                        var i = new vS;
                        AS.push(i)
                    }
                    AS[t].char = e,
                    AS[t].hash = "" + e.charCodeAt(0) + rd.hash,
                    AS[t].valid = !1
                },
                _recordLetterInfo: function(t, e, i, r) {
                    if (i >= AS.length) {
                        var n = new vS;
                        AS.push(n)
                    }
                    var s = "" + e.charCodeAt(0) + rd.hash;
                    AS[i].line = r,
                    AS[i].char = e,
                    AS[i].hash = s,
                    AS[i].valid = rd.fontAtlas.getLetter(s).valid,
                    AS[i].x = t.x,
                    AS[i].y = t.y
                },
                _alignText: function() {
                    PS = 0,
                    CS.length = 0,
                    this._multilineTextWrapByWord(),
                    this._computeAlignmentOffset(),
                    XS === $p.SHRINK && GS > 0 && this._isVerticalClamp() && this._shrinkLabelToContentSize(this._isVerticalClamp),
                    this._updateQuads() || XS === $p.SHRINK && this._shrinkLabelToContentSize(this._isHorizontalClamp)
                },
                _scaleFontSizeDown: function(t) {
                    var e = !0;
                    t || (t = .1,
                    e = !1),
                    GS = t,
                    e && this._updateContent()
                },
                _shrinkLabelToContentSize: function(t) {
                    for (var e = 0, i = 0 | GS, r = 0; e < i; ) {
                        var n = r = e + i + 1 >> 1;
                        if (n <= 0)
                            break;
                        FS = n / zS,
                        this._multilineTextWrapByWord(),
                        this._computeAlignmentOffset(),
                        t() ? i = r - 1 : e = r
                    }
                    e >= 0 && this._scaleFontSizeDown(e)
                },
                _isVerticalClamp: function() {
                    return PS > xS.height
                },
                _isHorizontalClamp: function() {
                    for (var t = !1, e = 0, i = kS.length; e < i; ++e) {
                        var r = AS[e];
                        if (r.valid) {
                            var n = rd.fontAtlas.getLetterDefinitionForChar(r.char, rd);
                            if (!n)
                                continue;
                            var s = r.x + n.w * FS
                              , a = r.line;
                            if (YS > 0)
                                if (jS) {
                                    if (CS[a] > xS.width && (s > xS.width || s < 0)) {
                                        t = !0;
                                        break
                                    }
                                } else if (s > xS.width) {
                                    t = !0;
                                    break
                                }
                        }
                    }
                    return t
                },
                _isHorizontalClamped: function(t, e) {
                    var i = CS[e]
                      , r = t > xS.width || t < 0;
                    return jS ? i > xS.width && r : r
                },
                _updateQuads: function() {
                    if (!TS)
                        return !1;
                    var t = NS ? NS.texture : rd.fontAtlas.getTexture()
                      , e = TS.renderData;
                    e.dataLength = e.vertexCount = e.indicesCount = 0;
                    for (var i = bS.anchorPoint, r = xS, n = i.x * r.width, s = i.y * r.height, a = !0, o = 0, l = kS.length; o < l; ++o) {
                        var h = AS[o];
                        if (h.valid) {
                            var u = rd.fontAtlas.getLetter(h.hash);
                            if (u) {
                                SS.height = u.h,
                                SS.width = u.w,
                                SS.x = u.u,
                                SS.y = u.v;
                                var c = h.y + MS;
                                if (KS > 0) {
                                    if (c > IS) {
                                        var _ = c - IS;
                                        SS.y += _,
                                        SS.height -= _,
                                        c -= _
                                    }
                                    c - u.h * FS < LS && XS === $p.CLAMP && (SS.height = c < LS ? 0 : (c - LS) / FS)
                                }
                                var d = h.line
                                  , p = h.x + u.w / 2 * FS + RS[d];
                                if (YS > 0 && this._isHorizontalClamped(p, d))
                                    if (XS === $p.CLAMP)
                                        SS.width = 0;
                                    else if (XS === $p.SHRINK) {
                                        if (xS.width > u.w) {
                                            a = !1;
                                            break
                                        }
                                        SS.width = 0
                                    }
                                if (SS.height > 0 && SS.width > 0) {
                                    var f = this._determineRect()
                                      , g = h.x + RS[h.line];
                                    this.appendQuad(TS, t, SS, f, g - n, c - s, FS)
                                }
                            } else
                                console.warn("Can't find letter in this bitmap-font")
                        }
                    }
                    return a
                },
                appendQuad: function() {},
                _determineRect: function() {
                    var t = NS.isRotated()
                      , e = NS.getOriginalSize()
                      , i = NS.getRect()
                      , r = NS.getOffset()
                      , n = r.x + (e.width - i.width) / 2
                      , s = r.y - (e.height - i.height) / 2;
                    if (t) {
                        var a = SS.x;
                        SS.x = i.x + i.height - SS.y - SS.height - s,
                        SS.y = a + i.y - n,
                        SS.y < 0 && (SS.height += s)
                    } else
                        SS.x += i.x - n,
                        SS.y += i.y + s;
                    return t
                },
                _computeAlignmentOffset: function() {
                    switch (RS.length = 0,
                    US) {
                    case Jp.LEFT:
                        for (var t = 0; t < OS; ++t)
                            RS.push(0);
                        break;
                    case Jp.CENTER:
                        for (var e = 0, i = CS.length; e < i; e++)
                            RS.push((xS.width - CS[e]) / 2);
                        break;
                    case Jp.RIGHT:
                        for (var r = 0, n = CS.length; r < n; r++)
                            RS.push(xS.width - CS[r])
                    }
                    if (MS = xS.height,
                    HS !== Qp.TOP) {
                        var s = xS.height - PS + WS * this._getFontScale() - zS * FS;
                        HS === Qp.BOTTOM ? MS -= s : MS -= s / 2
                    }
                },
                _setupBMFontOverflowMetrics: function() {
                    var t = xS.width
                      , e = xS.height;
                    XS === $p.RESIZE_HEIGHT && (e = 0),
                    XS === $p.NONE && (t = 0,
                    e = 0),
                    YS = t,
                    KS = e,
                    BS.width = t,
                    BS.height = e,
                    ZS = t
                }
            }
              , JS = new Zi(255,255,255,255)
              , QS = {
                createData: function(t) {
                    return t.requestRenderData()
                },
                fillBuffers: function(t, e) {
                    var i = t.node;
                    JS.set(t.color),
                    JS.a = 255 * i._uiProps.opacity,
                    zc(i, e, t.renderData, JS)
                },
                appendQuad: function(t, e, i, r, n, s, a) {
                    var o = t.renderData;
                    if (o) {
                        var l = o.dataLength;
                        o.dataLength += 4,
                        o.vertexCount = o.dataLength,
                        o.indicesCount = o.dataLength / 2 * 3;
                        var h = o.data
                          , u = e.width
                          , c = e.height
                          , _ = i.width
                          , d = i.height
                          , p = 0
                          , f = 0
                          , g = 0
                          , m = 0;
                        r ? (p = i.x / u,
                        m = (i.x + d) / u,
                        f = (i.y + _) / c,
                        g = i.y / c,
                        h[l].u = p,
                        h[l].v = g,
                        h[l + 1].u = p,
                        h[l + 1].v = f,
                        h[l + 2].u = m,
                        h[l + 2].v = g,
                        h[l + 3].u = m,
                        h[l + 3].v = f) : (p = i.x / u,
                        m = (i.x + _) / u,
                        f = (i.y + d) / c,
                        g = i.y / c,
                        h[l].u = p,
                        h[l].v = f,
                        h[l + 1].u = m,
                        h[l + 1].v = f,
                        h[l + 2].u = p,
                        h[l + 2].v = g,
                        h[l + 3].u = m,
                        h[l + 3].v = g),
                        h[l].x = n,
                        h[l].y = s - d * a,
                        h[l + 1].x = n + _ * a,
                        h[l + 1].y = s - d * a,
                        h[l + 2].x = n,
                        h[l + 2].y = s,
                        h[l + 3].x = n + _ * a,
                        h[l + 3].y = s
                    }
                }
            };
            gn(QS, qS);
            var $S = null
              , tT = Gr(qS, {
                getAssemblerData: function() {
                    return $S || ($S = new id(1024,1024)),
                    $S.getTexture()
                },
                _updateFontFamily: function(t) {
                    rd.fontAtlas = $S,
                    rd.fontFamily = this._getFontFamily(t);
                    var e = t.getComponent(Gm);
                    e && e.enabled ? (rd.isOutlined = !0,
                    rd.margin = e.width,
                    rd.out = e.color.clone(),
                    rd.out.a = e.color.a * t.color.a / 255) : (rd.isOutlined = !1,
                    rd.margin = 0)
                },
                _getFontFamily: function(t) {
                    var e = "Arial";
                    return t.useSystemFont ? e = t.fontFamily || "Arial" : t.font && (e = t.font._nativeAsset || "Arial"),
                    e
                },
                _updateLabelInfo: function(t) {
                    var e, i, r;
                    rd.fontDesc = this._getFontDesc(),
                    rd.color = t.color,
                    rd.hash = (i = (e = rd).color.toHEX(),
                    r = "",
                    e.isOutlined && e.margin > 0 && (r = r + e.margin + e.out.toHEX()),
                    "" + e.fontSize + e.fontFamily + i + r)
                },
                _getFontDesc: function() {
                    return rd.fontSize.toString() + "px " + rd.fontFamily
                },
                _computeHorizontalKerningForText: function() {},
                _determineRect: function() {
                    return !1
                }
            })
              , eT = new Zi(255,255,255,255)
              , iT = {
                createData: function(t) {
                    return t.requestRenderData()
                },
                fillBuffers: function(t, e) {
                    if (t.renderData) {
                        var i = t.node;
                        eT.a = 255 * i._uiProps.opacity,
                        zc(i, e, t.renderData, eT)
                    }
                },
                appendQuad: QS.appendQuad
            };
            gn(iT, tT);
            var rT = af.Overflow
              , nT = (1 / 255).toFixed(3)
              , sT = null
              , aT = null
              , oT = null
              , lT = ""
              , hT = ""
              , uT = 0
              , cT = 0
              , _T = []
              , dT = new Pr
              , pT = 0
              , fT = 0
              , gT = 0
              , mT = new Zi
              , yT = ""
              , vT = rT.NONE
              , ST = !1
              , TT = null
              , bT = Zi.BLACK.clone()
              , ET = null
              , AT = Zi.BLACK.clone()
              , CT = new Or
              , RT = Pr.ZERO.clone()
              , BT = Pr.ZERO.clone()
              , xT = Br.ZERO.clone()
              , DT = Br.ZERO.clone()
              , wT = 0
              , OT = 0
              , PT = !1
              , MT = !1
              , IT = !1
              , LT = ["left", "center", "right"]
              , FT = {
                getAssemblerData: function() {
                    return af._canvasPool.get()
                },
                resetAssemblerData: function(t) {
                    t && af._canvasPool.put(t)
                },
                updateRenderData: function(t) {
                    if (t.renderData) {
                        if (t.renderData.vertDirty) {
                            var e = t.node._uiProps.uiTransformComp;
                            this._updateFontFamily(t),
                            this._updateProperties(t, e),
                            this._calculateLabelFont(),
                            this._updateLabelDimensions(),
                            this._updateTexture(t),
                            this.updateOpacity(t),
                            this._calDynamicAtlas(t),
                            t.actualFontSize = uT,
                            e.setContentSize(dT),
                            this.updateVertexData(t),
                            this.updateUvs(t),
                            t.markForUpdateRenderData(!1),
                            sT = null,
                            aT = null,
                            oT = null
                        }
                        t.spriteFrame && t.renderData.updateRenderData(t, t.spriteFrame)
                    }
                },
                updateVertexData: function() {},
                updateUvs: function() {},
                updateOpacity: function(t) {
                    for (var e = t.renderData.vData, i = 5, r = t.node._uiProps.opacity, n = 0; n < 4; n++)
                        e[i + 3] = r,
                        i += 9
                },
                _updateFontFamily: function(t) {
                    yT = t.useSystemFont ? t.fontFamily || "Arial" : t.font && t.font._nativeAsset || "Arial"
                },
                _updateProperties: function(t, e) {
                    var i = t.assemblerData;
                    i && (sT = i.context,
                    aT = i.canvas,
                    oT = t.spriteFrame,
                    hT = t.string.toString(),
                    uT = t.fontSize,
                    cT = uT,
                    vT = t.overflow,
                    BT.width = dT.width = e.width,
                    BT.height = dT.height = e.height,
                    OT = t.underlineHeight,
                    pT = t.lineHeight,
                    fT = t.horizontalAlign,
                    gT = t.verticalAlign,
                    mT = t.color,
                    t.node._uiProps.opacity,
                    PT = t.isBold,
                    MT = t.isItalic,
                    IT = t.isUnderline,
                    ST = vT !== rT.NONE && (vT === rT.RESIZE_HEIGHT || t.enableWrapText),
                    (TT = (TT = Gm && t.getComponent(Gm)) && TT.enabled && TT.width > 0 ? TT : null) && bT.set(TT.color),
                    (ET = (ET = Mv && t.getComponent(Mv)) && ET.enabled ? ET : null) && AT.set(ET.color),
                    this._updatePaddingRect())
                },
                _updatePaddingRect: function() {
                    var t = 0
                      , e = 0
                      , i = 0
                      , r = 0
                      , n = 0;
                    if (RT.width = RT.height = 0,
                    TT && (t = e = i = r = n = TT.width,
                    RT.width = RT.height = 2 * n),
                    ET) {
                        var s = ET.blur + n
                          , a = ET.offset.x
                          , o = ET.offset.y;
                        i = Math.max(i, -a + s),
                        r = Math.max(r, a + s),
                        t = Math.max(t, o + s),
                        e = Math.max(e, -o + s)
                    }
                    if (MT) {
                        var l = cT * Math.tan(.20943951);
                        r += l,
                        RT.width += l
                    }
                    CT.x = i,
                    CT.y = t,
                    CT.width = i + r,
                    CT.height = t + e
                },
                _calculateFillTextStartPosition: function() {
                    var t = 0;
                    fT === Jp.RIGHT ? t = dT.width - CT.width : fT === Jp.CENTER && (t = (dT.width - CT.width) / 2);
                    var e = this._getLineHeight() * (_T.length - 1)
                      , i = uT * (1 - S_ / 2);
                    if (gT !== Qp.TOP) {
                        var r = e + CT.height + uT - dT.height;
                        gT === Qp.BOTTOM ? i -= r += S_ / 2 * uT : i -= r / 2
                    }
                    i += 0 * uT,
                    xT.set(t + CT.x, i + CT.y)
                },
                _updateTexture: function(t) {
                    if (sT && aT) {
                        sT.clearRect(0, 0, aT.width, aT.height),
                        sT.font = lT,
                        this._calculateFillTextStartPosition();
                        var e = this._getLineHeight();
                        sT.lineJoin = "round",
                        TT ? (sT.fillStyle = "rgba(" + bT.r + ", " + bT.g + ", " + bT.b + ", " + nT + ")",
                        sT.fillRect(0, 0, aT.width, aT.height)) : t._srcBlendFactor === x.SRC_ALPHA && (sT.fillStyle = "rgba(" + mT.r + ", " + mT.g + ", " + mT.b + ", " + nT + ")",
                        sT.fillRect(0, 0, aT.width, aT.height)),
                        sT.fillStyle = "rgb(" + mT.r + ", " + mT.g + ", " + mT.b + ")";
                        var i = xT.x
                          , r = 0;
                        this._drawTextEffect(xT, e);
                        for (var n = 0; n < _T.length; ++n)
                            r = xT.y + n * e,
                            TT && sT.strokeText(_T[n], i, r),
                            sT.fillText(_T[n], i, r);
                        ET && (sT.shadowColor = "transparent"),
                        this._uploadTexture(t)
                    }
                },
                _uploadTexture: function(t) {
                    if (t.cacheMode === af.CacheMode.BITMAP) {
                        var e = t.ttfSpriteFrame;
                        Xc.deleteAtlasSpriteFrame(e),
                        e._resetDynamicAtlasFrame()
                    }
                    var i;
                    oT && aT && (i = oT instanceof Jc ? oT.texture : oT,
                    0 !== aT.width && 0 !== aT.height && (i.reset({
                        width: aT.width,
                        height: aT.height,
                        mipmapLevel: 1
                    }),
                    i.uploadData(aT),
                    oT instanceof Jc && (oT.rect = new Or(0,0,aT.width,aT.height),
                    oT._calculateUV()),
                    t.renderData && (t.renderData.textureDirty = !0),
                    ci.director.root && ci.director.root.batcher2D && ci.director.root.batcher2D._releaseDescriptorSetCache(i.getHash())))
                },
                _calDynamicAtlas: function(t) {
                    if (t.cacheMode === af.CacheMode.BITMAP) {
                        var e = t.ttfSpriteFrame;
                        Xc.packToDynamicAtlas(t, e),
                        t.renderData.uvDirty = !0
                    }
                },
                _setupOutline: function() {
                    sT.strokeStyle = "rgba(" + bT.r + ", " + bT.g + ", " + bT.b + ", " + bT.a / 255 + ")",
                    sT.lineWidth = 2 * TT.width
                },
                _setupShadow: function() {
                    sT.shadowColor = "rgba(" + AT.r + ", " + AT.g + ", " + AT.b + ", " + AT.a / 255 + ")",
                    sT.shadowBlur = ET.blur,
                    sT.shadowOffsetX = ET.offset.x,
                    sT.shadowOffsetY = -ET.offset.y
                },
                _drawTextEffect: function(t, e) {
                    if (ET || TT || IT) {
                        var i = _T.length > 1 && ET
                          , r = this._measureText(sT, lT)
                          , n = 0
                          , s = 0;
                        ET && this._setupShadow(),
                        TT && this._setupOutline();
                        for (var a = 0; a < _T.length; ++a)
                            n = t.x,
                            s = t.y + a * e,
                            i && (TT && sT.strokeText(_T[a], n, s),
                            sT.fillText(_T[a], n, s)),
                            IT && (wT = r(_T[a]),
                            fT === Jp.RIGHT ? DT.x = t.x - wT : fT === Jp.CENTER ? DT.x = t.x - wT / 2 : DT.x = t.x,
                            DT.y = s + cT / 8,
                            sT.fillRect(DT.x, DT.y, wT, OT));
                        i && (sT.shadowColor = "transparent")
                    }
                },
                _updateLabelDimensions: function() {
                    dT.width = Math.min(dT.width, 2048),
                    dT.height = Math.min(dT.height, 2048);
                    var t = !1;
                    aT.width !== dT.width && (aT.width = dT.width,
                    t = !0),
                    aT.height !== dT.height && (aT.height = dT.height,
                    t = !0),
                    t && (sT.font = lT),
                    sT.textAlign = LT[fT],
                    sT.textBaseline = "alphabetic"
                },
                _getFontDesc: function() {
                    var t = uT.toString() + "px ";
                    return t += yT,
                    PT && (t = "bold " + t),
                    MT && (t = "italic " + t),
                    t
                },
                _getLineHeight: function() {
                    return 0 | (0 === pT ? uT : pT * uT / cT)
                },
                _calculateParagraphLength: function(t, e) {
                    for (var i, r = [], n = ui(t); !(i = n()).done; ) {
                        var s = P_(e, i.value, lT);
                        r.push(s)
                    }
                    return r
                },
                _measureText: function(t, e) {
                    return function(i) {
                        return P_(t, i, e)
                    }
                },
                _calculateShrinkFont: function(t) {
                    if (sT) {
                        var e = this._calculateParagraphLength(t, sT)
                          , i = 0
                          , r = 0
                          , n = 0;
                        if (ST) {
                            var s = BT.width
                              , a = BT.height;
                            if (s < 0 || a < 0)
                                return;
                            r = a + 1;
                            for (var o = 0, l = 0 | uT + 1, h = 0; o < l; ) {
                                if ((h = o + l + 1 >> 1) <= 0) {
                                    mn(4003);
                                    break
                                }
                                uT = h,
                                lT = this._getFontDesc(),
                                sT.font = lT;
                                var u = this._getLineHeight();
                                for (r = 0,
                                i = 0; i < t.length; ++i) {
                                    var c = P_(sT, t[i], lT);
                                    r += I_(t[i], c, s, this._measureText(sT, lT)).length * u
                                }
                                r > a ? l = h - 1 : o = h
                            }
                            0 === o ? mn(4003) : (uT = o,
                            lT = this._getFontDesc(),
                            sT.font = lT)
                        } else {
                            for (r = t.length * this._getLineHeight(),
                            i = 0; i < t.length; ++i)
                                n < e[i] && (n = e[i]);
                            var _ = (dT.width - CT.width) / n
                              , d = dT.height / r;
                            uT = cT * Math.min(1, _, d) | 0,
                            lT = this._getFontDesc(),
                            sT.font = lT
                        }
                    }
                },
                _calculateWrapText: function(t) {
                    if (ST && sT) {
                        _T = [];
                        for (var e = BT.width, i = 0; i < t.length; ++i) {
                            var r = P_(sT, t[i], lT)
                              , n = I_(t[i], r, e, this._measureText(sT, lT));
                            _T = _T.concat(n)
                        }
                    }
                },
                _calculateLabelFont: function() {
                    if (sT) {
                        var t = hT.split("\n");
                        switch (_T = t,
                        lT = this._getFontDesc(),
                        sT.font = lT,
                        vT) {
                        case rT.NONE:
                            for (var e = 0, i = 0, r = 0; r < t.length; ++r) {
                                var n = P_(sT, t[r], lT);
                                e = e > n ? e : n
                            }
                            i = (_T.length + S_) * this._getLineHeight();
                            var s = parseFloat(e.toFixed(2))
                              , a = parseFloat(i.toFixed(2));
                            dT.width = s + CT.width,
                            dT.height = a + CT.height,
                            BT.width = s + RT.width,
                            BT.height = a + RT.height;
                            break;
                        case rT.SHRINK:
                            this._calculateShrinkFont(t),
                            this._calculateWrapText(t);
                            break;
                        case rT.CLAMP:
                            this._calculateWrapText(t);
                            break;
                        case rT.RESIZE_HEIGHT:
                            this._calculateWrapText(t);
                            var o = (_T.length + S_) * this._getLineHeight();
                            dT.height = o + CT.height,
                            BT.height = o + RT.height
                        }
                    }
                }
            }
              , NT = Zi.WHITE.clone()
              , kT = {
                createData: function(t) {
                    var e = t.requestRenderData();
                    e.dataLength = 4,
                    e.vertexCount = 4,
                    e.indicesCount = 6;
                    var i = e.vData = new Float32Array(36);
                    i[3] = i[21] = i[22] = i[31] = 0,
                    i[4] = i[12] = i[13] = i[30] = 1;
                    for (var r = 5, n = 0; n < 4; n++)
                        Zi.toArray(i, NT, r),
                        r += 9;
                    return e
                },
                fillBuffers: function(t, e) {
                    var i = t.renderData
                      , r = i.data
                      , n = t.node
                      , s = e.acquireBufferBatch()
                      , a = s.byteOffset >> 2
                      , o = s.indicesOffset
                      , l = s.vertexOffset;
                    s.request() || (s = e.currBufferBatch,
                    o = 0,
                    l = 0,
                    a = 0);
                    var h = s.vData
                      , u = s.iData
                      , c = i.vData
                      , _ = r[0]
                      , d = r[3];
                    n.updateWorldTransform();
                    var p = n._pos
                      , f = n._rot
                      , g = n._scale
                      , m = _.x * g.x
                      , y = d.x * g.x
                      , v = _.y * g.y
                      , S = d.y * g.y
                      , T = f.x
                      , b = f.y
                      , E = f.z
                      , A = f.w
                      , C = T * b
                      , R = E * A
                      , B = T * T - b * b
                      , x = A * A - E * E
                      , D = x + B
                      , w = 2 * (C - R)
                      , O = x - B
                      , P = 2 * (C + R)
                      , M = p.x
                      , I = p.y;
                    c[0] = D * m + w * v + M,
                    c[1] = O * v + P * m + I,
                    c[9] = D * y + w * v + M,
                    c[10] = O * v + P * y + I,
                    c[18] = D * m + w * S + M,
                    c[19] = O * S + P * m + I,
                    c[27] = D * y + w * S + M,
                    c[28] = O * S + P * y + I,
                    h.set(c, a),
                    u[o++] = l,
                    u[o++] = l + 1,
                    u[o++] = l + 2,
                    u[o++] = l + 2,
                    u[o++] = l + 1,
                    u[o++] = l + 3
                },
                updateVertexData: function(t) {
                    var e = t.renderData;
                    if (e) {
                        var i = t.node._uiProps.uiTransformComp
                          , r = i.width
                          , n = i.height
                          , s = i.anchorX * r
                          , a = i.anchorY * n
                          , o = e.data;
                        o[0].x = -s,
                        o[0].y = -a,
                        o[3].x = r - s,
                        o[3].y = n - a
                    }
                },
                updateUvs: function(t) {
                    var e = t.renderData;
                    if (e) {
                        var i = e.vData;
                        if (i && e.uvDirty) {
                            var r = t.ttfSpriteFrame.uv;
                            i[3] = r[0],
                            i[4] = r[1],
                            i[12] = r[2],
                            i[13] = r[3],
                            i[21] = r[4],
                            i[22] = r[5],
                            i[30] = r[6],
                            i[31] = r[7],
                            e.uvDirty = !1
                        }
                    }
                }
            };
            gn(kT, FT);
            var GT = t("labelAssembler", {
                getAssembler: function(t) {
                    var e = kT;
                    return t.font instanceof y_ ? e = QS : t.cacheMode === af.CacheMode.CHAR && (e = iT),
                    e
                }
            });
            af.Assembler = GT;
            var zT = ey.FillType
              , UT = new Ui
              , HT = new Zi(255,255,255,255)
              , VT = {
                useModel: !1,
                updateRenderData: function(t) {
                    var e = t.spriteFrame;
                    Xc.packToDynamicAtlas(t, e);
                    var i = t.renderData;
                    if (i && e) {
                        i.updateRenderData(t, e);
                        var r = i.uvDirty
                          , n = i.vertDirty;
                        if (!r && !n)
                            return;
                        var s = t.fillStart
                          , a = t.fillRange;
                        a < 0 && (s += a,
                        a = -a),
                        a = (a = (a = s + a) > 1 ? 1 : a) < 0 ? 0 : a;
                        var o = (s = (s = s > 1 ? 1 : s) < 0 ? 0 : s) + (a = (a -= s) < 0 ? 0 : a);
                        o = o > 1 ? 1 : o,
                        r && this.updateUVs(t, s, o),
                        n && (this.updateVertexData && this.updateVertexData(t, s, o),
                        this.updateWorldVertexData(t))
                    }
                },
                updateUVs: function(t, e, i) {
                    var r = t.spriteFrame
                      , n = t.renderData
                      , s = n.data
                      , a = r.width
                      , o = r.height
                      , l = r.getRect()
                      , h = 0
                      , u = 0
                      , c = 0
                      , _ = 0
                      , d = 0
                      , p = 0
                      , f = 0
                      , g = 0
                      , m = 0
                      , y = 0;
                    switch (r.isRotated() ? (h = l.x / a,
                    u = (l.y + l.width) / o,
                    c = d = h,
                    f = m = (l.x + l.height) / a,
                    p = y = u,
                    _ = g = l.y / o) : (h = l.x / a,
                    u = (l.y + l.height) / o,
                    c = f = h,
                    d = m = (l.x + l.width) / a,
                    _ = p = u,
                    g = y = l.y / o),
                    t.fillType) {
                    case zT.HORIZONTAL:
                        s[0].u = c + (d - c) * e,
                        s[0].v = _ + (p - _) * e,
                        s[1].u = c + (d - c) * i,
                        s[1].v = _ + (p - _) * i,
                        s[2].u = f + (m - f) * e,
                        s[2].v = g + (y - g) * e,
                        s[3].u = f + (m - f) * i,
                        s[3].v = g + (y - g) * i;
                        break;
                    case zT.VERTICAL:
                        s[0].u = c + (f - c) * e,
                        s[0].v = _ + (g - _) * e,
                        s[1].u = d + (m - d) * e,
                        s[1].v = p + (y - p) * e,
                        s[2].u = c + (f - c) * i,
                        s[2].v = _ + (g - _) * i,
                        s[3].u = d + (m - d) * i,
                        s[3].v = p + (y - p) * i;
                        break;
                    default:
                        Qe(2626)
                    }
                    n.uvDirty = !1
                },
                updateVertexData: function(t, e, i) {
                    var r = t.renderData
                      , n = r.data
                      , s = t.node._uiProps.uiTransformComp
                      , a = s.width
                      , o = s.height
                      , l = s.anchorX * a
                      , h = s.anchorY * o
                      , u = -l
                      , c = -h
                      , _ = a - l
                      , d = o - h
                      , p = 0;
                    switch (t.fillType) {
                    case zT.HORIZONTAL:
                        p = u + (_ - u) * i,
                        u += (_ - u) * e,
                        _ = p;
                        break;
                    case zT.VERTICAL:
                        p = c + (d - c) * i,
                        c += (d - c) * e,
                        d = p;
                        break;
                    default:
                        Qe(2626)
                    }
                    n[4].x = u,
                    n[4].y = c,
                    n[5].x = _,
                    n[5].y = c,
                    n[6].x = u,
                    n[6].y = d,
                    n[7].x = _,
                    n[7].y = d,
                    r.vertDirty = !1
                },
                createData: function(t) {
                    var e = t.requestRenderData();
                    e.dataLength = 8,
                    e.vertexCount = 4,
                    e.indicesCount = 6;
                    for (var i, r = e.data, n = ui(r); !(i = n()).done; )
                        i.value.z = 0;
                    return e
                },
                updateWorldVertexData: function(t) {
                    var e = t.node
                      , i = t.renderData.data;
                    e.getWorldMatrix(UT);
                    for (var r = 0; r < 4; r++) {
                        var n = i[r + 4]
                          , s = i[r];
                        di.transformMat4(s, n, UT)
                    }
                },
                fillBuffers: function(t, e) {
                    t.node.hasChangedFlags && this.updateWorldVertexData(t);
                    var i = t.node;
                    HT.set(t.color),
                    HT.a = 255 * i._uiProps.opacity,
                    function(t, e, i, r) {
                        var n = i.data
                          , s = e.acquireBufferBatch()
                          , a = s.byteOffset >> 2
                          , o = i.vertexCount
                          , l = s.indicesOffset
                          , h = s.vertexOffset;
                        s.request(o, i.indicesCount) || (s = e.currBufferBatch,
                        a = 0,
                        l = 0,
                        h = 0);
                        for (var u = s.vData, c = 0; c < o; c++) {
                            var _ = n[c];
                            u[a++] = _.x,
                            u[a++] = _.y,
                            u[a++] = _.z,
                            u[a++] = _.u,
                            u[a++] = _.v,
                            Zi.toArray(u, r, a),
                            a += 4
                        }
                        var d = s.iData;
                        d[l++] = h,
                        d[l++] = h + 1,
                        d[l++] = h + 2,
                        d[l++] = h + 1,
                        d[l++] = h + 3,
                        d[l++] = h + 2
                    }(0, e, t.renderData, HT)
                },
                updateColor: function() {}
            }
              , WT = 2 * Math.PI
              , XT = 1e-6
              , jT = new Zi(255,255,255,255)
              , YT = [new Br, new Br, new Br, new Br]
              , KT = new Array(4)
              , ZT = new Array(8)
              , qT = [new Br, new Br, new Br, new Br]
              , JT = [new Br, new Br, new Br, new Br]
              , QT = new Br
              , $T = [new Br, new Br, new Br, new Br];
            function tb(t, e, i, r, n, s, a) {
                var o = Math.sin(s);
                o = Math.abs(o) > XT ? o : 0;
                var l = Math.cos(s)
                  , h = 0
                  , u = 0;
                if (0 !== (l = Math.abs(l) > XT ? l : 0)) {
                    if (h = o / l,
                    (t - n.x) * l > 0) {
                        var c = n.y + h * (t - n.x);
                        a[0].x = t,
                        a[0].y = c
                    }
                    if ((e - n.x) * l > 0) {
                        var _ = n.y + h * (e - n.x);
                        a[2].x = e,
                        a[2].y = _
                    }
                }
                if (0 !== o) {
                    if (u = l / o,
                    (r - n.y) * o > 0) {
                        var d = n.x + u * (r - n.y);
                        a[3].x = d,
                        a[3].y = r
                    }
                    if ((i - n.y) * o > 0) {
                        var p = n.x + u * (i - n.y);
                        a[1].x = p,
                        a[1].y = i
                    }
                }
            }
            function eb(t, e) {
                var i = e.x - t.x
                  , r = e.y - t.y;
                if (0 === i && 0 === r)
                    return 0;
                if (0 === i)
                    return r > 0 ? .5 * Math.PI : 1.5 * Math.PI;
                var n = Math.atan(r / i);
                return i < 0 && (n += Math.PI),
                n
            }
            function ib(t, e, i, r, n) {
                var s = KT
                  , a = s[0]
                  , o = s[1]
                  , l = s[2]
                  , h = s[3];
                t[e].x = i.x,
                t[e].y = i.y,
                t[e + 1].x = r.x,
                t[e + 1].y = r.y,
                t[e + 2].x = n.x,
                t[e + 2].y = n.y,
                rb((i.x - a) / (l - a), (i.y - o) / (h - o), t, e),
                rb((r.x - a) / (l - a), (r.y - o) / (h - o), t, e + 1),
                rb((n.x - a) / (l - a), (n.y - o) / (h - o), t, e + 2)
            }
            function rb(t, e, i, r) {
                var n = ZT
                  , s = n[0] + (n[2] - n[0]) * t
                  , a = n[4] + (n[6] - n[4]) * t
                  , o = n[1] + (n[3] - n[1]) * t
                  , l = n[5] + (n[7] - n[5]) * t
                  , h = i[r];
                h.u = s + (a - s) * e,
                h.v = o + (l - o) * e
            }
            for (var nb = {
                useModel: !1,
                createData: function(t) {
                    return t.requestRenderData()
                },
                updateRenderData: function(t) {
                    var e = t.spriteFrame;
                    Xc.packToDynamicAtlas(t, e);
                    var i, r, n, s, a, o, l, h, u, c = t.renderData;
                    if (c && e) {
                        if (c.vertDirty || c.uvDirty) {
                            var _ = c.data
                              , d = t.fillStart
                              , p = t.fillRange;
                            for (p < 0 && (d += p,
                            p = -p); d >= 1; )
                                d -= 1;
                            for (; d < 0; )
                                d += 1;
                            var f = (d *= WT) + (p *= WT);
                            !function(t) {
                                var e = t.node._uiProps.uiTransformComp
                                  , i = e.width
                                  , r = e.height
                                  , n = e.anchorX * i
                                  , s = e.anchorY * r
                                  , a = -n
                                  , o = -s
                                  , l = i - n
                                  , h = r - s
                                  , u = KT;
                                u[0] = a,
                                u[1] = o,
                                u[2] = l,
                                u[3] = h;
                                var c = t.fillCenter
                                  , _ = QT.x = Math.min(Math.max(0, c.x), 1) * (l - a) + a
                                  , d = QT.y = Math.min(Math.max(0, c.y), 1) * (h - o) + o;
                                YT[0].x = YT[3].x = a,
                                YT[1].x = YT[2].x = l,
                                YT[0].y = YT[1].y = o,
                                YT[2].y = YT[3].y = h;
                                for (var p, f = ui($T); !(p = f()).done; ) {
                                    var g = p.value;
                                    Br.set(g, 0, 0)
                                }
                                _ !== u[0] && Br.set($T[0], 3, 0),
                                _ !== u[2] && Br.set($T[2], 1, 2),
                                d !== u[1] && Br.set($T[1], 0, 1),
                                d !== u[3] && Br.set($T[3], 2, 3)
                            }(t),
                            r = (i = e).width,
                            n = i.height,
                            s = i.getRect(),
                            a = 0,
                            o = 0,
                            l = 0,
                            h = 0,
                            u = ZT,
                            i.isRotated() ? (a = s.x / r,
                            o = (s.x + s.height) / r,
                            l = s.y / n,
                            h = (s.y + s.width) / n,
                            u[0] = u[2] = a,
                            u[4] = u[6] = o,
                            u[3] = u[7] = h,
                            u[1] = u[5] = l) : (a = s.x / r,
                            o = (s.x + s.width) / r,
                            l = s.y / n,
                            h = (s.y + s.height) / n,
                            u[0] = u[4] = a,
                            u[2] = u[6] = o,
                            u[1] = u[3] = h,
                            u[5] = u[7] = l),
                            tb(KT[0], KT[2], KT[1], KT[3], QT, d, qT),
                            tb(KT[0], KT[2], KT[1], KT[3], QT, d + p, JT);
                            for (var g = 0, m = 0; m < 4; ++m) {
                                var y = $T[m];
                                if (y)
                                    if (p >= WT)
                                        c.dataLength = g + 3,
                                        ib(_, g, QT, YT[y.x], YT[y.y]),
                                        g += 3;
                                    else {
                                        var v = eb(QT, YT[y.x])
                                          , S = eb(QT, YT[y.y]);
                                        S < v && (S += WT),
                                        v -= WT,
                                        S -= WT;
                                        for (var T = 0; T < 3; ++T)
                                            v >= f || (v >= d ? (c.dataLength = g + 3,
                                            ib(_, g, QT, YT[y.x], S >= f ? JT[m] : YT[y.y]),
                                            g += 3) : S > d && (S <= f ? (c.dataLength = g + 3,
                                            ib(_, g, QT, qT[m], YT[y.y]),
                                            g += 3) : (c.dataLength = g + 3,
                                            ib(_, g, QT, qT[m], JT[m]),
                                            g += 3))),
                                            v += WT,
                                            S += WT
                                    }
                            }
                            c.indicesCount = c.vertexCount = g,
                            c.vertDirty = c.uvDirty = !1
                        }
                        c.updateRenderData(t, e)
                    }
                },
                fillBuffers: function(t, e) {
                    var i = t.node
                      , r = t.renderData;
                    jT.set(t.color),
                    jT.a = 255 * i._uiProps.opacity,
                    function(t, e, i, r) {
                        var n = i.data
                          , s = e.acquireBufferBatch()
                          , a = s.byteOffset >> 2
                          , o = i.vertexCount
                          , l = s.indicesOffset
                          , h = s.vertexOffset;
                        s.request(o, i.indicesCount) || (s = e.currBufferBatch,
                        a = 0,
                        l = 0,
                        h = 0);
                        var u = s.vData;
                        t.getWorldMatrix(Gc);
                        for (var c = 0; c < o; c++) {
                            var _ = n[c];
                            di.set(kc, _.x, _.y, 0),
                            di.transformMat4(kc, kc, Gc),
                            u[a++] = kc.x,
                            u[a++] = kc.y,
                            u[a++] = kc.z,
                            u[a++] = _.u,
                            u[a++] = _.v,
                            Zi.toArray(u, r, a),
                            a += 4
                        }
                        for (var d = s.iData, p = 0; p < i.dataLength; p++)
                            d[l + p] = h + p
                    }(i, e, r, jT)
                },
                updateColor: function() {}
            }, sb = [], ab = 0; ab < 4; ab++)
                sb.push(new di);
            for (var ob = {
                createData: function(t) {
                    var e = t.requestRenderData();
                    return e.dataLength = 4,
                    e.vertexCount = 4,
                    e.indicesCount = 6,
                    e.vData = new Float32Array(36),
                    e
                },
                updateRenderData: function(t) {
                    var e = t.spriteFrame;
                    Xc.packToDynamicAtlas(t, e);
                    var i = t.renderData;
                    i && e && (i.vertDirty && this.updateVertexData(t),
                    i.uvDirty && this.updateUvs(t),
                    i.updateRenderData(t, e))
                },
                updateWorldVerts: function(t, e) {
                    var i = t.renderData.data
                      , r = t.node
                      , n = i[0]
                      , s = i[3]
                      , a = r.worldMatrix
                      , o = a.m00
                      , l = a.m01
                      , h = a.m04
                      , u = a.m05
                      , c = 1 === o && 0 === l && 0 === h && 1 === u
                      , _ = a.m12
                      , d = a.m13
                      , p = n.x
                      , f = s.x
                      , g = n.y
                      , m = s.y;
                    if (c) {
                        var y = p + _
                          , v = f + _
                          , S = g + d
                          , T = m + d;
                        e[0] = y,
                        e[1] = S,
                        e[9] = v,
                        e[10] = S,
                        e[18] = y,
                        e[19] = T,
                        e[27] = v,
                        e[28] = T
                    } else {
                        var b = o * p
                          , E = o * f
                          , A = l * p
                          , C = l * f
                          , R = h * g + _
                          , B = h * m + _
                          , x = u * g + d
                          , D = u * m + d;
                        e[0] = b + R,
                        e[1] = A + x,
                        e[9] = E + R,
                        e[10] = C + x,
                        e[18] = b + B,
                        e[19] = A + D,
                        e[27] = E + B,
                        e[28] = C + D
                    }
                },
                fillBuffers: function(t, e) {
                    if (null !== t) {
                        var i = t.renderData.vData;
                        t.node.hasChangedFlags && this.updateWorldVerts(t, i);
                        var r = e.acquireBufferBatch()
                          , n = r.byteOffset >> 2
                          , s = r.indicesOffset
                          , a = r.vertexOffset;
                        r.request() || (r = e.currBufferBatch,
                        n = 0,
                        s = 0,
                        a = 0);
                        var o = r.vData
                          , l = r.iData;
                        o.set(i, n);
                        var h = a
                          , u = a + 1
                          , c = a + 2
                          , _ = a + 3;
                        l[s++] = h,
                        l[s++] = u,
                        l[s++] = c,
                        l[s++] = c,
                        l[s++] = u,
                        l[s++] = _
                    }
                },
                updateVertexData: function(t) {
                    var e = t.renderData;
                    if (e) {
                        var i = t.node._uiProps.uiTransformComp
                          , r = e.data
                          , n = i.width
                          , s = i.height
                          , a = i.anchorX * n
                          , o = i.anchorY * s
                          , l = 0
                          , h = 0
                          , u = 0
                          , c = 0;
                        if (t.trim)
                            l = -a,
                            h = -o,
                            u = n - a,
                            c = s - o;
                        else {
                            var _ = t.spriteFrame
                              , d = _.getOriginalSize()
                              , p = _.getRect()
                              , f = d.width
                              , g = d.height
                              , m = p.width
                              , y = p.height
                              , v = _.getOffset()
                              , S = n / f
                              , T = s / g
                              , b = v.x + (f - m) / 2
                              , E = v.x - (f - m) / 2;
                            l = b * S - a,
                            h = (v.y + (g - y) / 2) * T - o,
                            u = n + E * S - a,
                            c = s + (v.y - (g - y) / 2) * T - o
                        }
                        r[0].x = l,
                        r[0].y = h,
                        r[3].x = u,
                        r[3].y = c,
                        e.vertDirty = !1,
                        this.updateWorldVerts(t, e.vData)
                    }
                },
                updateUvs: function(t) {
                    var e = t.renderData
                      , i = e.vData
                      , r = t.spriteFrame.uv;
                    i[3] = r[0],
                    i[4] = r[1],
                    i[12] = r[2],
                    i[13] = r[3],
                    i[21] = r[4],
                    i[22] = r[5],
                    i[30] = r[6],
                    i[31] = r[7],
                    e.uvDirty = !1
                },
                updateColor: function(t) {
                    for (var e = t.renderData.vData, i = 5, r = t.color, n = r.r / 255, s = r.g / 255, a = r.b / 255, o = t.node._uiProps.opacity, l = 0; l < 4; l++)
                        e[i] = n,
                        e[i + 1] = s,
                        e[i + 2] = a,
                        e[i + 3] = o,
                        i += 9
                }
            }, lb = new di, hb = new Ui, ub = {
                useModel: !1,
                createData: function(t) {
                    var e = t.requestRenderData();
                    return e.dataLength = 20,
                    e.vertexCount = 16,
                    e.indicesCount = 54,
                    e
                },
                updateRenderData: function(t) {
                    var e = t.spriteFrame;
                    Xc.packToDynamicAtlas(t, e);
                    var i = t.renderData;
                    i && e && (i.vertDirty && (this.updateVertexData(t),
                    this.updateWorldVertexData(t)),
                    i.updateRenderData(t, e))
                },
                updateVertexData: function(t) {
                    var e = t.renderData
                      , i = e.data
                      , r = t.node._uiProps.uiTransformComp
                      , n = r.width
                      , s = r.height
                      , a = r.anchorX * n
                      , o = r.anchorY * s
                      , l = t.spriteFrame
                      , h = l.insetLeft
                      , u = l.insetRight
                      , c = l.insetTop
                      , _ = l.insetBottom
                      , d = n - h - u
                      , p = s - c - _
                      , f = n / (h + u)
                      , g = s / (c + _);
                    f = Number.isNaN(f) || f > 1 ? 1 : f,
                    g = Number.isNaN(g) || g > 1 ? 1 : g,
                    d = d < 0 ? 0 : d,
                    p = p < 0 ? 0 : p,
                    i[0].x = -a,
                    i[0].y = -o,
                    i[1].x = h * f - a,
                    i[1].y = _ * g - o,
                    i[2].x = i[1].x + d,
                    i[2].y = i[1].y + p,
                    i[3].x = n - a,
                    i[3].y = s - o,
                    e.vertDirty = !1
                },
                fillBuffers: function(t, e) {
                    t.node.hasChangedFlags && this.updateWorldVertexData(t);
                    var i = e.acquireBufferBatch()
                      , r = t.renderData
                      , n = r.data
                      , s = i.byteOffset >> 2
                      , a = r.vertexCount
                      , o = i.indicesOffset
                      , l = i.vertexOffset
                      , h = t.spriteFrame.uvSliced;
                    i.request(a, r.indicesCount) || (i = e.currBufferBatch,
                    s = 0,
                    o = 0,
                    l = 0);
                    for (var u = i.vData, c = i.iData, _ = 4; _ < 20; ++_) {
                        var d = n[_]
                          , p = h[_ - 4];
                        u[s++] = d.x,
                        u[s++] = d.y,
                        u[s++] = d.z,
                        u[s++] = p.u,
                        u[s++] = p.v,
                        Zi.toArray(u, n[_].color, s),
                        s += 4
                    }
                    for (var f = 0; f < 3; ++f)
                        for (var g = 0; g < 3; ++g) {
                            var m = l + 4 * f + g;
                            c[o++] = m,
                            c[o++] = m + 1,
                            c[o++] = m + 4,
                            c[o++] = m + 1,
                            c[o++] = m + 5,
                            c[o++] = m + 4
                        }
                },
                updateWorldVertexData: function(t) {
                    var e = t.node
                      , i = t.renderData.data;
                    e.getWorldMatrix(hb);
                    for (var r = 0; r < 4; ++r)
                        for (var n = i[r], s = 0; s < 4; ++s) {
                            var a = i[s]
                              , o = i[4 + 4 * r + s];
                            di.set(lb, a.x, n.y, 0),
                            di.transformMat4(o, lb, hb)
                        }
                },
                updateColor: function(t) {
                    for (var e = t.renderData.data, i = t.color, r = i.r, n = i.g, s = i.b, a = 255 * t.node._uiProps.opacity, o = 4; o < 20; o++)
                        e[o].color.r = r,
                        e[o].color.g = n,
                        e[o].color.b = s,
                        e[o].color.a = a
                }
            }, cb = [], _b = 0; _b < 4; _b++)
                cb.push(new di);
            var db = {
                createData: function(t) {
                    return t.requestRenderData()
                },
                updateRenderData: function(t) {
                    var e = t.renderData
                      , i = t.spriteFrame;
                    if (i && e && (e.updateRenderData(t, i),
                    e.uvDirty || e.vertDirty)) {
                        var r = t.node._uiProps.uiTransformComp
                          , n = Math.abs(r.width)
                          , s = Math.abs(r.height)
                          , a = i.getRect()
                          , o = i.insetLeft
                          , l = i.insetRight
                          , h = a.width - o - l
                          , u = i.insetTop
                          , c = i.insetBottom
                          , _ = a.height - u - c
                          , d = n - o - l
                          , p = s - u - c;
                        d = d > 0 ? d : 0,
                        p = p > 0 ? p : 0;
                        var f = 0 === h ? d : d / h
                          , g = 0 === _ ? p : p / _
                          , m = Math.ceil(g + 2)
                          , y = Math.ceil(f + 2);
                        e.dataLength = Math.max(8, m + 1, y + 1),
                        this.updateVerts(t, d, p, m, y),
                        e.vertexCount = m * y * 4,
                        e.indicesCount = m * y * 6,
                        e.uvDirty = !1,
                        e.vertDirty = !1,
                        this.updateColor(t)
                    }
                },
                fillBuffers: function(t, e) {
                    var i = t.node
                      , r = t.node._uiProps.uiTransformComp
                      , n = Math.abs(r.width)
                      , s = Math.abs(r.height)
                      , a = t.renderData
                      , o = e.acquireBufferBatch()
                      , l = o.indicesOffset
                      , h = o.byteOffset >> 2
                      , u = o.vertexOffset
                      , c = a.vertexCount
                      , _ = a.indicesCount
                      , d = o.vData
                      , p = o.iData;
                    o.request(c, _) || (o = e.currBufferBatch,
                    h = 0,
                    l = 0,
                    u = 0);
                    var f = t.spriteFrame
                      , g = f.isRotated()
                      , m = f.uv
                      , y = t.spriteFrame.uvSliced
                      , v = f.getRect()
                      , S = f.insetLeft
                      , T = f.insetRight
                      , b = v.width - S - T
                      , E = f.insetTop
                      , A = f.insetBottom
                      , C = v.height - E - A
                      , R = n - S - T
                      , B = s - E - A;
                    R = R > 0 ? R : 0,
                    B = B > 0 ? B : 0;
                    var x = 0 === b ? R : R / b
                      , D = 0 === C ? B : B / C
                      , w = Math.ceil(D + 2)
                      , O = Math.ceil(x + 2)
                      , P = i.worldMatrix
                      , M = a.data;
                    this.fillVertices(d, h, P, w, O, M);
                    for (var I = 0, L = 0, F = [], N = [], k = 0, G = w; k < G; ++k) {
                        L = B > C ? B >= k * C ? 1 : D % 1 : D;
                        for (var z = 0, U = O; z < U; ++z) {
                            I = R > b ? R >= z * b ? 1 : x % 1 : x;
                            var H = h + 3
                              , V = H + 1;
                            g ? (0 === k ? (F[0] = y[0].u,
                            F[1] = y[0].u,
                            F[2] = y[4].u + (y[8].u - y[4].u) * L) : k < w - 1 ? (F[0] = y[4].u,
                            F[1] = y[4].u,
                            F[2] = y[4].u + (y[8].u - y[4].u) * L) : k === w - 1 && (F[0] = y[8].u,
                            F[1] = y[8].u,
                            F[2] = y[12].u),
                            0 === z ? (N[0] = y[0].v,
                            N[1] = y[1].v + (y[2].v - y[1].v) * I,
                            N[2] = y[0].v) : z < O - 1 ? (N[0] = y[1].v,
                            N[1] = y[1].v + (y[2].v - y[1].v) * I,
                            N[2] = y[1].v) : z === O - 1 && (N[0] = y[2].v,
                            N[1] = y[3].v,
                            N[2] = y[2].v),
                            F[3] = F[2],
                            N[3] = N[1]) : (0 === z ? (F[0] = y[0].u,
                            F[1] = y[1].u + (y[2].u - y[1].u) * I,
                            F[2] = m[0]) : z < O - 1 ? (F[0] = y[1].u,
                            F[1] = y[1].u + (y[2].u - y[1].u) * I,
                            F[2] = y[1].u) : z === O - 1 && (F[0] = y[2].u,
                            F[1] = y[3].u,
                            F[2] = y[2].u),
                            0 === k ? (N[0] = y[0].v,
                            N[1] = y[0].v,
                            N[2] = y[4].v + (y[8].v - y[4].v) * L) : k < w - 1 ? (N[0] = y[4].v,
                            N[1] = y[4].v,
                            N[2] = y[4].v + (y[8].v - y[4].v) * L) : k === w - 1 && (N[0] = y[8].v,
                            N[1] = y[8].v,
                            N[2] = y[12].v),
                            F[3] = F[1],
                            N[3] = N[2]),
                            d[H] = F[0],
                            d[V] = N[0],
                            d[H + 9] = F[1],
                            d[V + 9] = N[1],
                            d[H + 18] = F[2],
                            d[V + 18] = N[2],
                            d[H + 27] = F[3],
                            d[V + 27] = N[3],
                            Zi.toArray(d, M[0].color, V + 1),
                            Zi.toArray(d, M[0].color, V + 9 + 1),
                            Zi.toArray(d, M[0].color, V + 18 + 1),
                            Zi.toArray(d, M[0].color, V + 27 + 1),
                            h += 36
                        }
                    }
                    for (var W = 0; W < _; W += 6)
                        p[l++] = u,
                        p[l++] = u + 1,
                        p[l++] = u + 2,
                        p[l++] = u + 1,
                        p[l++] = u + 3,
                        p[l++] = u + 2,
                        u += 4
                },
                fillVertices: function(t, e, i, r, n, s) {
                    for (var a = 0, o = 0, l = 0, h = 0, u = 0, c = r; u < c; ++u) {
                        l = s[u].y,
                        h = s[u + 1].y;
                        for (var _ = 0, d = n; _ < d; ++_) {
                            a = s[_].x,
                            o = s[_ + 1].x,
                            di.set(cb[0], a, l, 0),
                            di.set(cb[1], o, l, 0),
                            di.set(cb[2], a, h, 0),
                            di.set(cb[3], o, h, 0);
                            for (var p = 0; p < 4; p++) {
                                var f = cb[p];
                                di.transformMat4(f, f, i);
                                var g = 9 * p;
                                t[e + g] = f.x,
                                t[e + g + 1] = f.y,
                                t[e + g + 2] = f.z
                            }
                            e += 36
                        }
                    }
                },
                updateVerts: function(t, e, i, r, n) {
                    var s, a, o = t.node._uiProps.uiTransformComp, l = t.renderData.data, h = t.spriteFrame, u = h.getRect(), c = Math.abs(o.width), _ = Math.abs(o.height), d = o.anchorX * c, p = o.anchorY * _, f = h.insetLeft, g = h.insetRight, m = u.width - f - g, y = h.insetTop, v = h.insetBottom, S = u.height - y - v, T = o.width / (f + g) > 1 ? 1 : o.width / (f + g), b = o.height / (y + v) > 1 ? 1 : o.height / (y + v);
                    s = m > 0 ? Math.floor(1e3 * e) / 1e3 % m == 0 ? m : e % m : e,
                    a = S > 0 ? Math.floor(1e3 * i) / 1e3 % S == 0 ? S : i % S : i;
                    for (var E = 0; E <= n; E++)
                        0 === E ? l[E].x = -d : E > 0 && E < n ? l[E].x = 1 === E ? f * T + Math.min(m, e) - d : m > 0 ? E === n - 1 ? f + s + m * (E - 2) - d : f + Math.min(m, e) + m * (E - 2) - d : f + e - d : E === n && (l[E].x = Math.min(f + e + g, c) - d);
                    for (var A = 0; A <= r; A++)
                        0 === A ? l[A].y = -p : A > 0 && A < r ? l[A].y = 1 === A ? v * b + Math.min(S, i) - p : S > 0 ? A === r - 1 ? v + a + (A - 2) * S - p : v + Math.min(S, i) + (A - 2) * S - p : v + i - p : A === r && (l[A].y = Math.min(v + i + y, _) - p)
                },
                updateColor: function(t) {
                    var e = t.renderData.data
                      , i = e.length;
                    if (0 !== i)
                        for (var r = t.color, n = r.r, s = r.g, a = r.b, o = 255 * t.node._uiProps.opacity, l = 0; l < i; l++)
                            e[l].color.r = n,
                            e[l].color.g = s,
                            e[l].color.b = a,
                            e[l].color.a = o
                }
            }
              , pb = ey.Type
              , fb = ey.FillType
              , gb = t("spriteAssembler", {
                getAssembler: function(t) {
                    var e = ob
                      , i = t;
                    switch (i.type) {
                    case pb.SLICED:
                        e = ub;
                        break;
                    case pb.TILED:
                        e = db;
                        break;
                    case pb.FILLED:
                        e = i.fillType === fb.RADIAL ? nb : VT
                    }
                    return e
                }
            });
            ey.Assembler = gb;
            var mb = Gd.sharedManager
              , yb = {
                createData: function(t) {
                    var e = t.requestRenderData();
                    return e.dataLength = 4,
                    e.vertexCount = 4,
                    e.indicesCount = 6,
                    e.vData = new Float32Array(36),
                    e
                },
                updateRenderData: function(t) {
                    t.type === Sg.IMAGE_STENCIL && (ob.updateRenderData(t),
                    ob.updateColor(t))
                },
                fillBuffers: function(t, e) {
                    (t.type !== Sg.IMAGE_STENCIL || t.spriteFrame) && (mb.pushMask(t),
                    e.finishMergeBatches(),
                    function(t, e) {
                        mb.clear(t),
                        e.commitModel(t, t._clearModel, t._clearStencilMtl)
                    }(t, e),
                    function(t, e) {
                        if (mb.enterLevel(t),
                        t.type === Sg.IMAGE_STENCIL) {
                            ob.fillBuffers(t, e);
                            var i = t.graphics.getMaterialInstance(0);
                            e.forceMergeBatches(i, t.spriteFrame, t.graphics)
                        } else
                            t.graphics.updateAssembler(e)
                    }(t, e),
                    mb.enableMask())
                }
            }
              , vb = {
                fillBuffers: function() {
                    mb.exitMask()
                }
            }
              , Sb = {
                getAssembler: function() {
                    return yb
                }
            }
              , Tb = {
                getAssembler: function() {
                    return vb
                }
            };
            Dg.Assembler = Sb,
            Dg.PostAssembler = Tb,
            new (function() {
                function t() {
                    this._isListDirty = !1,
                    this._inDispatchCount = 0,
                    this._pointerEventProcessorList = [],
                    this._processorListToAdd = [],
                    this._processorListToRemove = [],
                    yn.on(vn.EventType.MOUSE_DOWN, this.dispatchEventMouse, this),
                    yn.on(vn.EventType.MOUSE_MOVE, this.dispatchEventMouse, this),
                    yn.on(vn.EventType.MOUSE_UP, this.dispatchEventMouse, this),
                    yn.on(vn.EventType.MOUSE_WHEEL, this.dispatchEventMouse, this),
                    yn.on(vn.EventType.TOUCH_START, this.dispatchEventTouch, this),
                    yn.on(vn.EventType.TOUCH_MOVE, this.dispatchEventTouch, this),
                    yn.on(vn.EventType.TOUCH_END, this.dispatchEventTouch, this),
                    yn.on(vn.EventType.TOUCH_CANCEL, this.dispatchEventTouch, this),
                    rn.callbacksInvoker.on(Sn.ADD_POINTER_EVENT_PROCESSOR, this.addPointerEventProcessor, this),
                    rn.callbacksInvoker.on(Sn.REMOVE_POINTER_EVENT_PROCESSOR, this.removePointerEventProcessor, this)
                }
                var e = t.prototype;
                return e.addPointerEventProcessor = function(t) {
                    0 === this._inDispatchCount ? (this._pointerEventProcessorList.push(t),
                    this._isListDirty = !0) : this._processorListToAdd.push(t)
                }
                ,
                e.removePointerEventProcessor = function(t) {
                    0 === this._inDispatchCount ? (Vi.array.remove(this._pointerEventProcessorList, t),
                    this._isListDirty = !0) : this._processorListToRemove.push(t)
                }
                ,
                e.dispatchEventMouse = function(t) {
                    this._inDispatchCount++,
                    this._sortPointerEventProcessorList();
                    for (var e = this._pointerEventProcessorList, i = e.length, r = !0, n = 0; n < i; ++n) {
                        var s = e[n];
                        if (s.isEnabled && s.shouldHandleEventMouse && s._handleEventMouse(t) && (r = !1,
                        !t.preventSwallow))
                            break
                    }
                    var a = Tn[t.type];
                    r && a && yn._eventTarget.emit(a, t),
                    --this._inDispatchCount <= 0 && this._updatePointerEventProcessorList()
                }
                ,
                e.dispatchEventTouch = function(t) {
                    this._inDispatchCount++,
                    this._sortPointerEventProcessorList();
                    for (var e = this._pointerEventProcessorList, i = e.length, r = t.touch, n = !0, s = 0; s < i; ++s) {
                        var a = e[s];
                        if (a.isEnabled && a.shouldHandleEventTouch)
                            if (t.type === bn.TOUCH_START) {
                                if (a._handleEventTouch(t) && (a.claimedTouchIdList.push(r.getID()),
                                n = !1,
                                !t.preventSwallow))
                                    break
                            } else if (a.claimedTouchIdList.length > 0) {
                                var o = a.claimedTouchIdList.indexOf(r.getID());
                                if (-1 !== o && (a._handleEventTouch(t),
                                t.type !== bn.TOUCH_END && t.type !== bn.TOUCH_CANCEL || Vi.array.removeAt(a.claimedTouchIdList, o),
                                n = !1,
                                !t.preventSwallow))
                                    break
                            }
                    }
                    var l = Tn[t.type];
                    n && l && yn._eventTarget.emit(l, t.touch, t),
                    --this._inDispatchCount <= 0 && this._updatePointerEventProcessorList()
                }
                ,
                e._updatePointerEventProcessorList = function() {
                    for (var t = this._processorListToAdd, e = t.length, i = 0; i < e; ++i)
                        this.addPointerEventProcessor(t[i]);
                    t.length = 0;
                    for (var r = this._processorListToRemove, n = r.length, s = 0; s < n; ++s)
                        this.removePointerEventProcessor(r[s]);
                    r.length = 0
                }
                ,
                e._sortPointerEventProcessorList = function() {
                    if (this._isListDirty) {
                        for (var t = this._pointerEventProcessorList, e = t.length, i = 0; i < e; ++i) {
                            var r = t[i]
                              , n = r.node._uiProps.uiTransformComp;
                            r.cachedCameraPriority = n.cameraPriority
                        }
                        t.sort(this._sortByPriority),
                        this._isListDirty = !1
                    }
                }
                ,
                e._sortByPriority = function(t, e) {
                    var i = t.node
                      , r = e.node;
                    if (!(e && r && r.activeInHierarchy && r._uiProps.uiTransformComp))
                        return -1;
                    if (!(t && i && i.activeInHierarchy && i._uiProps.uiTransformComp))
                        return 1;
                    if (t.cachedCameraPriority !== e.cachedCameraPriority)
                        return e.cachedCameraPriority - t.cachedCameraPriority;
                    for (var n = i, s = r, a = !1; (null === (o = n.parent) || void 0 === o ? void 0 : o._id) !== (null === (l = s.parent) || void 0 === l ? void 0 : l._id); ) {
                        var o, l, h, u, c, _;
                        n = null === (null === (h = n) || void 0 === h || null === (u = h.parent) || void 0 === u ? void 0 : u.parent) ? (a = !0) && r : n && n.parent,
                        s = null === (null === (c = s) || void 0 === c || null === (_ = c.parent) || void 0 === _ ? void 0 : _.parent) ? (a = !0) && i : s && s.parent
                    }
                    if (n._id === s._id) {
                        if (n._id === r._id)
                            return -1;
                        if (n._id === i._id)
                            return 1
                    }
                    var d = n ? n.getSiblingIndex() : 0
                      , p = s ? s.getSiblingIndex() : 0;
                    return a ? d - p : p - d
                }
                ,
                t
            }());
            var bb = new Gt(null)
              , Eb = new Ui
              , Ab = t("UI", function() {
                var t = n.prototype;
                function n(t) {
                    var n = this;
                    this.device = void 0,
                    this._screens = [],
                    this._bufferBatchPool = new i((function() {
                        return new Qy(n)
                    }
                    ),128,(function(t) {
                        return t.destroy()
                    }
                    )),
                    this._drawBatchPool = void 0,
                    this._meshBuffers = new Map,
                    this._customMeshBuffers = new Map,
                    this._meshBufferUseCount = new Map,
                    this._batches = void 0,
                    this._emptyMaterial = new Tr,
                    this._currScene = null,
                    this._currMaterial = this._emptyMaterial,
                    this._currTexture = null,
                    this._currSampler = null,
                    this._currMeshBuffer = null,
                    this._currStaticRoot = null,
                    this._currComponent = null,
                    this._currTransform = null,
                    this._currTextureHash = 0,
                    this._currSamplerHash = 0,
                    this._currBlendTargetHash = 0,
                    this._currLayer = 0,
                    this._currDepthStencilStateStage = null,
                    this._currIsStatic = !1,
                    this._currHash = 0,
                    this._descriptorSetCache = new Rb,
                    this._root = t,
                    this.device = t.device,
                    this._batches = new r(64),
                    this._drawBatchPool = new e((function() {
                        return new Ov
                    }
                    ),128,(function(t) {
                        return t.destroy(n)
                    }
                    ))
                }
                return t.acquireBufferBatch = function(t) {
                    void 0 === t && (t = Xf);
                    var e = t === Xf ? 36 : Kf(t);
                    return this._currMeshBuffer && this._currMeshBuffer.vertexFormatBytes === e || this._requireBufferBatch(t),
                    this._currMeshBuffer
                }
                ,
                t.registerCustomBuffer = function(t, e) {
                    var i;
                    t instanceof Qy ? i = t : (i = this._bufferBatchPool.add()).initialize(t, e || this._recreateMeshBuffer.bind(this, t));
                    var r = i.vertexFormatBytes
                      , n = this._customMeshBuffers.get(r);
                    return n || (n = [],
                    this._customMeshBuffers.set(r, n)),
                    n.push(i),
                    i
                }
                ,
                t.unRegisterCustomBuffer = function(t) {
                    var e = this._customMeshBuffers.get(t.vertexFormatBytes);
                    if (e)
                        for (var i = 0; i < e.length; i++)
                            if (e[i] === t) {
                                e.splice(i, 1);
                                break
                            }
                    var r = this._bufferBatchPool.data.indexOf(t);
                    -1 !== r && (t.reset(),
                    this._bufferBatchPool.removeAt(r))
                }
                ,
                t.initialize = function() {
                    return !0
                }
                ,
                t.destroy = function() {
                    for (var t = 0; t < this._batches.length; t++)
                        this._batches.array[t] && this._batches.array[t].destroy(this);
                    this._batches.destroy();
                    for (var e, i = ui(this._meshBuffers.keys()); !(e = i()).done; ) {
                        var r = e.value
                          , n = this._meshBuffers.get(r);
                        n && n.forEach((function(t) {
                            return t.destroy()
                        }
                        ))
                    }
                    this._drawBatchPool && this._drawBatchPool.destroy(),
                    this._descriptorSetCache.destroy(),
                    this._meshBuffers.clear(),
                    Gd.sharedManager.destroy()
                }
                ,
                t.addScreen = function(t) {
                    this._screens.push(t),
                    this._screens.sort(this._screenSort)
                }
                ,
                t.getFirstRenderCamera = function(t) {
                    if (t.scene && t.scene.renderScene)
                        for (var e = t.scene.renderScene.cameras, i = 0; i < e.length; i++) {
                            var r = e[i];
                            if (r.visibility & t.layer)
                                return r
                        }
                    return null
                }
                ,
                t.removeScreen = function(t) {
                    var e = this._screens.indexOf(t);
                    -1 !== e && this._screens.splice(e, 1)
                }
                ,
                t.sortScreens = function() {
                    this._screens.sort(this._screenSort)
                }
                ,
                t.update = function() {
                    for (var t = this._screens, e = 0; e < t.length; ++e) {
                        var i = t[e];
                        i.enabledInHierarchy && this._recursiveScreenNode(i.node)
                    }
                    var r = 0;
                    if (this._batches.length)
                        for (var n = 0; n < this._batches.length; ++n) {
                            var s = this._batches.array[n];
                            if (s.renderScene) {
                                if (s.model)
                                    for (var a = s.model.subModels, o = 0; o < a.length; o++)
                                        a[o].priority = r++;
                                else
                                    s.descriptorSet = this._descriptorSetCache.getDescriptorSet(s);
                                s.renderScene.addBatch(s)
                            }
                        }
                }
                ,
                t.uploadBuffers = function() {
                    this._batches.length > 0 && (this._meshBuffers.forEach((function(t) {
                        t.forEach((function(t) {
                            t.uploadBuffers(),
                            t.reset()
                        }
                        ))
                    }
                    )),
                    this._customMeshBuffers.forEach((function(t) {
                        t.forEach((function(t) {
                            t.uploadBuffers(),
                            t.reset()
                        }
                        ))
                    }
                    )),
                    this._descriptorSetCache.update())
                }
                ,
                t.reset = function() {
                    for (var t = 0; t < this._batches.length; ++t) {
                        var e = this._batches.array[t];
                        e.isStatic || (e.clear(),
                        this._drawBatchPool.free(e))
                    }
                    this._currHash = 0,
                    this._currLayer = 0,
                    this._currMaterial = this._emptyMaterial,
                    this._currTexture = null,
                    this._currSampler = null,
                    this._currComponent = null,
                    this._currTransform = null,
                    this._currScene = null,
                    this._currMeshBuffer = null,
                    this._meshBufferUseCount.clear(),
                    this._batches.clear(),
                    Gd.sharedManager.reset(),
                    this._descriptorSetCache.reset()
                }
                ,
                t.commitComp = function(t, e, i, r) {
                    var n, s = t, a = t.renderData, o = 0;
                    a && (o = a.dataHash,
                    n = a.material),
                    s.stencilStage = Gd.sharedManager.stage;
                    var l = s.stencilStage;
                    if (this._currHash !== o || 0 === o || this._currMaterial !== n || this._currDepthStencilStateStage !== l)
                        if (this.autoMergeBatches(this._currComponent),
                        a) {
                            this._currHash = a.dataHash,
                            this._currScene = a.renderScene,
                            this._currComponent = s,
                            this._currTransform = r,
                            this._currMaterial = a.material,
                            this._currBlendTargetHash = a.blendHash,
                            this._currDepthStencilStateStage = l,
                            this._currLayer = a.layer;
                            var h = a.frame;
                            h ? (this._currTexture = h.getGFXTexture(),
                            this._currSampler = h.getGFXSampler(),
                            this._currTextureHash = a.textureHash,
                            this._currSamplerHash = this._currSampler.hash) : (this._currTexture = null,
                            this._currSampler = null,
                            this._currTextureHash = 0,
                            this._currSamplerHash = 0)
                        } else
                            this._currHash = o,
                            this._currScene = s._getRenderScene(),
                            this._currComponent = s,
                            this._currTransform = r,
                            this._currMaterial = s.getRenderMaterial(0),
                            this._currBlendTargetHash = s.blendHash,
                            this._currDepthStencilStateStage = l,
                            this._currLayer = s.node.layer,
                            e ? (this._currTexture = e.getGFXTexture(),
                            this._currSampler = e.getGFXSampler(),
                            this._currTextureHash = e.getHash(),
                            this._currSamplerHash = this._currSampler.hash) : (this._currTexture = null,
                            this._currSampler = null,
                            this._currTextureHash = 0,
                            this._currSamplerHash = 0);
                    i && i.fillBuffers(s, this)
                }
                ,
                t.commitModel = function(t, e, i) {
                    var r;
                    this._currMaterial !== this._emptyMaterial && this.autoMergeBatches(this._currComponent);
                    var n = 0;
                    i && (t.stencilStage !== Z_.ENABLED && t.stencilStage !== Z_.DISABLED || (t.stencilStage = Gd.sharedManager.stage),
                    r = Gd.sharedManager.getStencilStage(t.stencilStage, i),
                    n = Gd.sharedManager.getStencilHash(t.stencilStage));
                    var s = ci.director.getTotalFrames();
                    e && (e.updateTransform(s),
                    e.updateUBOs(s));
                    for (var a = 0; a < e.subModels.length; a++) {
                        var o = this._drawBatchPool.alloc()
                          , l = e.subModels[a];
                        o.renderScene = t._getRenderScene(),
                        o.visFlags = t.node.layer,
                        o.model = e,
                        o.bufferBatch = null,
                        o.texture = null,
                        o.sampler = null,
                        o.useLocalData = null,
                        r || (r = null),
                        o.fillPasses(i, r, n, null, 0, l.patches, this),
                        o.inputAssembler = l.inputAssembler,
                        o.model.visFlags = o.visFlags,
                        o.descriptorSet = l.descriptorSet,
                        this._batches.push(o)
                    }
                    this._currMaterial = this._emptyMaterial,
                    this._currScene = null,
                    this._currComponent = null,
                    this._currTransform = null,
                    this._currTexture = null,
                    this._currSampler = null,
                    this._currTextureHash = 0,
                    this._currLayer = 0
                }
                ,
                t.commitStaticBatch = function(t) {
                    this._batches.concat(t.drawBatchList),
                    this.finishMergeBatches()
                }
                ,
                t.autoMergeBatches = function(t) {
                    var e = this.currBufferBatch
                      , i = null == e ? void 0 : e.recordBatch()
                      , r = this._currMaterial;
                    if (i && r && e) {
                        var n, s, a = 0, o = 0;
                        t && (n = -1 === t.blendHash ? null : t.getBlendState(),
                        o = t.blendHash,
                        s = null !== t.customMaterial ? Gd.sharedManager.getStencilStage(t.stencilStage, r) : Gd.sharedManager.getStencilStage(t.stencilStage),
                        a = Gd.sharedManager.getStencilHash(t.stencilStage));
                        var l = this._currStaticRoot ? this._currStaticRoot._requireDrawBatch() : this._drawBatchPool.alloc();
                        l.renderScene = this._currScene,
                        l.visFlags = this._currLayer,
                        l.bufferBatch = e,
                        l.texture = this._currTexture,
                        l.sampler = this._currSampler,
                        l.inputAssembler = i,
                        l.useLocalData = this._currTransform,
                        l.textureHash = this._currTextureHash,
                        l.samplerHash = this._currSamplerHash,
                        l.fillPasses(this._currMaterial, s, a, n, o, null, this),
                        this._batches.push(l),
                        e.vertexStart = e.vertexOffset,
                        e.indicesStart = e.indicesOffset,
                        e.byteStart = e.byteOffset,
                        ni.__isWebIOS14OrIPadOS14Env && !this._currIsStatic && (this._currMeshBuffer = null)
                    }
                }
                ,
                t.forceMergeBatches = function(t, e, i) {
                    this._currMaterial = t,
                    e ? (this._currTexture = e.getGFXTexture(),
                    this._currSampler = e.getGFXSampler(),
                    this._currTextureHash = e.getHash(),
                    this._currSamplerHash = this._currSampler.hash) : (this._currTexture = this._currSampler = null,
                    this._currTextureHash = this._currSamplerHash = 0),
                    this._currLayer = i.node.layer,
                    this._currScene = i._getRenderScene(),
                    this.autoMergeBatches(i)
                }
                ,
                t.finishMergeBatches = function() {
                    this.autoMergeBatches(),
                    this._currMaterial = this._emptyMaterial,
                    this._currTexture = null,
                    this._currComponent = null,
                    this._currTransform = null,
                    this._currTextureHash = 0,
                    this._currSamplerHash = 0,
                    this._currLayer = 0
                }
                ,
                t.flushMaterial = function(t) {
                    this._currMaterial = t
                }
                ,
                t.walk = function(t, e) {
                    void 0 === e && (e = 0);
                    var i = t.children.length;
                    if (this._preProcess(t),
                    i > 0 && !t._static)
                        for (var r = t.children, n = 0; n < r.length; ++n) {
                            var s = r[n];
                            this.walk(s, e)
                        }
                    this._postProcess(t),
                    e += 1
                }
                ,
                t._preProcess = function(t) {
                    if (t._uiProps.opacityDirty) {
                        var e, i = 1;
                        if (null === (e = t.parent) || void 0 === e ? void 0 : e._uiProps) {
                            i = t.parent._uiProps.opacity;
                            var r = t._uiProps.uiComp;
                            r && r.markColorDirty && (i *= r.color.a / 255,
                            r.markColorDirty())
                        }
                        t._uiProps.opacityDirty = !1,
                        t._uiProps.applyOpacity(i)
                    }
                    var n = t._uiProps.uiComp;
                    t._uiProps.uiTransformComp && n && n.enabledInHierarchy && n.updateAssembler(this)
                }
                ,
                t._postProcess = function(t) {
                    var e = t._uiProps.uiComp;
                    e && e.enabledInHierarchy && e.postUpdateAssembler(this)
                }
                ,
                t._recursiveScreenNode = function(t) {
                    this.walk(t),
                    this.autoMergeBatches(this._currComponent)
                }
                ,
                t._createMeshBuffer = function(t) {
                    var e = this._bufferBatchPool.add();
                    e.initialize(t, this._recreateMeshBuffer.bind(this, t));
                    var i = Kf(t)
                      , r = this._meshBuffers.get(i);
                    return r || (r = [],
                    this._meshBuffers.set(i, r)),
                    r.push(e),
                    e
                }
                ,
                t._recreateMeshBuffer = function(t, e, i) {
                    this.autoMergeBatches(),
                    this._requireBufferBatch(t, e, i)
                }
                ,
                t._requireBufferBatch = function(t, e, i) {
                    var r = Kf(t)
                      , n = this._meshBuffers.get(r);
                    n || (n = [],
                    this._meshBuffers.set(r, n));
                    var s = this._meshBufferUseCount.get(r) || 0;
                    (e && i || ni.__isWebIOS14OrIPadOS14Env) && s++,
                    this._currMeshBuffer = n[s],
                    this._currMeshBuffer || (this._currMeshBuffer = this._createMeshBuffer(t)),
                    this._meshBufferUseCount.set(r, s),
                    e && i && this._currMeshBuffer.request(e, i)
                }
                ,
                t._screenSort = function(t, e) {
                    return t.node.getSiblingIndex() - e.node.getSiblingIndex()
                }
                ,
                t._releaseDescriptorSetCache = function(t) {
                    this._descriptorSetCache.releaseDescriptorSetCache(t)
                }
                ,
                Je(n, [{
                    key: "currBufferBatch",
                    get: function() {
                        return this._currMeshBuffer || (this._currMeshBuffer = this.acquireBufferBatch()),
                        this._currMeshBuffer
                    },
                    set: function(t) {
                        t && (this._currMeshBuffer = t)
                    }
                }, {
                    key: "batches",
                    get: function() {
                        return this._batches
                    }
                }, {
                    key: "currStaticRoot",
                    set: function(t) {
                        this._currStaticRoot = t
                    }
                }, {
                    key: "currIsStatic",
                    set: function(t) {
                        this._currIsStatic = t
                    }
                }]),
                n
            }())
              , Cb = function() {
                function t() {
                    this._descriptorSet = null,
                    this._transform = null,
                    this._textureHash = 0,
                    this._samplerHash = 0,
                    this._localBuffer = null,
                    this._transformUpdate = !0;
                    var t = ci.director.root.device;
                    this._localData = new Float32Array(En.COUNT),
                    this._localBuffer = t.createBuffer(new ht(f.UNIFORM | f.TRANSFER_DST,y.HOST | y.DEVICE,En.SIZE,En.SIZE))
                }
                var e = t.prototype;
                return e.initialize = function(t) {
                    var e = ci.director.root.device;
                    this._transform = t.useLocalData,
                    this._textureHash = t.textureHash,
                    this._samplerHash = t.samplerHash,
                    bb.layout = t.passes[0].localSetLayout,
                    this._descriptorSet = e.createDescriptorSet(bb),
                    this._descriptorSet.bindBuffer(En.BINDING, this._localBuffer);
                    var i = An.SAMPLER_SPRITE;
                    this._descriptorSet.bindTexture(i, t.texture),
                    this._descriptorSet.bindSampler(i, t.sampler),
                    this._descriptorSet.update(),
                    this._transformUpdate = !0
                }
                ,
                e.updateTransform = function(t) {
                    t !== this._transform && (this._transform = t,
                    this._transformUpdate = !0,
                    this.uploadLocalData())
                }
                ,
                e.updateLocal = function() {
                    this._transform && this.uploadLocalData()
                }
                ,
                e.equals = function(t, e, i) {
                    return this._transform === t && this._textureHash === e && this._samplerHash === i
                }
                ,
                e.reset = function() {
                    this._transform = null,
                    this._textureHash = 0,
                    this._samplerHash = 0
                }
                ,
                e.destroy = function() {
                    this._localBuffer && (this._localBuffer.destroy(),
                    this._localBuffer = null),
                    this._descriptorSet && (this._descriptorSet.destroy(),
                    this._descriptorSet = null),
                    this._localData = null
                }
                ,
                e.uploadLocalData = function() {
                    var t = this._transform;
                    if ((t.hasChangedFlags || t._dirtyFlags) && t.updateWorldTransform(),
                    this._transformUpdate) {
                        var e = t._mat;
                        Ui.toArray(this._localData, e, En.MAT_WORLD_OFFSET),
                        Ui.inverseTranspose(Eb, e);
                        var i = Ui.determinant(Eb)
                          , r = 1 / Math.sqrt(i);
                        Ui.multiplyScalar(Eb, Eb, r),
                        Ui.toArray(this._localData, Eb, En.MAT_WORLD_IT_OFFSET),
                        this._localBuffer.update(this._localData),
                        this._transformUpdate = !1
                    }
                }
                ,
                Je(t, [{
                    key: "descriptorSet",
                    get: function() {
                        return this._descriptorSet
                    }
                }]),
                t
            }()
              , Rb = function() {
                function t() {
                    this._descriptorSetCache = new Map,
                    this._dsCacheHashByTexture = new Map,
                    this._localDescriptorSetCache = [],
                    this._localCachePool = void 0,
                    this._localCachePool = new e((function() {
                        return new Cb
                    }
                    ),16,(function(t) {
                        return t.destroy()
                    }
                    ))
                }
                var i = t.prototype;
                return i.getDescriptorSet = function(t) {
                    var e, i = ci.director.root;
                    if (t.useLocalData) {
                        for (var r = this._localDescriptorSetCache, n = 0, s = r.length; n < s; n++) {
                            var a = r[n];
                            if (a.equals(t.useLocalData, t.textureHash, t.samplerHash))
                                return a.descriptorSet
                        }
                        var o = this._localCachePool.alloc();
                        return o.initialize(t),
                        this._localDescriptorSetCache.push(o),
                        o.descriptorSet
                    }
                    if (e = t.textureHash ^ t.samplerHash,
                    this._descriptorSetCache.has(e))
                        return this._descriptorSetCache.get(e);
                    bb.layout = t.passes[0].localSetLayout;
                    var l = i.device.createDescriptorSet(bb)
                      , h = An.SAMPLER_SPRITE;
                    return l.bindTexture(h, t.texture),
                    l.bindSampler(h, t.sampler),
                    l.update(),
                    this._descriptorSetCache.set(e, l),
                    this._dsCacheHashByTexture.set(t.textureHash, e),
                    l
                }
                ,
                i.update = function() {
                    this._localDescriptorSetCache.forEach((function(t) {
                        t.updateLocal()
                    }
                    ))
                }
                ,
                i.reset = function() {
                    var t = this;
                    this._localDescriptorSetCache.forEach((function(e) {
                        t._localCachePool.free(e)
                    }
                    )),
                    this._localDescriptorSetCache.length = 0
                }
                ,
                i.releaseDescriptorSetCache = function(t) {
                    var e = this._dsCacheHashByTexture.get(t);
                    e && this._descriptorSetCache.has(e) && (this._descriptorSetCache.get(e).destroy(),
                    this._descriptorSetCache.delete(e),
                    this._dsCacheHashByTexture.delete(t))
                }
                ,
                i.destroy = function() {
                    this._descriptorSetCache.forEach((function(t) {
                        t.destroy()
                    }
                    )),
                    this._descriptorSetCache.clear(),
                    this._dsCacheHashByTexture.clear(),
                    this._localDescriptorSetCache.length = 0,
                    this._localCachePool.destroy()
                }
                ,
                t
            }();
            ci.internal.Batcher2D = Ab;
            var Bb, xb, Db, wb, Ob, Pb, Mb, Ib, Lb, Fb, Nb, kb, Gb, zb, Ub, Hb, Vb, Wb, Xb, jb, Yb, Kb, Zb, qb, Jb, Qb, $b, tE, eE, iE, rE, nE, sE, aE, oE, lE, hE, uE, cE, _E, dE, pE, fE, gE, mE, yE, vE, SE, TE, bE, EE, AE = null, CE = -1, RE = "BES bswy:->@123丁ぁᄁ", BE = Object.create(null), xE = [], DE = 3e3;
            function wE() {
                for (var t = !0, e = Date.now(), i = xE.length - 1; i >= 0; i--) {
                    var r = xE[i]
                      , n = r.fontFamilyName;
                    if (e - r.startTime > DE)
                        ii(4933, n),
                        r.onComplete(null, n),
                        xE.splice(i, 1);
                    else {
                        var s = r.refWidth
                          , a = "40px " + n;
                        AE.font = a,
                        s !== P_(AE, RE, a) ? (xE.splice(i, 1),
                        r.onComplete(null, n)) : t = !1
                    }
                }
                t && (clearInterval(CE),
                CE = -1)
            }
            function OE(t, e, i) {
                var r = function(t) {
                    var e = t.lastIndexOf(".ttf");
                    if (-1 === e)
                        return t;
                    var i, r = t.lastIndexOf("/");
                    return -1 !== (i = -1 === r ? t.substring(0, e) + "_LABEL" : t.substring(r + 1, e) + "_LABEL").indexOf(" ") && (i = '"' + i + '"'),
                    i
                }(t);
                if (BE[r])
                    i(null, r);
                else {
                    if (!AE) {
                        var n = document.createElement("canvas");
                        n.width = 100,
                        n.height = 100,
                        AE = n.getContext("2d")
                    }
                    var s = P_(AE, RE, "40px " + r)
                      , a = document.createElement("style");
                    a.type = "text/css";
                    var o = "";
                    Number.isNaN(r) ? o += "@font-face { font-family:" + r + "; src:" : o += '@font-face { font-family:"' + r + '"; src:',
                    o += 'url("' + t + '");',
                    a.textContent = o + "}",
                    document.body.appendChild(a);
                    var l, h, u, c, _, d, p = document.createElement("div"), f = p.style;
                    if (f.fontFamily = r,
                    p.innerHTML = ".",
                    f.position = "absolute",
                    f.left = "-100px",
                    f.top = "-100px",
                    document.body.appendChild(p),
                    function() {
                        if (void 0 === Bb)
                            if ("FontFace"in window) {
                                var t = /Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent)
                                  , e = /OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent) && /Apple/.exec(window.navigator.vendor);
                                Bb = t ? parseInt(t[1], 10) > 42 : !e
                            } else
                                Bb = !1;
                        return Bb
                    }())
                        l = Date.now(),
                        h = r,
                        u = i,
                        c = new Promise((function(t, e) {
                            !function i() {
                                Date.now() - l >= DE ? e() : document.fonts.load("40px " + h).then((function(e) {
                                    e.length >= 1 ? t() : setTimeout(i, 100)
                                }
                                ), (function() {
                                    e()
                                }
                                ))
                            }()
                        }
                        )),
                        _ = null,
                        d = new Promise((function(t, e) {
                            _ = setTimeout(e, DE)
                        }
                        )),
                        Promise.race([d, c]).then((function() {
                            _ && (clearTimeout(_),
                            _ = null),
                            u(null, h)
                        }
                        ), (function() {
                            ii(4933, h),
                            u(null, h)
                        }
                        ));
                    else {
                        var g = {
                            fontFamilyName: r,
                            refWidth: s,
                            onComplete: i,
                            startTime: Date.now()
                        };
                        xE.push(g),
                        -1 === CE && (CE = setInterval(wE, 100))
                    }
                    BE[r] = a
                }
            }
            function PE(t, e, i, r) {
                var n = new p_;
                n._nativeUrl = t,
                n._nativeAsset = e,
                r(null, n)
            }
            Cn.register({
                ".font": OE,
                ".eot": OE,
                ".ttf": OE,
                ".woff": OE,
                ".svg": OE,
                ".ttc": OE
            }),
            Rn.register({
                ".font": PE,
                ".eot": PE,
                ".ttf": PE,
                ".woff": PE,
                ".svg": PE,
                ".ttc": PE
            }),
            ci.UI = {
                MeshBuffer: Qy,
                spriteAssembler: gb,
                graphicsAssembler: yS,
                labelAssembler: GT
            };
            var ME, IE, LE, FE = new Zi;
            !function(t) {
                t[t.NONE = 0] = "NONE",
                t[t.COLOR = 1] = "COLOR",
                t[t.SPRITE = 2] = "SPRITE",
                t[t.SCALE = 3] = "SCALE"
            }(ME || (ME = {})),
            Yr(ME),
            function(t) {
                t.NORMAL = "normal",
                t.HOVER = "hover",
                t.PRESSED = "pressed",
                t.DISABLED = "disabled"
            }(IE || (IE = {})),
            function(t) {
                t.CLICK = "click"
            }(LE || (LE = {}));
            var NE, kE, GE, zE = function(e) {
                return t({
                    Button: e,
                    ButtonComponent: e
                }),
                e
            }((xb = Ti("cc.Button"),
            Db = Ii(),
            wb = Li(110),
            Ob = Fi(),
            Pb = Zr(yd),
            Mb = Ci(Sr),
            Ib = Xr(),
            Lb = Ni(),
            Fb = Xr(),
            Nb = Ni(),
            kb = Ci(ME),
            Gb = Xr(),
            zb = Ni(),
            Ub = Ni(),
            Hb = Ni(),
            Vb = Ni(),
            Wb = Ni(),
            Xb = Dn(),
            jb = wn(),
            Yb = Ni(),
            Kb = Ni(),
            Zb = Ci(Jc),
            qb = Ni(),
            Jb = Ci(Jc),
            Qb = Ni(),
            $b = Ci(Jc),
            tE = Ni(),
            eE = Ci(Jc),
            iE = Ni(),
            rE = Ci([Bn]),
            nE = Xr(),
            sE = Ni(),
            xb(aE = Db(aE = wb(aE = Ob(aE = Pb(aE = Ri((EE = bE = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "clickEvents", lE, Gi(e)),
                    Oi(e, "_interactable", hE, Gi(e)),
                    Oi(e, "_transition", uE, Gi(e)),
                    Oi(e, "_normalColor", cE, Gi(e)),
                    Oi(e, "_hoverColor", _E, Gi(e)),
                    Oi(e, "_pressedColor", dE, Gi(e)),
                    Oi(e, "_disabledColor", pE, Gi(e)),
                    Oi(e, "_normalSprite", fE, Gi(e)),
                    Oi(e, "_hoverSprite", gE, Gi(e)),
                    Oi(e, "_pressedSprite", mE, Gi(e)),
                    Oi(e, "_disabledSprite", yE, Gi(e)),
                    Oi(e, "_duration", vE, Gi(e)),
                    Oi(e, "_zoomScale", SE, Gi(e)),
                    Oi(e, "_target", TE, Gi(e)),
                    e._pressed = !1,
                    e._hovered = !1,
                    e._fromColor = new Zi,
                    e._toColor = new Zi,
                    e._time = 0,
                    e._transitionFinished = !0,
                    e._fromScale = new di,
                    e._toScale = new di,
                    e._originalScale = null,
                    e._sprite = null,
                    e._targetScale = new di,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.__preload = function() {
                    this.target || (this.target = this.node);
                    var t = this.node.getComponent(ey);
                    t && (this._normalSprite = t.spriteFrame),
                    this._applyTarget(),
                    this._resetState()
                }
                ,
                i.onEnable = function() {
                    this._registerNodeEvent()
                }
                ,
                i.onDisable = function() {
                    this._resetState(),
                    this._unregisterNodeEvent()
                }
                ,
                i.onDestroy = function() {
                    this.target.isValid && this._unregisterTargetEvent(this.target)
                }
                ,
                i.update = function(t) {
                    var e = this.target;
                    if (!this._transitionFinished && e && (this._transition === ME.COLOR || this._transition === ME.SCALE)) {
                        this._time += t;
                        var i = 1;
                        if (this._duration > 0 && (i = this._time / this._duration),
                        i >= 1 && (i = 1),
                        this._transition === ME.COLOR) {
                            var r = e._uiProps.uiComp;
                            Zi.lerp(FE, this._fromColor, this._toColor, i),
                            r && (r.color = FE)
                        } else
                            this.transition === ME.SCALE && (e.getScale(this._targetScale),
                            this._targetScale.x = xn(this._fromScale.x, this._toScale.x, i),
                            this._targetScale.y = xn(this._fromScale.y, this._toScale.y, i),
                            e.setScale(this._targetScale));
                        1 === i && (this._transitionFinished = !0)
                    }
                }
                ,
                i._resizeNodeToTargetNode = function() {
                    this.target && this.target._uiProps.uiTransformComp
                }
                ,
                i._resetState = function() {
                    this._pressed = !1,
                    this._hovered = !1;
                    var t = this.target;
                    if (t) {
                        var e = this._transition;
                        if (e === ME.COLOR && this._interactable) {
                            var i = t.getComponent(ef);
                            i && (i.color = this._normalColor)
                        } else
                            e === ME.SCALE && this._originalScale && t.setScale(this._originalScale);
                        this._transitionFinished = !0
                    }
                }
                ,
                i._registerNodeEvent = function() {
                    this.node.on(Wr.TOUCH_START, this._onTouchBegan, this),
                    this.node.on(Wr.TOUCH_MOVE, this._onTouchMove, this),
                    this.node.on(Wr.TOUCH_END, this._onTouchEnded, this),
                    this.node.on(Wr.TOUCH_CANCEL, this._onTouchCancel, this),
                    this.node.on(Wr.MOUSE_ENTER, this._onMouseMoveIn, this),
                    this.node.on(Wr.MOUSE_LEAVE, this._onMouseMoveOut, this)
                }
                ,
                i._registerTargetEvent = function(t) {
                    t.on(Wr.TRANSFORM_CHANGED, this._onTargetTransformChanged, this)
                }
                ,
                i._unregisterNodeEvent = function() {
                    this.node.off(Wr.TOUCH_START, this._onTouchBegan, this),
                    this.node.off(Wr.TOUCH_MOVE, this._onTouchMove, this),
                    this.node.off(Wr.TOUCH_END, this._onTouchEnded, this),
                    this.node.off(Wr.TOUCH_CANCEL, this._onTouchCancel, this),
                    this.node.off(Wr.MOUSE_ENTER, this._onMouseMoveIn, this),
                    this.node.off(Wr.MOUSE_LEAVE, this._onMouseMoveOut, this)
                }
                ,
                i._unregisterTargetEvent = function(t) {
                    t.off(Wr.TRANSFORM_CHANGED)
                }
                ,
                i._getTargetSprite = function(t) {
                    var e = null;
                    return t && (e = t.getComponent(ey)),
                    e
                }
                ,
                i._applyTarget = function() {
                    this.target && (this._sprite = this._getTargetSprite(this.target),
                    this._originalScale || (this._originalScale = new di),
                    di.copy(this._originalScale, this.target.getScale()),
                    this._registerTargetEvent(this.target))
                }
                ,
                i._onTargetSpriteFrameChanged = function(t) {
                    this._transition === ME.SPRITE && this._setCurrentStateSpriteFrame(t.spriteFrame)
                }
                ,
                i._setCurrentStateSpriteFrame = function(t) {
                    if (t)
                        switch (this._getButtonState()) {
                        case IE.NORMAL:
                            this._normalSprite = t;
                            break;
                        case IE.HOVER:
                            this._hoverSprite = t;
                            break;
                        case IE.PRESSED:
                            this._pressedSprite = t;
                            break;
                        case IE.DISABLED:
                            this._disabledSprite = t
                        }
                }
                ,
                i._onTargetColorChanged = function(t) {
                    this._transition === ME.COLOR && this._setCurrentStateColor(t)
                }
                ,
                i._setCurrentStateColor = function(t) {
                    switch (this._getButtonState()) {
                    case IE.NORMAL:
                        this._normalColor = t;
                        break;
                    case IE.HOVER:
                        this._hoverColor = t;
                        break;
                    case IE.PRESSED:
                        this._pressedColor = t;
                        break;
                    case IE.DISABLED:
                        this._disabledColor = t
                    }
                }
                ,
                i._onTargetTransformChanged = function(t) {
                    t & xi.SCALE && this._originalScale && this._transition === ME.SCALE && this._transitionFinished && di.copy(this._originalScale, this.target.getScale())
                }
                ,
                i._onTouchBegan = function(t) {
                    this._interactable && this.enabledInHierarchy && (this._pressed = !0,
                    this._updateState(),
                    t && (t.propagationStopped = !0))
                }
                ,
                i._onTouchMove = function(t) {
                    if (this._interactable && this.enabledInHierarchy && this._pressed && t) {
                        var e = t.touch;
                        if (e) {
                            var i, r = this.node._uiProps.uiTransformComp.isHit(e.getUILocation());
                            this._transition === ME.SCALE && this.target && this._originalScale ? r ? (di.copy(this._fromScale, this._originalScale),
                            di.multiplyScalar(this._toScale, this._originalScale, this._zoomScale),
                            this._transitionFinished = !1) : (this._time = 0,
                            this._transitionFinished = !0,
                            this.target.setScale(this._originalScale)) : (i = r ? IE.PRESSED : IE.NORMAL,
                            this._applyTransition(i)),
                            t && (t.propagationStopped = !0)
                        }
                    }
                }
                ,
                i._onTouchEnded = function(t) {
                    this._interactable && this.enabledInHierarchy && (this._pressed && (Bn.emitEvents(this.clickEvents, t),
                    this.node.emit(LE.CLICK, this)),
                    this._pressed = !1,
                    this._updateState(),
                    t && (t.propagationStopped = !0))
                }
                ,
                i._onTouchCancel = function() {
                    this._interactable && this.enabledInHierarchy && (this._pressed = !1,
                    this._updateState())
                }
                ,
                i._onMouseMoveIn = function() {
                    !this._pressed && this.interactable && this.enabledInHierarchy && (this._transition !== ME.SPRITE || this._hoverSprite) && (this._hovered || (this._hovered = !0,
                    this._updateState()))
                }
                ,
                i._onMouseMoveOut = function() {
                    this._hovered && (this._hovered = !1,
                    this._updateState())
                }
                ,
                i._updateState = function() {
                    var t = this._getButtonState();
                    this._applyTransition(t)
                }
                ,
                i._getButtonState = function() {
                    var t = IE.NORMAL;
                    return this._interactable ? this._pressed ? t = IE.PRESSED : this._hovered && (t = IE.HOVER) : t = IE.DISABLED,
                    t.toString()
                }
                ,
                i._updateColorTransition = function(t) {
                    var e, i = this[t + "Color"], r = null === (e = this.target) || void 0 === e ? void 0 : e.getComponent(ef);
                    r && (t === IE.DISABLED ? r.color = i : (this._fromColor = r.color.clone(),
                    this._toColor = i,
                    this._time = 0,
                    this._transitionFinished = !1))
                }
                ,
                i._updateSpriteTransition = function(t) {
                    var e = this[t + "Sprite"];
                    this._sprite && e && (this._sprite.spriteFrame = e)
                }
                ,
                i._updateScaleTransition = function(t) {
                    this._interactable && (t === IE.PRESSED ? this._zoomUp() : this._zoomBack())
                }
                ,
                i._zoomUp = function() {
                    this._originalScale && (di.copy(this._fromScale, this._originalScale),
                    di.multiplyScalar(this._toScale, this._originalScale, this._zoomScale),
                    this._time = 0,
                    this._transitionFinished = !1)
                }
                ,
                i._zoomBack = function() {
                    this.target && this._originalScale && (di.copy(this._fromScale, this.target.getScale()),
                    di.copy(this._toScale, this._originalScale),
                    this._time = 0,
                    this._transitionFinished = !1)
                }
                ,
                i._applyTransition = function(t) {
                    var e = this._transition;
                    e === ME.COLOR ? this._updateColorTransition(t) : e === ME.SPRITE ? this._updateSpriteTransition(t) : e === ME.SCALE && this._updateScaleTransition(t)
                }
                ,
                Je(e, [{
                    key: "target",
                    get: function() {
                        return this._target || this.node
                    },
                    set: function(t) {
                        this._target !== t && (this._target && this._unregisterTargetEvent(this._target),
                        this._target = t,
                        this._applyTarget())
                    }
                }, {
                    key: "interactable",
                    get: function() {
                        return this._interactable
                    },
                    set: function(t) {
                        this._interactable = t,
                        this._updateState(),
                        this._interactable || this._resetState()
                    }
                }, {
                    key: "_resizeToTarget",
                    set: function(t) {
                        t && this._resizeNodeToTargetNode()
                    }
                }, {
                    key: "transition",
                    get: function() {
                        return this._transition
                    },
                    set: function(t) {
                        this._transition !== t && (this._transition === ME.COLOR ? this._updateColorTransition(IE.NORMAL) : this._transition === ME.SPRITE && this._updateSpriteTransition(IE.NORMAL),
                        this._transition = t,
                        this._updateState())
                    }
                }, {
                    key: "normalColor",
                    get: function() {
                        return this._normalColor
                    },
                    set: function(t) {
                        this._normalColor !== t && (this._normalColor.set(t),
                        this._updateState())
                    }
                }, {
                    key: "pressedColor",
                    get: function() {
                        return this._pressedColor
                    },
                    set: function(t) {
                        this._pressedColor !== t && this._pressedColor.set(t)
                    }
                }, {
                    key: "hoverColor",
                    get: function() {
                        return this._hoverColor
                    },
                    set: function(t) {
                        this._hoverColor !== t && this._hoverColor.set(t)
                    }
                }, {
                    key: "disabledColor",
                    get: function() {
                        return this._disabledColor
                    },
                    set: function(t) {
                        this._disabledColor !== t && (this._disabledColor.set(t),
                        this._updateState())
                    }
                }, {
                    key: "duration",
                    get: function() {
                        return this._duration
                    },
                    set: function(t) {
                        this._duration !== t && (this._duration = t)
                    }
                }, {
                    key: "zoomScale",
                    get: function() {
                        return this._zoomScale
                    },
                    set: function(t) {
                        this._zoomScale !== t && (this._zoomScale = t)
                    }
                }, {
                    key: "normalSprite",
                    get: function() {
                        return this._normalSprite
                    },
                    set: function(t) {
                        if (this._normalSprite !== t) {
                            this._normalSprite = t;
                            var e = this.node.getComponent(ey);
                            e && (e.spriteFrame = t),
                            this._updateState()
                        }
                    }
                }, {
                    key: "pressedSprite",
                    get: function() {
                        return this._pressedSprite
                    },
                    set: function(t) {
                        this._pressedSprite !== t && (this._pressedSprite = t,
                        this._updateState())
                    }
                }, {
                    key: "hoverSprite",
                    get: function() {
                        return this._hoverSprite
                    },
                    set: function(t) {
                        this._hoverSprite !== t && (this._hoverSprite = t,
                        this._updateState())
                    }
                }, {
                    key: "disabledSprite",
                    get: function() {
                        return this._disabledSprite
                    },
                    set: function(t) {
                        this._disabledSprite !== t && (this._disabledSprite = t,
                        this._updateState())
                    }
                }]),
                e
            }(Ki),
            bE.Transition = ME,
            bE.EventType = LE,
            Ei((oE = EE).prototype, "target", [Mb, Ib, Lb], Object.getOwnPropertyDescriptor(oE.prototype, "target"), oE.prototype),
            Ei(oE.prototype, "interactable", [Fb, Nb], Object.getOwnPropertyDescriptor(oE.prototype, "interactable"), oE.prototype),
            Ei(oE.prototype, "transition", [kb, Gb, zb], Object.getOwnPropertyDescriptor(oE.prototype, "transition"), oE.prototype),
            Ei(oE.prototype, "normalColor", [Ub], Object.getOwnPropertyDescriptor(oE.prototype, "normalColor"), oE.prototype),
            Ei(oE.prototype, "pressedColor", [Hb], Object.getOwnPropertyDescriptor(oE.prototype, "pressedColor"), oE.prototype),
            Ei(oE.prototype, "hoverColor", [Vb], Object.getOwnPropertyDescriptor(oE.prototype, "hoverColor"), oE.prototype),
            Ei(oE.prototype, "disabledColor", [Wb], Object.getOwnPropertyDescriptor(oE.prototype, "disabledColor"), oE.prototype),
            Ei(oE.prototype, "duration", [Xb, jb, Yb], Object.getOwnPropertyDescriptor(oE.prototype, "duration"), oE.prototype),
            Ei(oE.prototype, "zoomScale", [Kb], Object.getOwnPropertyDescriptor(oE.prototype, "zoomScale"), oE.prototype),
            Ei(oE.prototype, "normalSprite", [Zb, qb], Object.getOwnPropertyDescriptor(oE.prototype, "normalSprite"), oE.prototype),
            Ei(oE.prototype, "pressedSprite", [Jb, Qb], Object.getOwnPropertyDescriptor(oE.prototype, "pressedSprite"), oE.prototype),
            Ei(oE.prototype, "hoverSprite", [$b, tE], Object.getOwnPropertyDescriptor(oE.prototype, "hoverSprite"), oE.prototype),
            Ei(oE.prototype, "disabledSprite", [eE, iE], Object.getOwnPropertyDescriptor(oE.prototype, "disabledSprite"), oE.prototype),
            lE = Ei(oE.prototype, "clickEvents", [rE, Pi, nE, sE], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            hE = Ei(oE.prototype, "_interactable", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            uE = Ei(oE.prototype, "_transition", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return ME.NONE
                }
            }),
            cE = Ei(oE.prototype, "_normalColor", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Zi.WHITE.clone()
                }
            }),
            _E = Ei(oE.prototype, "_hoverColor", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Zi(211,211,211,255)
                }
            }),
            dE = Ei(oE.prototype, "_pressedColor", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Zi.WHITE.clone()
                }
            }),
            pE = Ei(oE.prototype, "_disabledColor", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Zi(124,124,124,255)
                }
            }),
            fE = Ei(oE.prototype, "_normalSprite", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            gE = Ei(oE.prototype, "_hoverSprite", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            mE = Ei(oE.prototype, "_pressedSprite", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            yE = Ei(oE.prototype, "_disabledSprite", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            vE = Ei(oE.prototype, "_duration", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return .1
                }
            }),
            SE = Ei(oE.prototype, "_zoomScale", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1.2
                }
            }),
            TE = Ei(oE.prototype, "_target", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            aE = oE)) || aE) || aE) || aE) || aE) || aE) || aE)), UE = function() {
                function t() {}
                return t.add = function(t) {
                    var e = this._tabIndexList;
                    -1 === e.indexOf(t) && e.push(t)
                }
                ,
                t.remove = function(t) {
                    var e = this._tabIndexList
                      , i = e.indexOf(t);
                    -1 !== i && e.splice(i, 1)
                }
                ,
                t.resort = function() {
                    this._tabIndexList.sort((function(t, e) {
                        return t._delegate.tabIndex - e._delegate.tabIndex
                    }
                    ))
                }
                ,
                t.next = function(t) {
                    var e = this._tabIndexList
                      , i = e.indexOf(t);
                    if (t.setFocus(!1),
                    -1 !== i) {
                        var r = e[i + 1];
                        r && r._delegate.tabIndex >= 0 && r.setFocus(!0)
                    }
                }
                ,
                t
            }();
            UE._tabIndexList = [],
            function(t) {
                t[t.DEFAULT = 0] = "DEFAULT",
                t[t.DONE = 1] = "DONE",
                t[t.SEND = 2] = "SEND",
                t[t.SEARCH = 3] = "SEARCH",
                t[t.GO = 4] = "GO",
                t[t.NEXT = 5] = "NEXT"
            }(NE || (NE = {})),
            Si(NE),
            function(t) {
                t[t.ANY = 0] = "ANY",
                t[t.EMAIL_ADDR = 1] = "EMAIL_ADDR",
                t[t.NUMERIC = 2] = "NUMERIC",
                t[t.PHONE_NUMBER = 3] = "PHONE_NUMBER",
                t[t.URL = 4] = "URL",
                t[t.DECIMAL = 5] = "DECIMAL",
                t[t.SINGLE_LINE = 6] = "SINGLE_LINE"
            }(kE || (kE = {})),
            Si(kE),
            function(t) {
                t[t.PASSWORD = 0] = "PASSWORD",
                t[t.SENSITIVE = 1] = "SENSITIVE",
                t[t.INITIAL_CAPS_WORD = 2] = "INITIAL_CAPS_WORD",
                t[t.INITIAL_CAPS_SENTENCE = 3] = "INITIAL_CAPS_SENTENCE",
                t[t.INITIAL_CAPS_ALL_CHARACTERS = 4] = "INITIAL_CAPS_ALL_CHARACTERS",
                t[t.DEFAULT = 5] = "DEFAULT"
            }(GE || (GE = {})),
            Si(GE);
            var HE, VE, WE, XE, jE, YE, KE, ZE, qE, JE, QE, $E, tA, eA, iA, rA, nA, sA, aA, oA, lA, hA, uA, cA, _A, dA, pA, fA, gA, mA, yA, vA, SA, TA, bA, EA, AA, CA, RA, BA, xA, DA, wA, OA, PA, MA, IA, LA, FA, NA, kA, GA, zA, UA, HA, VA, WA, XA, jA, YA, KA, ZA = function() {
                function t() {
                    this._editing = !1,
                    this._delegate = null
                }
                var e = t.prototype;
                return e.init = function() {}
                ,
                e.onEnable = function() {}
                ,
                e.update = function() {}
                ,
                e.onDisable = function() {
                    this._editing && this.endEditing()
                }
                ,
                e.clear = function() {
                    this._delegate = null
                }
                ,
                e.setTabIndex = function() {}
                ,
                e.setSize = function() {}
                ,
                e.setFocus = function(t) {
                    t ? this.beginEditing() : this.endEditing()
                }
                ,
                e.isFocused = function() {
                    return this._editing
                }
                ,
                e.beginEditing = function() {}
                ,
                e.endEditing = function() {}
                ,
                t
            }(), qA = new Ui, JA = new Ui, QA = new di, $A = null, tC = 0, eC = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._delegate = null,
                    e._inputMode = -1,
                    e._inputFlag = -1,
                    e._returnType = -1,
                    e.__eventListeners = {},
                    e.__autoResize = !1,
                    e.__orientationChanged = void 0,
                    e._edTxt = null,
                    e._isTextArea = !1,
                    e._textLabelFont = null,
                    e._textLabelFontSize = null,
                    e._textLabelFontColor = null,
                    e._textLabelAlign = null,
                    e._placeholderLabelFont = null,
                    e._placeholderLabelFontSize = null,
                    e._placeholderLabelFontColor = null,
                    e._placeholderLabelAlign = null,
                    e._placeholderLineHeight = null,
                    e._placeholderStyleSheet = null,
                    e._domId = "EditBoxId_" + ++tC,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.init = function(t) {
                    t && (this._delegate = t,
                    t.inputMode === kE.ANY ? this._createTextArea() : this._createInput(),
                    UE.add(this),
                    this.setTabIndex(t.tabIndex),
                    this._initStyleSheet(),
                    this._registerEventListeners(),
                    this._addDomToGameContainer())
                }
                ,
                i.clear = function() {
                    this._removeEventListeners(),
                    this._removeDomFromGameContainer(),
                    UE.remove(this),
                    $A === this && ($A = null),
                    this._delegate = null
                }
                ,
                i.update = function() {
                    this._updateMatrix()
                }
                ,
                i.setTabIndex = function(t) {
                    this._edTxt.tabIndex = t,
                    UE.resort()
                }
                ,
                i.setSize = function(t, e) {
                    var i = this._edTxt;
                    i && (i.style.width = t + "px",
                    i.style.height = e + "px")
                }
                ,
                i.beginEditing = function() {
                    $A && $A !== this && $A.setFocus(!1),
                    this._editing = !0,
                    $A = this,
                    this._delegate._editBoxEditingDidBegan(),
                    this._showDom(),
                    this._edTxt.focus()
                }
                ,
                i.endEditing = function() {
                    this._edTxt.blur()
                }
                ,
                i._createInput = function() {
                    this._isTextArea = !1,
                    this._edTxt = document.createElement("input")
                }
                ,
                i._createTextArea = function() {
                    this._isTextArea = !0,
                    this._edTxt = document.createElement("textarea")
                }
                ,
                i._addDomToGameContainer = function() {
                    ci.GAME_VIEW && this._edTxt ? (ci.gameView.container.appendChild(this._edTxt),
                    ci.gameView.head.appendChild(this._placeholderStyleSheet)) : On.container && this._edTxt && (On.container.appendChild(this._edTxt),
                    document.head.appendChild(this._placeholderStyleSheet))
                }
                ,
                i._removeDomFromGameContainer = function() {
                    (ci.GAME_VIEW ? Pn(ci.gameView.container, this._edTxt) : Pn(On.container, this._edTxt)) && this._edTxt && (ci.GAME_VIEW ? ci.gameView.container.removeChild(this._edTxt) : On.container.removeChild(this._edTxt)),
                    (ci.GAME_VIEW ? Pn(ci.gameView.head, this._placeholderStyleSheet) : Pn(document.head, this._placeholderStyleSheet)) && (ci.GAME_VIEW ? ci.gameView.head.removeChild(this._placeholderStyleSheet) : document.head.removeChild(this._placeholderStyleSheet)),
                    this._edTxt = null,
                    this._placeholderStyleSheet = null
                }
                ,
                i._showDom = function() {
                    this._updateMaxLength(),
                    this._updateInputType(),
                    this._updateStyleSheet(),
                    this._edTxt && this._delegate && (this._edTxt.style.display = "",
                    this._delegate._hideLabels()),
                    ni.isMobile && this._showDomOnMobile()
                }
                ,
                i._hideDom = function() {
                    var t = this._edTxt;
                    t && this._delegate && (t.style.display = "none",
                    this._delegate._showLabels()),
                    ni.isMobile && this._hideDomOnMobile()
                }
                ,
                i._showDomOnMobile = function() {
                    ni.os !== si.ANDROID && ni.os !== si.OHOS || (Mn.handleResizeEvent = !1,
                    this._adjustWindowScroll())
                }
                ,
                i._hideDomOnMobile = function() {
                    ni.os !== si.ANDROID && ni.os !== si.OHOS || (Mn.handleResizeEvent = !0),
                    this._scrollBackWindow()
                }
                ,
                i._adjustWindowScroll = function() {
                    var t = this;
                    setTimeout((function() {
                        window.scrollY < 40 && t._edTxt.scrollIntoView({
                            block: "start",
                            inline: "nearest",
                            behavior: "smooth"
                        })
                    }
                    ), 400)
                }
                ,
                i._scrollBackWindow = function() {
                    setTimeout((function() {
                        ni.browserType !== ai.WECHAT || ni.os !== si.IOS ? window.scrollTo(0, 0) : window.top && window.top.scrollTo(0, 0)
                    }
                    ), 400)
                }
                ,
                i._updateMatrix = function() {
                    if (this._edTxt) {
                        var t = this._delegate.node
                          , e = ln.getScaleX()
                          , i = ln.getScaleY()
                          , r = 1
                          , n = 1;
                        ci.GAME_VIEW && (r = ci.gameView.canvas.width / ci.game.canvas.width,
                        n = ci.gameView.canvas.height / ci.game.canvas.height),
                        e *= r,
                        i *= n;
                        var s = ln.getViewportRect()
                          , a = Mn.devicePixelRatio;
                        t.getWorldMatrix(qA);
                        var o = t._uiProps.uiTransformComp;
                        if (o && di.set(QA, -o.anchorX * o.width, -o.anchorY * o.height, QA.z),
                        Ui.transform(qA, qA, QA),
                        t._uiProps.uiTransformComp) {
                            var l = Ur.root.batcher2D.getFirstRenderCamera(t);
                            if (l) {
                                l.node.getWorldRT(JA);
                                var h = JA.m12
                                  , u = JA.m13
                                  , c = jr.center;
                                JA.m12 = c.x - (JA.m00 * h + JA.m04 * u),
                                JA.m13 = c.y - (JA.m01 * h + JA.m05 * u),
                                Ui.multiply(JA, JA, qA),
                                e /= a,
                                i /= a;
                                var _ = ci.GAME_VIEW ? ci.gameView.container : On.container
                                  , d = JA.m00 * e
                                  , p = qA.m01
                                  , f = qA.m04
                                  , g = JA.m05 * i
                                  , m = parseInt(_ && _.style.paddingLeft || "0");
                                m += s.x * r / a;
                                var y = parseInt(_ && _.style.paddingBottom || "0");
                                y += s.y / a;
                                var v = "matrix(" + d + "," + -p + "," + -f + "," + g + "," + (JA.m12 * e + m) + "," + -(JA.m13 * i + y) + ")";
                                this._edTxt.style.transform = v,
                                this._edTxt.style["-webkit-transform"] = v,
                                this._edTxt.style["transform-origin"] = "0px 100% 0px",
                                this._edTxt.style["-webkit-transform-origin"] = "0px 100% 0px"
                            }
                        }
                    }
                }
                ,
                i._updateInputType = function() {
                    var t = this._delegate
                      , e = t.inputMode
                      , i = t.inputFlag
                      , r = t.returnType
                      , n = this._edTxt;
                    if (this._inputMode !== e || this._inputFlag !== i || this._returnType !== r) {
                        if (this._inputMode = e,
                        this._inputFlag = i,
                        this._returnType = r,
                        this._isTextArea) {
                            var s = "none";
                            return i === GE.INITIAL_CAPS_ALL_CHARACTERS ? s = "uppercase" : i === GE.INITIAL_CAPS_WORD && (s = "capitalize"),
                            void (n.style.textTransform = s)
                        }
                        if (n = n,
                        i === GE.PASSWORD)
                            return n.type = "password",
                            void (n.style.textTransform = "none");
                        var a = n.type;
                        e === kE.EMAIL_ADDR ? a = "email" : e === kE.NUMERIC || e === kE.DECIMAL ? a = "number" : e === kE.PHONE_NUMBER ? (a = "number",
                        n.pattern = "[0-9]*",
                        n.addEventListener("wheel", (function() {
                            return !1
                        }
                        ))) : e === kE.URL ? a = "url" : (a = "text",
                        r === NE.SEARCH && (a = "search")),
                        n.type = a;
                        var o = "none";
                        i === GE.INITIAL_CAPS_ALL_CHARACTERS ? o = "uppercase" : i === GE.INITIAL_CAPS_WORD && (o = "capitalize"),
                        n.style.textTransform = o
                    }
                }
                ,
                i._updateMaxLength = function() {
                    var t = this._delegate.maxLength;
                    t < 0 && (t = 65535),
                    this._edTxt.maxLength = t
                }
                ,
                i._initStyleSheet = function() {
                    if (this._edTxt) {
                        var t = this._edTxt;
                        t.style.color = "#000000",
                        t.style.border = "0px",
                        t.style.background = "transparent",
                        t.style.width = "100%",
                        t.style.height = "100%",
                        t.style.outline = "medium",
                        t.style.padding = "0",
                        t.style.textTransform = "none",
                        t.style.display = "none",
                        t.style.position = "absolute",
                        t.style.bottom = "0px",
                        t.style.left = "2px",
                        t.className = "cocosEditBox",
                        t.style.fontFamily = "Arial",
                        t.id = this._domId,
                        this._isTextArea ? (t.style.resize = "none",
                        t.style.overflowY = "scroll") : ((t = t).type = "text",
                        t.style["-moz-appearance"] = "textfield"),
                        this._placeholderStyleSheet = document.createElement("style")
                    }
                }
                ,
                i._updateStyleSheet = function() {
                    var t = this._delegate
                      , e = this._edTxt;
                    e && t && (e.value = t.string,
                    e.placeholder = t.placeholder,
                    this._updateTextLabel(t.textLabel),
                    this._updatePlaceholderLabel(t.placeholderLabel))
                }
                ,
                i._updateTextLabel = function(t) {
                    if (t) {
                        var e = t.font;
                        e = !e || e instanceof y_ ? t.fontFamily : e._fontFamily;
                        var i = t.fontSize * t.node.scale.y;
                        if ((this._textLabelFont !== e || this._textLabelFontSize !== i || this._textLabelFontColor !== t.fontColor || this._textLabelAlign !== t.horizontalAlign) && (this._textLabelFont = e,
                        this._textLabelFontSize = i,
                        this._textLabelFontColor = t.fontColor,
                        this._textLabelAlign = t.horizontalAlign,
                        this._edTxt)) {
                            var r = this._edTxt;
                            switch (r.style.fontSize = i + "px",
                            r.style.color = t.color.toCSS(),
                            r.style.fontFamily = e,
                            t.horizontalAlign) {
                            case af.HorizontalAlign.LEFT:
                                r.style.textAlign = "left";
                                break;
                            case af.HorizontalAlign.CENTER:
                                r.style.textAlign = "center";
                                break;
                            case af.HorizontalAlign.RIGHT:
                                r.style.textAlign = "right"
                            }
                        }
                    }
                }
                ,
                i._updatePlaceholderLabel = function(t) {
                    if (t) {
                        var e = t.font;
                        e = !e || e instanceof y_ ? t.fontFamily : t.font._fontFamily;
                        var i = t.fontSize * t.node.scale.y;
                        if (this._placeholderLabelFont !== e || this._placeholderLabelFontSize !== i || this._placeholderLabelFontColor !== t.fontColor || this._placeholderLabelAlign !== t.horizontalAlign || this._placeholderLineHeight !== t.fontSize) {
                            this._placeholderLabelFont = e,
                            this._placeholderLabelFontSize = i,
                            this._placeholderLabelFontColor = t.fontColor,
                            this._placeholderLabelAlign = t.horizontalAlign,
                            this._placeholderLineHeight = t.fontSize;
                            var r = this._placeholderStyleSheet
                              , n = t.color.toCSS()
                              , s = t.fontSize
                              , a = "";
                            switch (t.horizontalAlign) {
                            case af.HorizontalAlign.LEFT:
                                a = "left";
                                break;
                            case af.HorizontalAlign.CENTER:
                                a = "center";
                                break;
                            case af.HorizontalAlign.RIGHT:
                                a = "right"
                            }
                            r.innerHTML = "#" + this._domId + "::-webkit-input-placeholder{text-transform: initial;-family: " + e + ";font-size: " + i + "px;color: " + n + ";line-height: " + s + "px;text-align: " + a + ";}#" + this._domId + "::-moz-placeholder{text-transform: initial;-family: " + e + ";font-size: " + i + "px;color: " + n + ";line-height: " + s + "px;text-align: " + a + ";}#" + this._domId + "::-ms-input-placeholder{text-transform: initial;-family: " + e + ";font-size: " + i + "px;color: " + n + ";line-height: " + s + "px;text-align: " + a + ";}",
                            ni.browserType === ai.EDGE && (r.innerHTML += "#" + this._domId + "::-ms-clear{display: none;}")
                        }
                    }
                }
                ,
                i._registerEventListeners = function() {
                    var t = this;
                    if (this._edTxt) {
                        var e = this._edTxt
                          , i = !1
                          , r = this.__eventListeners;
                        r.compositionStart = function() {
                            i = !0
                        }
                        ,
                        r.compositionEnd = function() {
                            i = !1,
                            t._delegate._editBoxTextChanged(e.value)
                        }
                        ,
                        r.onInput = function() {
                            if (!i) {
                                var r = t._delegate
                                  , n = r.maxLength;
                                n >= 0 && (e.value = e.value.slice(0, n)),
                                r._editBoxTextChanged(e.value)
                            }
                        }
                        ,
                        r.onClick = function() {
                            t._editing && ni.isMobile && t._adjustWindowScroll()
                        }
                        ,
                        r.onKeydown = function(i) {
                            i.keyCode === In.ENTER ? (i.propagationStopped = !0,
                            t._delegate._editBoxEditingReturn(),
                            t._isTextArea || e.blur()) : i.keyCode === In.TAB && (i.propagationStopped = !0,
                            i.preventDefault(),
                            UE.next(t))
                        }
                        ,
                        r.onBlur = function() {
                            ni.isMobile && i && r.compositionEnd(),
                            t._editing = !1,
                            $A = null,
                            t._hideDom(),
                            t._delegate._editBoxEditingDidEnded()
                        }
                        ,
                        e.addEventListener("compositionstart", r.compositionStart),
                        e.addEventListener("compositionend", r.compositionEnd),
                        e.addEventListener("input", r.onInput),
                        e.addEventListener("keydown", r.onKeydown),
                        e.addEventListener("blur", r.onBlur),
                        e.addEventListener("touchstart", r.onClick)
                    }
                }
                ,
                i._removeEventListeners = function() {
                    if (this._edTxt) {
                        var t = this._edTxt
                          , e = this.__eventListeners;
                        t.removeEventListener("compositionstart", e.compositionStart),
                        t.removeEventListener("compositionend", e.compositionEnd),
                        t.removeEventListener("input", e.onInput),
                        t.removeEventListener("keydown", e.onKeydown),
                        t.removeEventListener("blur", e.onBlur),
                        t.removeEventListener("touchstart", e.onClick),
                        e.compositionStart = null,
                        e.compositionEnd = null,
                        e.onInput = null,
                        e.onKeydown = null,
                        e.onBlur = null,
                        e.onClick = null
                    }
                }
                ,
                e
            }(ZA);
            !function(t) {
                t.EDITING_DID_BEGAN = "editing-did-began",
                t.EDITING_DID_ENDED = "editing-did-ended",
                t.TEXT_CHANGED = "text-changed",
                t.EDITING_RETURN = "editing-return"
            }(KA || (KA = {}));
            var iC, rC, nC, sC, aC, oC, lC, hC, uC, cC, _C, dC, pC, fC, gC, mC, yC, vC, SC, TC, bC, EC, AC, CC, RC, BC, xC, DC, wC, OC, PC, MC, IC, LC, FC, NC, kC, GC, zC, UC, HC, VC, WC, XC, jC, YC, KC, ZC, qC, JC, QC, $C, tR, eR, iR, rR, nR, sR, aR, oR, lR = function(e) {
                return t({
                    EditBox: e,
                    EditBoxComponent: e
                }),
                e
            }((HE = Ti("cc.EditBox"),
            VE = Ii(),
            WE = Li(110),
            XE = Fi(),
            jE = Zr(yd),
            YE = Xr(),
            KE = Ni(),
            ZE = Xr(),
            qE = Ni(),
            JE = Ci(af),
            QE = Xr(),
            $E = Ni(),
            tA = Ci(af),
            eA = Xr(),
            iA = Ni(),
            rA = Ci(Jc),
            nA = Xr(),
            sA = Ni(),
            aA = Ci(GE),
            oA = Xr(),
            lA = Ni(),
            hA = Ci(kE),
            uA = Xr(),
            cA = Ni(),
            _A = Ci(NE),
            dA = Xr(),
            pA = Ni(),
            fA = Xr(),
            gA = Ni(),
            mA = Xr(),
            yA = Ni(),
            vA = Ci([Bn]),
            SA = Xr(),
            TA = Ni(),
            bA = Ci([Bn]),
            EA = Xr(),
            AA = Ni(),
            CA = Ci([Bn]),
            RA = Xr(),
            BA = Ni(),
            xA = Ci([Bn]),
            DA = Xr(),
            wA = Ni(),
            HE(OA = VE(OA = WE(OA = XE(OA = jE(OA = Ri((YA = jA = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "editingDidBegan", MA, Gi(e)),
                    Oi(e, "textChanged", IA, Gi(e)),
                    Oi(e, "editingDidEnded", LA, Gi(e)),
                    Oi(e, "editingReturn", FA, Gi(e)),
                    e._impl = null,
                    e._background = null,
                    Oi(e, "_textLabel", NA, Gi(e)),
                    Oi(e, "_placeholderLabel", kA, Gi(e)),
                    Oi(e, "_returnType", GA, Gi(e)),
                    Oi(e, "_string", zA, Gi(e)),
                    Oi(e, "_tabIndex", UA, Gi(e)),
                    Oi(e, "_backgroundImage", HA, Gi(e)),
                    Oi(e, "_inputFlag", VA, Gi(e)),
                    Oi(e, "_inputMode", WA, Gi(e)),
                    Oi(e, "_maxLength", XA, Gi(e)),
                    e._isLabelVisible = !1,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.__preload = function() {
                    this._init()
                }
                ,
                i.onEnable = function() {
                    this._registerEvent(),
                    this._ensureBackgroundSprite(),
                    this._impl && this._impl.onEnable()
                }
                ,
                i.update = function() {
                    this._impl && this._impl.update()
                }
                ,
                i.onDisable = function() {
                    this._unregisterEvent(),
                    this._unregisterBackgroundEvent(),
                    this._impl && this._impl.onDisable()
                }
                ,
                i.onDestroy = function() {
                    this._impl && this._impl.clear()
                }
                ,
                i.setFocus = function() {
                    this._impl && this._impl.setFocus(!0)
                }
                ,
                i.focus = function() {
                    this._impl && this._impl.setFocus(!0)
                }
                ,
                i.blur = function() {
                    this._impl && this._impl.setFocus(!1)
                }
                ,
                i.isFocused = function() {
                    return !!this._impl && this._impl.isFocused()
                }
                ,
                i._editBoxEditingDidBegan = function() {
                    Bn.emitEvents(this.editingDidBegan, this),
                    this.node.emit(KA.EDITING_DID_BEGAN, this)
                }
                ,
                i._editBoxEditingDidEnded = function() {
                    Bn.emitEvents(this.editingDidEnded, this),
                    this.node.emit(KA.EDITING_DID_ENDED, this)
                }
                ,
                i._editBoxTextChanged = function(t) {
                    t = this._updateLabelStringStyle(t, !0),
                    this.string = t,
                    Bn.emitEvents(this.textChanged, t, this),
                    this.node.emit(KA.TEXT_CHANGED, this)
                }
                ,
                i._editBoxEditingReturn = function() {
                    Bn.emitEvents(this.editingReturn, this),
                    this.node.emit(KA.EDITING_RETURN, this)
                }
                ,
                i._showLabels = function() {
                    this._isLabelVisible = !0,
                    this._updateLabels()
                }
                ,
                i._hideLabels = function() {
                    this._isLabelVisible = !1,
                    this._textLabel && (this._textLabel.node.active = !1),
                    this._placeholderLabel && (this._placeholderLabel.node.active = !1)
                }
                ,
                i._onTouchBegan = function(t) {
                    t.propagationStopped = !0
                }
                ,
                i._onTouchCancel = function(t) {
                    t.propagationStopped = !0
                }
                ,
                i._onTouchEnded = function(t) {
                    this._impl && this._impl.beginEditing(),
                    t.propagationStopped = !0
                }
                ,
                i._init = function() {
                    this._updatePlaceholderLabel(),
                    this._updateTextLabel(),
                    this._isLabelVisible = !0,
                    this.node.on(Wr.SIZE_CHANGED, this._resizeChildNodes, this),
                    (this._impl = new e._EditBoxImpl).init(this),
                    this._updateString(this._string),
                    this._syncSize()
                }
                ,
                i._ensureBackgroundSprite = function() {
                    if (!this._background) {
                        var t = this.node.getComponent(ey);
                        t || (t = this.node.addComponent(ey)),
                        t !== this._background && (t.type = ey.Type.SLICED,
                        t.spriteFrame = this._backgroundImage,
                        this._background = t,
                        this._registerBackgroundEvent())
                    }
                }
                ,
                i._updateTextLabel = function() {
                    var t = this._textLabel;
                    if (!t) {
                        var e = this.node.getChildByName("TEXT_LABEL");
                        e || (e = new Sr("TEXT_LABEL")),
                        (t = e.getComponent(af)) || (t = e.addComponent(af)),
                        e.parent = this.node,
                        this._textLabel = t
                    }
                    this._textLabel.node._uiProps.uiTransformComp.setAnchorPoint(0, 1),
                    t.overflow = af.Overflow.CLAMP,
                    this._inputMode === kE.ANY ? (t.verticalAlign = Qp.TOP,
                    t.enableWrapText = !0) : t.enableWrapText = !1,
                    t.string = this._updateLabelStringStyle(this._string)
                }
                ,
                i._updatePlaceholderLabel = function() {
                    var t = this._placeholderLabel;
                    if (!t) {
                        var e = this.node.getChildByName("PLACEHOLDER_LABEL");
                        e || (e = new Sr("PLACEHOLDER_LABEL")),
                        (t = e.getComponent(af)) || (t = e.addComponent(af)),
                        e.parent = this.node,
                        this._placeholderLabel = t
                    }
                    this._placeholderLabel.node._uiProps.uiTransformComp.setAnchorPoint(0, 1),
                    t.overflow = af.Overflow.CLAMP,
                    this._inputMode === kE.ANY ? (t.verticalAlign = Qp.TOP,
                    t.enableWrapText = !0) : t.enableWrapText = !1,
                    t.string = this.placeholder
                }
                ,
                i._syncSize = function() {
                    var t = this.node._uiProps.uiTransformComp
                      , e = t.contentSize;
                    if (this._background) {
                        var i = this._background.node._uiProps.uiTransformComp;
                        i.anchorPoint = t.anchorPoint,
                        i.setContentSize(e)
                    }
                    this._updateLabelPosition(e),
                    this._impl && this._impl.setSize(e.width, e.height)
                }
                ,
                i._updateLabels = function() {
                    if (this._isLabelVisible) {
                        var t = this._string;
                        this._textLabel && (this._textLabel.node.active = "" !== t),
                        this._placeholderLabel && (this._placeholderLabel.node.active = "" === t)
                    }
                }
                ,
                i._updateString = function(t) {
                    var e = this._textLabel;
                    if (e) {
                        var i = t;
                        i && (i = this._updateLabelStringStyle(i)),
                        e.string = i,
                        this._updateLabels()
                    }
                }
                ,
                i._updateLabelStringStyle = function(t, e) {
                    void 0 === e && (e = !1);
                    var i, r = this._inputFlag;
                    if (e || r !== GE.PASSWORD)
                        r === GE.INITIAL_CAPS_ALL_CHARACTERS ? t = t.toUpperCase() : r === GE.INITIAL_CAPS_WORD ? t = t.replace(/(?:^|\s)\S/g, (function(t) {
                            return t.toUpperCase()
                        }
                        )) : r === GE.INITIAL_CAPS_SENTENCE && (t = (i = t).charAt(0).toUpperCase() + i.slice(1));
                    else {
                        for (var n = "", s = t.length, a = 0; a < s; ++a)
                            n += "●";
                        t = n
                    }
                    return t
                }
                ,
                i._registerEvent = function() {
                    this.node.on(Wr.TOUCH_START, this._onTouchBegan, this),
                    this.node.on(Wr.TOUCH_END, this._onTouchEnded, this)
                }
                ,
                i._unregisterEvent = function() {
                    this.node.off(Wr.TOUCH_START, this._onTouchBegan, this),
                    this.node.off(Wr.TOUCH_END, this._onTouchEnded, this)
                }
                ,
                i._onBackgroundSpriteFrameChanged = function() {
                    this._background && (this.backgroundImage = this._background.spriteFrame)
                }
                ,
                i._registerBackgroundEvent = function() {
                    var t = this._background && this._background.node;
                    null == t || t.on(ey.EventType.SPRITE_FRAME_CHANGED, this._onBackgroundSpriteFrameChanged, this)
                }
                ,
                i._unregisterBackgroundEvent = function() {
                    var t = this._background && this._background.node;
                    null == t || t.off(ey.EventType.SPRITE_FRAME_CHANGED, this._onBackgroundSpriteFrameChanged, this)
                }
                ,
                i._updateLabelPosition = function(t) {
                    var e = this.node._uiProps.uiTransformComp
                      , i = -e.anchorX * e.width
                      , r = -e.anchorY * e.height
                      , n = this._placeholderLabel
                      , s = this._textLabel;
                    s && (s.node._uiProps.uiTransformComp.setContentSize(t.width - 2, t.height),
                    s.node.setPosition(i + 2, r + t.height, s.node.position.z),
                    this._inputMode === kE.ANY && (s.verticalAlign = Qp.TOP),
                    s.enableWrapText = this._inputMode === kE.ANY),
                    n && (n.node._uiProps.uiTransformComp.setContentSize(t.width - 2, t.height),
                    n.lineHeight = t.height,
                    n.node.setPosition(i + 2, r + t.height, n.node.position.z),
                    this._inputMode === kE.ANY && (n.verticalAlign = Qp.TOP),
                    n.enableWrapText = this._inputMode === kE.ANY)
                }
                ,
                i._resizeChildNodes = function() {
                    var t = this.node._uiProps.uiTransformComp
                      , e = this._textLabel && this._textLabel.node;
                    e && (e.setPosition(-t.width / 2, t.height / 2, e.position.z),
                    e._uiProps.uiTransformComp.setContentSize(t.contentSize));
                    var i = this._placeholderLabel && this._placeholderLabel.node;
                    i && (i.setPosition(-t.width / 2, t.height / 2, i.position.z),
                    i._uiProps.uiTransformComp.setContentSize(t.contentSize));
                    var r = this._background && this._background.node;
                    r && r._uiProps.uiTransformComp.setContentSize(t.contentSize)
                }
                ,
                Je(e, [{
                    key: "string",
                    get: function() {
                        return this._string
                    },
                    set: function(t) {
                        this._maxLength >= 0 && t.length >= this._maxLength && (t = t.slice(0, this._maxLength)),
                        this._string = t,
                        this._updateString(t)
                    }
                }, {
                    key: "placeholder",
                    get: function() {
                        return this._placeholderLabel ? this._placeholderLabel.string : ""
                    },
                    set: function(t) {
                        this._placeholderLabel && (this._placeholderLabel.string = t)
                    }
                }, {
                    key: "textLabel",
                    get: function() {
                        return this._textLabel
                    },
                    set: function(t) {
                        this._textLabel !== t && (this._textLabel = t,
                        this._textLabel && (this._updateTextLabel(),
                        this._updateLabels()))
                    }
                }, {
                    key: "placeholderLabel",
                    get: function() {
                        return this._placeholderLabel
                    },
                    set: function(t) {
                        this._placeholderLabel !== t && (this._placeholderLabel = t,
                        this._placeholderLabel && (this._updatePlaceholderLabel(),
                        this._updateLabels()))
                    }
                }, {
                    key: "backgroundImage",
                    get: function() {
                        return this._backgroundImage
                    },
                    set: function(t) {
                        this._backgroundImage !== t && (this._backgroundImage = t,
                        this._ensureBackgroundSprite(),
                        this._background.spriteFrame = t)
                    }
                }, {
                    key: "inputFlag",
                    get: function() {
                        return this._inputFlag
                    },
                    set: function(t) {
                        this._inputFlag = t,
                        this._updateString(this._string)
                    }
                }, {
                    key: "inputMode",
                    get: function() {
                        return this._inputMode
                    },
                    set: function(t) {
                        this._inputMode !== t && (this._inputMode = t,
                        this._updateTextLabel(),
                        this._updatePlaceholderLabel())
                    }
                }, {
                    key: "returnType",
                    get: function() {
                        return this._returnType
                    },
                    set: function(t) {
                        this._returnType = t
                    }
                }, {
                    key: "maxLength",
                    get: function() {
                        return this._maxLength
                    },
                    set: function(t) {
                        this._maxLength = t
                    }
                }, {
                    key: "tabIndex",
                    get: function() {
                        return this._tabIndex
                    },
                    set: function(t) {
                        this._tabIndex !== t && (this._tabIndex = t,
                        this._impl && this._impl.setTabIndex(t))
                    }
                }]),
                e
            }(Ki),
            jA._EditBoxImpl = ZA,
            jA.KeyboardReturnType = NE,
            jA.InputFlag = GE,
            jA.InputMode = kE,
            jA.EventType = KA,
            Ei((PA = YA).prototype, "string", [YE, KE], Object.getOwnPropertyDescriptor(PA.prototype, "string"), PA.prototype),
            Ei(PA.prototype, "placeholder", [ZE, qE], Object.getOwnPropertyDescriptor(PA.prototype, "placeholder"), PA.prototype),
            Ei(PA.prototype, "textLabel", [JE, QE, $E], Object.getOwnPropertyDescriptor(PA.prototype, "textLabel"), PA.prototype),
            Ei(PA.prototype, "placeholderLabel", [tA, eA, iA], Object.getOwnPropertyDescriptor(PA.prototype, "placeholderLabel"), PA.prototype),
            Ei(PA.prototype, "backgroundImage", [rA, nA, sA], Object.getOwnPropertyDescriptor(PA.prototype, "backgroundImage"), PA.prototype),
            Ei(PA.prototype, "inputFlag", [aA, oA, lA], Object.getOwnPropertyDescriptor(PA.prototype, "inputFlag"), PA.prototype),
            Ei(PA.prototype, "inputMode", [hA, uA, cA], Object.getOwnPropertyDescriptor(PA.prototype, "inputMode"), PA.prototype),
            Ei(PA.prototype, "returnType", [_A, dA, pA], Object.getOwnPropertyDescriptor(PA.prototype, "returnType"), PA.prototype),
            Ei(PA.prototype, "maxLength", [fA, gA], Object.getOwnPropertyDescriptor(PA.prototype, "maxLength"), PA.prototype),
            Ei(PA.prototype, "tabIndex", [mA, yA], Object.getOwnPropertyDescriptor(PA.prototype, "tabIndex"), PA.prototype),
            MA = Ei(PA.prototype, "editingDidBegan", [vA, Pi, SA, TA], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            IA = Ei(PA.prototype, "textChanged", [bA, Pi, EA, AA], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            LA = Ei(PA.prototype, "editingDidEnded", [CA, Pi, RA, BA], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            FA = Ei(PA.prototype, "editingReturn", [xA, Pi, DA, wA], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            NA = Ei(PA.prototype, "_textLabel", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            kA = Ei(PA.prototype, "_placeholderLabel", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            GA = Ei(PA.prototype, "_returnType", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return NE.DEFAULT
                }
            }),
            zA = Ei(PA.prototype, "_string", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return ""
                }
            }),
            UA = Ei(PA.prototype, "_tabIndex", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            HA = Ei(PA.prototype, "_backgroundImage", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            VA = Ei(PA.prototype, "_inputFlag", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return GE.DEFAULT
                }
            }),
            WA = Ei(PA.prototype, "_inputMode", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return kE.ANY
                }
            }),
            XA = Ei(PA.prototype, "_maxLength", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 20
                }
            }),
            OA = PA)) || OA) || OA) || OA) || OA) || OA) || OA));
            "object" != typeof window || "object" != typeof document || Ln || Fn || Nn || (lR._EditBoxImpl = eC),
            function(t) {
                t[t.NONE = 0] = "NONE",
                t[t.HORIZONTAL = 1] = "HORIZONTAL",
                t[t.VERTICAL = 2] = "VERTICAL",
                t[t.GRID = 3] = "GRID"
            }(iR || (iR = {})),
            Yr(iR),
            function(t) {
                t[t.NONE = 0] = "NONE",
                t[t.CONTAINER = 1] = "CONTAINER",
                t[t.CHILDREN = 2] = "CHILDREN"
            }(rR || (rR = {})),
            Yr(rR),
            function(t) {
                t[t.HORIZONTAL = 0] = "HORIZONTAL",
                t[t.VERTICAL = 1] = "VERTICAL"
            }(nR || (nR = {})),
            Yr(nR),
            function(t) {
                t[t.BOTTOM_TO_TOP = 0] = "BOTTOM_TO_TOP",
                t[t.TOP_TO_BOTTOM = 1] = "TOP_TO_BOTTOM"
            }(sR || (sR = {})),
            Yr(sR),
            function(t) {
                t[t.LEFT_TO_RIGHT = 0] = "LEFT_TO_RIGHT",
                t[t.RIGHT_TO_LEFT = 1] = "RIGHT_TO_LEFT"
            }(aR || (aR = {})),
            Yr(aR),
            function(t) {
                t[t.NONE = 0] = "NONE",
                t[t.FIXED_ROW = 1] = "FIXED_ROW",
                t[t.FIXED_COL = 2] = "FIXED_COL"
            }(oR || (oR = {})),
            Yr(oR);
            var hR, uR, cR, _R, dR, pR, fR, gR, mR, yR, vR, SR, TR, bR, ER, AR, CR, RR, BR, xR, DR, wR, OR, PR = new di, MR = function(e) {
                return t({
                    Layout: e,
                    LayoutComponent: e
                }),
                e
            }((iC = Ti("cc.Layout"),
            rC = Ii(),
            nC = Li(110),
            sC = Fi(),
            aC = Zr(yd),
            oC = ki(),
            lC = Ni(),
            hC = ki(),
            uC = Ni(),
            cC = Ci(iR),
            _C = Ni(),
            dC = Ci(rR),
            pC = ki(),
            fC = Ni(),
            gC = ki(),
            mC = Ni(),
            yC = Ci(nR),
            vC = Ni(),
            SC = Ni(),
            TC = Ni(),
            bC = Ni(),
            EC = Ni(),
            AC = Ni(),
            CC = Ni(),
            RC = Ci(sR),
            BC = Ni(),
            xC = Ci(aR),
            DC = Ni(),
            wC = Ci(oR),
            OC = ki(),
            PC = Ni(),
            MC = ki(),
            IC = Ni(),
            LC = Ni(),
            iC(FC = rC(FC = nC(FC = sC(FC = aC(FC = Ri((eR = tR = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "_resizeMode", kC, Gi(e)),
                    Oi(e, "_layoutType", GC, Gi(e)),
                    Oi(e, "_cellSize", zC, Gi(e)),
                    Oi(e, "_startAxis", UC, Gi(e)),
                    Oi(e, "_paddingLeft", HC, Gi(e)),
                    Oi(e, "_paddingRight", VC, Gi(e)),
                    Oi(e, "_paddingTop", WC, Gi(e)),
                    Oi(e, "_paddingBottom", XC, Gi(e)),
                    Oi(e, "_spacingX", jC, Gi(e)),
                    Oi(e, "_spacingY", YC, Gi(e)),
                    Oi(e, "_verticalDirection", KC, Gi(e)),
                    Oi(e, "_horizontalDirection", ZC, Gi(e)),
                    Oi(e, "_constraint", qC, Gi(e)),
                    Oi(e, "_constraintNum", JC, Gi(e)),
                    Oi(e, "_affectedByScale", QC, Gi(e)),
                    Oi(e, "_isAlign", $C, Gi(e)),
                    e._layoutSize = new Pr(300,200),
                    e._layoutDirty = !0,
                    e._childrenDirty = !1,
                    e._usefulLayoutObj = [],
                    e._init = !1,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.updateLayout = function(t) {
                    void 0 === t && (t = !1),
                    (this._layoutDirty || t) && this.node.children.length > 0 && (this._doLayout(),
                    this._layoutDirty = !1)
                }
                ,
                i.onEnable = function() {
                    this._addEventListeners();
                    var t = this.node._uiProps.uiTransformComp;
                    t.contentSize.equals(Pr.ZERO) && t.setContentSize(this._layoutSize),
                    this._childrenChanged()
                }
                ,
                i.onDisable = function() {
                    this._usefulLayoutObj.length = 0,
                    this._removeEventListeners()
                }
                ,
                i._checkUsefulObj = function() {
                    this._usefulLayoutObj.length = 0;
                    for (var t = this.node.children, e = 0; e < t.length; ++e) {
                        var i = t[e]
                          , r = i._uiProps.uiTransformComp;
                        i.activeInHierarchy && r && this._usefulLayoutObj.push(r)
                    }
                }
                ,
                i._addEventListeners = function() {
                    Ur.on(Hr.EVENT_AFTER_UPDATE, this.updateLayout, this),
                    this.node.on(Wr.SIZE_CHANGED, this._resized, this),
                    this.node.on(Wr.ANCHOR_CHANGED, this._doLayoutDirty, this),
                    this.node.on(Wr.CHILD_ADDED, this._childAdded, this),
                    this.node.on(Wr.CHILD_REMOVED, this._childRemoved, this),
                    this.node.on(Wr.SIBLING_ORDER_CHANGED, this._childrenChanged, this),
                    this.node.on("childrenSiblingOrderChanged", this.updateLayout, this),
                    this._addChildrenEventListeners()
                }
                ,
                i._removeEventListeners = function() {
                    Ur.off(Hr.EVENT_AFTER_UPDATE, this.updateLayout, this),
                    this.node.off(Wr.SIZE_CHANGED, this._resized, this),
                    this.node.off(Wr.ANCHOR_CHANGED, this._doLayoutDirty, this),
                    this.node.off(Wr.CHILD_ADDED, this._childAdded, this),
                    this.node.off(Wr.CHILD_REMOVED, this._childRemoved, this),
                    this.node.off(Wr.SIBLING_ORDER_CHANGED, this._childrenChanged, this),
                    this.node.off("childrenSiblingOrderChanged", this.updateLayout, this),
                    this._removeChildrenEventListeners()
                }
                ,
                i._addChildrenEventListeners = function() {
                    for (var t = this.node.children, e = 0; e < t.length; ++e) {
                        var i = t[e];
                        i.on(Wr.SIZE_CHANGED, this._doLayoutDirty, this),
                        i.on(Wr.TRANSFORM_CHANGED, this._transformDirty, this),
                        i.on(Wr.ANCHOR_CHANGED, this._doLayoutDirty, this),
                        i.on(Wr.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this)
                    }
                }
                ,
                i._removeChildrenEventListeners = function() {
                    for (var t = this.node.children, e = 0; e < t.length; ++e) {
                        var i = t[e];
                        i.off(Wr.SIZE_CHANGED, this._doLayoutDirty, this),
                        i.off(Wr.TRANSFORM_CHANGED, this._transformDirty, this),
                        i.off(Wr.ANCHOR_CHANGED, this._doLayoutDirty, this),
                        i.off(Wr.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this)
                    }
                }
                ,
                i._childAdded = function(t) {
                    t.on(Wr.SIZE_CHANGED, this._doLayoutDirty, this),
                    t.on(Wr.TRANSFORM_CHANGED, this._transformDirty, this),
                    t.on(Wr.ANCHOR_CHANGED, this._doLayoutDirty, this),
                    t.on(Wr.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this),
                    this._childrenChanged()
                }
                ,
                i._childRemoved = function(t) {
                    t.off(Wr.SIZE_CHANGED, this._doLayoutDirty, this),
                    t.off(Wr.TRANSFORM_CHANGED, this._transformDirty, this),
                    t.off(Wr.ANCHOR_CHANGED, this._doLayoutDirty, this),
                    t.off(Wr.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this),
                    this._childrenChanged()
                }
                ,
                i._resized = function() {
                    this._layoutSize.set(this.node._uiProps.uiTransformComp.contentSize),
                    this._doLayoutDirty()
                }
                ,
                i._doLayoutHorizontally = function(t, e, i, r) {
                    var n = this.node._uiProps.uiTransformComp.anchorPoint
                      , s = this._getFixedBreakingNum()
                      , a = 1
                      , o = this._paddingLeft;
                    this._horizontalDirection === aR.RIGHT_TO_LEFT && (a = -1,
                    o = this._paddingRight);
                    var l = (this._horizontalDirection - n.x) * t + a * o
                      , h = l - a * this._spacingX
                      , u = 0
                      , c = 0
                      , _ = 0
                      , d = 0
                      , p = !1
                      , f = this._usefulLayoutObj.length
                      , g = this._cellSize.width
                      , m = this._getPaddingH();
                    this._layoutType !== iR.GRID && this._resizeMode === rR.CHILDREN && (g = (t - m - (f - 1) * this._spacingX) / f);
                    for (var y = this._usefulLayoutObj, v = 0; v < y.length; ++v) {
                        var S = y[v]
                          , T = S.node
                          , b = T.scale
                          , E = this._getUsedScaleValue(b.x)
                          , A = this._getUsedScaleValue(b.y);
                        this._resizeMode === rR.CHILDREN && (S.width = g / E,
                        this._layoutType === iR.GRID && (S.height = this._cellSize.height / A));
                        var C = Math.abs(this._horizontalDirection - S.anchorX)
                          , R = S.width * E
                          , B = S.height * A;
                        B > _ && (d = Math.max(_, d),
                        c = _ || B,
                        _ = B),
                        h += a * (C * R + this._spacingX);
                        var x = a * (1 - C) * R;
                        if (e) {
                            if (s > 0)
                                (p = v / s > 0 && v % s == 0) && (c = _ > B ? _ : c);
                            else if (R > t - m)
                                h > l + a * C * R && (p = !0);
                            else {
                                var D = (1 - this._horizontalDirection - n.x) * t
                                  , w = h + x + a * (a > 0 ? this._paddingRight : this._paddingLeft);
                                p = Math.abs(w) > Math.abs(D)
                            }
                            p && (h = l + a * C * R,
                            B !== _ && (c = _),
                            u += c + this._spacingY,
                            c = _ = B)
                        }
                        var O = i(T, S, u);
                        r && T.setPosition(h, O),
                        h += x
                    }
                    return c = Math.max(c, _),
                    Math.max(d, u + c) + this._getPaddingV()
                }
                ,
                i._doLayoutVertically = function(t, e, i, r) {
                    var n = this.node._uiProps.uiTransformComp.anchorPoint
                      , s = this._getFixedBreakingNum()
                      , a = 1
                      , o = this._paddingBottom;
                    this._verticalDirection === sR.TOP_TO_BOTTOM && (a = -1,
                    o = this._paddingTop);
                    var l = (this._verticalDirection - n.y) * t + a * o
                      , h = l - a * this._spacingY
                      , u = 0
                      , c = 0
                      , _ = 0
                      , d = 0
                      , p = !1
                      , f = this._usefulLayoutObj.length
                      , g = this._cellSize.height
                      , m = this._getPaddingV();
                    this._layoutType !== iR.GRID && this._resizeMode === rR.CHILDREN && (g = (t - m - (f - 1) * this._spacingY) / f);
                    for (var y = this._usefulLayoutObj, v = 0; v < y.length; ++v) {
                        var S = y[v]
                          , T = S.node
                          , b = T.scale
                          , E = this._getUsedScaleValue(b.x)
                          , A = this._getUsedScaleValue(b.y);
                        this._resizeMode === rR.CHILDREN && (S.height = g / A,
                        this._layoutType === iR.GRID && (S.width = this._cellSize.width / E));
                        var C = Math.abs(this._verticalDirection - S.anchorY)
                          , R = S.width * E
                          , B = S.height * A;
                        R > u && (c = Math.max(u, c),
                        _ = u || R,
                        u = R),
                        h += a * (C * B + this._spacingY);
                        var x = a * (1 - C) * B;
                        if (e) {
                            if (s > 0)
                                (p = v / s > 0 && v % s == 0) && (_ = u > B ? u : _);
                            else if (B > t - m)
                                h > l + a * C * B && (p = !0);
                            else {
                                var D = (1 - this._verticalDirection - n.y) * t
                                  , w = h + x + a * (a > 0 ? this._paddingTop : this._paddingBottom);
                                p = Math.abs(w) > Math.abs(D)
                            }
                            p && (h = l + a * C * B,
                            R !== u && (_ = u),
                            d += _ + this._spacingX,
                            _ = u = R)
                        }
                        var O = i(T, S, d);
                        r && (T.getPosition(PR),
                        T.setPosition(O, h, PR.z)),
                        h += x
                    }
                    return _ = Math.max(_, u),
                    Math.max(c, d + _) + this._getPaddingH()
                }
                ,
                i._doLayoutGridAxisHorizontal = function(t, e) {
                    var i = this
                      , r = e.width
                      , n = 1
                      , s = -t.y * e.height
                      , a = this._paddingBottom;
                    this._verticalDirection === sR.TOP_TO_BOTTOM && (n = -1,
                    s = (1 - t.y) * e.height,
                    a = this._paddingTop);
                    var o = function(t, e, r) {
                        return s + n * (r + (1 - e.anchorY) * e.height * i._getUsedScaleValue(t.scale.y) + a)
                    }
                      , l = 0;
                    this._resizeMode === rR.CONTAINER && (l = this._doLayoutHorizontally(r, !0, o, !1),
                    s = -t.y * l,
                    this._verticalDirection === sR.TOP_TO_BOTTOM && (n = -1,
                    s = (1 - t.y) * l)),
                    this._doLayoutHorizontally(r, !0, o, !0),
                    this._resizeMode === rR.CONTAINER && this.node._uiProps.uiTransformComp.setContentSize(r, l)
                }
                ,
                i._doLayoutGridAxisVertical = function(t, e) {
                    var i = this
                      , r = e.height
                      , n = 1
                      , s = -t.x * e.width
                      , a = this._paddingLeft;
                    this._horizontalDirection === aR.RIGHT_TO_LEFT && (n = -1,
                    s = (1 - t.x) * e.width,
                    a = this._paddingRight);
                    var o = function(t, e, r) {
                        return s + n * (r + (1 - e.anchorX) * e.width * i._getUsedScaleValue(t.scale.x) + a)
                    }
                      , l = 0;
                    this._resizeMode === rR.CONTAINER && (l = this._doLayoutVertically(r, !0, o, !1),
                    s = -t.x * l,
                    this._horizontalDirection === aR.RIGHT_TO_LEFT && (n = -1,
                    s = (1 - t.x) * l)),
                    this._doLayoutVertically(r, !0, o, !0),
                    this._resizeMode === rR.CONTAINER && this.node._uiProps.uiTransformComp.setContentSize(l, r)
                }
                ,
                i._doLayoutGrid = function() {
                    var t = this.node._uiProps.uiTransformComp
                      , e = t.anchorPoint
                      , i = t.contentSize;
                    this.startAxis === nR.HORIZONTAL ? this._doLayoutGridAxisHorizontal(e, i) : this.startAxis === nR.VERTICAL && this._doLayoutGridAxisVertical(e, i)
                }
                ,
                i._getHorizontalBaseWidth = function() {
                    var t = this._usefulLayoutObj
                      , e = 0
                      , i = t.length;
                    if (this._resizeMode === rR.CONTAINER) {
                        for (var r = 0; r < t.length; ++r) {
                            var n = t[r]
                              , s = n.node.scale;
                            e += n.width * this._getUsedScaleValue(s.x)
                        }
                        e += (i - 1) * this._spacingX + this._getPaddingH()
                    } else
                        e = this.node._uiProps.uiTransformComp.width;
                    return e
                }
                ,
                i._getVerticalBaseHeight = function() {
                    var t = this._usefulLayoutObj
                      , e = 0
                      , i = t.length;
                    if (this._resizeMode === rR.CONTAINER) {
                        for (var r = 0; r < t.length; ++r) {
                            var n = t[r]
                              , s = n.node.scale;
                            e += n.height * this._getUsedScaleValue(s.y)
                        }
                        e += (i - 1) * this._spacingY + this._getPaddingV()
                    } else
                        e = this.node._uiProps.uiTransformComp.height;
                    return e
                }
                ,
                i._doLayout = function() {
                    var t = this;
                    if (this._init && !this._childrenDirty || (this._checkUsefulObj(),
                    this._init = !0,
                    this._childrenDirty = !1),
                    this._layoutType === iR.HORIZONTAL) {
                        var e = this._getHorizontalBaseWidth();
                        this._doLayoutHorizontally(e, !1, (function(e) {
                            return (t._isAlign ? di.ZERO : e.position).y
                        }
                        ), !0),
                        this.node._uiProps.uiTransformComp.width = e
                    } else if (this._layoutType === iR.VERTICAL) {
                        var i = this._getVerticalBaseHeight();
                        this._doLayoutVertically(i, !1, (function(e) {
                            return (t._isAlign ? di.ZERO : e.position).x
                        }
                        ), !0),
                        this.node._uiProps.uiTransformComp.height = i
                    } else
                        this._layoutType === iR.GRID && this._doLayoutGrid()
                }
                ,
                i._getUsedScaleValue = function(t) {
                    return this._affectedByScale ? Math.abs(t) : 1
                }
                ,
                i._transformDirty = function(t) {
                    t & xi.SCALE && t & xi.POSITION && this._affectedByScale && this._doLayoutDirty()
                }
                ,
                i._doLayoutDirty = function() {
                    this._layoutDirty = !0
                }
                ,
                i._childrenChanged = function() {
                    this._childrenDirty = !0,
                    this._doLayoutDirty()
                }
                ,
                i._getPaddingH = function() {
                    return this._paddingLeft + this._paddingRight
                }
                ,
                i._getPaddingV = function() {
                    return this._paddingTop + this._paddingBottom
                }
                ,
                i._getFixedBreakingNum = function() {
                    if (this._layoutType !== iR.GRID || this._constraint === oR.NONE || this._constraintNum <= 0)
                        return 0;
                    var t = this._constraint === oR.FIXED_ROW ? Math.ceil(this._usefulLayoutObj.length / this._constraintNum) : this._constraintNum;
                    return this._startAxis === nR.VERTICAL && (t = this._constraint === oR.FIXED_COL ? Math.ceil(this._usefulLayoutObj.length / this._constraintNum) : this._constraintNum),
                    t
                }
                ,
                Je(e, [{
                    key: "alignHorizontal",
                    get: function() {
                        return this._isAlign
                    },
                    set: function(t) {
                        this._layoutType === iR.HORIZONTAL && (this._isAlign = t,
                        this._doLayoutDirty())
                    }
                }, {
                    key: "alignVertical",
                    get: function() {
                        return this._isAlign
                    },
                    set: function(t) {
                        this._layoutType === iR.VERTICAL && (this._isAlign = t,
                        this._doLayoutDirty())
                    }
                }, {
                    key: "type",
                    get: function() {
                        return this._layoutType
                    },
                    set: function(t) {
                        this._layoutType = t,
                        this._doLayoutDirty()
                    }
                }, {
                    key: "resizeMode",
                    get: function() {
                        return this._resizeMode
                    },
                    set: function(t) {
                        this._layoutType !== iR.NONE && (this._resizeMode = t,
                        this._doLayoutDirty())
                    }
                }, {
                    key: "cellSize",
                    get: function() {
                        return this._cellSize
                    },
                    set: function(t) {
                        this._cellSize !== t && (this._cellSize.set(t),
                        this._doLayoutDirty())
                    }
                }, {
                    key: "startAxis",
                    get: function() {
                        return this._startAxis
                    },
                    set: function(t) {
                        this._startAxis !== t && (this._startAxis = t,
                        this._doLayoutDirty())
                    }
                }, {
                    key: "paddingLeft",
                    get: function() {
                        return this._paddingLeft
                    },
                    set: function(t) {
                        this._paddingLeft !== t && (this._paddingLeft = t,
                        this._doLayoutDirty())
                    }
                }, {
                    key: "paddingRight",
                    get: function() {
                        return this._paddingRight
                    },
                    set: function(t) {
                        this._paddingRight !== t && (this._paddingRight = t,
                        this._doLayoutDirty())
                    }
                }, {
                    key: "paddingTop",
                    get: function() {
                        return this._paddingTop
                    },
                    set: function(t) {
                        this._paddingTop !== t && (this._paddingTop = t,
                        this._doLayoutDirty())
                    }
                }, {
                    key: "paddingBottom",
                    get: function() {
                        return this._paddingBottom
                    },
                    set: function(t) {
                        this._paddingBottom !== t && (this._paddingBottom = t,
                        this._doLayoutDirty())
                    }
                }, {
                    key: "spacingX",
                    get: function() {
                        return this._spacingX
                    },
                    set: function(t) {
                        this._spacingX !== t && (this._spacingX = t,
                        this._doLayoutDirty())
                    }
                }, {
                    key: "spacingY",
                    get: function() {
                        return this._spacingY
                    },
                    set: function(t) {
                        this._spacingY !== t && (this._spacingY = t,
                        this._doLayoutDirty())
                    }
                }, {
                    key: "verticalDirection",
                    get: function() {
                        return this._verticalDirection
                    },
                    set: function(t) {
                        this._verticalDirection !== t && (this._verticalDirection = t,
                        this._doLayoutDirty())
                    }
                }, {
                    key: "horizontalDirection",
                    get: function() {
                        return this._horizontalDirection
                    },
                    set: function(t) {
                        this._horizontalDirection !== t && (this._horizontalDirection = t,
                        this._doLayoutDirty())
                    }
                }, {
                    key: "padding",
                    get: function() {
                        return this._paddingLeft
                    },
                    set: function(t) {
                        this.paddingLeft === t && this._paddingRight === t && this._paddingTop === t && this._paddingBottom === t || (this._paddingLeft = this._paddingRight = this._paddingTop = this._paddingBottom = t,
                        this._doLayoutDirty())
                    }
                }, {
                    key: "constraint",
                    get: function() {
                        return this._constraint
                    },
                    set: function(t) {
                        this._layoutType !== iR.NONE && this._constraint !== t && (this._constraint = t,
                        this._doLayoutDirty())
                    }
                }, {
                    key: "constraintNum",
                    get: function() {
                        return this._constraintNum
                    },
                    set: function(t) {
                        this._constraint !== oR.NONE && this._constraintNum !== t && (t <= 0 && ri("Limit values to be greater than 0"),
                        this._constraintNum = t,
                        this._doLayoutDirty())
                    }
                }, {
                    key: "affectedByScale",
                    get: function() {
                        return this._affectedByScale
                    },
                    set: function(t) {
                        this._affectedByScale = t,
                        this._doLayoutDirty()
                    }
                }]),
                e
            }(Ki),
            tR.Type = iR,
            tR.VerticalDirection = sR,
            tR.HorizontalDirection = aR,
            tR.ResizeMode = rR,
            tR.AxisDirection = nR,
            tR.Constraint = oR,
            Ei((NC = eR).prototype, "alignHorizontal", [oC, lC], Object.getOwnPropertyDescriptor(NC.prototype, "alignHorizontal"), NC.prototype),
            Ei(NC.prototype, "alignVertical", [hC, uC], Object.getOwnPropertyDescriptor(NC.prototype, "alignVertical"), NC.prototype),
            Ei(NC.prototype, "type", [cC, _C], Object.getOwnPropertyDescriptor(NC.prototype, "type"), NC.prototype),
            Ei(NC.prototype, "resizeMode", [dC, pC, fC], Object.getOwnPropertyDescriptor(NC.prototype, "resizeMode"), NC.prototype),
            Ei(NC.prototype, "cellSize", [gC, mC], Object.getOwnPropertyDescriptor(NC.prototype, "cellSize"), NC.prototype),
            Ei(NC.prototype, "startAxis", [yC, vC], Object.getOwnPropertyDescriptor(NC.prototype, "startAxis"), NC.prototype),
            Ei(NC.prototype, "paddingLeft", [SC], Object.getOwnPropertyDescriptor(NC.prototype, "paddingLeft"), NC.prototype),
            Ei(NC.prototype, "paddingRight", [TC], Object.getOwnPropertyDescriptor(NC.prototype, "paddingRight"), NC.prototype),
            Ei(NC.prototype, "paddingTop", [bC], Object.getOwnPropertyDescriptor(NC.prototype, "paddingTop"), NC.prototype),
            Ei(NC.prototype, "paddingBottom", [EC], Object.getOwnPropertyDescriptor(NC.prototype, "paddingBottom"), NC.prototype),
            Ei(NC.prototype, "spacingX", [AC], Object.getOwnPropertyDescriptor(NC.prototype, "spacingX"), NC.prototype),
            Ei(NC.prototype, "spacingY", [CC], Object.getOwnPropertyDescriptor(NC.prototype, "spacingY"), NC.prototype),
            Ei(NC.prototype, "verticalDirection", [RC, BC], Object.getOwnPropertyDescriptor(NC.prototype, "verticalDirection"), NC.prototype),
            Ei(NC.prototype, "horizontalDirection", [xC, DC], Object.getOwnPropertyDescriptor(NC.prototype, "horizontalDirection"), NC.prototype),
            Ei(NC.prototype, "constraint", [wC, OC, PC], Object.getOwnPropertyDescriptor(NC.prototype, "constraint"), NC.prototype),
            Ei(NC.prototype, "constraintNum", [MC, IC], Object.getOwnPropertyDescriptor(NC.prototype, "constraintNum"), NC.prototype),
            Ei(NC.prototype, "affectedByScale", [LC], Object.getOwnPropertyDescriptor(NC.prototype, "affectedByScale"), NC.prototype),
            kC = Ei(NC.prototype, "_resizeMode", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return rR.NONE
                }
            }),
            GC = Ei(NC.prototype, "_layoutType", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return iR.NONE
                }
            }),
            zC = Ei(NC.prototype, "_cellSize", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Pr(40,40)
                }
            }),
            UC = Ei(NC.prototype, "_startAxis", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return nR.HORIZONTAL
                }
            }),
            HC = Ei(NC.prototype, "_paddingLeft", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            VC = Ei(NC.prototype, "_paddingRight", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            WC = Ei(NC.prototype, "_paddingTop", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            XC = Ei(NC.prototype, "_paddingBottom", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            jC = Ei(NC.prototype, "_spacingX", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            YC = Ei(NC.prototype, "_spacingY", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            KC = Ei(NC.prototype, "_verticalDirection", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return sR.TOP_TO_BOTTOM
                }
            }),
            ZC = Ei(NC.prototype, "_horizontalDirection", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return aR.LEFT_TO_RIGHT
                }
            }),
            qC = Ei(NC.prototype, "_constraint", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return oR.NONE
                }
            }),
            JC = Ei(NC.prototype, "_constraintNum", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 2
                }
            }),
            QC = Ei(NC.prototype, "_affectedByScale", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            $C = Ei(NC.prototype, "_isAlign", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            FC = NC)) || FC) || FC) || FC) || FC) || FC) || FC));
            !function(t) {
                t[t.HORIZONTAL = 0] = "HORIZONTAL",
                t[t.VERTICAL = 1] = "VERTICAL",
                t[t.FILLED = 2] = "FILLED"
            }(OR || (OR = {})),
            Si(OR);
            var IR, LR, FR, NR, kR, GR, zR, UR, HR, VR, WR, XR, jR, YR, KR, ZR, qR, JR, QR, $R, tB, eB, iB, rB, nB, sB = function(e) {
                return t({
                    ProgressBar: e,
                    ProgressBarComponent: e
                }),
                e
            }((hR = Ti("cc.ProgressBar"),
            uR = Ii(),
            cR = Li(110),
            _R = Fi(),
            dR = Zr(yd),
            pR = Ci(ey),
            fR = Ni(),
            gR = Ci(OR),
            mR = Ni(),
            yR = Ni(),
            vR = ji(),
            SR = Ni(),
            TR = Ni(),
            hR(bR = uR(bR = cR(bR = _R(bR = dR((wR = DR = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "_barSprite", AR, Gi(e)),
                    Oi(e, "_mode", CR, Gi(e)),
                    Oi(e, "_totalLength", RR, Gi(e)),
                    Oi(e, "_progress", BR, Gi(e)),
                    Oi(e, "_reverse", xR, Gi(e)),
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i._initBarSprite = function() {
                    if (this._barSprite) {
                        var t = this._barSprite.node;
                        if (!t)
                            return;
                        var e = this.node._uiProps.uiTransformComp
                          , i = e.contentSize
                          , r = e.anchorPoint
                          , n = t._uiProps.uiTransformComp.contentSize;
                        if (this._barSprite.fillType === ey.FillType.RADIAL && (this._mode = OR.FILLED),
                        this._mode === OR.HORIZONTAL ? this.totalLength = n.width : this._mode === OR.VERTICAL ? this.totalLength = n.height : this.totalLength = this._barSprite.fillRange,
                        t.parent === this.node) {
                            var s = -i.width * r.x;
                            t.setPosition(s, 0, 0)
                        }
                    }
                }
                ,
                i._updateBarStatus = function() {
                    if (this._barSprite) {
                        var t = this._barSprite.node;
                        if (!t)
                            return;
                        var e = t._uiProps.uiTransformComp
                          , i = e.anchorPoint
                          , r = e.contentSize
                          , n = t.getPosition()
                          , s = new Br(0,.5)
                          , a = kn(this._progress)
                          , o = this._totalLength * a
                          , l = r
                          , h = 0
                          , u = 0;
                        switch (this._mode) {
                        case OR.HORIZONTAL:
                            this._reverse && (s = new Br(1,.5)),
                            l = new Pr(o,r.height),
                            h = this._totalLength,
                            u = r.height;
                            break;
                        case OR.VERTICAL:
                            s = this._reverse ? new Br(.5,1) : new Br(.5,0),
                            l = new Pr(r.width,o),
                            h = r.width,
                            u = this._totalLength
                        }
                        if (this._mode === OR.FILLED)
                            this._barSprite.type !== ey.Type.FILLED ? ri("ProgressBar FILLED mode only works when barSprite's Type is FILLED!") : (this._reverse && (o *= -1),
                            this._barSprite.fillRange = o);
                        else if (this._barSprite.type !== ey.Type.FILLED) {
                            var c = s.x - i.x
                              , _ = s.y - i.y
                              , d = new di(h * c,u * _,0);
                            t.setPosition(n.x + d.x, n.y + d.y, n.z),
                            e.setAnchorPoint(s),
                            e.setContentSize(l)
                        } else
                            ri("ProgressBar non-FILLED mode only works when barSprite's Type is non-FILLED!")
                    }
                }
                ,
                Je(e, [{
                    key: "barSprite",
                    get: function() {
                        return this._barSprite
                    },
                    set: function(t) {
                        this._barSprite !== t && (this._barSprite = t,
                        this._initBarSprite())
                    }
                }, {
                    key: "mode",
                    get: function() {
                        return this._mode
                    },
                    set: function(t) {
                        if (this._mode !== t && (this._mode = t,
                        this._barSprite)) {
                            var e = this._barSprite.node;
                            if (!e)
                                return;
                            var i = e._uiProps.uiTransformComp.contentSize;
                            this._mode === OR.HORIZONTAL ? this.totalLength = i.width : this._mode === OR.VERTICAL ? this.totalLength = i.height : this._mode === OR.FILLED && (this.totalLength = this._barSprite.fillRange)
                        }
                    }
                }, {
                    key: "totalLength",
                    get: function() {
                        return this._totalLength
                    },
                    set: function(t) {
                        this._mode === OR.FILLED && (t = kn(t)),
                        this._totalLength = t,
                        this._updateBarStatus()
                    }
                }, {
                    key: "progress",
                    get: function() {
                        return this._progress
                    },
                    set: function(t) {
                        this._progress !== t && (this._progress = t,
                        this._updateBarStatus())
                    }
                }, {
                    key: "reverse",
                    get: function() {
                        return this._reverse
                    },
                    set: function(t) {
                        this._reverse !== t && (this._reverse = t,
                        this._barSprite && (this._barSprite.fillStart = 1 - this._barSprite.fillStart),
                        this._updateBarStatus())
                    }
                }]),
                e
            }(Ki),
            DR.Mode = OR,
            Ei((ER = wR).prototype, "barSprite", [pR, fR], Object.getOwnPropertyDescriptor(ER.prototype, "barSprite"), ER.prototype),
            Ei(ER.prototype, "mode", [gR, mR], Object.getOwnPropertyDescriptor(ER.prototype, "mode"), ER.prototype),
            Ei(ER.prototype, "totalLength", [yR], Object.getOwnPropertyDescriptor(ER.prototype, "totalLength"), ER.prototype),
            Ei(ER.prototype, "progress", [vR, Xi, SR], Object.getOwnPropertyDescriptor(ER.prototype, "progress"), ER.prototype),
            Ei(ER.prototype, "reverse", [TR], Object.getOwnPropertyDescriptor(ER.prototype, "reverse"), ER.prototype),
            AR = Ei(ER.prototype, "_barSprite", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            CR = Ei(ER.prototype, "_mode", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return OR.HORIZONTAL
                }
            }),
            RR = Ei(ER.prototype, "_totalLength", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            BR = Ei(ER.prototype, "_progress", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return .1
                }
            }),
            xR = Ei(ER.prototype, "_reverse", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            bR = ER)) || bR) || bR) || bR) || bR) || bR)), aB = new di, oB = new di, lB = new di, hB = new Br, uB = new Zi, cB = new Br;
            !function(t) {
                t[t.HORIZONTAL = 0] = "HORIZONTAL",
                t[t.VERTICAL = 1] = "VERTICAL"
            }(nB || (nB = {})),
            Yr(nB);
            var _B, dB, pB, fB, gB, mB, yB, vB, SB, TB, bB, EB, AB, CB, RB, BB, xB, DB, wB, OB, PB, MB, IB, LB, FB, NB, kB, GB, zB, UB, HB, VB, WB, XB, jB, YB, KB, ZB, qB, JB, QB, $B, tx, ex, ix, rx, nx, sx, ax, ox = function(e) {
                return t({
                    ScrollBar: e,
                    ScrollBarComponent: e
                }),
                e
            }((IR = Ti("cc.ScrollBar"),
            LR = Ii(),
            FR = Li(110),
            NR = Fi(),
            kR = Zr(yd),
            GR = Ci(ey),
            zR = Xr(),
            UR = Ni(),
            HR = Ci(nB),
            VR = Xr(),
            WR = Ni(),
            XR = Xr(),
            jR = Ni(),
            YR = Xr(),
            KR = Ni(),
            IR(ZR = LR(ZR = FR(ZR = NR(ZR = kR((rB = iB = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "_scrollView", JR, Gi(e)),
                    Oi(e, "_handle", QR, Gi(e)),
                    Oi(e, "_direction", $R, Gi(e)),
                    Oi(e, "_enableAutoHide", tB, Gi(e)),
                    Oi(e, "_autoHideTime", eB, Gi(e)),
                    e._touching = !1,
                    e._opacity = 255,
                    e._autoHideRemainingTime = 0,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.hide = function() {
                    this._autoHideRemainingTime = 0,
                    this._setOpacity(0)
                }
                ,
                i.show = function() {
                    this._autoHideRemainingTime = this._autoHideTime,
                    this._setOpacity(this._opacity)
                }
                ,
                i.onScroll = function(t) {
                    if (this._scrollView) {
                        var e = this._scrollView.content;
                        if (e) {
                            var i = e._uiProps.uiTransformComp.contentSize
                              , r = this._scrollView.node._uiProps.uiTransformComp.contentSize
                              , n = this.node._uiProps.uiTransformComp.contentSize;
                            if (!this._conditionalDisableScrollBar(i, r)) {
                                this._enableAutoHide && (this._autoHideRemainingTime = this._autoHideTime,
                                this._setOpacity(this._opacity));
                                var s = 0
                                  , a = 0
                                  , o = 0
                                  , l = 0
                                  , h = 0
                                  , u = cB;
                                u.set(0, 0),
                                this._direction === nB.HORIZONTAL ? (s = i.width,
                                a = r.width,
                                h = n.width,
                                o = t.x,
                                this._convertToScrollViewSpace(u, e),
                                l = -u.x) : this._direction === nB.VERTICAL && (s = i.height,
                                a = r.height,
                                h = n.height,
                                o = t.y,
                                this._convertToScrollViewSpace(u, e),
                                l = -u.y);
                                var c = this._calculateLength(s, a, h, o)
                                  , _ = cB;
                                this._calculatePosition(_, s, a, h, l, o, c),
                                this._updateLength(c),
                                this._updateHandlerPosition(_)
                            }
                        }
                    }
                }
                ,
                i.setScrollView = function(t) {
                    this._scrollView = t
                }
                ,
                i.onTouchBegan = function() {
                    this._enableAutoHide && (this._touching = !0)
                }
                ,
                i.onTouchEnded = function() {
                    if (this._enableAutoHide && (this._touching = !1,
                    !(this._autoHideTime <= 0))) {
                        if (this._scrollView) {
                            var t = this._scrollView.content;
                            if (t) {
                                var e = t._uiProps.uiTransformComp.contentSize
                                  , i = this._scrollView.node._uiProps.uiTransformComp.contentSize;
                                if (this._conditionalDisableScrollBar(e, i))
                                    return
                            }
                        }
                        this._autoHideRemainingTime = this._autoHideTime
                    }
                }
                ,
                i.onEnable = function() {
                    var t = this.node.getComponent(ey);
                    t && (this._opacity = t.color.a)
                }
                ,
                i.start = function() {
                    this._enableAutoHide && this._setOpacity(0)
                }
                ,
                i.update = function(t) {
                    this._processAutoHide(t)
                }
                ,
                i._convertToScrollViewSpace = function(t, e) {
                    var i = this._scrollView && this._scrollView.node._uiProps.uiTransformComp
                      , r = e._uiProps.uiTransformComp;
                    if (i && r) {
                        aB.set(-r.anchorX * r.width, -r.anchorY * r.height, 0),
                        r.convertToWorldSpaceAR(aB, oB);
                        var n = i.convertToNodeSpaceAR(oB);
                        n.x += i.anchorX * i.width,
                        n.y += i.anchorY * i.height,
                        t.set(n.x, n.y)
                    } else
                        t.set(Br.ZERO)
                }
                ,
                i._setOpacity = function(t) {
                    if (this._handle) {
                        var e = this.node.getComponent(ey);
                        e && (uB.set(e.color),
                        uB.a = t,
                        e.color = uB),
                        (e = this._handle.getComponent(ey)) && (uB.set(e.color),
                        uB.a = t,
                        e.color = uB)
                    }
                }
                ,
                i._updateHandlerPosition = function(t) {
                    if (this._handle) {
                        var e = lB;
                        this._fixupHandlerPosition(e),
                        this._handle.node.setPosition(t.x + e.x, t.y + e.y, e.z)
                    }
                }
                ,
                i._fixupHandlerPosition = function(t) {
                    var e = this.node._uiProps.uiTransformComp
                      , i = e.contentSize
                      , r = e.anchorPoint
                      , n = this.handle.node._uiProps.uiTransformComp.contentSize
                      , s = this.handle.node.parent;
                    di.set(aB, -i.width * r.x, -i.height * r.y, 0);
                    var a = this.node._uiProps.uiTransformComp.convertToWorldSpaceAR(aB, oB)
                      , o = t;
                    o.set(0, 0, 0),
                    s._uiProps.uiTransformComp.convertToNodeSpaceAR(a, o),
                    this.direction === nB.HORIZONTAL ? o.set(o.x, o.y + (i.height - n.height) / 2, o.z) : this.direction === nB.VERTICAL && o.set(o.x + (i.width - n.width) / 2, o.y, o.z),
                    this.handle.node.setPosition(o)
                }
                ,
                i._conditionalDisableScrollBar = function(t, e) {
                    return t.width <= e.width && this._direction === nB.HORIZONTAL || t.height <= e.height && this._direction === nB.VERTICAL
                }
                ,
                i._calculateLength = function(t, e, i, r) {
                    var n = t;
                    return r && (n += 20 * (r > 0 ? r : -r)),
                    i * (e / n)
                }
                ,
                i._calculatePosition = function(t, e, i, r, n, s, a) {
                    var o = e - i;
                    s && (o += Math.abs(s));
                    var l = 0;
                    o && (l = kn(l = n / o));
                    var h = (r - a) * l;
                    this._direction === nB.VERTICAL ? t.set(0, h) : t.set(h, 0)
                }
                ,
                i._updateLength = function(t) {
                    if (this._handle) {
                        var e = this._handle.node._uiProps.uiTransformComp
                          , i = e.contentSize
                          , r = e.anchorPoint;
                        r.x === hB.x && r.y === hB.y || e.setAnchorPoint(hB),
                        this._direction === nB.HORIZONTAL ? e.setContentSize(t, i.height) : e.setContentSize(i.width, t)
                    }
                }
                ,
                i._processAutoHide = function(t) {
                    if (this._enableAutoHide && !(this._autoHideRemainingTime <= 0) && !this._touching && (this._autoHideRemainingTime -= t,
                    this._autoHideRemainingTime <= this._autoHideTime)) {
                        this._autoHideRemainingTime = Math.max(0, this._autoHideRemainingTime);
                        var e = this._opacity * (this._autoHideRemainingTime / this._autoHideTime);
                        this._setOpacity(e)
                    }
                }
                ,
                Je(e, [{
                    key: "handle",
                    get: function() {
                        return this._handle
                    },
                    set: function(t) {
                        this._handle !== t && (this._handle = t,
                        this.onScroll(Br.ZERO))
                    }
                }, {
                    key: "direction",
                    get: function() {
                        return this._direction
                    },
                    set: function(t) {
                        this._direction !== t && (this._direction = t,
                        this.onScroll(Br.ZERO))
                    }
                }, {
                    key: "enableAutoHide",
                    get: function() {
                        return this._enableAutoHide
                    },
                    set: function(t) {
                        this._enableAutoHide !== t && (this._enableAutoHide = t,
                        this._enableAutoHide && this._setOpacity(0))
                    }
                }, {
                    key: "autoHideTime",
                    get: function() {
                        return this._autoHideTime
                    },
                    set: function(t) {
                        this._autoHideTime !== t && (this._autoHideTime = t)
                    }
                }]),
                e
            }(Ki),
            iB.Direction = nB,
            Ei((qR = rB).prototype, "handle", [GR, zR, UR], Object.getOwnPropertyDescriptor(qR.prototype, "handle"), qR.prototype),
            Ei(qR.prototype, "direction", [HR, VR, WR], Object.getOwnPropertyDescriptor(qR.prototype, "direction"), qR.prototype),
            Ei(qR.prototype, "enableAutoHide", [XR, jR], Object.getOwnPropertyDescriptor(qR.prototype, "enableAutoHide"), qR.prototype),
            Ei(qR.prototype, "autoHideTime", [YR, KR], Object.getOwnPropertyDescriptor(qR.prototype, "autoHideTime"), qR.prototype),
            JR = Ei(qR.prototype, "_scrollView", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            QR = Ei(qR.prototype, "_handle", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            $R = Ei(qR.prototype, "_direction", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return nB.HORIZONTAL
                }
            }),
            tB = Ei(qR.prototype, "_enableAutoHide", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            eB = Ei(qR.prototype, "_autoHideTime", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            ZR = qR)) || ZR) || ZR) || ZR) || ZR) || ZR)), lx = t("ViewGroup", Ti("cc.ViewGroup")(_B = Li(110)(_B = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                return qe(e, t),
                e
            }(Ki)) || _B) || _B);
            ci.ViewGroup = lx;
            var hx, ux = 1e-4, cx = new di, _x = new di, dx = new Br, px = new Br, fx = function() {
                return (new Date).getMilliseconds()
            }, gx = {
                "scroll-to-top": 0,
                "scroll-to-bottom": 1,
                "scroll-to-left": 2,
                "scroll-to-right": 3,
                scrolling: 4,
                "bounce-bottom": 6,
                "bounce-left": 7,
                "bounce-right": 8,
                "bounce-top": 5,
                "scroll-ended": 9,
                "touch-up": 10,
                "scroll-ended-with-threshold": 11,
                "scroll-began": 12
            };
            !function(t) {
                t.SCROLL_TO_TOP = "scroll-to-top",
                t.SCROLL_TO_BOTTOM = "scroll-to-bottom",
                t.SCROLL_TO_LEFT = "scroll-to-left",
                t.SCROLL_TO_RIGHT = "scroll-to-right",
                t.SCROLL_BEGAN = "scroll-began",
                t.SCROLL_ENDED = "scroll-ended",
                t.BOUNCE_TOP = "bounce-top",
                t.BOUNCE_BOTTOM = "bounce-bottom",
                t.BOUNCE_LEFT = "bounce-left",
                t.BOUNCE_RIGHT = "bounce-right",
                t.SCROLLING = "scrolling",
                t.SCROLL_ENG_WITH_THRESHOLD = "scroll-ended-with-threshold",
                t.TOUCH_UP = "touch-up"
            }(hx || (hx = {}));
            var mx, yx, vx, Sx, Tx, bx, Ex, Ax, Cx, Rx, Bx, xx, Dx, wx, Ox, Px, Mx, Ix, Lx, Fx, Nx, kx, Gx = function(e) {
                return t({
                    ScrollView: e,
                    ScrollViewComponent: e
                }),
                e
            }((dB = Ti("cc.ScrollView"),
            pB = Ii(),
            fB = Li(110),
            gB = Fi(),
            mB = Zr(yd),
            yB = ji(),
            vB = Xr(),
            SB = Ni(),
            TB = ji(),
            bB = Xr(),
            EB = Ni(),
            AB = Xr(),
            CB = Ni(),
            RB = Xr(),
            BB = Ni(),
            xB = Ci(Sr),
            DB = Xr(),
            wB = Ni(),
            OB = Xr(),
            PB = Ni(),
            MB = Ci(ox),
            IB = Xr(),
            LB = Ni(),
            FB = Xr(),
            NB = Ni(),
            kB = Ci(ox),
            GB = Xr(),
            zB = Ni(),
            UB = Xr(),
            HB = Ni(),
            VB = Ci([Bn]),
            WB = Xr(),
            XB = Ni(),
            dB(jB = pB(jB = fB(jB = gB(jB = mB((ax = sx = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "bounceDuration", KB, Gi(e)),
                    Oi(e, "brake", ZB, Gi(e)),
                    Oi(e, "elastic", qB, Gi(e)),
                    Oi(e, "inertia", JB, Gi(e)),
                    Oi(e, "horizontal", QB, Gi(e)),
                    Oi(e, "vertical", $B, Gi(e)),
                    Oi(e, "cancelInnerEvents", tx, Gi(e)),
                    Oi(e, "scrollEvents", ex, Gi(e)),
                    e._autoScrolling = !1,
                    e._scrolling = !1,
                    Oi(e, "_content", ix, Gi(e)),
                    Oi(e, "_horizontalScrollBar", rx, Gi(e)),
                    Oi(e, "_verticalScrollBar", nx, Gi(e)),
                    e._topBoundary = 0,
                    e._bottomBoundary = 0,
                    e._leftBoundary = 0,
                    e._rightBoundary = 0,
                    e._touchMoveDisplacements = [],
                    e._touchMoveTimeDeltas = [],
                    e._touchMovePreviousTimestamp = 0,
                    e._touchMoved = !1,
                    e._autoScrollAttenuate = !1,
                    e._autoScrollStartPosition = new di,
                    e._autoScrollTargetDelta = new di,
                    e._autoScrollTotalTime = 0,
                    e._autoScrollAccumulatedTime = 0,
                    e._autoScrollCurrentlyOutOfBoundary = !1,
                    e._autoScrollBraking = !1,
                    e._autoScrollBrakingStartPosition = new di,
                    e._outOfBoundaryAmount = new di,
                    e._outOfBoundaryAmountDirty = !0,
                    e._stopMouseWheel = !1,
                    e._mouseWheelEventElapsedTime = 0,
                    e._isScrollEndedWithThresholdEventFired = !1,
                    e._scrollEventEmitMask = 0,
                    e._isBouncing = !1,
                    e._contentPos = new di,
                    e._deltaPos = new di,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.scrollToBottom = function(t, e) {
                    void 0 === e && (e = !0);
                    var i = this._calculateMovePercentDelta({
                        anchor: new Br(0,0),
                        applyToHorizontal: !1,
                        applyToVertical: !0
                    });
                    t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i, !0)
                }
                ,
                i.scrollToTop = function(t, e) {
                    void 0 === e && (e = !0);
                    var i = this._calculateMovePercentDelta({
                        anchor: new Br(0,1),
                        applyToHorizontal: !1,
                        applyToVertical: !0
                    });
                    t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i)
                }
                ,
                i.scrollToLeft = function(t, e) {
                    void 0 === e && (e = !0);
                    var i = this._calculateMovePercentDelta({
                        anchor: new Br(0,0),
                        applyToHorizontal: !0,
                        applyToVertical: !1
                    });
                    t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i)
                }
                ,
                i.scrollToRight = function(t, e) {
                    void 0 === e && (e = !0);
                    var i = this._calculateMovePercentDelta({
                        anchor: new Br(1,0),
                        applyToHorizontal: !0,
                        applyToVertical: !1
                    });
                    t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i)
                }
                ,
                i.scrollToTopLeft = function(t, e) {
                    void 0 === e && (e = !0);
                    var i = this._calculateMovePercentDelta({
                        anchor: new Br(0,1),
                        applyToHorizontal: !0,
                        applyToVertical: !0
                    });
                    t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i)
                }
                ,
                i.scrollToTopRight = function(t, e) {
                    void 0 === e && (e = !0);
                    var i = this._calculateMovePercentDelta({
                        anchor: new Br(1,1),
                        applyToHorizontal: !0,
                        applyToVertical: !0
                    });
                    t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i)
                }
                ,
                i.scrollToBottomLeft = function(t, e) {
                    void 0 === e && (e = !0);
                    var i = this._calculateMovePercentDelta({
                        anchor: new Br(0,0),
                        applyToHorizontal: !0,
                        applyToVertical: !0
                    });
                    t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i)
                }
                ,
                i.scrollToBottomRight = function(t, e) {
                    void 0 === e && (e = !0);
                    var i = this._calculateMovePercentDelta({
                        anchor: new Br(1,0),
                        applyToHorizontal: !0,
                        applyToVertical: !0
                    });
                    t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i)
                }
                ,
                i.scrollToOffset = function(t, e, i) {
                    void 0 === i && (i = !0);
                    var r = this.getMaxScrollOffset()
                      , n = new Br(0,0);
                    0 === r.x ? n.x = 0 : n.x = t.x / r.x,
                    0 === r.y ? n.y = 1 : n.y = (r.y - t.y) / r.y,
                    this.scrollTo(n, e, i)
                }
                ,
                i.getScrollOffset = function() {
                    var t = this._getContentTopBoundary() - this._topBoundary
                      , e = this._getContentLeftBoundary() - this._leftBoundary;
                    return new Br(e,t)
                }
                ,
                i.getMaxScrollOffset = function() {
                    if (!this._content || !this.view)
                        return Br.ZERO;
                    var t = this._content._uiProps.uiTransformComp.contentSize
                      , e = t.width - this.view.width
                      , i = t.height - this.view.height;
                    return new Br(e = e >= 0 ? e : 0,i = i >= 0 ? i : 0)
                }
                ,
                i.scrollToPercentHorizontal = function(t, e, i) {
                    var r = this._calculateMovePercentDelta({
                        anchor: new Br(t,0),
                        applyToHorizontal: !0,
                        applyToVertical: !1
                    });
                    e ? this._startAutoScroll(r, e, !1 !== i) : this._moveContent(r)
                }
                ,
                i.scrollTo = function(t, e, i) {
                    var r = this._calculateMovePercentDelta({
                        anchor: new Br(t),
                        applyToHorizontal: !0,
                        applyToVertical: !0
                    });
                    e ? this._startAutoScroll(r, e, i) : this._moveContent(r)
                }
                ,
                i.scrollToPercentVertical = function(t, e, i) {
                    var r = this._calculateMovePercentDelta({
                        anchor: new Br(0,t),
                        applyToHorizontal: !1,
                        applyToVertical: !0
                    });
                    e ? this._startAutoScroll(r, e, i) : this._moveContent(r)
                }
                ,
                i.stopAutoScroll = function() {
                    this._autoScrolling = !1,
                    this._autoScrollAccumulatedTime = this._autoScrollTotalTime
                }
                ,
                i.setContentPosition = function(t) {
                    this._setContentPosition(t)
                }
                ,
                i._setContentPosition = function(t) {
                    if (this._content) {
                        var e = this._getContentPosition();
                        Math.abs(t.x - e.x) < ux && Math.abs(t.y - e.y) < ux || (this._content.setPosition(t),
                        this._outOfBoundaryAmountDirty = !0)
                    }
                }
                ,
                i.getContentPosition = function() {
                    return this._getContentPosition()
                }
                ,
                i._getContentPosition = function() {
                    return this._content ? (this._contentPos.set(this._content.position),
                    this._contentPos) : di.ZERO.clone()
                }
                ,
                i.isScrolling = function() {
                    return this._scrolling
                }
                ,
                i.isAutoScrolling = function() {
                    return this._autoScrolling
                }
                ,
                i.getScrollEndedEventTiming = function() {
                    return ux
                }
                ,
                i.start = function() {
                    this._calculateBoundary(),
                    this._content && Ur.once(Hr.EVENT_BEFORE_DRAW, this._adjustContentOutOfBoundary, this)
                }
                ,
                i.onEnable = function() {
                    this._registerEvent(),
                    this._content && (this._content.on(Wr.SIZE_CHANGED, this._calculateBoundary, this),
                    this._content.on(Wr.TRANSFORM_CHANGED, this._scaleChanged, this),
                    this.view && (this.view.node.on(Wr.TRANSFORM_CHANGED, this._scaleChanged, this),
                    this.view.node.on(Wr.SIZE_CHANGED, this._calculateBoundary, this))),
                    this._calculateBoundary(),
                    this._updateScrollBarState()
                }
                ,
                i.update = function(t) {
                    this._autoScrolling && this._processAutoScrolling(t)
                }
                ,
                i.onDisable = function() {
                    this._unregisterEvent(),
                    this._content && (this._content.off(Wr.SIZE_CHANGED, this._calculateBoundary, this),
                    this._content.off(Wr.TRANSFORM_CHANGED, this._scaleChanged, this),
                    this.view && (this.view.node.off(Wr.TRANSFORM_CHANGED, this._scaleChanged, this),
                    this.view.node.off(Wr.SIZE_CHANGED, this._calculateBoundary, this))),
                    this._hideScrollBar(),
                    this.stopAutoScroll()
                }
                ,
                i._registerEvent = function() {
                    this.node.on(Wr.TOUCH_START, this._onTouchBegan, this, !0),
                    this.node.on(Wr.TOUCH_MOVE, this._onTouchMoved, this, !0),
                    this.node.on(Wr.TOUCH_END, this._onTouchEnded, this, !0),
                    this.node.on(Wr.TOUCH_CANCEL, this._onTouchCancelled, this, !0),
                    this.node.on(Wr.MOUSE_WHEEL, this._onMouseWheel, this, !0)
                }
                ,
                i._unregisterEvent = function() {
                    this.node.off(Wr.TOUCH_START, this._onTouchBegan, this, !0),
                    this.node.off(Wr.TOUCH_MOVE, this._onTouchMoved, this, !0),
                    this.node.off(Wr.TOUCH_END, this._onTouchEnded, this, !0),
                    this.node.off(Wr.TOUCH_CANCEL, this._onTouchCancelled, this, !0),
                    this.node.off(Wr.MOUSE_WHEEL, this._onMouseWheel, this, !0)
                }
                ,
                i._onMouseWheel = function(t, e) {
                    if (this.enabledInHierarchy && !this._hasNestedViewGroup(t, e)) {
                        var i = new di
                          , r = t.getScrollY();
                        this.vertical ? i.set(0, -.1 * r, 0) : this.horizontal && i.set(-.1 * r, 0, 0),
                        this._mouseWheelEventElapsedTime = 0,
                        this._processDeltaMove(i),
                        this._stopMouseWheel || (this._handlePressLogic(),
                        this.schedule(this._checkMouseWheel, 1 / 60, NaN, 0),
                        this._stopMouseWheel = !0),
                        this._stopPropagationIfTargetIsMe(t)
                    }
                }
                ,
                i._onTouchBegan = function(t, e) {
                    this.enabledInHierarchy && this._content && (this._hasNestedViewGroup(t, e) || (this._handlePressLogic(),
                    this._touchMoved = !1,
                    this._stopPropagationIfTargetIsMe(t)))
                }
                ,
                i._onTouchMoved = function(t, e) {
                    if (this.enabledInHierarchy && this._content && !this._hasNestedViewGroup(t, e)) {
                        var i = t.touch;
                        if (this._handleMoveLogic(i),
                        this.cancelInnerEvents) {
                            var r = i.getUILocation(dx);
                            if (r.subtract(i.getUIStartLocation(px)),
                            r.length() > 7 && !this._touchMoved && t.target !== this.node) {
                                var n = new Gn(t.getTouches(),t.bubbles,zn.TOUCH_CANCEL);
                                n.touch = t.touch,
                                n.simulate = !0,
                                t.target.dispatchEvent(n),
                                this._touchMoved = !0
                            }
                            this._stopPropagationIfTargetIsMe(t)
                        }
                    }
                }
                ,
                i._onTouchEnded = function(t, e) {
                    if (this.enabledInHierarchy && this._content && t && !this._hasNestedViewGroup(t, e)) {
                        this._dispatchEvent(hx.TOUCH_UP);
                        var i = t.touch;
                        this._handleReleaseLogic(i),
                        this._touchMoved ? t.propagationStopped = !0 : this._stopPropagationIfTargetIsMe(t)
                    }
                }
                ,
                i._onTouchCancelled = function(t, e) {
                    if (this.enabledInHierarchy && this._content && !this._hasNestedViewGroup(t, e)) {
                        if (t && !t.simulate) {
                            var i = t.touch;
                            this._handleReleaseLogic(i)
                        }
                        this._stopPropagationIfTargetIsMe(t)
                    }
                }
                ,
                i._calculateBoundary = function() {
                    if (this._content && this.view) {
                        var t = this._content.getComponent(MR);
                        t && t.enabledInHierarchy && t.updateLayout();
                        var e = this.view
                          , i = e.width * e.anchorX
                          , r = e.height * e.anchorY;
                        this._leftBoundary = -i,
                        this._bottomBoundary = -r,
                        this._rightBoundary = this._leftBoundary + e.width,
                        this._topBoundary = this._bottomBoundary + e.height,
                        this._moveContentToTopLeft(e.contentSize)
                    }
                }
                ,
                i._hasNestedViewGroup = function(t, e) {
                    if (!t || t.eventPhase !== Un.CAPTURING_PHASE)
                        return !1;
                    if (e)
                        for (var i, r = ui(e); !(i = r()).done; ) {
                            var n = i.value;
                            if (this.node === n)
                                return !(!t.target || !t.target.getComponent(lx));
                            if (n.getComponent(lx))
                                return !0
                        }
                    return !1
                }
                ,
                i._startInertiaScroll = function(t) {
                    var e = new di(t);
                    e.multiplyScalar(.7),
                    this._startAttenuatingAutoScroll(e, t)
                }
                ,
                i._calculateAttenuatedFactor = function(t) {
                    return this.brake <= 0 ? 1 - this.brake : (1 - this.brake) * (1 / (1 + 14e-6 * t + t * t * 8e-9))
                }
                ,
                i._startAttenuatingAutoScroll = function(t, e) {
                    var i = t.clone();
                    if (i.normalize(),
                    this._content && this.view) {
                        var r = this._content._uiProps.uiTransformComp.contentSize
                          , n = this.view.contentSize
                          , s = r.width - n.width
                          , a = r.height - n.height
                          , o = this._calculateAttenuatedFactor(s)
                          , l = this._calculateAttenuatedFactor(a);
                        i.x = i.x * s * (1 - this.brake) * o,
                        i.y = i.y * a * l * (1 - this.brake),
                        i.z = 0
                    }
                    var h = t.length()
                      , u = i.length() / h;
                    if (i.add(t),
                    this.brake > 0 && u > 7) {
                        u = Math.sqrt(u);
                        var c = t.clone();
                        c.multiplyScalar(u),
                        i.set(c),
                        i.add(t)
                    }
                    var _ = this._calculateAutoScrollTimeByInitialSpeed(e.length());
                    this.brake > 0 && u > 3 && (_ *= u = 3),
                    0 === this.brake && u > 1 && (_ *= u),
                    this._startAutoScroll(i, _, !0)
                }
                ,
                i._calculateAutoScrollTimeByInitialSpeed = function(t) {
                    return Math.sqrt(Math.sqrt(t / 5))
                }
                ,
                i._startAutoScroll = function(t, e, i) {
                    void 0 === i && (i = !1);
                    var r = this._flattenVectorByDirection(t);
                    this._autoScrolling = !0,
                    this._autoScrollTargetDelta = r,
                    this._autoScrollAttenuate = i,
                    di.copy(this._autoScrollStartPosition, this._getContentPosition()),
                    this._autoScrollTotalTime = e,
                    this._autoScrollAccumulatedTime = 0,
                    this._autoScrollBraking = !1,
                    this._isScrollEndedWithThresholdEventFired = !1,
                    this._autoScrollBrakingStartPosition.set(0, 0, 0),
                    this._getHowMuchOutOfBoundary().equals(di.ZERO, ux) || (this._autoScrollCurrentlyOutOfBoundary = !0)
                }
                ,
                i._calculateTouchMoveVelocity = function() {
                    var t = new di
                      , e = 0;
                    if ((e = this._touchMoveTimeDeltas.reduce((function(t, e) {
                        return t + e
                    }
                    ), e)) <= 0 || e >= .5)
                        t.set(di.ZERO);
                    else {
                        var i = new di;
                        i = this._touchMoveDisplacements.reduce((function(t, e) {
                            return t.add(e),
                            t
                        }
                        ), i),
                        t.set(i.x * (1 - this.brake) / e, i.y * (1 - this.brake) / e, i.z)
                    }
                    return t
                }
                ,
                i._flattenVectorByDirection = function(t) {
                    var e = t;
                    return e.x = this.horizontal ? e.x : 0,
                    e.y = this.vertical ? e.y : 0,
                    e
                }
                ,
                i._moveContent = function(t, e) {
                    var i = this._flattenVectorByDirection(t);
                    cx.set(this._getContentPosition()),
                    cx.add(i),
                    cx.set(Math.round(1e4 * cx.x) * ux, Math.round(1e4 * cx.y) * ux, cx.z),
                    this._setContentPosition(cx);
                    var r = this._getHowMuchOutOfBoundary();
                    dx.set(r.x, r.y),
                    this._updateScrollBar(dx),
                    this.elastic && e && this._startBounceBackIfNeeded()
                }
                ,
                i._getContentLeftBoundary = function() {
                    if (!this._content)
                        return -1;
                    var t = this._getContentPosition()
                      , e = this._content._uiProps.uiTransformComp;
                    return t.x - e.anchorX * e.width
                }
                ,
                i._getContentRightBoundary = function() {
                    if (!this._content)
                        return -1;
                    var t = this._content._uiProps.uiTransformComp;
                    return this._getContentLeftBoundary() + t.width
                }
                ,
                i._getContentTopBoundary = function() {
                    if (!this._content)
                        return -1;
                    var t = this._content._uiProps.uiTransformComp;
                    return this._getContentBottomBoundary() + t.height
                }
                ,
                i._getContentBottomBoundary = function() {
                    if (!this._content)
                        return -1;
                    var t = this._getContentPosition()
                      , e = this._content._uiProps.uiTransformComp;
                    return t.y - e.anchorY * e.height
                }
                ,
                i._getHowMuchOutOfBoundary = function(t) {
                    if ((t = t || new di).equals(di.ZERO, ux) && !this._outOfBoundaryAmountDirty)
                        return this._outOfBoundaryAmount;
                    var e = new di
                      , i = this._getContentLeftBoundary()
                      , r = this._getContentRightBoundary();
                    i + t.x > this._leftBoundary ? e.x = this._leftBoundary - (i + t.x) : r + t.x < this._rightBoundary && (e.x = this._rightBoundary - (r + t.x));
                    var n = this._getContentTopBoundary()
                      , s = this._getContentBottomBoundary();
                    return n + t.y < this._topBoundary ? e.y = this._topBoundary - (n + t.y) : s + t.y > this._bottomBoundary && (e.y = this._bottomBoundary - (s + t.y)),
                    t.equals(di.ZERO, ux) && (this._outOfBoundaryAmount = e,
                    this._outOfBoundaryAmountDirty = !1),
                    this._clampDelta(e),
                    e
                }
                ,
                i._updateScrollBar = function(t) {
                    this._horizontalScrollBar && this._horizontalScrollBar.onScroll(t),
                    this.verticalScrollBar && this.verticalScrollBar.onScroll(t)
                }
                ,
                i._onScrollBarTouchBegan = function() {
                    this._horizontalScrollBar && this._horizontalScrollBar.onTouchBegan(),
                    this.verticalScrollBar && this.verticalScrollBar.onTouchBegan()
                }
                ,
                i._onScrollBarTouchEnded = function() {
                    this._horizontalScrollBar && this._horizontalScrollBar.onTouchEnded(),
                    this.verticalScrollBar && this.verticalScrollBar.onTouchEnded()
                }
                ,
                i._dispatchEvent = function(t) {
                    if (t === hx.SCROLL_ENDED)
                        this._scrollEventEmitMask = 0;
                    else if (t === hx.SCROLL_TO_TOP || t === hx.SCROLL_TO_BOTTOM || t === hx.SCROLL_TO_LEFT || t === hx.SCROLL_TO_RIGHT) {
                        var e = 1 << gx[t];
                        if (this._scrollEventEmitMask & e)
                            return;
                        this._scrollEventEmitMask |= e
                    }
                    Bn.emitEvents(this.scrollEvents, this, gx[t]),
                    this.node.emit(t, this)
                }
                ,
                i._adjustContentOutOfBoundary = function() {
                    if (this._content && (this._outOfBoundaryAmountDirty = !0,
                    this._isOutOfBoundary())) {
                        var t = this._getHowMuchOutOfBoundary();
                        cx.set(this._getContentPosition()),
                        cx.add(t),
                        this._content.setPosition(cx),
                        this._updateScrollBar(Br.ZERO)
                    }
                }
                ,
                i._hideScrollBar = function() {
                    this._horizontalScrollBar && this._horizontalScrollBar.hide(),
                    this._verticalScrollBar && this._verticalScrollBar.hide()
                }
                ,
                i._updateScrollBarState = function() {
                    if (this._content && this.view) {
                        var t = this.view
                          , e = this._content._uiProps.uiTransformComp;
                        this.verticalScrollBar && (e.height < t.height ? this.verticalScrollBar.hide() : this.verticalScrollBar.show()),
                        this.horizontalScrollBar && (e.width < t.width ? this.horizontalScrollBar.hide() : this.horizontalScrollBar.show())
                    }
                }
                ,
                i._stopPropagationIfTargetIsMe = function(t) {
                    t.eventPhase === Un.AT_TARGET && t.target === this.node && (t.propagationStopped = !0)
                }
                ,
                i._processDeltaMove = function(t) {
                    this._scrollChildren(t),
                    this._gatherTouchMove(t)
                }
                ,
                i._handleMoveLogic = function(t) {
                    this._getLocalAxisAlignDelta(this._deltaPos, t),
                    this._processDeltaMove(this._deltaPos)
                }
                ,
                i._handleReleaseLogic = function(t) {
                    this._getLocalAxisAlignDelta(this._deltaPos, t),
                    this._gatherTouchMove(this._deltaPos),
                    this._processInertiaScroll(),
                    this._scrolling && (this._scrolling = !1,
                    this._autoScrolling || this._dispatchEvent(hx.SCROLL_ENDED))
                }
                ,
                i._getLocalAxisAlignDelta = function(t, e) {
                    var i = this.node._uiProps.uiTransformComp
                      , r = new di;
                    i && (e.getUILocation(dx),
                    e.getUIPreviousLocation(px),
                    cx.set(dx.x, dx.y, 0),
                    _x.set(px.x, px.y, 0),
                    i.convertToNodeSpaceAR(cx, cx),
                    i.convertToNodeSpaceAR(_x, _x),
                    di.subtract(r, cx, _x)),
                    t.set(r)
                }
                ,
                i._scrollChildren = function(t) {
                    this._clampDelta(t);
                    var e, i = t;
                    this.elastic && (e = this._getHowMuchOutOfBoundary(),
                    i.x *= 0 === e.x ? 1 : .5,
                    i.y *= 0 === e.y ? 1 : .5),
                    this.elastic || (e = this._getHowMuchOutOfBoundary(i),
                    i.add(e));
                    var r = ""
                      , n = "";
                    if (this._content) {
                        var s = this._content._uiProps.uiTransformComp
                          , a = s.anchorX
                          , o = s.anchorY
                          , l = s.width
                          , h = s.height
                          , u = this._content.position || di.ZERO;
                        this.vertical && (i.y > 0 ? u.y - o * h + i.y >= this._bottomBoundary && (r = hx.SCROLL_TO_BOTTOM) : i.y < 0 && u.y - o * h + h + i.y <= this._topBoundary && (r = hx.SCROLL_TO_TOP)),
                        this.horizontal && (i.x < 0 ? u.x - a * l + l + i.x <= this._rightBoundary && (n = hx.SCROLL_TO_RIGHT) : i.x > 0 && u.x - a * l + i.x >= this._leftBoundary && (n = hx.SCROLL_TO_LEFT))
                    }
                    this._moveContent(i, !1),
                    (this.horizontal && 0 !== i.x || this.vertical && 0 !== i.y) && (this._scrolling || (this._scrolling = !0,
                    this._dispatchEvent(hx.SCROLL_BEGAN)),
                    this._dispatchEvent(hx.SCROLLING)),
                    "" !== r && this._dispatchEvent(r),
                    "" !== n && this._dispatchEvent(n)
                }
                ,
                i._handlePressLogic = function() {
                    this._autoScrolling && this._dispatchEvent(hx.SCROLL_ENDED),
                    this._autoScrolling = !1,
                    this._isBouncing = !1,
                    this._touchMovePreviousTimestamp = fx(),
                    this._touchMoveDisplacements.length = 0,
                    this._touchMoveTimeDeltas.length = 0,
                    this._onScrollBarTouchBegan()
                }
                ,
                i._clampDelta = function(t) {
                    if (this._content && this.view) {
                        var e = this.view.contentSize
                          , i = this._content._uiProps.uiTransformComp;
                        i.width < e.width && (t.x = 0),
                        i.height < e.height && (t.y = 0)
                    }
                }
                ,
                i._gatherTouchMove = function(t) {
                    var e = t.clone();
                    for (this._clampDelta(e); this._touchMoveDisplacements.length >= 5; )
                        this._touchMoveDisplacements.shift(),
                        this._touchMoveTimeDeltas.shift();
                    this._touchMoveDisplacements.push(e);
                    var i = fx();
                    this._touchMoveTimeDeltas.push((i - this._touchMovePreviousTimestamp) / 1e3),
                    this._touchMovePreviousTimestamp = i
                }
                ,
                i._startBounceBackIfNeeded = function() {
                    if (!this.elastic)
                        return !1;
                    var t = this._getHowMuchOutOfBoundary();
                    if (this._clampDelta(t),
                    t.equals(di.ZERO, ux))
                        return !1;
                    var e = Math.max(this.bounceDuration, 0);
                    return this._startAutoScroll(t, e, !0),
                    this._isBouncing || (t.y > 0 && this._dispatchEvent(hx.BOUNCE_TOP),
                    t.y < 0 && this._dispatchEvent(hx.BOUNCE_BOTTOM),
                    t.x > 0 && this._dispatchEvent(hx.BOUNCE_RIGHT),
                    t.x < 0 && this._dispatchEvent(hx.BOUNCE_LEFT),
                    this._isBouncing = !0),
                    !0
                }
                ,
                i._processInertiaScroll = function() {
                    if (!this._startBounceBackIfNeeded() && this.inertia) {
                        var t = this._calculateTouchMoveVelocity();
                        !t.equals(cx, ux) && this.brake < 1 && this._startInertiaScroll(t)
                    }
                    this._onScrollBarTouchEnded()
                }
                ,
                i._isOutOfBoundary = function() {
                    return !this._getHowMuchOutOfBoundary().equals(di.ZERO, ux)
                }
                ,
                i._isNecessaryAutoScrollBrake = function() {
                    if (this._autoScrollBraking)
                        return !0;
                    if (this._isOutOfBoundary()) {
                        if (!this._autoScrollCurrentlyOutOfBoundary)
                            return this._autoScrollCurrentlyOutOfBoundary = !0,
                            this._autoScrollBraking = !0,
                            this._autoScrollBrakingStartPosition = this._getContentPosition(),
                            !0
                    } else
                        this._autoScrollCurrentlyOutOfBoundary = !1;
                    return !1
                }
                ,
                i._processAutoScrolling = function(t) {
                    var e = this._isNecessaryAutoScrollBrake()
                      , i = e ? .05 : 1;
                    this._autoScrollAccumulatedTime += t * (1 / i);
                    var r, n = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);
                    this._autoScrollAttenuate && (r = n,
                    n = (r -= 1) * r * r * r * r + 1);
                    var s = this._autoScrollTargetDelta.clone();
                    s.multiplyScalar(n);
                    var a = this._autoScrollStartPosition.clone();
                    a.add(s);
                    var o = Math.abs(n - 1) <= ux;
                    if (Math.abs(n - 1) <= this.getScrollEndedEventTiming() && !this._isScrollEndedWithThresholdEventFired && (this._dispatchEvent(hx.SCROLL_ENG_WITH_THRESHOLD),
                    this._isScrollEndedWithThresholdEventFired = !0),
                    this.elastic) {
                        var l = a.clone();
                        l.subtract(this._autoScrollBrakingStartPosition),
                        e && l.multiplyScalar(i),
                        a.set(this._autoScrollBrakingStartPosition),
                        a.add(l)
                    } else {
                        var h = a.clone();
                        h.subtract(this.getContentPosition());
                        var u = this._getHowMuchOutOfBoundary(h);
                        u.equals(di.ZERO, ux) || (a.add(u),
                        o = !0)
                    }
                    o && (this._autoScrolling = !1);
                    var c = a.clone();
                    c.subtract(this._getContentPosition()),
                    this._clampDelta(c),
                    this._moveContent(c, o),
                    this._dispatchEvent(hx.SCROLLING),
                    this._autoScrolling || (this._isBouncing = !1,
                    this._scrolling = !1,
                    this._dispatchEvent(hx.SCROLL_ENDED))
                }
                ,
                i._checkMouseWheel = function(t) {
                    if (!this._getHowMuchOutOfBoundary().equals(di.ZERO, ux))
                        return this._processInertiaScroll(),
                        this.unschedule(this._checkMouseWheel),
                        this._dispatchEvent(hx.SCROLL_ENDED),
                        void (this._stopMouseWheel = !1);
                    this._mouseWheelEventElapsedTime += t,
                    this._mouseWheelEventElapsedTime > .1 && (this._onScrollBarTouchEnded(),
                    this.unschedule(this._checkMouseWheel),
                    this._dispatchEvent(hx.SCROLL_ENDED),
                    this._stopMouseWheel = !1)
                }
                ,
                i._calculateMovePercentDelta = function(t) {
                    var e = t.anchor
                      , i = t.applyToHorizontal
                      , r = t.applyToVertical;
                    this._calculateBoundary(),
                    e.clampf(Br.ZERO, Br.ONE);
                    var n = this._getContentBottomBoundary() - this._bottomBoundary;
                    n = -n;
                    var s = this._getContentLeftBoundary() - this._leftBoundary;
                    s = -s;
                    var a = new di;
                    if (this._content && this.view) {
                        var o = 0
                          , l = this._content._uiProps.uiTransformComp.contentSize
                          , h = this.view.contentSize;
                        i && (o = l.width - h.width,
                        a.x = s - o * e.x),
                        r && (o = l.height - h.height,
                        a.y = n - o * e.y)
                    }
                    return a
                }
                ,
                i._moveContentToTopLeft = function(t) {
                    var e = this._getContentBottomBoundary() - this._bottomBoundary;
                    e = -e;
                    var i = new di
                      , r = 0
                      , n = this._getContentLeftBoundary() - this._leftBoundary;
                    if (n = -n,
                    this._content) {
                        var s = this._content._uiProps.uiTransformComp.contentSize;
                        s.height < t.height && (r = s.height - t.height,
                        i.y = e - r),
                        s.width < t.width && (r = s.width - t.width,
                        i.x = n)
                    }
                    this._updateScrollBarState(),
                    this._moveContent(i),
                    this._adjustContentOutOfBoundary()
                }
                ,
                i._scaleChanged = function(t) {
                    t === xi.SCALE && this._calculateBoundary()
                }
                ,
                Je(e, [{
                    key: "content",
                    get: function() {
                        return this._content
                    },
                    set: function(t) {
                        if (this._content !== t) {
                            var e = t && t.parent && t.parent._uiProps.uiTransformComp;
                            !t || t && e ? (this._content = t,
                            this._calculateBoundary()) : mn(4302)
                        }
                    }
                }, {
                    key: "horizontalScrollBar",
                    get: function() {
                        return this._horizontalScrollBar
                    },
                    set: function(t) {
                        this._horizontalScrollBar !== t && (this._horizontalScrollBar = t,
                        this._horizontalScrollBar && (this._horizontalScrollBar.setScrollView(this),
                        this._updateScrollBar(Br.ZERO)))
                    }
                }, {
                    key: "verticalScrollBar",
                    get: function() {
                        return this._verticalScrollBar
                    },
                    set: function(t) {
                        this._verticalScrollBar !== t && (this._verticalScrollBar = t,
                        this._verticalScrollBar && (this._verticalScrollBar.setScrollView(this),
                        this._updateScrollBar(Br.ZERO)))
                    }
                }, {
                    key: "view",
                    get: function() {
                        var t = this._content && this._content.parent;
                        return t ? t._uiProps.uiTransformComp : null
                    }
                }]),
                e
            }(lx),
            sx.EventType = hx,
            KB = Ei((YB = ax).prototype, "bounceDuration", [Pi, yB, vB, SB], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            ZB = Ei(YB.prototype, "brake", [Pi, TB, bB, EB], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return .5
                }
            }),
            qB = Ei(YB.prototype, "elastic", [Pi, AB, CB], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            JB = Ei(YB.prototype, "inertia", [Pi, RB, BB], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            Ei(YB.prototype, "content", [xB, DB, wB], Object.getOwnPropertyDescriptor(YB.prototype, "content"), YB.prototype),
            QB = Ei(YB.prototype, "horizontal", [Pi, OB, PB], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            Ei(YB.prototype, "horizontalScrollBar", [MB, IB, LB], Object.getOwnPropertyDescriptor(YB.prototype, "horizontalScrollBar"), YB.prototype),
            $B = Ei(YB.prototype, "vertical", [Pi, FB, NB], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            Ei(YB.prototype, "verticalScrollBar", [kB, GB, zB], Object.getOwnPropertyDescriptor(YB.prototype, "verticalScrollBar"), YB.prototype),
            tx = Ei(YB.prototype, "cancelInnerEvents", [Pi, UB, HB], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            ex = Ei(YB.prototype, "scrollEvents", [VB, Pi, WB, XB], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            ix = Ei(YB.prototype, "_content", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            rx = Ei(YB.prototype, "_horizontalScrollBar", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            nx = Ei(YB.prototype, "_verticalScrollBar", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            jB = YB)) || jB) || jB) || jB) || jB) || jB)), zx = new di;
            !function(t) {
                t[t.Horizontal = 0] = "Horizontal",
                t[t.Vertical = 1] = "Vertical"
            }(kx || (kx = {})),
            Yr(kx);
            var Ux, Hx, Vx, Wx, Xx, jx, Yx, Kx, Zx, qx, Jx, Qx, $x, tD, eD, iD, rD, nD, sD, aD, oD = function(e) {
                return t({
                    Slider: e,
                    SliderComponent: e
                }),
                e
            }((mx = Ti("cc.Slider"),
            yx = Ii(),
            vx = Li(110),
            Sx = Fi(),
            Tx = Zr(yd),
            bx = Ci(ey),
            Ex = Ni(),
            Ax = Ci(kx),
            Cx = Ni(),
            Rx = ji(),
            Bx = Ni(),
            xx = Ci([Bn]),
            Dx = Ni(),
            mx(wx = yx(wx = vx(wx = Sx(wx = Tx((Nx = Fx = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "slideEvents", Px, Gi(e)),
                    Oi(e, "_handle", Mx, Gi(e)),
                    Oi(e, "_direction", Ix, Gi(e)),
                    Oi(e, "_progress", Lx, Gi(e)),
                    e._offset = new di,
                    e._dragging = !1,
                    e._touchHandle = !1,
                    e._handleLocalPos = new di,
                    e._touchPos = new di,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.__preload = function() {
                    this._updateHandlePosition()
                }
                ,
                i.onEnable = function() {
                    this._updateHandlePosition(),
                    this.node.on(Wr.TOUCH_START, this._onTouchBegan, this),
                    this.node.on(Wr.TOUCH_MOVE, this._onTouchMoved, this),
                    this.node.on(Wr.TOUCH_END, this._onTouchEnded, this),
                    this.node.on(Wr.TOUCH_CANCEL, this._onTouchCancelled, this),
                    this._handle && this._handle.isValid && (this._handle.node.on(Wr.TOUCH_START, this._onHandleDragStart, this),
                    this._handle.node.on(Wr.TOUCH_MOVE, this._onTouchMoved, this),
                    this._handle.node.on(Wr.TOUCH_END, this._onTouchEnded, this))
                }
                ,
                i.onDisable = function() {
                    this.node.off(Wr.TOUCH_START, this._onTouchBegan, this),
                    this.node.off(Wr.TOUCH_MOVE, this._onTouchMoved, this),
                    this.node.off(Wr.TOUCH_END, this._onTouchEnded, this),
                    this.node.off(Wr.TOUCH_CANCEL, this._onTouchCancelled, this),
                    this._handle && this._handle.isValid && (this._handle.node.off(Wr.TOUCH_START, this._onHandleDragStart, this),
                    this._handle.node.off(Wr.TOUCH_MOVE, this._onTouchMoved, this),
                    this._handle.node.off(Wr.TOUCH_END, this._onTouchEnded, this))
                }
                ,
                i._onHandleDragStart = function(t) {
                    if (t && this._handle && this._handle.node._uiProps.uiTransformComp) {
                        this._dragging = !0,
                        this._touchHandle = !0;
                        var e = t.touch.getUILocation();
                        di.set(this._touchPos, e.x, e.y, 0),
                        this._handle.node._uiProps.uiTransformComp.convertToNodeSpaceAR(this._touchPos, this._offset),
                        t.propagationStopped = !0
                    }
                }
                ,
                i._onTouchBegan = function(t) {
                    this._handle && t && (this._dragging = !0,
                    this._touchHandle || this._handleSliderLogic(t.touch),
                    t.propagationStopped = !0)
                }
                ,
                i._onTouchMoved = function(t) {
                    this._dragging && t && (this._handleSliderLogic(t.touch),
                    t.propagationStopped = !0)
                }
                ,
                i._onTouchEnded = function(t) {
                    this._dragging = !1,
                    this._touchHandle = !1,
                    this._offset = new di,
                    t && (t.propagationStopped = !0)
                }
                ,
                i._onTouchCancelled = function(t) {
                    this._dragging = !1,
                    t && (t.propagationStopped = !0)
                }
                ,
                i._handleSliderLogic = function(t) {
                    this._updateProgress(t),
                    this._emitSlideEvent()
                }
                ,
                i._emitSlideEvent = function() {
                    Bn.emitEvents(this.slideEvents, this),
                    this.node.emit("slide", this)
                }
                ,
                i._updateProgress = function(t) {
                    if (this._handle && t) {
                        var e = t.getUILocation();
                        di.set(this._touchPos, e.x, e.y, 0);
                        var i = this.node._uiProps.uiTransformComp
                          , r = i.convertToNodeSpaceAR(this._touchPos, zx);
                        this.direction === kx.Horizontal ? this.progress = kn(.5 + (r.x - this._offset.x) / i.width) : this.progress = kn(.5 + (r.y - this._offset.y) / i.height)
                    }
                }
                ,
                i._updateHandlePosition = function() {
                    if (this._handle) {
                        this._handleLocalPos.set(this._handle.node.getPosition());
                        var t = this.node._uiProps.uiTransformComp;
                        this._direction === kx.Horizontal ? this._handleLocalPos.x = -t.width * t.anchorX + this.progress * t.width : this._handleLocalPos.y = -t.height * t.anchorY + this.progress * t.height,
                        this._handle.node.setPosition(this._handleLocalPos)
                    }
                }
                ,
                i._changeLayout = function() {
                    var t = this.node._uiProps.uiTransformComp
                      , e = t.contentSize;
                    if (t.setContentSize(e.height, e.width),
                    this._handle) {
                        var i = this._handle.node.position;
                        this._direction === kx.Horizontal ? this._handle.node.setPosition(i.x, 0, i.z) : this._handle.node.setPosition(0, i.y, i.z),
                        this._updateHandlePosition()
                    }
                }
                ,
                Je(e, [{
                    key: "handle",
                    get: function() {
                        return this._handle
                    },
                    set: function(t) {
                        this._handle !== t && (this._handle = t)
                    }
                }, {
                    key: "direction",
                    get: function() {
                        return this._direction
                    },
                    set: function(t) {
                        this._direction !== t && (this._direction = t,
                        this._changeLayout())
                    }
                }, {
                    key: "progress",
                    get: function() {
                        return this._progress
                    },
                    set: function(t) {
                        this._progress !== t && (this._progress = t,
                        this._updateHandlePosition())
                    }
                }]),
                e
            }(Ki),
            Fx.Direction = kx,
            Ei((Ox = Nx).prototype, "handle", [bx, Ex], Object.getOwnPropertyDescriptor(Ox.prototype, "handle"), Ox.prototype),
            Ei(Ox.prototype, "direction", [Ax, Cx], Object.getOwnPropertyDescriptor(Ox.prototype, "direction"), Ox.prototype),
            Ei(Ox.prototype, "progress", [Xi, Rx, Bx], Object.getOwnPropertyDescriptor(Ox.prototype, "progress"), Ox.prototype),
            Px = Ei(Ox.prototype, "slideEvents", [xx, Pi, Dx], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            Mx = Ei(Ox.prototype, "_handle", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ix = Ei(Ox.prototype, "_direction", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return kx.Horizontal
                }
            }),
            Lx = Ei(Ox.prototype, "_progress", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return .1
                }
            }),
            wx = Ox)) || wx) || wx) || wx) || wx) || wx));
            function lD() {
                for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++)
                    e[i] = arguments[i];
                return Object.assign.apply(Object, [{}].concat(e))
            }
            !function(t) {
                t.TOGGLE = "toggle"
            }(aD || (aD = {}));
            var hD, uD, cD, _D, dD, pD, fD, gD, mD, yD, vD, SD, TD, bD, ED, AD, CD, RD, BD, xD, DD, wD, OD, PD, MD, ID, LD, FD, ND, kD, GD, zD, UD, HD, VD, WD, XD, jD, YD, KD, ZD, qD, JD, QD, $D, tw, ew, iw, rw, nw, sw, aw, ow, lw, hw, uw, cw, _w, dw, pw = function(e) {
                return t({
                    Toggle: e,
                    ToggleComponent: e
                }),
                e
            }((Ux = Ti("cc.Toggle"),
            Hx = Ii(),
            Vx = Li(110),
            Wx = Fi(),
            Xx = Zr(yd),
            jx = Xr(),
            Yx = Ni(),
            Kx = Ci(ey),
            Zx = Xr(),
            qx = Ni(),
            Jx = Ci([Bn]),
            Qx = Ni(),
            Ux($x = Hx($x = Vx($x = Wx($x = Xx((sD = nD = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "checkEvents", eD, Gi(e)),
                    Oi(e, "_isChecked", iD, Gi(e)),
                    Oi(e, "_checkMark", rD, Gi(e)),
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i._internalToggle = function() {
                    this.isChecked = !this.isChecked
                }
                ,
                i._set = function(t, e) {
                    if (void 0 === e && (e = !0),
                    this._isChecked != t) {
                        this._isChecked = t;
                        var i = this._toggleContainer;
                        i && i.enabled && this.enabled && (t || !i.anyTogglesChecked() && !i.allowSwitchOff) && (this._isChecked = !0,
                        i.notifyToggleCheck(this, e)),
                        this.playEffect(),
                        e && this._emitToggleEvents()
                    }
                }
                ,
                i.playEffect = function() {
                    this._checkMark && (this._checkMark.node.active = this._isChecked)
                }
                ,
                i.setIsCheckedWithoutNotify = function(t) {
                    this._set(t, !1)
                }
                ,
                i.onEnable = function() {
                    t.prototype.onEnable.call(this),
                    this.playEffect(),
                    this.node.on(e.EventType.CLICK, this._internalToggle, this)
                }
                ,
                i.onDisable = function() {
                    t.prototype.onDisable.call(this),
                    this.node.off(e.EventType.CLICK, this._internalToggle, this)
                }
                ,
                i.OnDestroy = function() {
                    var t = this._toggleContainer;
                    t && t.ensureValidState()
                }
                ,
                i._emitToggleEvents = function() {
                    this.node.emit(e.EventType.TOGGLE, this),
                    this.checkEvents && Bn.emitEvents(this.checkEvents, this)
                }
                ,
                Je(e, [{
                    key: "isChecked",
                    get: function() {
                        return this._isChecked
                    },
                    set: function(t) {
                        this._set(t)
                    }
                }, {
                    key: "checkMark",
                    get: function() {
                        return this._checkMark
                    },
                    set: function(t) {
                        this._checkMark !== t && (this._checkMark = t)
                    }
                }, {
                    key: "_resizeToTarget",
                    set: function(t) {
                        t && this._resizeNodeToTargetNode()
                    }
                }, {
                    key: "_toggleContainer",
                    get: function() {
                        var t = this.node.parent;
                        return ci.Node.isNode(t) ? t.getComponent("cc.ToggleContainer") : null
                    }
                }]),
                e
            }(zE),
            nD.EventType = lD(aD, LE),
            Ei((tD = sD).prototype, "isChecked", [jx, Yx], Object.getOwnPropertyDescriptor(tD.prototype, "isChecked"), tD.prototype),
            Ei(tD.prototype, "checkMark", [Kx, Zx, qx], Object.getOwnPropertyDescriptor(tD.prototype, "checkMark"), tD.prototype),
            eD = Ei(tD.prototype, "checkEvents", [Jx, Pi, Qx], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            iD = Ei(tD.prototype, "_isChecked", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            rD = Ei(tD.prototype, "_checkMark", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            $x = tD)) || $x) || $x) || $x) || $x) || $x)), fw = function(e) {
                return t({
                    ToggleContainer: e,
                    ToggleContainerComponent: e
                }),
                e
            }((hD = Ti("cc.ToggleContainer"),
            uD = Ii(),
            cD = Li(110),
            _D = Fi(),
            dD = Ni(),
            pD = Ci([Bn]),
            fD = Ni(),
            hD(gD = uD(gD = cD(gD = _D(gD = Ri((SD = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "_allowSwitchOff", yD, Gi(e)),
                    Oi(e, "checkEvents", vD, Gi(e)),
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onEnable = function() {
                    this.ensureValidState(),
                    this.node.on(Wr.CHILD_ADDED, this.ensureValidState, this),
                    this.node.on(Wr.CHILD_REMOVED, this.ensureValidState, this)
                }
                ,
                i.onDisable = function() {
                    this.node.off(Wr.CHILD_ADDED, this.ensureValidState, this),
                    this.node.off(Wr.CHILD_REMOVED, this.ensureValidState, this)
                }
                ,
                i.activeToggles = function() {
                    return this.toggleItems.filter((function(t) {
                        return t.isChecked
                    }
                    ))
                }
                ,
                i.anyTogglesChecked = function() {
                    return !!this.toggleItems.find((function(t) {
                        return t.isChecked
                    }
                    ))
                }
                ,
                i.notifyToggleCheck = function(t, e) {
                    if (void 0 === e && (e = !0),
                    this.enabledInHierarchy) {
                        for (var i = 0; i < this.toggleItems.length; i++) {
                            var r = this.toggleItems[i];
                            r !== t && (e ? r.isChecked = !1 : r.setIsCheckedWithoutNotify(!1))
                        }
                        this.checkEvents && ci.Component.EventHandler.emitEvents(this.checkEvents, t)
                    }
                }
                ,
                i.ensureValidState = function() {
                    var t = this.toggleItems;
                    if (!this._allowSwitchOff && !this.anyTogglesChecked() && 0 !== t.length) {
                        var e = t[0];
                        e.isChecked = !0,
                        this.notifyToggleCheck(e)
                    }
                    var i = this.activeToggles();
                    if (i.length > 1)
                        for (var r = i[0], n = 0; n < i.length; ++n) {
                            var s = i[n];
                            s !== r && (s.isChecked = !1)
                        }
                }
                ,
                Je(e, [{
                    key: "allowSwitchOff",
                    get: function() {
                        return this._allowSwitchOff
                    },
                    set: function(t) {
                        this._allowSwitchOff = t
                    }
                }, {
                    key: "toggleItems",
                    get: function() {
                        return this.node.children.map((function(t) {
                            var e = t.getComponent("cc.Toggle");
                            return e && e.enabled ? e : null
                        }
                        )).filter(Boolean)
                    }
                }]),
                e
            }(Ki),
            yD = Ei((mD = SD).prototype, "_allowSwitchOff", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Ei(mD.prototype, "allowSwitchOff", [dD], Object.getOwnPropertyDescriptor(mD.prototype, "allowSwitchOff"), mD.prototype),
            vD = Ei(mD.prototype, "checkEvents", [pD, Pi, fD], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            gD = mD)) || gD) || gD) || gD) || gD) || gD)), gw = new Br;
            function mw(t) {
                return t instanceof Hn ? jr : t._uiProps.uiTransformComp ? t._uiProps.uiTransformComp.contentSize : Pr.ZERO
            }
            function yw(t, e, i, r) {
                t.parent ? gw.set(t.parent.getScale().x, t.parent.getScale().y) : gw.set(0, 0);
                for (var n = gw.x, s = gw.y, a = 0, o = 0, l = t.parent; ; ) {
                    if (!l)
                        return i.x = i.y = 0,
                        void (r.x = r.y = 1);
                    var h = l.getPosition();
                    if (a += h.x,
                    o += h.y,
                    (l = l.parent) === e)
                        break;
                    l ? gw.set(l.getScale().x, l.getScale().y) : gw.set(0, 0);
                    var u = gw.x
                      , c = gw.y;
                    a *= u,
                    o *= c,
                    n *= u,
                    s *= c
                }
                r.x = 0 !== n ? 1 / n : 1,
                r.y = 0 !== s ? 1 / s : 1,
                i.x = -a,
                i.y = -o
            }
            !function(t) {
                t[t.ONCE = 0] = "ONCE",
                t[t.ALWAYS = 1] = "ALWAYS",
                t[t.ON_WINDOW_RESIZE = 2] = "ON_WINDOW_RESIZE"
            }(_w || (_w = {})),
            Yr(_w),
            function(t) {
                t[t.TOP = 1] = "TOP",
                t[t.MID = 2] = "MID",
                t[t.BOT = 4] = "BOT",
                t[t.LEFT = 8] = "LEFT",
                t[t.CENTER = 16] = "CENTER",
                t[t.RIGHT = 32] = "RIGHT",
                t[t.HORIZONTAL = 56] = "HORIZONTAL",
                t[t.VERTICAL = 7] = "VERTICAL"
            }(dw || (dw = {}));
            var vw, Sw, Tw, bw, Ew, Aw, Cw, Rw, Bw, xw, Dw, ww, Ow, Pw, Mw, Iw, Lw, Fw, Nw, kw = dw.TOP | dw.BOT, Gw = dw.LEFT | dw.RIGHT, zw = function(e) {
                return t({
                    Widget: e,
                    WidgetComponent: e
                }),
                e
            }((TD = Ti("cc.Widget"),
            bD = Ii(),
            ED = Li(110),
            AD = Fi(),
            CD = Zr(yd),
            RD = Ci(Sr),
            BD = Ni(),
            xD = Ni(),
            DD = Ni(),
            wD = Ni(),
            OD = Ni(),
            PD = Ni(),
            MD = Ni(),
            ID = ki(),
            LD = ki(),
            FD = Ni(),
            ND = Ni(),
            kD = Ni(),
            GD = Ni(),
            zD = Ni(),
            UD = Ni(),
            HD = Ci(_w),
            VD = Ni(),
            TD(WD = bD(WD = ED(WD = AD(WD = CD(WD = Ri((cw = uw = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._lastPos = new di,
                    e._lastSize = new Pr,
                    e._dirty = !0,
                    e._hadAlignOnce = !1,
                    Oi(e, "_alignFlags", jD, Gi(e)),
                    Oi(e, "_target", YD, Gi(e)),
                    Oi(e, "_left", KD, Gi(e)),
                    Oi(e, "_right", ZD, Gi(e)),
                    Oi(e, "_top", qD, Gi(e)),
                    Oi(e, "_bottom", JD, Gi(e)),
                    Oi(e, "_horizontalCenter", QD, Gi(e)),
                    Oi(e, "_verticalCenter", $D, Gi(e)),
                    Oi(e, "_isAbsLeft", tw, Gi(e)),
                    Oi(e, "_isAbsRight", ew, Gi(e)),
                    Oi(e, "_isAbsTop", iw, Gi(e)),
                    Oi(e, "_isAbsBottom", rw, Gi(e)),
                    Oi(e, "_isAbsHorizontalCenter", nw, Gi(e)),
                    Oi(e, "_isAbsVerticalCenter", sw, Gi(e)),
                    Oi(e, "_originalWidth", aw, Gi(e)),
                    Oi(e, "_originalHeight", ow, Gi(e)),
                    Oi(e, "_alignMode", lw, Gi(e)),
                    Oi(e, "_lockFlags", hw, Gi(e)),
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.updateAlignment = function() {
                    ci._widgetManager.updateAlignment(this.node)
                }
                ,
                i._validateTargetInDEV = function() {}
                ,
                i.setDirty = function() {
                    this._recursiveDirty()
                }
                ,
                i.onEnable = function() {
                    this.node.getPosition(this._lastPos),
                    this._lastSize.set(this.node._uiProps.uiTransformComp.contentSize),
                    ci._widgetManager.add(this),
                    this._hadAlignOnce = !1,
                    this._registerEvent(),
                    this._registerTargetEvents()
                }
                ,
                i.onDisable = function() {
                    ci._widgetManager.remove(this),
                    this._unregisterEvent(),
                    this._unregisterTargetEvents()
                }
                ,
                i.onDestroy = function() {
                    this._removeParentEvent()
                }
                ,
                i._adjustWidgetToAllowMovingInEditor = function() {}
                ,
                i._adjustWidgetToAllowResizingInEditor = function() {}
                ,
                i._adjustWidgetToAnchorChanged = function() {
                    this.setDirty()
                }
                ,
                i._adjustTargetToParentChanged = function(t) {
                    t && this._unregisterOldParentEvents(t),
                    this.node.getParent() && this._registerTargetEvents(),
                    this._setDirtyByMode()
                }
                ,
                i._registerEvent = function() {
                    this.node.on(Wr.TRANSFORM_CHANGED, this._setDirtyByMode, this),
                    this.node.on(Wr.SIZE_CHANGED, this._setDirtyByMode, this),
                    this.node.on(Wr.ANCHOR_CHANGED, this._adjustWidgetToAnchorChanged, this),
                    this.node.on(Wr.PARENT_CHANGED, this._adjustTargetToParentChanged, this)
                }
                ,
                i._unregisterEvent = function() {
                    this.node.off(Wr.TRANSFORM_CHANGED, this._setDirtyByMode, this),
                    this.node.off(Wr.SIZE_CHANGED, this._setDirtyByMode, this),
                    this.node.off(Wr.ANCHOR_CHANGED, this._adjustWidgetToAnchorChanged, this)
                }
                ,
                i._removeParentEvent = function() {
                    this.node.off(Wr.PARENT_CHANGED, this._adjustTargetToParentChanged, this)
                }
                ,
                i._autoChangedValue = function(t, e) {
                    if ((this._alignFlags & t) > 0) {
                        var i = this.node.parent && this.node.parent._uiProps
                          , r = i && i.uiTransformComp
                          , n = r ? r.contentSize : jr;
                        this.isAlignLeft && t === dw.LEFT ? this._left = e ? this._left * n.width : this._left / n.width : this.isAlignRight && t === dw.RIGHT ? this._right = e ? this._right * n.width : this._right / n.width : this.isAlignHorizontalCenter && t === dw.CENTER ? this._horizontalCenter = e ? this._horizontalCenter * n.width : this._horizontalCenter / n.width : this.isAlignTop && t === dw.TOP ? this._top = e ? this._top * n.height : this._top / n.height : this.isAlignBottom && t === dw.BOT ? this._bottom = e ? this._bottom * n.height : this._bottom / n.height : this.isAbsoluteVerticalCenter && t === dw.MID && (this._verticalCenter = this._verticalCenter / n.height),
                        this._recursiveDirty()
                    }
                }
                ,
                i._registerTargetEvents = function() {
                    var t = this._target || this.node.parent;
                    t && t.getComponent(yd) && (t.on(Wr.TRANSFORM_CHANGED, this._setDirtyByMode, this),
                    t.on(Wr.SIZE_CHANGED, this._setDirtyByMode, this),
                    t.on(Wr.ANCHOR_CHANGED, this._setDirtyByMode, this))
                }
                ,
                i._unregisterTargetEvents = function() {
                    var t = this._target || this.node.parent;
                    t && (t.off(Wr.TRANSFORM_CHANGED, this._setDirtyByMode, this),
                    t.off(Wr.SIZE_CHANGED, this._setDirtyByMode, this),
                    t.off(Wr.ANCHOR_CHANGED, this._setDirtyByMode, this))
                }
                ,
                i._unregisterOldParentEvents = function(t) {
                    var e = this._target || t;
                    e && (e.off(Wr.TRANSFORM_CHANGED, this._setDirtyByMode, this),
                    e.off(Wr.SIZE_CHANGED, this._setDirtyByMode, this))
                }
                ,
                i._setDirtyByMode = function() {
                    (this.alignMode === _w.ALWAYS || hi) && this._recursiveDirty()
                }
                ,
                i._setAlign = function(t, e) {
                    if (e !== (this._alignFlags & t) > 0) {
                        var i = (t & Gw) > 0
                          , r = this.node._uiProps.uiTransformComp;
                        e ? (this._alignFlags |= t,
                        i ? (this.isAlignHorizontalCenter = !1,
                        this.isStretchWidth && (this._originalWidth = r.width)) : (this.isAlignVerticalCenter = !1,
                        this.isStretchHeight && (this._originalHeight = r.height))) : (i ? this.isStretchWidth && (r.width = this._originalWidth) : this.isStretchHeight && (r.height = this._originalHeight),
                        this._alignFlags &= ~t)
                    }
                }
                ,
                i._recursiveDirty = function() {
                    this._dirty || (this._dirty = !0)
                }
                ,
                Je(e, [{
                    key: "target",
                    get: function() {
                        return this._target
                    },
                    set: function(t) {
                        this._target !== t && (this._unregisterTargetEvents(),
                        this._target = t,
                        this._registerTargetEvents(),
                        this._validateTargetInDEV(),
                        this._recursiveDirty())
                    }
                }, {
                    key: "isAlignTop",
                    get: function() {
                        return (this._alignFlags & dw.TOP) > 0
                    },
                    set: function(t) {
                        this._setAlign(dw.TOP, t),
                        this._recursiveDirty()
                    }
                }, {
                    key: "isAlignBottom",
                    get: function() {
                        return (this._alignFlags & dw.BOT) > 0
                    },
                    set: function(t) {
                        this._setAlign(dw.BOT, t),
                        this._recursiveDirty()
                    }
                }, {
                    key: "isAlignLeft",
                    get: function() {
                        return (this._alignFlags & dw.LEFT) > 0
                    },
                    set: function(t) {
                        this._setAlign(dw.LEFT, t),
                        this._recursiveDirty()
                    }
                }, {
                    key: "isAlignRight",
                    get: function() {
                        return (this._alignFlags & dw.RIGHT) > 0
                    },
                    set: function(t) {
                        this._setAlign(dw.RIGHT, t),
                        this._recursiveDirty()
                    }
                }, {
                    key: "isAlignVerticalCenter",
                    get: function() {
                        return (this._alignFlags & dw.MID) > 0
                    },
                    set: function(t) {
                        t ? (this.isAlignTop = !1,
                        this.isAlignBottom = !1,
                        this._alignFlags |= dw.MID) : this._alignFlags &= ~dw.MID,
                        this._recursiveDirty()
                    }
                }, {
                    key: "isAlignHorizontalCenter",
                    get: function() {
                        return (this._alignFlags & dw.CENTER) > 0
                    },
                    set: function(t) {
                        t ? (this.isAlignLeft = !1,
                        this.isAlignRight = !1,
                        this._alignFlags |= dw.CENTER) : this._alignFlags &= ~dw.CENTER,
                        this._recursiveDirty()
                    }
                }, {
                    key: "isStretchWidth",
                    get: function() {
                        return (this._alignFlags & Gw) === Gw
                    }
                }, {
                    key: "isStretchHeight",
                    get: function() {
                        return (this._alignFlags & kw) === kw
                    }
                }, {
                    key: "top",
                    get: function() {
                        return this._top
                    },
                    set: function(t) {
                        this._top = t,
                        this._recursiveDirty()
                    }
                }, {
                    key: "editorTop",
                    get: function() {
                        return this._isAbsTop ? this._top : 100 * this._top
                    },
                    set: function(t) {
                        this._top = this._isAbsTop ? t : t / 100,
                        this._recursiveDirty()
                    }
                }, {
                    key: "bottom",
                    get: function() {
                        return this._bottom
                    },
                    set: function(t) {
                        this._bottom = t,
                        this._recursiveDirty()
                    }
                }, {
                    key: "editorBottom",
                    get: function() {
                        return this._isAbsBottom ? this._bottom : 100 * this._bottom
                    },
                    set: function(t) {
                        this._bottom = this._isAbsBottom ? t : t / 100,
                        this._recursiveDirty()
                    }
                }, {
                    key: "left",
                    get: function() {
                        return this._left
                    },
                    set: function(t) {
                        this._left = t,
                        this._recursiveDirty()
                    }
                }, {
                    key: "editorLeft",
                    get: function() {
                        return this._isAbsLeft ? this._left : 100 * this._left
                    },
                    set: function(t) {
                        this._left = this._isAbsLeft ? t : t / 100,
                        this._recursiveDirty()
                    }
                }, {
                    key: "right",
                    get: function() {
                        return this._right
                    },
                    set: function(t) {
                        this._right = t,
                        this._recursiveDirty()
                    }
                }, {
                    key: "editorRight",
                    get: function() {
                        return this._isAbsRight ? this._right : 100 * this._right
                    },
                    set: function(t) {
                        this._right = this._isAbsRight ? t : t / 100,
                        this._recursiveDirty()
                    }
                }, {
                    key: "horizontalCenter",
                    get: function() {
                        return this._horizontalCenter
                    },
                    set: function(t) {
                        this._horizontalCenter = t,
                        this._recursiveDirty()
                    }
                }, {
                    key: "editorHorizontalCenter",
                    get: function() {
                        return this._isAbsHorizontalCenter ? this._horizontalCenter : 100 * this._horizontalCenter
                    },
                    set: function(t) {
                        this._horizontalCenter = this._isAbsHorizontalCenter ? t : t / 100,
                        this._recursiveDirty()
                    }
                }, {
                    key: "verticalCenter",
                    get: function() {
                        return this._verticalCenter
                    },
                    set: function(t) {
                        this._verticalCenter = t,
                        this._recursiveDirty()
                    }
                }, {
                    key: "editorVerticalCenter",
                    get: function() {
                        return this._isAbsVerticalCenter ? this._verticalCenter : 100 * this._verticalCenter
                    },
                    set: function(t) {
                        this._verticalCenter = this._isAbsVerticalCenter ? t : t / 100,
                        this._recursiveDirty()
                    }
                }, {
                    key: "isAbsoluteTop",
                    get: function() {
                        return this._isAbsTop
                    },
                    set: function(t) {
                        this._isAbsTop !== t && (this._isAbsTop = t,
                        this._autoChangedValue(dw.TOP, this._isAbsTop))
                    }
                }, {
                    key: "isAbsoluteBottom",
                    get: function() {
                        return this._isAbsBottom
                    },
                    set: function(t) {
                        this._isAbsBottom !== t && (this._isAbsBottom = t,
                        this._autoChangedValue(dw.BOT, this._isAbsBottom))
                    }
                }, {
                    key: "isAbsoluteLeft",
                    get: function() {
                        return this._isAbsLeft
                    },
                    set: function(t) {
                        this._isAbsLeft !== t && (this._isAbsLeft = t,
                        this._autoChangedValue(dw.LEFT, this._isAbsLeft))
                    }
                }, {
                    key: "isAbsoluteRight",
                    get: function() {
                        return this._isAbsRight
                    },
                    set: function(t) {
                        this._isAbsRight !== t && (this._isAbsRight = t,
                        this._autoChangedValue(dw.RIGHT, this._isAbsRight))
                    }
                }, {
                    key: "isAbsoluteHorizontalCenter",
                    get: function() {
                        return this._isAbsHorizontalCenter
                    },
                    set: function(t) {
                        this._isAbsHorizontalCenter !== t && (this._isAbsHorizontalCenter = t,
                        this._autoChangedValue(dw.CENTER, this._isAbsHorizontalCenter))
                    }
                }, {
                    key: "isAbsoluteVerticalCenter",
                    get: function() {
                        return this._isAbsVerticalCenter
                    },
                    set: function(t) {
                        this._isAbsVerticalCenter !== t && (this._isAbsVerticalCenter = t,
                        this._autoChangedValue(dw.MID, this._isAbsVerticalCenter))
                    }
                }, {
                    key: "alignMode",
                    get: function() {
                        return this._alignMode
                    },
                    set: function(t) {
                        this._alignMode = t,
                        this._recursiveDirty()
                    }
                }, {
                    key: "alignFlags",
                    get: function() {
                        return this._alignFlags
                    },
                    set: function(t) {
                        this._alignFlags !== t && (this._alignFlags = t,
                        this._recursiveDirty())
                    }
                }]),
                e
            }(Ki),
            uw.AlignMode = _w,
            Ei((XD = cw).prototype, "target", [RD, BD], Object.getOwnPropertyDescriptor(XD.prototype, "target"), XD.prototype),
            Ei(XD.prototype, "isAlignTop", [xD], Object.getOwnPropertyDescriptor(XD.prototype, "isAlignTop"), XD.prototype),
            Ei(XD.prototype, "isAlignBottom", [DD], Object.getOwnPropertyDescriptor(XD.prototype, "isAlignBottom"), XD.prototype),
            Ei(XD.prototype, "isAlignLeft", [wD], Object.getOwnPropertyDescriptor(XD.prototype, "isAlignLeft"), XD.prototype),
            Ei(XD.prototype, "isAlignRight", [OD], Object.getOwnPropertyDescriptor(XD.prototype, "isAlignRight"), XD.prototype),
            Ei(XD.prototype, "isAlignVerticalCenter", [PD], Object.getOwnPropertyDescriptor(XD.prototype, "isAlignVerticalCenter"), XD.prototype),
            Ei(XD.prototype, "isAlignHorizontalCenter", [MD], Object.getOwnPropertyDescriptor(XD.prototype, "isAlignHorizontalCenter"), XD.prototype),
            Ei(XD.prototype, "isStretchWidth", [ID], Object.getOwnPropertyDescriptor(XD.prototype, "isStretchWidth"), XD.prototype),
            Ei(XD.prototype, "isStretchHeight", [LD], Object.getOwnPropertyDescriptor(XD.prototype, "isStretchHeight"), XD.prototype),
            Ei(XD.prototype, "top", [FD], Object.getOwnPropertyDescriptor(XD.prototype, "top"), XD.prototype),
            Ei(XD.prototype, "editorTop", [Ai], Object.getOwnPropertyDescriptor(XD.prototype, "editorTop"), XD.prototype),
            Ei(XD.prototype, "bottom", [ND], Object.getOwnPropertyDescriptor(XD.prototype, "bottom"), XD.prototype),
            Ei(XD.prototype, "editorBottom", [Ai], Object.getOwnPropertyDescriptor(XD.prototype, "editorBottom"), XD.prototype),
            Ei(XD.prototype, "left", [kD], Object.getOwnPropertyDescriptor(XD.prototype, "left"), XD.prototype),
            Ei(XD.prototype, "editorLeft", [Ai], Object.getOwnPropertyDescriptor(XD.prototype, "editorLeft"), XD.prototype),
            Ei(XD.prototype, "right", [GD], Object.getOwnPropertyDescriptor(XD.prototype, "right"), XD.prototype),
            Ei(XD.prototype, "editorRight", [Ai], Object.getOwnPropertyDescriptor(XD.prototype, "editorRight"), XD.prototype),
            Ei(XD.prototype, "horizontalCenter", [zD], Object.getOwnPropertyDescriptor(XD.prototype, "horizontalCenter"), XD.prototype),
            Ei(XD.prototype, "editorHorizontalCenter", [Ai], Object.getOwnPropertyDescriptor(XD.prototype, "editorHorizontalCenter"), XD.prototype),
            Ei(XD.prototype, "verticalCenter", [UD], Object.getOwnPropertyDescriptor(XD.prototype, "verticalCenter"), XD.prototype),
            Ei(XD.prototype, "editorVerticalCenter", [Ai], Object.getOwnPropertyDescriptor(XD.prototype, "editorVerticalCenter"), XD.prototype),
            Ei(XD.prototype, "isAbsoluteTop", [Ai], Object.getOwnPropertyDescriptor(XD.prototype, "isAbsoluteTop"), XD.prototype),
            Ei(XD.prototype, "isAbsoluteBottom", [Ai], Object.getOwnPropertyDescriptor(XD.prototype, "isAbsoluteBottom"), XD.prototype),
            Ei(XD.prototype, "isAbsoluteLeft", [Ai], Object.getOwnPropertyDescriptor(XD.prototype, "isAbsoluteLeft"), XD.prototype),
            Ei(XD.prototype, "isAbsoluteRight", [Ai], Object.getOwnPropertyDescriptor(XD.prototype, "isAbsoluteRight"), XD.prototype),
            Ei(XD.prototype, "isAbsoluteHorizontalCenter", [Ai], Object.getOwnPropertyDescriptor(XD.prototype, "isAbsoluteHorizontalCenter"), XD.prototype),
            Ei(XD.prototype, "isAbsoluteVerticalCenter", [Ai], Object.getOwnPropertyDescriptor(XD.prototype, "isAbsoluteVerticalCenter"), XD.prototype),
            Ei(XD.prototype, "alignMode", [HD, VD], Object.getOwnPropertyDescriptor(XD.prototype, "alignMode"), XD.prototype),
            Ei(XD.prototype, "alignFlags", [Ai], Object.getOwnPropertyDescriptor(XD.prototype, "alignFlags"), XD.prototype),
            jD = Ei(XD.prototype, "_alignFlags", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            YD = Ei(XD.prototype, "_target", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            KD = Ei(XD.prototype, "_left", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            ZD = Ei(XD.prototype, "_right", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            qD = Ei(XD.prototype, "_top", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            JD = Ei(XD.prototype, "_bottom", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            QD = Ei(XD.prototype, "_horizontalCenter", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            $D = Ei(XD.prototype, "_verticalCenter", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            tw = Ei(XD.prototype, "_isAbsLeft", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            ew = Ei(XD.prototype, "_isAbsRight", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            iw = Ei(XD.prototype, "_isAbsTop", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            rw = Ei(XD.prototype, "_isAbsBottom", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            nw = Ei(XD.prototype, "_isAbsHorizontalCenter", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            sw = Ei(XD.prototype, "_isAbsVerticalCenter", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            aw = Ei(XD.prototype, "_originalWidth", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            ow = Ei(XD.prototype, "_originalHeight", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            lw = Ei(XD.prototype, "_alignMode", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return _w.ON_WINDOW_RESIZE
                }
            }),
            hw = Ei(XD.prototype, "_lockFlags", [Pi, Vn], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            WD = XD)) || WD) || WD) || WD) || WD) || WD) || WD));
            ci.internal.computeInverseTransForTarget = yw,
            ci.internal.getReadonlyNodeSize = mw;
            var Uw, Hw = new Zi;
            !function(t) {
                t[t.HORIZONTAL = 0] = "HORIZONTAL",
                t[t.VERTICAL = 1] = "VERTICAL"
            }(Uw || (Uw = {})),
            Yr(Uw);
            var Vw, Ww, Xw, jw, Yw, Kw, Zw, qw, Jw, Qw, $w, tO, eO, iO, rO, nO, sO, aO, oO, lO, hO, uO, cO, _O, dO, pO, fO, gO, mO, yO, vO, SO, TO, bO, EO, AO, CO, RO, BO, xO, DO, wO, OO, PO, MO, IO, LO = function(e) {
                return t({
                    PageViewIndicator: e,
                    PageViewIndicatorComponent: e
                }),
                e
            }((vw = Ti("cc.PageViewIndicator"),
            Sw = Ii(),
            Tw = Li(110),
            bw = Fi(),
            Ew = Ci(Jc),
            Aw = Ni(),
            Cw = Ci(Uw),
            Rw = Ni(),
            Bw = Ci(Pr),
            xw = Ni(),
            Dw = Ni(),
            vw(ww = Sw(ww = Tw(ww = bw((Nw = Fw = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "spacing", Pw, Gi(e)),
                    Oi(e, "_spriteFrame", Mw, Gi(e)),
                    Oi(e, "_direction", Iw, Gi(e)),
                    Oi(e, "_cellSize", Lw, Gi(e)),
                    e._layout = null,
                    e._pageView = null,
                    e._indicators = [],
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onLoad = function() {
                    this._updateLayout()
                }
                ,
                i.setPageView = function(t) {
                    this._pageView = t,
                    this._refresh()
                }
                ,
                i._updateLayout = function() {
                    this._layout = this.getComponent(MR),
                    this._layout || (this._layout = this.addComponent(MR));
                    var t = this._layout;
                    this.direction === Uw.HORIZONTAL ? (t.type = MR.Type.HORIZONTAL,
                    t.spacingX = this.spacing) : this.direction === Uw.VERTICAL && (t.type = MR.Type.VERTICAL,
                    t.spacingY = this.spacing),
                    t.resizeMode = MR.ResizeMode.CONTAINER
                }
                ,
                i._createIndicator = function() {
                    var t = new Sr;
                    t.layer = this.node.layer;
                    var e = t.addComponent(ey);
                    return e.spriteFrame = this.spriteFrame,
                    e.sizeMode = ey.SizeMode.CUSTOM,
                    t.parent = this.node,
                    t._uiProps.uiTransformComp.setContentSize(this._cellSize),
                    t
                }
                ,
                i._changedState = function() {
                    var t = this._indicators;
                    if (0 !== t.length && this._pageView) {
                        var e = this._pageView.curPageIdx;
                        if (!(e >= t.length)) {
                            for (var i = 0; i < t.length; ++i) {
                                var r = t[i];
                                if (r._uiProps.uiComp) {
                                    var n = r._uiProps.uiComp;
                                    Hw.set(n.color),
                                    Hw.a = 127.5,
                                    n.color = Hw
                                }
                            }
                            if (t[e]._uiProps.uiComp) {
                                var s = t[e]._uiProps.uiComp;
                                Hw.set(s.color),
                                Hw.a = 255,
                                s.color = Hw
                            }
                        }
                    }
                }
                ,
                i._refresh = function() {
                    if (this._pageView) {
                        var t = this._indicators
                          , e = this._pageView.getPages();
                        if (e.length !== t.length) {
                            var i = 0;
                            if (e.length > t.length)
                                for (i = 0; i < e.length; ++i)
                                    t[i] || (t[i] = this._createIndicator());
                            else
                                for (i = t.length - e.length; i > 0; --i) {
                                    var r = t[i - 1];
                                    this.node.removeChild(r),
                                    t.splice(i - 1, 1)
                                }
                            this._layout && this._layout.enabledInHierarchy && this._layout.updateLayout(),
                            this._changedState()
                        }
                    }
                }
                ,
                Je(e, [{
                    key: "spriteFrame",
                    get: function() {
                        return this._spriteFrame
                    },
                    set: function(t) {
                        this._spriteFrame !== t && (this._spriteFrame = t)
                    }
                }, {
                    key: "direction",
                    get: function() {
                        return this._direction
                    },
                    set: function(t) {
                        this._direction !== t && (this._direction = t)
                    }
                }, {
                    key: "cellSize",
                    get: function() {
                        return this._cellSize
                    },
                    set: function(t) {
                        this._cellSize !== t && (this._cellSize = t)
                    }
                }]),
                e
            }(Ki),
            Fw.Direction = Uw,
            Ei((Ow = Nw).prototype, "spriteFrame", [Ew, Aw], Object.getOwnPropertyDescriptor(Ow.prototype, "spriteFrame"), Ow.prototype),
            Ei(Ow.prototype, "direction", [Cw, Rw], Object.getOwnPropertyDescriptor(Ow.prototype, "direction"), Ow.prototype),
            Ei(Ow.prototype, "cellSize", [Bw, xw], Object.getOwnPropertyDescriptor(Ow.prototype, "cellSize"), Ow.prototype),
            Pw = Ei(Ow.prototype, "spacing", [Pi, Dw], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Mw = Ei(Ow.prototype, "_spriteFrame", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Iw = Ei(Ow.prototype, "_direction", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Uw.HORIZONTAL
                }
            }),
            Lw = Ei(Ow.prototype, "_cellSize", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Pr(20,20)
                }
            }),
            ww = Ow)) || ww) || ww) || ww) || ww)), FO = new Br;
            !function(t) {
                t[t.Unified = 0] = "Unified",
                t[t.Free = 1] = "Free"
            }(PO || (PO = {})),
            Yr(PO),
            function(t) {
                t[t.Horizontal = 0] = "Horizontal",
                t[t.Vertical = 1] = "Vertical"
            }(MO || (MO = {})),
            Yr(MO),
            function(t) {
                t.PAGE_TURNING = "page-turning"
            }(IO || (IO = {}));
            var NO = function(e) {
                return t({
                    PageView: e,
                    PageViewComponent: e
                }),
                e
            }((Vw = Ti("cc.PageView"),
            Ww = Ii(),
            Xw = Li(110),
            jw = Fi(),
            Yw = Ci(PO),
            Kw = Ni(),
            Zw = Ci(MO),
            qw = Ni(),
            Jw = ji(),
            Qw = Ni(),
            $w = ji(),
            tO = Ni(),
            eO = Ci(LO),
            iO = Ni(),
            rO = Ni(),
            nO = Ci(ox),
            sO = ki(),
            aO = Ci(ox),
            oO = ki(),
            lO = ki(),
            hO = ki(),
            uO = ki(),
            cO = Ci([Bn]),
            _O = ki(),
            dO = Ni(),
            pO = Ci([Bn]),
            fO = Ni(),
            Vw(gO = Ww(gO = Xw(gO = jw((OO = wO = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "autoPageTurningThreshold", yO, Gi(e)),
                    Oi(e, "horizontal", vO, Gi(e)),
                    Oi(e, "vertical", SO, Gi(e)),
                    Oi(e, "cancelInnerEvents", TO, Gi(e)),
                    Oi(e, "scrollEvents", bO, Gi(e)),
                    Oi(e, "pageTurningSpeed", EO, Gi(e)),
                    Oi(e, "pageEvents", AO, Gi(e)),
                    Oi(e, "_sizeMode", CO, Gi(e)),
                    Oi(e, "_direction", RO, Gi(e)),
                    Oi(e, "_scrollThreshold", BO, Gi(e)),
                    Oi(e, "_pageTurningEventTiming", xO, Gi(e)),
                    Oi(e, "_indicator", DO, Gi(e)),
                    e._curPageIdx = 0,
                    e._lastPageIdx = 0,
                    e._pages = [],
                    e._initContentPos = new di,
                    e._scrollCenterOffsetX = [],
                    e._scrollCenterOffsetY = [],
                    e._touchBeganPosition = new Br,
                    e._touchEndPosition = new Br,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onEnable = function() {
                    t.prototype.onEnable.call(this),
                    this.node.on(Wr.SIZE_CHANGED, this._updateAllPagesSize, this),
                    this.node.on(e.EventType.SCROLL_ENG_WITH_THRESHOLD, this._dispatchPageTurningEvent, this)
                }
                ,
                i.onDisable = function() {
                    t.prototype.onDisable.call(this),
                    this.node.off(Wr.SIZE_CHANGED, this._updateAllPagesSize, this),
                    this.node.off(e.EventType.SCROLL_ENG_WITH_THRESHOLD, this._dispatchPageTurningEvent, this)
                }
                ,
                i.onLoad = function() {
                    this._initPages(),
                    this.indicator && this.indicator.setPageView(this)
                }
                ,
                i.getCurrentPageIndex = function() {
                    return this._curPageIdx
                }
                ,
                i.setCurrentPageIndex = function(t) {
                    this.scrollToPage(t, 1)
                }
                ,
                i.getPages = function() {
                    return this._pages
                }
                ,
                i.addPage = function(t) {
                    t && -1 === this._pages.indexOf(t) && this.content && (t._uiProps.uiTransformComp ? (this.content.addChild(t),
                    this._pages.push(t),
                    this._updatePageView()) : mn(4301))
                }
                ,
                i.insertPage = function(t, e) {
                    if (!(e < 0) && t && -1 === this._pages.indexOf(t) && this.content)
                        if (e >= this._pages.length)
                            this.addPage(t);
                        else {
                            if (!t._uiProps.uiTransformComp)
                                return void mn(4301);
                            this._pages.splice(e, 0, t),
                            this.content.insertChild(t, e),
                            this._updatePageView()
                        }
                }
                ,
                i.removePage = function(t) {
                    if (t && this.content) {
                        var e = this._pages.indexOf(t);
                        -1 !== e ? this.removePageAtIndex(e) : ii(4300, t.name)
                    }
                }
                ,
                i.removePageAtIndex = function(t) {
                    var e = this._pages;
                    if (!(t < 0 || t >= e.length)) {
                        var i = e[t];
                        i && this.content && (this.content.removeChild(i),
                        e.splice(t, 1),
                        this._updatePageView())
                    }
                }
                ,
                i.removeAllPages = function() {
                    if (this.content) {
                        for (var t = this._pages, e = 0, i = t.length; e < i; e++)
                            this.content.removeChild(t[e]);
                        this._pages.length = 0,
                        this._updatePageView()
                    }
                }
                ,
                i.scrollToPage = function(t, e) {
                    void 0 === e && (e = .3),
                    t < 0 || t >= this._pages.length || (this._curPageIdx = t,
                    this.scrollToOffset(this._moveOffsetValue(t), e, !0),
                    this.indicator && this.indicator._changedState())
                }
                ,
                i.getScrollEndedEventTiming = function() {
                    return this.pageTurningEventTiming
                }
                ,
                i._updatePageView = function() {
                    if (this.content) {
                        var t = this.content.getComponent(MR);
                        t && t.enabled && t.updateLayout();
                        var e = this._pages.length;
                        this._curPageIdx >= e && (this._curPageIdx = 0 === e ? 0 : e - 1,
                        this._lastPageIdx = this._curPageIdx);
                        for (var i = this._initContentPos, r = 0; r < e; ++r) {
                            var n = this._pages[r].position;
                            this.direction === MO.Horizontal ? this._scrollCenterOffsetX[r] = Math.abs(i.x + n.x) : this._scrollCenterOffsetY[r] = Math.abs(i.y + n.y)
                        }
                        this.indicator && this.indicator._refresh()
                    }
                }
                ,
                i._updateAllPagesSize = function() {
                    var t = this.view;
                    if (this.content && t && this._sizeMode === PO.Unified)
                        for (var e = this._pages, i = t.contentSize, r = 0, n = e.length; r < n; r++)
                            e[r]._uiProps.uiTransformComp.setContentSize(i)
                }
                ,
                i._handleReleaseLogic = function() {
                    this._autoScrollToPage(),
                    this._scrolling && (this._scrolling = !1,
                    this._autoScrolling || this._dispatchEvent(e.EventType.SCROLL_ENDED))
                }
                ,
                i._onTouchBegan = function(e, i) {
                    e.touch.getUILocation(FO),
                    Br.set(this._touchBeganPosition, FO.x, FO.y),
                    t.prototype._onTouchBegan.call(this, e, i)
                }
                ,
                i._onTouchMoved = function(e, i) {
                    t.prototype._onTouchMoved.call(this, e, i)
                }
                ,
                i._onTouchEnded = function(e, i) {
                    e.touch.getUILocation(FO),
                    Br.set(this._touchEndPosition, FO.x, FO.y),
                    t.prototype._onTouchEnded.call(this, e, i)
                }
                ,
                i._onTouchCancelled = function(e, i) {
                    e.touch.getUILocation(FO),
                    Br.set(this._touchEndPosition, FO.x, FO.y),
                    t.prototype._onTouchCancelled.call(this, e, i)
                }
                ,
                i._onMouseWheel = function() {}
                ,
                i._syncScrollDirection = function() {
                    this.horizontal = this.direction === MO.Horizontal,
                    this.vertical = this.direction === MO.Vertical
                }
                ,
                i._syncSizeMode = function() {
                    var t = this.view;
                    if (this.content && t) {
                        var e = this.content.getComponent(MR);
                        if (e) {
                            if (this._sizeMode === PO.Free && this._pages.length > 0) {
                                var i = this._pages[0]._uiProps.uiTransformComp
                                  , r = this._pages[this._pages.length - 1]._uiProps.uiTransformComp;
                                this.direction === MO.Horizontal ? (e.paddingLeft = (t.width - i.width) / 2,
                                e.paddingRight = (t.width - r.width) / 2) : this.direction === MO.Vertical && (e.paddingTop = (t.height - i.height) / 2,
                                e.paddingBottom = (t.height - r.height) / 2)
                            }
                            e.updateLayout()
                        }
                    }
                }
                ,
                i._initPages = function() {
                    if (this.content) {
                        this._initContentPos = this.content.position;
                        for (var t = this.content.children, e = 0; e < t.length; ++e) {
                            var i = t[e];
                            this._pages.indexOf(i) >= 0 || this._pages.push(i)
                        }
                        this._syncScrollDirection(),
                        this._syncSizeMode(),
                        this._updatePageView()
                    }
                }
                ,
                i._dispatchPageTurningEvent = function() {
                    this._lastPageIdx !== this._curPageIdx && (this._lastPageIdx = this._curPageIdx,
                    Bn.emitEvents(this.pageEvents, this, IO.PAGE_TURNING),
                    this.node.emit(IO.PAGE_TURNING, this))
                }
                ,
                i._isQuicklyScrollable = function(t) {
                    if (this.direction === MO.Horizontal) {
                        if (Math.abs(t.x) > this.autoPageTurningThreshold)
                            return !0
                    } else if (this.direction === MO.Vertical && Math.abs(t.y) > this.autoPageTurningThreshold)
                        return !0;
                    return !1
                }
                ,
                i._moveOffsetValue = function(t) {
                    var e = new Br;
                    if (this._sizeMode === PO.Free)
                        this.direction === MO.Horizontal ? e.x = this._scrollCenterOffsetX[t] : this.direction === MO.Vertical && (e.y = this._scrollCenterOffsetY[t]);
                    else {
                        var i = this.view;
                        if (!i)
                            return e;
                        this.direction === MO.Horizontal ? e.x = t * i.width : this.direction === MO.Vertical && (e.y = t * i.height)
                    }
                    return e
                }
                ,
                i._getDragDirection = function(t) {
                    return this._direction === MO.Horizontal ? 0 === t.x ? 0 : t.x > 0 ? 1 : -1 : 0 === t.y ? 0 : t.y < 0 ? 1 : -1
                }
                ,
                i._isScrollable = function(t, e, i) {
                    if (this._sizeMode === PO.Free) {
                        var r = 0
                          , n = 0;
                        if (this.direction === MO.Horizontal)
                            return r = this._scrollCenterOffsetX[e],
                            n = this._scrollCenterOffsetX[i],
                            Math.abs(t.x) >= Math.abs(r - n) * this.scrollThreshold;
                        if (this.direction === MO.Vertical)
                            return r = this._scrollCenterOffsetY[e],
                            n = this._scrollCenterOffsetY[i],
                            Math.abs(t.y) >= Math.abs(r - n) * this.scrollThreshold
                    } else {
                        var s = this.view;
                        if (!s)
                            return !1;
                        if (this.direction === MO.Horizontal)
                            return Math.abs(t.x) >= s.width * this.scrollThreshold;
                        if (this.direction === MO.Vertical)
                            return Math.abs(t.y) >= s.height * this.scrollThreshold
                    }
                    return !1
                }
                ,
                i._autoScrollToPage = function() {
                    if (this._startBounceBackIfNeeded()) {
                        var t = this._getHowMuchOutOfBoundary();
                        this._clampDelta(t),
                        (t.x > 0 || t.y < 0) && (this._curPageIdx = 0 === this._pages.length ? 0 : this._pages.length - 1),
                        (t.x < 0 || t.y > 0) && (this._curPageIdx = 0),
                        this.indicator && this.indicator._changedState()
                    } else {
                        var e = new Br;
                        Br.subtract(e, this._touchBeganPosition, this._touchEndPosition);
                        var i = this._curPageIdx
                          , r = i + this._getDragDirection(e)
                          , n = this.pageTurningSpeed * Math.abs(i - r);
                        if (r < this._pages.length) {
                            if (this._isScrollable(e, i, r))
                                return void this.scrollToPage(r, n);
                            var s = this._calculateTouchMoveVelocity();
                            if (this._isQuicklyScrollable(s))
                                return void this.scrollToPage(r, n)
                        }
                        this.scrollToPage(i, n)
                    }
                }
                ,
                Je(e, [{
                    key: "sizeMode",
                    get: function() {
                        return this._sizeMode
                    },
                    set: function(t) {
                        this._sizeMode !== t && (this._sizeMode = t,
                        this._syncSizeMode())
                    }
                }, {
                    key: "direction",
                    get: function() {
                        return this._direction
                    },
                    set: function(t) {
                        this._direction !== t && (this._direction = t,
                        this._syncScrollDirection())
                    }
                }, {
                    key: "scrollThreshold",
                    get: function() {
                        return this._scrollThreshold
                    },
                    set: function(t) {
                        this._scrollThreshold !== t && (this._scrollThreshold = t)
                    }
                }, {
                    key: "pageTurningEventTiming",
                    get: function() {
                        return this._pageTurningEventTiming
                    },
                    set: function(t) {
                        this._pageTurningEventTiming !== t && (this._pageTurningEventTiming = t)
                    }
                }, {
                    key: "indicator",
                    get: function() {
                        return this._indicator
                    },
                    set: function(t) {
                        this._indicator !== t && (this._indicator = t,
                        this.indicator && this.indicator.setPageView(this))
                    }
                }, {
                    key: "curPageIdx",
                    get: function() {
                        return this._curPageIdx
                    }
                }, {
                    key: "verticalScrollBar",
                    get: function() {
                        return t.prototype.verticalScrollBar
                    },
                    set: function(t) {
                        this.verticalScrollBar = t
                    }
                }, {
                    key: "horizontalScrollBar",
                    get: function() {
                        return t.prototype.horizontalScrollBar
                    },
                    set: function(t) {
                        this.horizontalScrollBar = t
                    }
                }]),
                e
            }(Gx),
            wO.SizeMode = PO,
            wO.Direction = MO,
            wO.EventType = lD(IO, hx),
            Ei((mO = OO).prototype, "sizeMode", [Yw, Kw], Object.getOwnPropertyDescriptor(mO.prototype, "sizeMode"), mO.prototype),
            Ei(mO.prototype, "direction", [Zw, qw], Object.getOwnPropertyDescriptor(mO.prototype, "direction"), mO.prototype),
            Ei(mO.prototype, "scrollThreshold", [Xi, Jw, Qw], Object.getOwnPropertyDescriptor(mO.prototype, "scrollThreshold"), mO.prototype),
            Ei(mO.prototype, "pageTurningEventTiming", [Xi, $w, tO], Object.getOwnPropertyDescriptor(mO.prototype, "pageTurningEventTiming"), mO.prototype),
            Ei(mO.prototype, "indicator", [eO, iO], Object.getOwnPropertyDescriptor(mO.prototype, "indicator"), mO.prototype),
            yO = Ei(mO.prototype, "autoPageTurningThreshold", [Pi, rO], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 100
                }
            }),
            Ei(mO.prototype, "verticalScrollBar", [nO, Rr, sO], Object.getOwnPropertyDescriptor(mO.prototype, "verticalScrollBar"), mO.prototype),
            Ei(mO.prototype, "horizontalScrollBar", [aO, Rr, oO], Object.getOwnPropertyDescriptor(mO.prototype, "horizontalScrollBar"), mO.prototype),
            vO = Ei(mO.prototype, "horizontal", [Rr, Pi, lO], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            SO = Ei(mO.prototype, "vertical", [Rr, Pi, hO], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            TO = Ei(mO.prototype, "cancelInnerEvents", [Rr, Pi, uO], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            bO = Ei(mO.prototype, "scrollEvents", [cO, Pi, Rr, _O], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            EO = Ei(mO.prototype, "pageTurningSpeed", [Pi, Ai, dO], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return .3
                }
            }),
            AO = Ei(mO.prototype, "pageEvents", [pO, Pi, fO], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            CO = Ei(mO.prototype, "_sizeMode", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return PO.Unified
                }
            }),
            RO = Ei(mO.prototype, "_direction", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return MO.Horizontal
                }
            }),
            BO = Ei(mO.prototype, "_scrollThreshold", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return .5
                }
            }),
            xO = Ei(mO.prototype, "_pageTurningEventTiming", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return .1
                }
            }),
            DO = Ei(mO.prototype, "_indicator", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            gO = mO)) || gO) || gO) || gO) || gO))
              , kO = new di
              , GO = new Br
              , zO = new Br
              , UO = new Br(1,1)
              , HO = new Br
              , VO = new Br;
            function WO(t, e) {
                if (!e._hadAlignOnce) {
                    e.alignMode === _w.ONCE && (e._hadAlignOnce = !0);
                    var i, r = e.target, n = zO, s = UO;
                    r ? yw(t, i = r, n, s) : i = t.parent;
                    var a = mw(i)
                      , o = i instanceof Hn || !i.getComponent(yd)
                      , l = o ? GO : i.getComponent(yd).anchorPoint
                      , h = o;
                    t.getPosition(kO);
                    var u = t._uiProps.uiTransformComp
                      , c = kO.x
                      , _ = kO.y
                      , d = u.anchorPoint
                      , p = t.getScale();
                    if (e.alignFlags & dw.HORIZONTAL) {
                        var f = 0
                          , g = 0
                          , m = a.width;
                        h ? (f = jr.left.x,
                        g = jr.right.x) : g = (f = -l.x * m) + m,
                        f += e.isAbsoluteLeft ? e.left : e.left * m,
                        g -= e.isAbsoluteRight ? e.right : e.right * m,
                        r && (f += n.x,
                        f *= s.x,
                        g += n.x,
                        g *= s.x);
                        var y = 0
                          , v = d.x
                          , S = p.x;
                        if (S < 0 && (v = 1 - v,
                        S = -S),
                        e.isStretchWidth)
                            y = g - f,
                            0 !== S && (u.width = y / S),
                            c = f + v * y;
                        else if (y = u.width * S,
                        e.isAlignHorizontalCenter) {
                            var T = e.isAbsoluteHorizontalCenter ? e.horizontalCenter : e.horizontalCenter * m
                              , b = (.5 - l.x) * a.width;
                            r && (T *= s.x,
                            b += n.x,
                            b *= s.x),
                            c = b + (v - .5) * y + T
                        } else
                            c = e.isAlignLeft ? f + v * y : g + (v - 1) * y;
                        e._lastSize.width = y
                    }
                    if (e.alignFlags & dw.VERTICAL) {
                        var E = 0
                          , A = 0
                          , C = a.height;
                        h ? (A = jr.bottom.y,
                        E = jr.top.y) : E = (A = -l.y * C) + C,
                        A += e.isAbsoluteBottom ? e.bottom : e.bottom * C,
                        E -= e.isAbsoluteTop ? e.top : e.top * C,
                        r && (A += n.y,
                        A *= s.y,
                        E += n.y,
                        E *= s.y);
                        var R = 0
                          , B = d.y
                          , x = p.y;
                        if (x < 0 && (B = 1 - B,
                        x = -x),
                        e.isStretchHeight)
                            R = E - A,
                            0 !== x && (u.height = R / x),
                            _ = A + B * R;
                        else if (R = u.height * x,
                        e.isAlignVerticalCenter) {
                            var D = e.isAbsoluteVerticalCenter ? e.verticalCenter : e.verticalCenter * C
                              , w = (.5 - l.y) * a.height;
                            r && (D *= s.y,
                            w += n.y,
                            w *= s.y),
                            _ = w + (B - .5) * R + D
                        } else
                            _ = e.isAlignBottom ? A + B * R : E + (B - 1) * R;
                        e._lastSize.height = R
                    }
                    t.setPosition(c, _, kO.z),
                    di.set(e._lastPos, c, _, kO.z)
                }
            }
            function XO(t) {
                var e = t.getComponent(zw);
                if (e && e.enabled) {
                    if (!ci.isValid(t, !0))
                        return;
                    $O.push(e)
                }
                for (var i, r = t.children, n = ui(r); !(i = n()).done; ) {
                    var s = i.value;
                    s.active && XO(s)
                }
            }
            function jO() {
                var t = Ur.getScene();
                if (t) {
                    tP.isAligning = !0,
                    tP._nodesOrderDirty && ($O.length = 0,
                    XO(t),
                    tP._nodesOrderDirty = !1);
                    var e = null
                      , i = tP._activeWidgetsIterator;
                    for (i.i = 0; i.i < $O.length; ++i.i)
                        (e = $O[i.i])._dirty && (WO(e.node, e),
                        e._dirty = !1);
                    tP.isAligning = !1
                }
            }
            var YO, KO, ZO, qO, JO, QO, $O = [], tP = t("widgetManager", ci._widgetManager = {
                isAligning: !1,
                _nodesOrderDirty: !1,
                _activeWidgetsIterator: new Wn.MutableForwardIterator($O),
                animationState: null,
                init: function() {
                    Ur.on(Hr.EVENT_AFTER_SCENE_LAUNCH, jO),
                    Ur.on(Hr.EVENT_AFTER_UPDATE, jO),
                    Xn.instance.on("design-resolution-changed", this.onResized, this);
                    var t = this.onResized.bind(this);
                    Xn.instance.on("canvas-resize", t),
                    Mn.on("orientation-change", t)
                },
                add: function() {
                    this._nodesOrderDirty = !0
                },
                remove: function(t) {
                    this._activeWidgetsIterator.remove(t)
                },
                onResized: function() {
                    var t = Ur.getScene();
                    t && this.refreshWidgetOnResized(t)
                },
                refreshWidgetOnResized: function(t) {
                    var e = Sr.isNode(t) && t.getComponent(zw);
                    e && e.enabled && (e.alignMode === _w.ON_WINDOW_RESIZE || e.alignMode === _w.ALWAYS) && e.setDirty();
                    for (var i, r = t.children, n = ui(r); !(i = n()).done; ) {
                        var s = i.value;
                        this.refreshWidgetOnResized(s)
                    }
                },
                updateOffsetsToStayPut: function(t, e) {
                    function i(t, e) {
                        return Math.abs(t - e) > 1e-10 ? e : t
                    }
                    var r = t.node
                      , n = r.parent;
                    if (n) {
                        var s = HO;
                        s.set(0, 0);
                        var a = VO;
                        if (a.set(1, 1),
                        t.target && yw(r, n = t.target, s, a),
                        !e)
                            return;
                        var o = n._uiProps && n._uiProps.uiTransformComp
                          , l = o ? o.anchorPoint : GO
                          , h = r._uiProps.uiTransformComp
                          , u = mw(n)
                          , c = h.anchorPoint
                          , _ = r.getPosition()
                          , d = dw
                          , p = r.getScale()
                          , f = 0;
                        if (e & d.LEFT) {
                            var g = -l.x * u.width;
                            g += s.x,
                            g *= a.x,
                            f = _.x - c.x * h.width * p.x - g,
                            t.isAbsoluteLeft || (f /= u.width),
                            f /= a.x,
                            t.left = i(t.left, f)
                        }
                        if (e & d.RIGHT) {
                            var m = (1 - l.x) * u.width;
                            m += s.x,
                            f = (m *= a.x) - (_.x + (1 - c.x) * h.width * p.x),
                            t.isAbsoluteRight || (f /= u.width),
                            f /= a.x,
                            t.right = i(t.right, f)
                        }
                        if (e & d.TOP) {
                            var y = (1 - l.y) * u.height;
                            y += s.y,
                            f = (y *= a.y) - (_.y + (1 - c.y) * h.height * p.y),
                            t.isAbsoluteTop || (f /= u.height),
                            f /= a.y,
                            t.top = i(t.top, f)
                        }
                        if (e & d.BOT) {
                            var v = -l.y * u.height;
                            v += s.y,
                            v *= a.y,
                            f = _.y - c.y * h.height * p.y - v,
                            t.isAbsoluteBottom || (f /= u.height),
                            f /= a.y,
                            t.bottom = i(t.bottom, f)
                        }
                    }
                },
                updateAlignment: function t(e) {
                    var i = e.parent;
                    i && Sr.isNode(i) && t(i);
                    var r = e.getComponent(zw);
                    r && i && WO(e, r)
                },
                AlignMode: _w,
                AlignFlags: dw
            });
            Ur.on(Hr.EVENT_INIT, (function() {
                tP.init()
            }
            ));
            var eP, iP, rP, nP, sP, aP, oP, lP, hP, uP, cP, _P, dP, pP, fP, gP, mP, yP, vP, SP, TP, bP = function(e) {
                return t({
                    SafeArea: e,
                    SafeAreaComponent: e
                }),
                e
            }((YO = Ti("cc.SafeArea"),
            KO = Ii(),
            ZO = Li(110),
            qO = Fi(),
            JO = Zr(zw),
            YO(QO = KO(QO = ZO(QO = Ri(QO = qO(QO = JO(QO = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.onEnable = function() {
                    this.updateArea(),
                    Mn.on("window-resize", this.updateArea, this),
                    Mn.on("orientation-change", this.updateArea, this)
                }
                ,
                i.onDisable = function() {
                    Mn.off("window-resize", this.updateArea, this),
                    Mn.off("orientation-change", this.updateArea, this)
                }
                ,
                i.updateArea = function() {
                    var t = this.node.getComponent(zw)
                      , e = this.node.getComponent(yd);
                    if (t && e) {
                        t.updateAlignment();
                        var i = this.node.position.clone()
                          , r = e.anchorPoint.clone();
                        t.isAlignTop = t.isAlignBottom = t.isAlignLeft = t.isAlignRight = !0;
                        var n = ln.getVisibleSize()
                          , s = n.width
                          , a = n.height
                          , o = ni.getSafeAreaRect();
                        t.top = a - o.y - o.height,
                        t.bottom = o.y,
                        t.left = o.x,
                        t.right = s - o.x - o.width,
                        t.updateAlignment();
                        var l = this.node.position.clone()
                          , h = r.x - (l.x - i.x) / e.width
                          , u = r.y - (l.y - i.y) / e.height;
                        e.setAnchorPoint(h, u),
                        tP.add(t)
                    }
                }
                ,
                e
            }(Ki)) || QO) || QO) || QO) || QO) || QO) || QO)), EP = function(e) {
                return t({
                    UICoordinateTracker: e,
                    UICoordinateTrackerComponent: e
                }),
                e
            }((eP = Ti("cc.UICoordinateTracker"),
            iP = Ii(),
            rP = Fi(),
            nP = Li(110),
            sP = Ci(Sr),
            aP = Ni(),
            oP = Ci(on),
            lP = Ni(),
            hP = Ni(),
            uP = Ni(),
            cP = Ci([Bn]),
            _P = Ni(),
            eP(dP = iP(dP = rP(dP = nP((SP = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "syncEvents", fP, Gi(e)),
                    Oi(e, "_target", gP, Gi(e)),
                    Oi(e, "_camera", mP, Gi(e)),
                    Oi(e, "_useScale", yP, Gi(e)),
                    Oi(e, "_distance", vP, Gi(e)),
                    e._transformPos = new di,
                    e._viewPos = new di,
                    e._canMove = !0,
                    e._lastWPos = new di,
                    e._lastCameraPos = new di,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onEnable = function() {
                    this._checkCanMove()
                }
                ,
                i.update = function() {
                    var t = this.node.worldPosition
                      , e = this._camera;
                    if (this._canMove && e && e.camera && (!this._lastWPos.equals(t) || !this._lastCameraPos.equals(e.node.worldPosition)) && (this._lastWPos.set(t),
                    this._lastCameraPos.set(e.node.worldPosition),
                    e.camera.update(),
                    e.convertToUINode(t, this._target, this._transformPos),
                    this._useScale && di.transformMat4(this._viewPos, this.node.worldPosition, e.camera.matView),
                    this.syncEvents.length > 0)) {
                        var i = this._distance / Math.abs(this._viewPos.z);
                        Bn.emitEvents(this.syncEvents, this._transformPos, i)
                    }
                }
                ,
                i._checkCanMove = function() {
                    this._canMove = !(!this._camera || !this._target)
                }
                ,
                Je(e, [{
                    key: "target",
                    get: function() {
                        return this._target
                    },
                    set: function(t) {
                        this._target !== t && (this._target = t,
                        this._checkCanMove())
                    }
                }, {
                    key: "camera",
                    get: function() {
                        return this._camera
                    },
                    set: function(t) {
                        this._camera !== t && (this._camera = t,
                        this._checkCanMove())
                    }
                }, {
                    key: "useScale",
                    get: function() {
                        return this._useScale
                    },
                    set: function(t) {
                        this._useScale !== t && (this._useScale = t)
                    }
                }, {
                    key: "distance",
                    get: function() {
                        return this._distance
                    },
                    set: function(t) {
                        this._distance !== t && (this._distance = t)
                    }
                }]),
                e
            }(Ki),
            Ei((pP = SP).prototype, "target", [sP, aP], Object.getOwnPropertyDescriptor(pP.prototype, "target"), pP.prototype),
            Ei(pP.prototype, "camera", [oP, lP], Object.getOwnPropertyDescriptor(pP.prototype, "camera"), pP.prototype),
            Ei(pP.prototype, "useScale", [hP], Object.getOwnPropertyDescriptor(pP.prototype, "useScale"), pP.prototype),
            Ei(pP.prototype, "distance", [uP], Object.getOwnPropertyDescriptor(pP.prototype, "distance"), pP.prototype),
            fP = Ei(pP.prototype, "syncEvents", [cP, Pi, _P], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            gP = Ei(pP.prototype, "_target", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            mP = Ei(pP.prototype, "_camera", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            yP = Ei(pP.prototype, "_useScale", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            vP = Ei(pP.prototype, "_distance", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            dP = pP)) || dP) || dP) || dP) || dP)), AP = [Wr.TOUCH_START, Wr.TOUCH_END, Wr.TOUCH_MOVE, Wr.MOUSE_DOWN, Wr.MOUSE_MOVE, Wr.MOUSE_UP, Wr.MOUSE_ENTER, Wr.MOUSE_LEAVE, Wr.MOUSE_WHEEL];
            function CP(t) {
                t.propagationStopped = !0
            }
            var RP, BP, xP, DP, wP, OP, PP, MP, IP, LP, FP, NP, kP, GP = function(e) {
                return t({
                    BlockInputEvents: e,
                    BlockInputEventsComponent: e
                }),
                e
            }(Ti("cc.BlockInputEvents")(TP = Ii()(TP = Fi()(TP = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.onEnable = function() {
                    for (var t = 0; t < AP.length; t++)
                        this.node.on(AP[t], CP, this)
                }
                ,
                i.onDisable = function() {
                    for (var t = 0; t < AP.length; t++)
                        this.node.off(AP[t], CP, this)
                }
                ,
                e
            }(Ki)) || TP) || TP) || TP), zP = {}, UP = t("SubContextView", (RP = Ti("cc.SubContextView"),
            BP = Ii(),
            xP = Li(110),
            DP = Zr(yd),
            wP = Fi(),
            OP = Ni(),
            PP = Ni(),
            RP(MP = BP(MP = xP(MP = DP(MP = wP((NP = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_fps", LP, Gi(e)),
                    e._sprite = void 0,
                    e._imageAsset = void 0,
                    e._texture = void 0,
                    e._updatedTime = 0,
                    e._updateInterval = 0,
                    e._openDataContext = void 0,
                    e._content = void 0,
                    Oi(e, "_designResolutionSize", FP, Gi(e)),
                    e._content = new Sr("content"),
                    e._content.hideFlags |= tn.Flags.DontSave | tn.Flags.HideInHierarchy,
                    e._sprite = null,
                    e._imageAsset = new Ir,
                    e._openDataContext = null,
                    e._updatedTime = performance.now(),
                    e._texture = new Er,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onLoad = function() {
                    zP.getOpenDataContext ? (this._updateInterval = 1e3 / this._fps,
                    this._openDataContext = zP.getOpenDataContext(),
                    this._initSharedCanvas(),
                    this._initContentNode(),
                    this._updateSubContextView(),
                    this._updateContentLayer()) : this.enabled = !1
                }
                ,
                i.onEnable = function() {
                    this._registerNodeEvent()
                }
                ,
                i.onDisable = function() {
                    this._unregisterNodeEvent()
                }
                ,
                i._initSharedCanvas = function() {
                    if (this._openDataContext) {
                        var t = this._openDataContext.canvas;
                        t.width = this._designResolutionSize.width,
                        t.height = this._designResolutionSize.height
                    }
                }
                ,
                i._initContentNode = function() {
                    if (this._openDataContext) {
                        var t = this._openDataContext.canvas
                          , e = this._imageAsset;
                        if (e.reset(t),
                        this._texture.image = e,
                        this._texture.create(t.width, t.height),
                        this._sprite = this._content.getComponent(ey),
                        this._sprite || (this._sprite = this._content.addComponent(ey)),
                        this._sprite.spriteFrame)
                            this._sprite.spriteFrame.texture = this._texture;
                        else {
                            var i = new Jc;
                            i.texture = this._texture,
                            this._sprite.spriteFrame = i
                        }
                        this._content.parent = this.node
                    }
                }
                ,
                i._updateSubContextView = function() {
                    if (this._openDataContext) {
                        var t = this.node.getComponent(yd)
                          , e = this._content.getComponent(yd)
                          , i = t.width / e.width
                          , r = t.height / e.height
                          , n = i > r ? r : i;
                        e.width *= n,
                        e.height *= n;
                        var s = ln.getViewportRect()
                          , a = e.getBoundingBoxToWorld()
                          , o = ln.getVisibleSize()
                          , l = Mn.devicePixelRatio
                          , h = (s.width * (a.x / o.width) + s.x) / l
                          , u = (s.height * (a.y / o.height) + s.y) / l
                          , c = s.width * (a.width / o.width) / l
                          , _ = s.height * (a.height / o.height) / l;
                        this._openDataContext.postMessage({
                            fromEngine: !0,
                            type: "engine",
                            event: "viewport",
                            x: h,
                            y: u,
                            width: c,
                            height: _
                        })
                    }
                }
                ,
                i._updateSubContextTexture = function() {
                    var t = this._imageAsset;
                    if (t && this._openDataContext && !(t.width <= 0 || t.height <= 0)) {
                        var e = this._openDataContext.canvas;
                        t.reset(e),
                        (e.width > t.width || e.height > t.height) && this._texture.create(e.width, e.height),
                        this._texture.uploadData(e)
                    }
                }
                ,
                i._registerNodeEvent = function() {
                    this.node.on(Wr.TRANSFORM_CHANGED, this._updateSubContextView, this),
                    this.node.on(Wr.SIZE_CHANGED, this._updateSubContextView, this),
                    this.node.on(Wr.LAYER_CHANGED, this._updateContentLayer, this)
                }
                ,
                i._unregisterNodeEvent = function() {
                    this.node.off(Wr.TRANSFORM_CHANGED, this._updateSubContextView, this),
                    this.node.off(Wr.SIZE_CHANGED, this._updateSubContextView, this),
                    this.node.off(Wr.LAYER_CHANGED, this._updateContentLayer, this)
                }
                ,
                i._updateContentLayer = function() {
                    this._content.layer = this.node.layer
                }
                ,
                i.update = function(t) {
                    void 0 === t ? this._updateSubContextTexture() : performance.now() - this._updatedTime >= this._updateInterval && (this._updatedTime += this._updateInterval,
                    this._updateSubContextTexture())
                }
                ,
                i.onDestroy = function() {
                    this._content.destroy(),
                    this._texture.destroy(),
                    this._sprite && this._sprite.destroy(),
                    this._imageAsset.destroy(),
                    this._openDataContext = null
                }
                ,
                Je(e, [{
                    key: "designResolutionSize",
                    get: function() {
                        return this._designResolutionSize
                    },
                    set: function() {}
                }, {
                    key: "fps",
                    get: function() {
                        return this._fps
                    },
                    set: function(t) {
                        this._fps !== t && (this._fps = t,
                        this._updateInterval = 1e3 / t)
                    }
                }]),
                e
            }(Ki),
            Ei((IP = NP).prototype, "designResolutionSize", [OP], Object.getOwnPropertyDescriptor(IP.prototype, "designResolutionSize"), IP.prototype),
            Ei(IP.prototype, "fps", [PP], Object.getOwnPropertyDescriptor(IP.prototype, "fps"), IP.prototype),
            LP = Ei(IP.prototype, "_fps", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 60
                }
            }),
            FP = Ei(IP.prototype, "_designResolutionSize", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Pr(640,960)
                }
            }),
            MP = IP)) || MP) || MP) || MP) || MP) || MP));
            ci.SubContextView = UP;
            var HP, VP, WP, XP, jP, YP, KP, ZP, qP, JP, QP, $P, tM, eM, iM, rM, nM = t("UIReorderComponent", Ti("cc.UIReorderComponent")(kP = function() {
                ii(1408, "UIReorderComponent")
            }
            ) || kP);
            ci.UIReorderComponent = nM,
            ci.ButtonComponent = zE,
            Vi.setClassAlias(zE, "cc.ButtonComponent"),
            ci.EditBoxComponent = lR,
            Vi.setClassAlias(lR, "cc.EditBoxComponent"),
            ci.LayoutComponent = MR,
            Vi.setClassAlias(MR, "cc.LayoutComponent"),
            ci.ProgressBarComponent = sB,
            Vi.setClassAlias(sB, "cc.ProgressBarComponent"),
            ci.ScrollViewComponent = Gx,
            Vi.setClassAlias(Gx, "cc.ScrollViewComponent"),
            ci.ScrollBarComponent = ox,
            Vi.setClassAlias(ox, "cc.ScrollBarComponent"),
            ci.SliderComponent = oD,
            Vi.setClassAlias(oD, "cc.SliderComponent"),
            ci.ToggleComponent = pw,
            Vi.setClassAlias(pw, "cc.ToggleComponent"),
            ci.ToggleContainerComponent = fw,
            Vi.setClassAlias(fw, "cc.ToggleContainerComponent"),
            ci.WidgetComponent = zw,
            Vi.setClassAlias(zw, "cc.WidgetComponent"),
            ci.PageViewComponent = NO,
            Vi.setClassAlias(NO, "cc.PageViewComponent"),
            ci.PageViewIndicatorComponent = LO,
            Vi.setClassAlias(LO, "cc.PageViewIndicatorComponent"),
            ci.SafeAreaComponent = bP,
            Vi.setClassAlias(bP, "cc.SafeAreaComponent"),
            Vi.setClassAlias(EP, "cc.UICoordinateTrackerComponent"),
            ci.BlockInputEventsComponent = GP,
            Vi.setClassAlias(GP, "cc.BlockInputEventsComponent");
            var sM, aM, oM, lM, hM, uM, cM, _M, dM, pM, fM, gM, mM, yM, vM, SM, TM, bM, EM, AM, CM, RM, BM, xM, DM, wM, OM, PM, MM, IM, LM, FM, NM = function(e) {
                return t({
                    Billboard: e,
                    BillboardComponent: e
                }),
                e
            }((HP = Ti("cc.Billboard"),
            VP = Ii(),
            WP = Fi(),
            XP = Ci(Er),
            jP = Ci(Er),
            YP = Ni(),
            KP = Ni(),
            ZP = Ni(),
            qP = Ni(),
            HP(JP = VP(JP = WP(JP = Ri((rM = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_texture", $P, Gi(e)),
                    Oi(e, "_height", tM, Gi(e)),
                    Oi(e, "_width", eM, Gi(e)),
                    Oi(e, "_rotation", iM, Gi(e)),
                    e._model = null,
                    e._mesh = null,
                    e._material = null,
                    e._uniform = new Mi(1,1,0,0),
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onLoad = function() {
                    this.createModel()
                }
                ,
                i.onEnable = function() {
                    this.attachToScene(),
                    this._model.enabled = !0,
                    this.width = this._width,
                    this.height = this._height,
                    this.rotation = this.rotation,
                    this.texture = this.texture
                }
                ,
                i.onDisable = function() {
                    this.detachFromScene()
                }
                ,
                i.attachToScene = function() {
                    this._model && this.node && this.node.scene && (this._model.scene && this.detachFromScene(),
                    this._getRenderScene().addModel(this._model))
                }
                ,
                i.detachFromScene = function() {
                    this._model && this._model.scene && this._model.scene.removeModel(this._model)
                }
                ,
                i.createModel = function() {
                    this._mesh = Oo({
                        primitiveMode: N.TRIANGLE_LIST,
                        positions: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        uvs: [0, 0, 1, 0, 0, 1, 1, 1],
                        colors: [Zi.WHITE.r, Zi.WHITE.g, Zi.WHITE.b, Zi.WHITE.a, Zi.WHITE.r, Zi.WHITE.g, Zi.WHITE.b, Zi.WHITE.a, Zi.WHITE.r, Zi.WHITE.g, Zi.WHITE.b, Zi.WHITE.a, Zi.WHITE.r, Zi.WHITE.g, Zi.WHITE.b, Zi.WHITE.a],
                        attributes: [new Rt(qt.ATTR_POSITION,_.RGB32F), new Rt(qt.ATTR_TEX_COORD,_.RG32F), new Rt(qt.ATTR_COLOR,_.RGBA8UI,!0)],
                        indices: [0, 1, 2, 1, 2, 3]
                    }, void 0, {
                        calculateBounds: !1
                    });
                    var t = this._model = ci.director.root.createModel(vi, this.node);
                    t.node = t.transform = this.node,
                    null == this._material && (this._material = new Tr,
                    this._material.copy(Di.get("default-billboard-material"))),
                    t.initSubModel(0, this._mesh.renderingSubMeshes[0], this._material)
                }
                ,
                Je(e, [{
                    key: "texture",
                    get: function() {
                        return this._texture
                    },
                    set: function(t) {
                        this._texture = t,
                        this._material && this._material.setProperty("mainTexture", t)
                    }
                }, {
                    key: "height",
                    get: function() {
                        return this._height
                    },
                    set: function(t) {
                        this._height = t,
                        this._material && (this._uniform.y = t,
                        this._material.setProperty("cc_size_rotation", this._uniform))
                    }
                }, {
                    key: "width",
                    get: function() {
                        return this._width
                    },
                    set: function(t) {
                        this._width = t,
                        this._material && (this._uniform.x = t,
                        this._material.setProperty("cc_size_rotation", this._uniform))
                    }
                }, {
                    key: "rotation",
                    get: function() {
                        return Math.round(100 * jn(this._rotation)) / 100
                    },
                    set: function(t) {
                        this._rotation = ir(t),
                        this._material && (this._uniform.z = this._rotation,
                        this._material.setProperty("cc_size_rotation", this._uniform))
                    }
                }]),
                e
            }(Ki),
            $P = Ei((QP = rM).prototype, "_texture", [XP], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ei(QP.prototype, "texture", [jP, YP], Object.getOwnPropertyDescriptor(QP.prototype, "texture"), QP.prototype),
            tM = Ei(QP.prototype, "_height", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Ei(QP.prototype, "height", [KP], Object.getOwnPropertyDescriptor(QP.prototype, "height"), QP.prototype),
            eM = Ei(QP.prototype, "_width", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Ei(QP.prototype, "width", [ZP], Object.getOwnPropertyDescriptor(QP.prototype, "width"), QP.prototype),
            iM = Ei(QP.prototype, "_rotation", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Ei(QP.prototype, "rotation", [qP], Object.getOwnPropertyDescriptor(QP.prototype, "rotation"), QP.prototype),
            JP = QP)) || JP) || JP) || JP) || JP)), kM = [new Rt(qt.ATTR_POSITION,_.RGB32F), new Rt(qt.ATTR_TEX_COORD,_.RGBA32F), new Rt(qt.ATTR_TEX_COORD1,_.RGB32F), new Rt(qt.ATTR_COLOR,_.RGBA8,!0)], GM = new di, zM = new di, UM = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this) || this)._capacity = void 0,
                    e._vertSize = 0,
                    e._vBuffer = null,
                    e._vertAttrsFloatCount = 0,
                    e._vdataF32 = null,
                    e._vdataUint32 = null,
                    e._iaInfo = void 0,
                    e._iaInfoBuffer = void 0,
                    e._subMeshData = null,
                    e._vertCount = 0,
                    e._indexCount = 0,
                    e._material = null,
                    e.type = fr.LINE,
                    e._capacity = 100,
                    e._iaInfo = new dt([new ct]),
                    e._iaInfoBuffer = e._device.createBuffer(new ht(f.INDIRECT,y.DEVICE,ee,ee)),
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.setCapacity = function(t) {
                    this._capacity = t,
                    this.createBuffer()
                }
                ,
                i.createBuffer = function() {
                    this._vertSize = 0;
                    for (var t, e = ui(kM); !(t = e()).done; ) {
                        var i = t.value;
                        i.offset = this._vertSize,
                        this._vertSize += Jt[i.format].size
                    }
                    this._vertAttrsFloatCount = this._vertSize / 4,
                    this._vBuffer = this.createSubMeshData(),
                    this._vdataF32 = new Float32Array(this._vBuffer),
                    this._vdataUint32 = new Uint32Array(this._vBuffer)
                }
                ,
                i.updateMaterial = function(e) {
                    this._material = e,
                    t.prototype.setSubModelMaterial.call(this, 0, e)
                }
                ,
                i.createSubMeshData = function() {
                    this._subMeshData && this.destroySubMeshData(),
                    this._vertCount = 2,
                    this._indexCount = 6;
                    var t = this._device.createBuffer(new ht(f.VERTEX | f.TRANSFER_DST,y.DEVICE,this._vertSize * this._capacity * this._vertCount,this._vertSize))
                      , e = new ArrayBuffer(this._vertSize * this._capacity * this._vertCount);
                    t.update(e);
                    for (var i = new Uint16Array((this._capacity - 1) * this._indexCount), r = 0, n = 0; n < this._capacity - 1; ++n) {
                        var s = 2 * n;
                        i[r++] = s,
                        i[r++] = s + 1,
                        i[r++] = s + 2,
                        i[r++] = s + 3,
                        i[r++] = s + 2,
                        i[r++] = s + 1
                    }
                    var a = this._device.createBuffer(new ht(f.INDEX | f.TRANSFER_DST,y.DEVICE,(this._capacity - 1) * this._indexCount * Uint16Array.BYTES_PER_ELEMENT,Uint16Array.BYTES_PER_ELEMENT));
                    return a.update(i),
                    this._iaInfo.drawInfos[0].vertexCount = this._capacity * this._vertCount,
                    this._iaInfo.drawInfos[0].indexCount = (this._capacity - 1) * this._indexCount,
                    this._iaInfoBuffer.update(this._iaInfo),
                    this._subMeshData = new $r([t],kM,N.TRIANGLE_LIST,a,this._iaInfoBuffer),
                    this.initSubModel(0, this._subMeshData, this._material),
                    e
                }
                ,
                i.addLineVertexData = function(t, e, i) {
                    if (t.length > 1) {
                        var r = 0;
                        di.subtract(GM, t[1], t[0]),
                        this._vdataF32[r++] = t[0].x,
                        this._vdataF32[r++] = t[0].y,
                        this._vdataF32[r++] = t[0].z,
                        this._vdataF32[r++] = 0,
                        this._vdataF32[r++] = e.evaluate(0, 1),
                        this._vdataF32[r++] = 0,
                        this._vdataF32[r++] = 0,
                        this._vdataF32[r++] = GM.x,
                        this._vdataF32[r++] = GM.y,
                        this._vdataF32[r++] = GM.z,
                        this._vdataUint32[r++] = i.evaluate(0, 1)._val,
                        this._vdataF32[r++] = t[0].x,
                        this._vdataF32[r++] = t[0].y,
                        this._vdataF32[r++] = t[0].z,
                        this._vdataF32[r++] = 1,
                        this._vdataF32[r++] = e.evaluate(0, 1),
                        this._vdataF32[r++] = 0,
                        this._vdataF32[r++] = 1,
                        this._vdataF32[r++] = GM.x,
                        this._vdataF32[r++] = GM.y,
                        this._vdataF32[r++] = GM.z,
                        this._vdataUint32[r++] = i.evaluate(0, 1)._val;
                        for (var n = 1; n < t.length - 1; n++) {
                            di.subtract(GM, t[n - 1], t[n]),
                            di.subtract(zM, t[n + 1], t[n]),
                            di.subtract(zM, zM, GM);
                            var s = n / t.length;
                            this._vdataF32[r++] = t[n].x,
                            this._vdataF32[r++] = t[n].y,
                            this._vdataF32[r++] = t[n].z,
                            this._vdataF32[r++] = 0,
                            this._vdataF32[r++] = e.evaluate(s, 1),
                            this._vdataF32[r++] = s,
                            this._vdataF32[r++] = 0,
                            this._vdataF32[r++] = zM.x,
                            this._vdataF32[r++] = zM.y,
                            this._vdataF32[r++] = zM.z,
                            this._vdataUint32[r++] = i.evaluate(s, 1)._val,
                            this._vdataF32[r++] = t[n].x,
                            this._vdataF32[r++] = t[n].y,
                            this._vdataF32[r++] = t[n].z,
                            this._vdataF32[r++] = 1,
                            this._vdataF32[r++] = e.evaluate(s, 1),
                            this._vdataF32[r++] = s,
                            this._vdataF32[r++] = 1,
                            this._vdataF32[r++] = zM.x,
                            this._vdataF32[r++] = zM.y,
                            this._vdataF32[r++] = zM.z,
                            this._vdataUint32[r++] = i.evaluate(s, 1)._val
                        }
                        di.subtract(GM, t[t.length - 1], t[t.length - 2]),
                        this._vdataF32[r++] = t[t.length - 1].x,
                        this._vdataF32[r++] = t[t.length - 1].y,
                        this._vdataF32[r++] = t[t.length - 1].z,
                        this._vdataF32[r++] = 0,
                        this._vdataF32[r++] = e.evaluate(1, 1),
                        this._vdataF32[r++] = 1,
                        this._vdataF32[r++] = 0,
                        this._vdataF32[r++] = GM.x,
                        this._vdataF32[r++] = GM.y,
                        this._vdataF32[r++] = GM.z,
                        this._vdataUint32[r++] = i.evaluate(1, 1)._val,
                        this._vdataF32[r++] = t[t.length - 1].x,
                        this._vdataF32[r++] = t[t.length - 1].y,
                        this._vdataF32[r++] = t[t.length - 1].z,
                        this._vdataF32[r++] = 1,
                        this._vdataF32[r++] = e.evaluate(1, 1),
                        this._vdataF32[r++] = 1,
                        this._vdataF32[r++] = 1,
                        this._vdataF32[r++] = GM.x,
                        this._vdataF32[r++] = GM.y,
                        this._vdataF32[r++] = GM.z,
                        this._vdataUint32[r++] = i.evaluate(1, 1)._val
                    }
                    this.updateIA(Math.max(0, t.length - 1))
                }
                ,
                i.updateIA = function(t) {
                    this._subModels[0].inputAssembler.vertexBuffers[0].update(this._vdataF32),
                    this._iaInfo.drawInfos[0].firstIndex = 0,
                    this._iaInfo.drawInfos[0].indexCount = this._indexCount * t,
                    this._iaInfoBuffer.update(this._iaInfo)
                }
                ,
                i.destroySubMeshData = function() {
                    this._subMeshData && (this._subMeshData.destroy(),
                    this._subMeshData = null)
                }
                ,
                e
            }(vi), HM = [["mode", "constant", "multiplier"], ["mode", "spline", "multiplier"], ["mode", "splineMin", "splineMax", "multiplier"], ["mode", "constantMin", "constantMax", "multiplier"]], VM = Si({
                Constant: 0,
                Curve: 1,
                TwoCurves: 2,
                TwoConstants: 3
            }), WM = t("CurveRange", (sM = Ti("cc.CurveRange"),
            aM = Ci(VM),
            oM = Ci(Yn),
            lM = Ci(Yn),
            hM = Ci(Yn),
            sM((TM = SM = function() {
                function t() {
                    Oi(this, "mode", _M, this),
                    Oi(this, "spline", dM, this),
                    Oi(this, "splineMin", pM, this),
                    Oi(this, "splineMax", fM, this),
                    Oi(this, "constant", gM, this),
                    Oi(this, "constantMin", mM, this),
                    Oi(this, "constantMax", yM, this),
                    Oi(this, "multiplier", vM, this),
                    this._curve = new Kn(this.spline),
                    this._curveMin = new Kn(this.splineMin),
                    this._curveMax = new Kn(this.splineMax)
                }
                var e = t.prototype;
                return e.evaluate = function(t, e) {
                    switch (this.mode) {
                    default:
                    case VM.Constant:
                        return this.constant;
                    case VM.Curve:
                        return this.spline.evaluate(t) * this.multiplier;
                    case VM.TwoCurves:
                        return xn(this.splineMin.evaluate(t), this.splineMax.evaluate(t), e) * this.multiplier;
                    case VM.TwoConstants:
                        return xn(this.constantMin, this.constantMax, e)
                    }
                }
                ,
                e.getMax = function() {
                    switch (this.mode) {
                    default:
                    case VM.Constant:
                        return this.constant;
                    case VM.Curve:
                        return this.multiplier;
                    case VM.TwoConstants:
                        return this.constantMax;
                    case VM.TwoCurves:
                        return this.multiplier
                    }
                }
                ,
                e._onBeforeSerialize = function() {
                    return HM[this.mode]
                }
                ,
                Je(t, [{
                    key: "curve",
                    get: function() {
                        return this._curve
                    },
                    set: function(t) {
                        this._curve = t,
                        this.spline = t._internalCurve
                    }
                }, {
                    key: "curveMin",
                    get: function() {
                        return this._curveMin
                    },
                    set: function(t) {
                        this._curveMin = t,
                        this.splineMin = t._internalCurve
                    }
                }, {
                    key: "curveMax",
                    get: function() {
                        return this._curveMax
                    },
                    set: function(t) {
                        this._curveMax = t,
                        this.splineMax = t._internalCurve
                    }
                }]),
                t
            }(),
            SM.Mode = VM,
            _M = Ei((cM = TM).prototype, "mode", [aM], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return VM.Constant
                }
            }),
            dM = Ei(cM.prototype, "spline", [oM], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Zn()
                }
            }),
            pM = Ei(cM.prototype, "splineMin", [lM], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Zn()
                }
            }),
            fM = Ei(cM.prototype, "splineMax", [hM], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Zn()
                }
            }),
            gM = Ei(cM.prototype, "constant", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            mM = Ei(cM.prototype, "constantMin", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            yM = Ei(cM.prototype, "constantMax", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            vM = Ei(cM.prototype, "multiplier", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            uM = cM)) || uM));
            function XM(t, e, i) {
                switch (t.mode) {
                case VM.Constant:
                    return t.constant;
                case VM.Curve:
                    return t.spline.evaluate(e) * t.multiplier;
                case VM.TwoCurves:
                    return 0 === i ? t.splineMin.evaluate(e) * t.multiplier : t.splineMax.evaluate(e) * t.multiplier;
                case VM.TwoConstants:
                    return 0 === i ? t.constantMin : t.constantMax;
                default:
                    return 0
                }
            }
            function jM(t) {
                switch (t.mode) {
                case VM.TwoConstants:
                case VM.TwoCurves:
                    return 2;
                default:
                    return 1
                }
            }
            function YM(t, e, i) {
                var r = new Ir({
                    width: e,
                    height: i,
                    _data: t,
                    _compressed: !1,
                    format: Cr.RGBA32F
                })
                  , n = new Er;
                return n.setFilters(Ar.NEAREST, Ar.NEAREST),
                n.setMipFilter(Ar.NONE),
                n.setWrapMode(qn.CLAMP_TO_EDGE, qn.CLAMP_TO_EDGE, qn.CLAMP_TO_EDGE),
                n.image = r,
                n
            }
            function KM(t, e, i, r, n) {
                for (var s = Math.max(jM(e), jM(i), jM(r)), a = new Float32Array(t * s * 4), o = [e, i, r], l = 1 / (t - 1), h = 0; h < s; h++)
                    for (var u = 0; u < 3; u++)
                        for (var c = o[u], _ = 0, d = 0, p = 0; p < t; p++) {
                            var f = XM(c, l * p, h);
                            d = n ? f : (_ += f) / (p + 1),
                            a[4 * p + u] = d
                        }
                return YM(a, t, s)
            }
            var ZM, qM, JM, QM, $M, tI, eI, iI, rI, nI, sI, aI, oI, lI, hI, uI, cI, _I, dI, pI, fI, gI, mI, yI, vI, SI, TI, bI, EI, AI, CI, RI, BI, xI, DI, wI, OI, PI, MI, II, LI, FI, NI, kI, GI, zI, UI, HI, VI, WI, XI, jI, YI, KI, ZI, qI = Si({
                Blend: 0,
                Fixed: 1
            }), JI = (t("ColorKey", Ti("cc.ColorKey")((AM = Ei((EM = function() {
                Oi(this, "color", AM, this),
                Oi(this, "time", CM, this)
            }
            ).prototype, "color", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Zi.WHITE.clone()
                }
            }),
            CM = Ei(EM.prototype, "time", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            bM = EM)) || bM),
            t("AlphaKey", Ti("cc.AlphaKey")((xM = Ei((BM = function() {
                Oi(this, "alpha", xM, this),
                Oi(this, "time", DM, this)
            }
            ).prototype, "alpha", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            DM = Ei(BM.prototype, "time", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            RM = BM)) || RM),
            t("Gradient", Ti("cc.Gradient")((FM = LM = function() {
                function t() {
                    Oi(this, "colorKeys", PM, this),
                    Oi(this, "alphaKeys", MM, this),
                    Oi(this, "mode", IM, this),
                    this._color = void 0,
                    this._color = Zi.WHITE.clone()
                }
                var e = t.prototype;
                return e.setKeys = function(t, e) {
                    this.colorKeys = t,
                    this.alphaKeys = e
                }
                ,
                e.sortKeys = function() {
                    this.colorKeys.length > 1 && this.colorKeys.sort((function(t, e) {
                        return t.time - e.time
                    }
                    )),
                    this.alphaKeys.length > 1 && this.alphaKeys.sort((function(t, e) {
                        return t.time - e.time
                    }
                    ))
                }
                ,
                e.evaluate = function(t) {
                    return this.getRGB(t),
                    this._color._set_a_unsafe(this.getAlpha(t)),
                    this._color
                }
                ,
                e.randomColor = function() {
                    var t = this.colorKeys[Math.trunc(Math.random() * this.colorKeys.length)]
                      , e = this.alphaKeys[Math.trunc(Math.random() * this.alphaKeys.length)];
                    return this._color.set(t.color),
                    this._color._set_a_unsafe(e.alpha),
                    this._color
                }
                ,
                e.getRGB = function(t) {
                    if (!(this.colorKeys.length > 1))
                        return 1 === this.colorKeys.length ? (this._color.set(this.colorKeys[0].color),
                        this._color) : (this._color.set(Zi.WHITE),
                        this._color);
                    t = Jn(t, 1);
                    for (var e = 1; e < this.colorKeys.length; ++e) {
                        var i = this.colorKeys[e - 1].time
                          , r = this.colorKeys[e].time;
                        if (t >= i && t < r) {
                            if (this.mode === qI.Fixed)
                                return this.colorKeys[e].color;
                            var n = (t - i) / (r - i);
                            return Zi.lerp(this._color, this.colorKeys[e - 1].color, this.colorKeys[e].color, n),
                            this._color
                        }
                    }
                    var s = this.colorKeys.length - 1;
                    t < this.colorKeys[0].time ? Zi.lerp(this._color, Zi.BLACK, this.colorKeys[0].color, t / this.colorKeys[0].time) : t > this.colorKeys[s].time && Zi.lerp(this._color, this.colorKeys[s].color, Zi.BLACK, (t - this.colorKeys[s].time) / (1 - this.colorKeys[s].time))
                }
                ,
                e.getAlpha = function(t) {
                    if (!(this.alphaKeys.length > 1))
                        return 1 === this.alphaKeys.length ? this.alphaKeys[0].alpha : 255;
                    t = Jn(t, 1);
                    for (var e = 1; e < this.alphaKeys.length; ++e) {
                        var i = this.alphaKeys[e - 1].time
                          , r = this.alphaKeys[e].time;
                        if (t >= i && t < r) {
                            if (this.mode === qI.Fixed)
                                return this.alphaKeys[e].alpha;
                            var n = (t - i) / (r - i);
                            return xn(this.alphaKeys[e - 1].alpha, this.alphaKeys[e].alpha, n)
                        }
                    }
                    var s = this.alphaKeys.length - 1;
                    return t < this.alphaKeys[0].time ? xn(0, this.alphaKeys[0].alpha, t / this.alphaKeys[0].time) : t > this.alphaKeys[s].time ? xn(this.alphaKeys[s].alpha, 0, (t - this.alphaKeys[s].time) / (1 - this.alphaKeys[s].time)) : void 0
                }
                ,
                t
            }(),
            LM.Mode = qI,
            PM = Ei((OM = FM).prototype, "colorKeys", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Array
                }
            }),
            MM = Ei(OM.prototype, "alphaKeys", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Array
                }
            }),
            IM = Ei(OM.prototype, "mode", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return qI.Blend
                }
            }),
            wM = OM)) || wM)), QI = hi, $I = Si({
                Color: 0,
                Gradient: 1,
                TwoColors: 2,
                TwoGradients: 3,
                RandomColor: 4
            }), tL = t("GradientRange", (ZM = Ti("cc.GradientRange"),
            qM = Ci($I),
            JM = Ci(JI),
            QM = Ci(JI),
            $M = Ci(JI),
            tI = Ci($I),
            ZM((cI = uI = function() {
                function t() {
                    Oi(this, "color", rI, this),
                    Oi(this, "colorMin", nI, this),
                    Oi(this, "colorMax", sI, this),
                    Oi(this, "gradient", aI, this),
                    Oi(this, "gradientMin", oI, this),
                    Oi(this, "gradientMax", lI, this),
                    Oi(this, "_mode", hI, this),
                    this._color = Zi.WHITE.clone()
                }
                var e = t.prototype;
                return e.evaluate = function(t, e) {
                    switch (this._mode) {
                    case $I.Color:
                        return this.color;
                    case $I.TwoColors:
                        return Zi.lerp(this._color, this.colorMin, this.colorMax, e),
                        this._color;
                    case $I.RandomColor:
                        return this.gradient.randomColor();
                    case $I.Gradient:
                        return this.gradient.evaluate(t);
                    case $I.TwoGradients:
                        return Zi.lerp(this._color, this.gradientMin.evaluate(t), this.gradientMax.evaluate(t), e),
                        this._color;
                    default:
                        return this.color
                    }
                }
                ,
                e._onBeforeSerialize = function() {
                    return QI[this._mode]
                }
                ,
                Je(t, [{
                    key: "mode",
                    get: function() {
                        return this._mode
                    },
                    set: function(t) {
                        this._mode = t
                    }
                }]),
                t
            }(),
            uI.Mode = $I,
            Ei((iI = cI).prototype, "mode", [qM], Object.getOwnPropertyDescriptor(iI.prototype, "mode"), iI.prototype),
            rI = Ei(iI.prototype, "color", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Zi.WHITE.clone()
                }
            }),
            nI = Ei(iI.prototype, "colorMin", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Zi.WHITE.clone()
                }
            }),
            sI = Ei(iI.prototype, "colorMax", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Zi.WHITE.clone()
                }
            }),
            aI = Ei(iI.prototype, "gradient", [JM], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new JI
                }
            }),
            oI = Ei(iI.prototype, "gradientMin", [QM], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new JI
                }
            }),
            lI = Ei(iI.prototype, "gradientMax", [$M], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new JI
                }
            }),
            hI = Ei(iI.prototype, "_mode", [tI], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return $I.Color
                }
            }),
            eI = iI)) || eI));
            function eL(t, e, i) {
                switch (t.mode) {
                case $I.Color:
                    return t.color;
                case $I.TwoColors:
                    return 0 === i ? t.colorMin : t.colorMax;
                case $I.RandomColor:
                    return t.gradient.randomColor();
                case $I.Gradient:
                    return t.gradient.evaluate(e);
                case $I.TwoGradients:
                    return 0 === i ? t.gradientMin.evaluate(e) : t.gradientMax.evaluate(e);
                default:
                    return t.color
                }
            }
            var iL = {
                parent: null,
                owner: null,
                subModelIdx: 0
            }
              , rL = {
                CC_USE_WORLD_SPACE: !1
            }
              , nL = function(e) {
                return t({
                    Line: e,
                    LineComponent: e
                }),
                e
            }((_I = Ti("cc.Line"),
            dI = Ii(),
            pI = Fi(),
            fI = Ci(Er),
            gI = Ci(Er),
            mI = Xr(),
            yI = Ni(),
            vI = Xr(),
            SI = Ni(),
            TI = Ci([di]),
            bI = Ci([di]),
            EI = Xr(),
            AI = Ni(),
            CI = Ci(WM),
            RI = Ci(WM),
            BI = ji(),
            xI = Xr(),
            DI = Ni(),
            wI = Ci(Br),
            OI = Xr(),
            PI = Ni(),
            MI = Ci(Br),
            II = Xr(),
            LI = Ni(),
            FI = Ci(tL),
            NI = Ci(tL),
            kI = Xr(),
            GI = Ni(),
            _I(zI = dI(zI = pI(zI = Ri((ZI = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_texture", HI, Gi(e)),
                    e._material = null,
                    e._materialInstance = null,
                    Oi(e, "_worldSpace", VI, Gi(e)),
                    Oi(e, "_positions", WI, Gi(e)),
                    Oi(e, "_width", XI, Gi(e)),
                    Oi(e, "_tile", jI, Gi(e)),
                    Oi(e, "_offset", YI, Gi(e)),
                    Oi(e, "_color", KI, Gi(e)),
                    e._model = null,
                    e._tile_offset = new Mi,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onLoad = function() {
                    var t = this._model = ci.director.root.createModel(UM);
                    t.node = t.transform = this.node,
                    null === this._material && (this._material = new Tr,
                    this._material.copy(Di.get("default-trail-material")),
                    rL.CC_USE_WORLD_SPACE = this.worldSpace,
                    iL.parent = this._material,
                    iL.subModelIdx = 0,
                    this._materialInstance = new en(iL),
                    iL.parent = null,
                    iL.subModelIdx = 0,
                    this._materialInstance.recompileShaders(rL)),
                    t.updateMaterial(this._materialInstance),
                    t.setCapacity(100)
                }
                ,
                i.onEnable = function() {
                    this._model && (this._attachToScene(),
                    this.texture = this._texture,
                    this.tile = this._tile,
                    this.offset = this._offset,
                    this._model.addLineVertexData(this._positions, this._width, this._color))
                }
                ,
                i.onDisable = function() {
                    this._model && this._detachFromScene()
                }
                ,
                i._attachToScene = function() {
                    this._model && this.node && this.node.scene && (this._model.scene && this._detachFromScene(),
                    this._getRenderScene().addModel(this._model))
                }
                ,
                i._detachFromScene = function() {
                    this._model && this._model.scene && this._model.scene.removeModel(this._model)
                }
                ,
                Je(e, [{
                    key: "texture",
                    get: function() {
                        return this._texture
                    },
                    set: function(t) {
                        this._texture = t,
                        this._materialInstance && this._materialInstance.setProperty("mainTexture", t)
                    }
                }, {
                    key: "worldSpace",
                    get: function() {
                        return this._worldSpace
                    },
                    set: function(t) {
                        this._worldSpace = t,
                        this._materialInstance && (rL.CC_USE_WORLD_SPACE = this.worldSpace,
                        this._materialInstance.recompileShaders(rL),
                        this._model && this._model.setSubModelMaterial(0, this._materialInstance))
                    }
                }, {
                    key: "positions",
                    get: function() {
                        return this._positions
                    },
                    set: function(t) {
                        this._positions = t,
                        this._model && this._model.addLineVertexData(this._positions, this._width, this._color)
                    }
                }, {
                    key: "width",
                    get: function() {
                        return this._width
                    },
                    set: function(t) {
                        this._width = t,
                        this._model && this._model.addLineVertexData(this._positions, this._width, this._color)
                    }
                }, {
                    key: "tile",
                    get: function() {
                        return this._tile
                    },
                    set: function(t) {
                        this._tile.set(t),
                        this._materialInstance && (this._tile_offset.x = this._tile.x,
                        this._tile_offset.y = this._tile.y,
                        this._materialInstance.setProperty("mainTiling_Offset", this._tile_offset))
                    }
                }, {
                    key: "offset",
                    get: function() {
                        return this._offset
                    },
                    set: function(t) {
                        this._offset.set(t),
                        this._materialInstance && (this._tile_offset.z = this._offset.x,
                        this._tile_offset.w = this._offset.y,
                        this._materialInstance.setProperty("mainTiling_Offset", this._tile_offset))
                    }
                }, {
                    key: "color",
                    get: function() {
                        return this._color
                    },
                    set: function(t) {
                        this._color = t,
                        this._model && this._model.addLineVertexData(this._positions, this._width, this._color)
                    }
                }]),
                e
            }(Ki),
            HI = Ei((UI = ZI).prototype, "_texture", [fI], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ei(UI.prototype, "texture", [gI, mI, yI], Object.getOwnPropertyDescriptor(UI.prototype, "texture"), UI.prototype),
            VI = Ei(UI.prototype, "_worldSpace", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Ei(UI.prototype, "worldSpace", [vI, SI], Object.getOwnPropertyDescriptor(UI.prototype, "worldSpace"), UI.prototype),
            WI = Ei(UI.prototype, "_positions", [TI], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            Ei(UI.prototype, "positions", [bI, EI, AI], Object.getOwnPropertyDescriptor(UI.prototype, "positions"), UI.prototype),
            XI = Ei(UI.prototype, "_width", [CI], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            Ei(UI.prototype, "width", [RI, BI, xI, DI], Object.getOwnPropertyDescriptor(UI.prototype, "width"), UI.prototype),
            jI = Ei(UI.prototype, "_tile", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Br(1,1)
                }
            }),
            Ei(UI.prototype, "tile", [wI, OI, PI], Object.getOwnPropertyDescriptor(UI.prototype, "tile"), UI.prototype),
            YI = Ei(UI.prototype, "_offset", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Br(0,0)
                }
            }),
            Ei(UI.prototype, "offset", [MI, II, LI], Object.getOwnPropertyDescriptor(UI.prototype, "offset"), UI.prototype),
            KI = Ei(UI.prototype, "_color", [FI], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new tL
                }
            }),
            Ei(UI.prototype, "color", [NI, kI, GI], Object.getOwnPropertyDescriptor(UI.prototype, "color"), UI.prototype),
            zI = UI)) || zI) || zI) || zI) || zI))
              , sL = function() {
                function t(t) {
                    this.particleSystem = void 0,
                    this.position = void 0,
                    this.velocity = void 0,
                    this.animatedVelocity = void 0,
                    this.ultimateVelocity = void 0,
                    this.angularVelocity = void 0,
                    this.axisOfRotation = void 0,
                    this.rotation = void 0,
                    this.startEuler = void 0,
                    this.startRotation = void 0,
                    this.startRotated = void 0,
                    this.deltaQuat = void 0,
                    this.deltaMat = void 0,
                    this.localMat = void 0,
                    this.startSize = void 0,
                    this.size = void 0,
                    this.startColor = void 0,
                    this.color = void 0,
                    this.randomSeed = void 0,
                    this.remainingLifetime = void 0,
                    this.loopCount = void 0,
                    this.lastLoop = void 0,
                    this.trailDelay = void 0,
                    this.startLifetime = void 0,
                    this.emitAccumulator0 = void 0,
                    this.emitAccumulator1 = void 0,
                    this.frameIndex = void 0,
                    this.startRow = void 0,
                    this.particleSystem = t,
                    this.position = new di(0,0,0),
                    this.velocity = new di(0,0,0),
                    this.animatedVelocity = new di(0,0,0),
                    this.ultimateVelocity = new di(0,0,0),
                    this.angularVelocity = new di(0,0,0),
                    this.axisOfRotation = new di(0,0,0),
                    this.rotation = new di(0,0,0),
                    this.startEuler = new di(0,0,0),
                    this.startRotation = new nr,
                    this.startRotated = !1,
                    this.deltaQuat = new nr,
                    this.deltaMat = new Ui,
                    this.localMat = new Ui,
                    this.startSize = new di(0,0,0),
                    this.size = new di(0,0,0),
                    this.startColor = Zi.WHITE.clone(),
                    this.color = Zi.WHITE.clone(),
                    this.randomSeed = 0,
                    this.remainingLifetime = 0,
                    this.loopCount = 0,
                    this.lastLoop = 0,
                    this.trailDelay = 0,
                    this.startLifetime = 0,
                    this.emitAccumulator0 = 0,
                    this.emitAccumulator1 = 0,
                    this.frameIndex = 0,
                    this.startRow = 0
                }
                return t.prototype.reset = function() {
                    this.rotation.set(0, 0, 0),
                    this.startEuler.set(0, 0, 0),
                    this.startRotation.set(0, 0, 0, 1),
                    this.startRotated = !1,
                    this.deltaQuat.set(0, 0, 0, 1),
                    this.deltaMat.identity(),
                    this.localMat.identity()
                }
                ,
                t
            }();
            sL.INDENTIFY_NEG_QUAT = 10,
            sL.R2D = 180 / Math.PI;
            var aL, oL, lL, hL, uL, cL, _L, dL, pL, fL, gL, mL, yL, vL, SL, TL, bL, EL, AL, CL, RL, BL, xL, DL, wL, OL, PL, ML, IL, LL, FL, NL, kL, GL, zL = "colorModule", UL = "rotationModule", HL = "sizeModule", VL = "textureModule", WL = ["sizeModule", "colorModule", "forceModule", "velocityModule", "limitModule", "rotationModule", "textureModule"], XL = ["_colorOverLifetimeModule", "_shapeModule", "_sizeOvertimeModule", "_velocityOvertimeModule", "_forceOvertimeModule", "_limitVelocityOvertimeModule", "_rotationOvertimeModule", "_textureAnimationModule", "_trailModule"], jL = function() {
                function t() {
                    this.target = null,
                    this.needUpdate = !1,
                    this.needAnimate = !0,
                    this.name = void 0
                }
                var e = t.prototype;
                return e.bindTarget = function(t) {
                    this.target = t
                }
                ,
                e.update = function() {}
                ,
                t
            }(), YL = Si({
                World: 0,
                Local: 1,
                Custom: 2
            }), KL = Si({
                Pause: 0,
                PauseAndCatchup: 1,
                AlwaysSimulate: 2
            }), ZL = Si({
                World: 0,
                Local: 1,
                View: 2
            }), qL = Si({
                Billboard: 0,
                StrecthedBillboard: 1,
                HorizontalBillboard: 2,
                VerticalBillboard: 3,
                Mesh: 4
            }), JL = Si({
                Box: 0,
                Circle: 1,
                Cone: 2,
                Sphere: 3,
                Hemisphere: 4
            }), QL = Si({
                Base: 0,
                Edge: 1,
                Shell: 2,
                Volume: 3
            }), $L = Si({
                Random: 0,
                Loop: 1,
                PingPong: 2
            }), tF = Si({
                Particles: 0
            }), eF = Si({
                Stretch: 0
            }), iF = (aL = Ti("cc.ColorOvertimeModule"),
            oL = Xr(),
            lL = Ci(tL),
            hL = Xr(),
            aL((pL = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "_enable", _L, Gi(e)),
                    Oi(e, "color", dL, Gi(e)),
                    e.name = zL,
                    e
                }
                return qe(e, t),
                e.prototype.animate = function(t) {
                    t.color.set(t.startColor),
                    t.color.multiply(this.color.evaluate(1 - t.remainingLifetime / t.startLifetime, Qn(t.randomSeed + 91041)))
                }
                ,
                Je(e, [{
                    key: "enable",
                    get: function() {
                        return this._enable
                    },
                    set: function(t) {
                        this._enable !== t && (this._enable = t,
                        this.target && this.target.enableModule(this.name, t, this))
                    }
                }]),
                e
            }(jL),
            _L = Ei((cL = pL).prototype, "_enable", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Ei(cL.prototype, "enable", [oL], Object.getOwnPropertyDescriptor(cL.prototype, "enable"), cL.prototype),
            dL = Ei(cL.prototype, "color", [lL, Pi, hL], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new tL
                }
            }),
            uL = cL)) || uL), rF = new di(0,0,-1);
            function nF(t, e, i, r) {
                return e !== t ? (t === YL.World || Ui.invert(i, i),
                Ui.getRotation(r, i),
                !0) : (nr.set(r, 0, 0, 0, 1),
                !1)
            }
            function sF(t, e) {
                Br.set(t, Math.cos(e), Math.sin(e))
            }
            function aF(t) {
                var e = ts(-1, 1)
                  , i = ts(0, 2 * Math.PI)
                  , r = Math.sqrt(1 - e * e)
                  , n = r * Math.cos(i)
                  , s = r * Math.sin(i);
                di.set(t, n, s, e)
            }
            function oF(t, e, i) {
                aF(t),
                di.multiplyScalar(t, t, e + (i - e) * $n())
            }
            function lF(t, e, i, r) {
                sF(t, r),
                t.z = 0,
                di.multiplyScalar(t, t, e + (i - e) * $n())
            }
            function hF(t) {
                for (var e = 0; e < t.length; e++) {
                    var i = e + es(0, t.length - e)
                      , r = t[i];
                    t[i] = t[e],
                    t[e] = r
                }
            }
            function uF() {
                var t = ts(-1, 1);
                return 0 === t && t++,
                is(t)
            }
            var cF, _F, dF, pF, fF, gF, mF, yF, vF, SF, TF, bF, EF, AF, CF, RF, BF, xF, DF, wF, OF, PF, MF, IF, LF, FF, NF, kF, GF, zF, UF, HF, VF, WF, XF, jF, YF, KF, ZF, qF, JF, QF, $F, tN, eN, iN, rN, nN, sN, aN, oN, lN, hN, uN, cN, _N, dN, pN, fN, gN, mN = 212165, yN = new di, vN = (fL = Ti("cc.ForceOvertimeModule"),
            gL = Xr(),
            mL = Ci(WM),
            yL = ji(),
            vL = Xr(),
            SL = Ni(),
            TL = Ci(WM),
            bL = ji(),
            EL = Xr(),
            AL = Ni(),
            CL = Ci(WM),
            RL = ji(),
            BL = Xr(),
            xL = Ni(),
            DL = Ci(YL),
            wL = Xr(),
            OL = Ni(),
            fL((GL = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_enable", IL, Gi(e)),
                    Oi(e, "x", LL, Gi(e)),
                    Oi(e, "y", FL, Gi(e)),
                    Oi(e, "z", NL, Gi(e)),
                    Oi(e, "space", kL, Gi(e)),
                    e.randomized = !1,
                    e.rotation = void 0,
                    e.needTransform = void 0,
                    e.name = "forceModule",
                    e.rotation = new nr,
                    e.needTransform = !1,
                    e.needUpdate = !0,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.update = function(t, e) {
                    this.needTransform = nF(t, this.space, e, this.rotation)
                }
                ,
                i.animate = function(t, e) {
                    var i = 1 - t.remainingLifetime / t.startLifetime
                      , r = di.set(yN, this.x.evaluate(i, Qn(t.randomSeed + mN)), this.y.evaluate(i, Qn(t.randomSeed + mN)), this.z.evaluate(i, Qn(t.randomSeed + mN)));
                    this.needTransform && di.transformQuat(r, r, this.rotation),
                    di.scaleAndAdd(t.velocity, t.velocity, r, e),
                    di.copy(t.ultimateVelocity, t.velocity)
                }
                ,
                Je(e, [{
                    key: "enable",
                    get: function() {
                        return this._enable
                    },
                    set: function(t) {
                        this._enable !== t && (this._enable = t,
                        this.target && this.target.enableModule(this.name, t, this))
                    }
                }]),
                e
            }(jL),
            IL = Ei((ML = GL).prototype, "_enable", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Ei(ML.prototype, "enable", [gL], Object.getOwnPropertyDescriptor(ML.prototype, "enable"), ML.prototype),
            LL = Ei(ML.prototype, "x", [mL, Pi, yL, vL, SL], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            FL = Ei(ML.prototype, "y", [TL, Pi, bL, EL, AL], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            NL = Ei(ML.prototype, "z", [CL, Pi, RL, BL, xL], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            kL = Ei(ML.prototype, "space", [DL, Pi, wL, OL], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return YL.Local
                }
            }),
            PL = ML)) || PL), SN = 23541, TN = new di, bN = new di, EN = (cF = Ti("cc.LimitVelocityOvertimeModule"),
            _F = Xr(),
            dF = Ci(WM),
            pF = ji(),
            fF = Xr(),
            gF = Ni(),
            mF = Ci(WM),
            yF = ji(),
            vF = Xr(),
            SF = Ni(),
            TF = Ci(WM),
            bF = ji(),
            EF = Xr(),
            AF = Ni(),
            CF = Ci(WM),
            RF = ji(),
            BF = Xr(),
            xF = Ni(),
            DF = Xr(),
            wF = Ni(),
            OF = Xr(),
            PF = Ni(),
            MF = Ci(YL),
            IF = Xr(),
            LF = Ni(),
            cF((jF = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_enable", kF, Gi(e)),
                    Oi(e, "limitX", GF, Gi(e)),
                    Oi(e, "limitY", zF, Gi(e)),
                    Oi(e, "limitZ", UF, Gi(e)),
                    Oi(e, "limit", HF, Gi(e)),
                    Oi(e, "dampen", VF, Gi(e)),
                    Oi(e, "separateAxes", WF, Gi(e)),
                    Oi(e, "space", XF, Gi(e)),
                    e.drag = null,
                    e.multiplyDragByParticleSize = !1,
                    e.multiplyDragByParticleVelocity = !1,
                    e.name = "limitModule",
                    e.rotation = void 0,
                    e.needTransform = void 0,
                    e.rotation = new nr,
                    e.needTransform = !1,
                    e.needUpdate = !0,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.update = function(t, e) {
                    this.needTransform = nF(t, this.space, e, this.rotation)
                }
                ,
                i.animate = function(t) {
                    var e = 1 - t.remainingLifetime / t.startLifetime
                      , i = TN;
                    this.separateAxes ? (di.set(bN, this.limitX.evaluate(e, Qn(t.randomSeed + SN)), this.limitY.evaluate(e, Qn(t.randomSeed + SN)), this.limitZ.evaluate(e, Qn(t.randomSeed + SN))),
                    this.needTransform && di.transformQuat(bN, bN, this.rotation),
                    di.set(i, AN(t.ultimateVelocity.x, bN.x, this.dampen), AN(t.ultimateVelocity.y, bN.y, this.dampen), AN(t.ultimateVelocity.z, bN.z, this.dampen))) : (di.normalize(i, t.ultimateVelocity),
                    di.multiplyScalar(i, i, AN(t.ultimateVelocity.length(), this.limit.evaluate(e, Qn(t.randomSeed + SN)), this.dampen))),
                    di.copy(t.ultimateVelocity, i)
                }
                ,
                Je(e, [{
                    key: "enable",
                    get: function() {
                        return this._enable
                    },
                    set: function(t) {
                        this._enable !== t && (this._enable = t,
                        this.target && this.target.enableModule(this.name, t, this))
                    }
                }]),
                e
            }(jL),
            kF = Ei((NF = jF).prototype, "_enable", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Ei(NF.prototype, "enable", [_F], Object.getOwnPropertyDescriptor(NF.prototype, "enable"), NF.prototype),
            GF = Ei(NF.prototype, "limitX", [dF, Pi, pF, fF, gF], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            zF = Ei(NF.prototype, "limitY", [mF, Pi, yF, vF, SF], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            UF = Ei(NF.prototype, "limitZ", [TF, Pi, bF, EF, AF], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            HF = Ei(NF.prototype, "limit", [CF, Pi, RF, BF, xF], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            VF = Ei(NF.prototype, "dampen", [Pi, DF, wF], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 3
                }
            }),
            WF = Ei(NF.prototype, "separateAxes", [Pi, OF, PF], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            XF = Ei(NF.prototype, "space", [MF, Pi, IF, LF], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return YL.Local
                }
            }),
            FF = NF)) || FF);
            function AN(t, e, i) {
                var r = Math.sign(t)
                  , n = Math.abs(t);
                return n > e && (n = xn(n, e, i)),
                n * r
            }
            var CN, RN, BN, xN, DN, wN, ON, PN, MN, IN, LN, FN, NN, kN, GN, zN, UN, HN, VN, WN, XN, jN, YN, KN, ZN, qN, JN, QN, $N, tk, ek, ik, rk, nk, sk, ak, ok, lk, hk, uk, ck, _k, dk, pk, fk, gk, mk, yk, vk, Sk, Tk, bk, Ek, Ak, Ck, Rk, Bk, xk, Dk, wk, Ok, Pk, Mk, Ik, Lk, Fk, Nk, kk, Gk, zk, Uk, Hk, Vk, Wk, Xk, jk, Yk, Kk, Zk, qk, Jk, Qk, $k, tG, eG, iG, rG, nG, sG, aG, oG, lG, hG, uG, cG, _G, dG, pG, fG, gG, mG, yG, vG, SG, TG, bG, EG, AG, CG, RG, BG, xG, DG, wG, OG, PG, MG, IG, LG, FG, NG, kG, GG, zG, UG, HG, VG, WG, XG, jG, YG, KG, ZG, qG, JG, QG, $G, tz, ez, iz, rz, nz, sz, az, oz, lz, hz, uz, cz, _z, dz, pz, fz, gz, mz, yz, vz, Sz, Tz, bz, Ez, Az, Cz, Rz, Bz, xz, Dz, wz, Oz, Pz, Mz, Iz, Lz, Fz, Nz, kz, Gz, zz, Uz, Hz, Vz, Wz, Xz, jz = (YF = Ti("cc.RotationOvertimeModule"),
            KF = Xr(),
            ZF = Xr(),
            qF = Ni(),
            JF = Ci(WM),
            QF = ji(),
            $F = Xr(),
            tN = Ni(),
            eN = Ci(WM),
            iN = ji(),
            rN = Xr(),
            nN = Ni(),
            sN = Ci(WM),
            aN = ji(),
            oN = Xr(),
            lN = Ni(),
            YF((gN = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "_enable", cN, Gi(e)),
                    Oi(e, "_separateAxes", _N, Gi(e)),
                    Oi(e, "x", dN, Gi(e)),
                    Oi(e, "y", pN, Gi(e)),
                    Oi(e, "z", fN, Gi(e)),
                    e.name = UL,
                    e._startMat = new Ui,
                    e._matRot = new Ui,
                    e._quatRot = new nr,
                    e._otherEuler = new di,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i._processRotation = function(t) {
                    var e = t.particleSystem.processor.getInfo().renderMode;
                    e !== qL.Mesh && e === qL.StrecthedBillboard && this._quatRot.set(0, 0, 0, 1),
                    nr.normalize(this._quatRot, this._quatRot),
                    this._quatRot.w < 0 && (this._quatRot.x += sL.INDENTIFY_NEG_QUAT)
                }
                ,
                i.animate = function(t, e) {
                    var i = 1 - t.remainingLifetime / t.startLifetime
                      , r = Qn(t.randomSeed + 125292)
                      , n = t.particleSystem.processor.getInfo().renderMode;
                    this._separateAxes && n !== qL.VerticalBillboard && n !== qL.HorizontalBillboard ? nr.fromEuler(t.deltaQuat, this.x.evaluate(i, r) * e * sL.R2D, this.y.evaluate(i, r) * e * sL.R2D, this.z.evaluate(i, r) * e * sL.R2D) : nr.fromEuler(t.deltaQuat, 0, 0, this.z.evaluate(i, r) * e * sL.R2D),
                    t.deltaMat = Ui.fromQuat(t.deltaMat, t.deltaQuat),
                    t.localMat = t.localMat.multiply(t.deltaMat),
                    t.startRotated || (n !== qL.Mesh && (n === qL.StrecthedBillboard ? t.startEuler.set(0, 0, 0) : n !== qL.Billboard && t.startEuler.set(0, 0, t.startEuler.z)),
                    nr.fromEuler(t.startRotation, t.startEuler.x * sL.R2D, t.startEuler.y * sL.R2D, t.startEuler.z * sL.R2D),
                    t.startRotated = !0),
                    this._startMat = Ui.fromQuat(this._startMat, t.startRotation),
                    this._matRot = this._startMat.multiply(t.localMat),
                    Ui.getRotation(this._quatRot, this._matRot),
                    this._processRotation(t, sL.R2D),
                    t.rotation.set(this._quatRot.x, this._quatRot.y, this._quatRot.z)
                }
                ,
                Je(e, [{
                    key: "enable",
                    get: function() {
                        return this._enable
                    },
                    set: function(t) {
                        this._enable !== t && (this._enable = t,
                        this.target && this.target.enableModule(this.name, t, this))
                    }
                }, {
                    key: "separateAxes",
                    get: function() {
                        return this._separateAxes
                    },
                    set: function(t) {
                        this._separateAxes = t
                    }
                }]),
                e
            }(jL),
            cN = Ei((uN = gN).prototype, "_enable", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Ei(uN.prototype, "enable", [KF], Object.getOwnPropertyDescriptor(uN.prototype, "enable"), uN.prototype),
            _N = Ei(uN.prototype, "_separateAxes", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Ei(uN.prototype, "separateAxes", [ZF, qF], Object.getOwnPropertyDescriptor(uN.prototype, "separateAxes"), uN.prototype),
            dN = Ei(uN.prototype, "x", [JF, Pi, QF, rs, $F, tN], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            pN = Ei(uN.prototype, "y", [eN, Pi, iN, rs, rN, nN], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            fN = Ei(uN.prototype, "z", [sN, Pi, aN, rs, oN, lN], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            hN = uN)) || hN), Yz = (CN = Ti("cc.SizeOvertimeModule"),
            RN = Xr(),
            BN = Xr(),
            xN = Ni(),
            DN = Ci(WM),
            wN = ji(),
            ON = Xr(),
            PN = Ni(),
            MN = Ci(WM),
            IN = ji(),
            LN = Xr(),
            FN = Ni(),
            NN = Ci(WM),
            kN = ji(),
            GN = Xr(),
            zN = Ni(),
            UN = Ci(WM),
            HN = ji(),
            VN = Xr(),
            WN = Ni(),
            CN(($N = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "_enable", YN, Gi(e)),
                    Oi(e, "separateAxes", KN, Gi(e)),
                    Oi(e, "size", ZN, Gi(e)),
                    Oi(e, "x", qN, Gi(e)),
                    Oi(e, "y", JN, Gi(e)),
                    Oi(e, "z", QN, Gi(e)),
                    e.name = HL,
                    e
                }
                return qe(e, t),
                e.prototype.animate = function(t) {
                    if (this.separateAxes) {
                        var e = 1 - t.remainingLifetime / t.startLifetime
                          , i = Qn(t.randomSeed + 39825);
                        t.size.x = t.startSize.x * this.x.evaluate(e, i),
                        t.size.y = t.startSize.y * this.y.evaluate(e, i),
                        t.size.z = t.startSize.z * this.z.evaluate(e, i)
                    } else
                        di.multiplyScalar(t.size, t.startSize, this.size.evaluate(1 - t.remainingLifetime / t.startLifetime, Qn(t.randomSeed + 39825)))
                }
                ,
                Je(e, [{
                    key: "enable",
                    get: function() {
                        return this._enable
                    },
                    set: function(t) {
                        this._enable !== t && (this._enable = t,
                        this.target && this.target.enableModule(this.name, t, this))
                    }
                }]),
                e
            }(jL),
            YN = Ei((jN = $N).prototype, "_enable", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Ei(jN.prototype, "enable", [RN], Object.getOwnPropertyDescriptor(jN.prototype, "enable"), jN.prototype),
            KN = Ei(jN.prototype, "separateAxes", [Pi, BN, xN], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            ZN = Ei(jN.prototype, "size", [DN, Pi, wN, ON, PN], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            qN = Ei(jN.prototype, "x", [MN, Pi, IN, LN, FN], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            JN = Ei(jN.prototype, "y", [NN, Pi, kN, GN, zN], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            QN = Ei(jN.prototype, "z", [UN, Pi, HN, VN, WN], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            XN = jN)) || XN), Kz = 90794, Zz = Si({
                Grid: 0
            }), qz = Si({
                WholeSheet: 0,
                SingleRow: 1
            }), Jz = (tk = Ti("cc.TextureAnimationModule"),
            ek = bi("numTilesX"),
            ik = bi("numTilesY"),
            rk = Xr(),
            nk = Ci(Zz),
            sk = Ci(Zz),
            ak = Xr(),
            ok = Ni(),
            lk = Xr(),
            hk = Ni(),
            uk = Xr(),
            ck = Ni(),
            _k = Ci(qz),
            dk = Xr(),
            pk = Ni(),
            fk = Ci(WM),
            gk = ji(),
            mk = Xr(),
            yk = Ni(),
            vk = Ci(WM),
            Sk = ji(),
            Tk = Xr(),
            bk = Ni(),
            Ek = Xr(),
            Ak = Ni(),
            Ck = Xr(),
            Rk = Ni(),
            Bk = Xr(),
            xk = Ni(),
            tk((Wk = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "_enable", Ok, Gi(e)),
                    Oi(e, "_numTilesX", Pk, Gi(e)),
                    Oi(e, "_numTilesY", Mk, Gi(e)),
                    Oi(e, "_mode", Ik, Gi(e)),
                    Oi(e, "animation", Lk, Gi(e)),
                    Oi(e, "frameOverTime", Fk, Gi(e)),
                    Oi(e, "startFrame", Nk, Gi(e)),
                    Oi(e, "cycleCount", kk, Gi(e)),
                    Oi(e, "_flipU", Gk, Gi(e)),
                    Oi(e, "_flipV", zk, Gi(e)),
                    Oi(e, "_uvChannelMask", Uk, Gi(e)),
                    Oi(e, "randomRow", Hk, Gi(e)),
                    Oi(e, "rowIndex", Vk, Gi(e)),
                    e.name = VL,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.init = function(t) {
                    t.startRow = Math.floor(Math.random() * this.numTilesY)
                }
                ,
                i.animate = function(t) {
                    var e = 1 - t.remainingLifetime / t.startLifetime
                      , i = this.startFrame.evaluate(e, Qn(t.randomSeed + Kz)) / (this.numTilesX * this.numTilesY);
                    if (this.animation === qz.WholeSheet)
                        t.frameIndex = Jn(this.cycleCount * (this.frameOverTime.evaluate(e, Qn(t.randomSeed + Kz)) + i), 1);
                    else if (this.animation === qz.SingleRow) {
                        var r = 1 / this.numTilesY;
                        if (this.randomRow) {
                            var n = Jn(this.cycleCount * (this.frameOverTime.evaluate(e, Qn(t.randomSeed + Kz)) + i), 1)
                              , s = t.startRow * r
                              , a = s + r;
                            t.frameIndex = xn(s, a, n)
                        } else {
                            var o = this.rowIndex * r
                              , l = o + r;
                            t.frameIndex = xn(o, l, Jn(this.cycleCount * (this.frameOverTime.evaluate(e, Qn(t.randomSeed + Kz)) + i), 1))
                        }
                    }
                }
                ,
                Je(e, [{
                    key: "enable",
                    get: function() {
                        return this._enable
                    },
                    set: function(t) {
                        this._enable !== t && (this._enable = t,
                        this.target && (this.target.updateMaterialParams(),
                        this.target.enableModule(this.name, t, this)))
                    }
                }, {
                    key: "mode",
                    get: function() {
                        return this._mode
                    },
                    set: function(t) {
                        t !== Zz.Grid && console.error("particle texture animation's sprites is not supported!")
                    }
                }, {
                    key: "numTilesX",
                    get: function() {
                        return this._numTilesX
                    },
                    set: function(t) {
                        this._numTilesX !== t && (this._numTilesX = t,
                        this.target.updateMaterialParams())
                    }
                }, {
                    key: "numTilesY",
                    get: function() {
                        return this._numTilesY
                    },
                    set: function(t) {
                        this._numTilesY !== t && (this._numTilesY = t,
                        this.target.updateMaterialParams())
                    }
                }, {
                    key: "flipU",
                    get: function() {
                        return this._flipU
                    },
                    set: function() {
                        console.error("particle texture animation's flipU is not supported!")
                    }
                }, {
                    key: "flipV",
                    get: function() {
                        return this._flipV
                    },
                    set: function() {
                        console.error("particle texture animation's flipV is not supported!")
                    }
                }, {
                    key: "uvChannelMask",
                    get: function() {
                        return this._uvChannelMask
                    },
                    set: function() {
                        console.error("particle texture animation's uvChannelMask is not supported!")
                    }
                }]),
                e
            }(jL),
            Ok = Ei((wk = Wk).prototype, "_enable", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Pk = Ei(wk.prototype, "_numTilesX", [ek], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Mk = Ei(wk.prototype, "_numTilesY", [ik], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Ei(wk.prototype, "enable", [rk], Object.getOwnPropertyDescriptor(wk.prototype, "enable"), wk.prototype),
            Ik = Ei(wk.prototype, "_mode", [nk], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return Zz.Grid
                }
            }),
            Ei(wk.prototype, "mode", [sk, ak, ok], Object.getOwnPropertyDescriptor(wk.prototype, "mode"), wk.prototype),
            Ei(wk.prototype, "numTilesX", [lk, hk], Object.getOwnPropertyDescriptor(wk.prototype, "numTilesX"), wk.prototype),
            Ei(wk.prototype, "numTilesY", [uk, ck], Object.getOwnPropertyDescriptor(wk.prototype, "numTilesY"), wk.prototype),
            Lk = Ei(wk.prototype, "animation", [_k, Pi, dk, pk], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return qz.WholeSheet
                }
            }),
            Fk = Ei(wk.prototype, "frameOverTime", [fk, Pi, gk, mk, yk], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            Nk = Ei(wk.prototype, "startFrame", [vk, Pi, Sk, Tk, bk], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            kk = Ei(wk.prototype, "cycleCount", [Pi, Ek, Ak], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Gk = Ei(wk.prototype, "_flipU", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            zk = Ei(wk.prototype, "_flipV", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Uk = Ei(wk.prototype, "_uvChannelMask", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return -1
                }
            }),
            Hk = Ei(wk.prototype, "randomRow", [Pi, Ck, Rk], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Vk = Ei(wk.prototype, "rowIndex", [Pi, Bk, xk], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Dk = wk)) || Dk), Qz = 197866, $z = new di, tU = (Xk = Ti("cc.VelocityOvertimeModule"),
            jk = Xr(),
            Yk = Ci(WM),
            Kk = ji(),
            Zk = Xr(),
            qk = Ni(),
            Jk = Ci(WM),
            Qk = ji(),
            $k = Xr(),
            tG = Ni(),
            eG = Ci(WM),
            iG = ji(),
            rG = Xr(),
            nG = Ni(),
            sG = Ci(WM),
            aG = ji(),
            oG = Xr(),
            lG = Ni(),
            hG = Ci(YL),
            uG = Xr(),
            cG = Ni(),
            Xk((SG = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_enable", pG, Gi(e)),
                    Oi(e, "x", fG, Gi(e)),
                    Oi(e, "y", gG, Gi(e)),
                    Oi(e, "z", mG, Gi(e)),
                    Oi(e, "speedModifier", yG, Gi(e)),
                    Oi(e, "space", vG, Gi(e)),
                    e.rotation = void 0,
                    e.needTransform = void 0,
                    e.name = "velocityModule",
                    e.rotation = new nr,
                    e.speedModifier.constant = 1,
                    e.needTransform = !1,
                    e.needUpdate = !0,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.update = function(t, e) {
                    this.needTransform = nF(t, this.space, e, this.rotation)
                }
                ,
                i.animate = function(t) {
                    var e = 1 - t.remainingLifetime / t.startLifetime
                      , i = di.set($z, this.x.evaluate(e, Qn(t.randomSeed ^ Qz)), this.y.evaluate(e, Qn(156497 ^ t.randomSeed)), this.z.evaluate(e, Qn(984136 ^ t.randomSeed)));
                    this.needTransform && di.transformQuat(i, i, this.rotation),
                    di.add(t.animatedVelocity, t.animatedVelocity, i),
                    di.add(t.ultimateVelocity, t.velocity, t.animatedVelocity),
                    di.multiplyScalar(t.ultimateVelocity, t.ultimateVelocity, this.speedModifier.evaluate(1 - t.remainingLifetime / t.startLifetime, Qn(t.randomSeed + Qz)))
                }
                ,
                Je(e, [{
                    key: "enable",
                    get: function() {
                        return this._enable
                    },
                    set: function(t) {
                        this._enable !== t && (this._enable = t,
                        this.target && this.target.enableModule(this.name, t, this))
                    }
                }]),
                e
            }(jL),
            pG = Ei((dG = SG).prototype, "_enable", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Ei(dG.prototype, "enable", [jk], Object.getOwnPropertyDescriptor(dG.prototype, "enable"), dG.prototype),
            fG = Ei(dG.prototype, "x", [Yk, Pi, Kk, Zk, qk], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            gG = Ei(dG.prototype, "y", [Jk, Pi, Qk, $k, tG], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            mG = Ei(dG.prototype, "z", [eG, Pi, iG, rG, nG], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            yG = Ei(dG.prototype, "speedModifier", [sG, Pi, aG, oG, lG], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            vG = Ei(dG.prototype, "space", [hG, Pi, uG, cG], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return YL.Local
                }
            }),
            _G = dG)) || _G), eU = t("Burst", (TG = Ti("cc.Burst"),
            bG = Ci(WM),
            EG = ji(),
            TG((wG = function() {
                function t() {
                    Oi(this, "_time", RG, this),
                    Oi(this, "_repeatCount", BG, this),
                    Oi(this, "repeatInterval", xG, this),
                    Oi(this, "count", DG, this),
                    this._remainingCount = void 0,
                    this._curTime = void 0,
                    this._remainingCount = 0,
                    this._curTime = 0
                }
                var e = t.prototype;
                return e.update = function(t, e) {
                    if (0 === this._remainingCount && (this._remainingCount = this._repeatCount,
                    this._curTime = this._time),
                    this._remainingCount > 0) {
                        var i = Jn(t._time - t.startDelay.evaluate(0, 1), t.duration) - e;
                        i = i > 0 ? i : 0;
                        var r = Jn(t.time - t.startDelay.evaluate(0, 1), t.duration);
                        this._curTime >= i && this._curTime < r && (t.emit(this.count.evaluate(this._curTime / t.duration, 1), e - (r - this._curTime)),
                        this._curTime += this.repeatInterval,
                        --this._remainingCount)
                    }
                }
                ,
                e.getMaxCount = function(t) {
                    return this.count.getMax() * Math.min(Math.ceil(t.duration / this.repeatInterval), this.repeatCount)
                }
                ,
                Je(t, [{
                    key: "time",
                    get: function() {
                        return this._time
                    },
                    set: function(t) {
                        this._time = t,
                        this._curTime = t
                    }
                }, {
                    key: "repeatCount",
                    get: function() {
                        return this._repeatCount
                    },
                    set: function(t) {
                        this._repeatCount = t,
                        this._remainingCount = t
                    }
                }]),
                t
            }(),
            RG = Ei((CG = wG).prototype, "_time", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Ei(CG.prototype, "time", [Ai], Object.getOwnPropertyDescriptor(CG.prototype, "time"), CG.prototype),
            BG = Ei(CG.prototype, "_repeatCount", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            Ei(CG.prototype, "repeatCount", [Ai], Object.getOwnPropertyDescriptor(CG.prototype, "repeatCount"), CG.prototype),
            xG = Ei(CG.prototype, "repeatInterval", [Pi, Ai], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            DG = Ei(CG.prototype, "count", [bG, Pi, EG], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            AG = CG)) || AG)), iU = new di(0,0,0), rU = [], nU = new di(.5,.5,.5), sU = (OG = Ti("cc.ShapeModule"),
            PG = Xr(),
            MG = Ni(),
            IG = Xr(),
            LG = Ni(),
            FG = Xr(),
            NG = Ni(),
            kG = Xr(),
            GG = Ni(),
            zG = Xr(),
            UG = Ni(),
            HG = Xr(),
            VG = Ci(JL),
            WG = bi("shapeType"),
            XG = Xr(),
            jG = Ci(JL),
            YG = Ni(),
            KG = Ci(QL),
            ZG = Xr(),
            qG = Ni(),
            JG = Xr(),
            QG = Ni(),
            $G = Xr(),
            tz = Ni(),
            ez = Xr(),
            iz = Ni(),
            rz = Xr(),
            nz = Ni(),
            sz = Xr(),
            az = Ni(),
            oz = Xr(),
            lz = Ni(),
            hz = Ci($L),
            uz = Xr(),
            cz = Ni(),
            _z = ki(),
            dz = Xr(),
            pz = Ni(),
            fz = Ci(WM),
            gz = ki(),
            mz = ji(),
            yz = Xr(),
            vz = Ni(),
            Sz = Xr(),
            Tz = Ni(),
            bz = Xr(),
            Ez = Ni(),
            OG((Xz = function() {
                function t() {
                    Oi(this, "_enable", Rz, this),
                    Oi(this, "_shapeType", Bz, this),
                    Oi(this, "emitFrom", xz, this),
                    Oi(this, "alignToDirection", Dz, this),
                    Oi(this, "randomDirectionAmount", wz, this),
                    Oi(this, "sphericalDirectionAmount", Oz, this),
                    Oi(this, "randomPositionAmount", Pz, this),
                    Oi(this, "radius", Mz, this),
                    Oi(this, "radiusThickness", Iz, this),
                    Oi(this, "arcMode", Lz, this),
                    Oi(this, "arcSpread", Fz, this),
                    Oi(this, "arcSpeed", Nz, this),
                    Oi(this, "length", kz, this),
                    Oi(this, "boxThickness", Gz, this),
                    Oi(this, "_position", zz, this),
                    Oi(this, "_rotation", Uz, this),
                    Oi(this, "_scale", Hz, this),
                    Oi(this, "_arc", Vz, this),
                    Oi(this, "_angle", Wz, this),
                    this.mat = void 0,
                    this.quat = void 0,
                    this.particleSystem = void 0,
                    this.lastTime = void 0,
                    this.totalAngle = void 0,
                    this.mat = new Ui,
                    this.quat = new nr,
                    this.particleSystem = null,
                    this.lastTime = 0,
                    this.totalAngle = 0
                }
                var e = t.prototype;
                return e.onInit = function(t) {
                    this.particleSystem = t,
                    this.constructMat(),
                    this.lastTime = this.particleSystem._time
                }
                ,
                e.emit = function(t) {
                    switch (this.shapeType) {
                    case JL.Box:
                        !function(t, e, i, r) {
                            switch (t) {
                            case QL.Volume:
                                n = i,
                                s = nU,
                                di.set(n, ts(-s.x, s.x), ts(-s.y, s.y), ts(-s.z, s.z));
                                break;
                            case QL.Shell:
                                rU.splice(0, rU.length),
                                rU.push(ts(-.5, .5)),
                                rU.push(ts(-.5, .5)),
                                rU.push(.5 * uF()),
                                hF(rU),
                                aU(rU, e),
                                di.set(i, rU[0], rU[1], rU[2]);
                                break;
                            case QL.Edge:
                                rU.splice(0, rU.length),
                                rU.push(ts(-.5, .5)),
                                rU.push(.5 * uF()),
                                rU.push(.5 * uF()),
                                hF(rU),
                                aU(rU, e),
                                di.set(i, rU[0], rU[1], rU[2]);
                                break;
                            default:
                                console.warn(t + " is not supported for box emitter.")
                            }
                            var n, s;
                            di.copy(r, rF)
                        }(this.emitFrom, this.boxThickness, t.position, t.velocity);
                        break;
                    case JL.Circle:
                        e = this.radius,
                        i = this.radiusThickness,
                        r = this.generateArcAngle(),
                        n = t.position,
                        s = t.velocity,
                        lF(n, e * (1 - i), e, r),
                        di.normalize(s, n);
                        break;
                    case JL.Cone:
                        !function(t, e, i, r, n, s, a, o) {
                            switch (t) {
                            case QL.Base:
                                lF(a, e * (1 - i), e, r),
                                Br.multiplyScalar(o, a, Math.sin(n)),
                                o.z = -Math.cos(n) * e,
                                di.normalize(o, o),
                                a.z = 0;
                                break;
                            case QL.Shell:
                                sF(a, r),
                                Br.multiplyScalar(o, a, Math.sin(n)),
                                o.z = -Math.cos(n),
                                di.normalize(o, o),
                                Br.multiplyScalar(a, a, e),
                                a.z = 0;
                                break;
                            case QL.Volume:
                                lF(a, e * (1 - i), e, r),
                                Br.multiplyScalar(o, a, Math.sin(n)),
                                o.z = -Math.cos(n) * e,
                                di.normalize(o, o),
                                a.z = 0,
                                di.add(a, a, di.multiplyScalar(iU, o, s * $n() / -o.z));
                                break;
                            default:
                                console.warn(t + " is not supported for cone emitter.")
                            }
                        }(this.emitFrom, this.radius, this.radiusThickness, this.generateArcAngle(), this._angle, this.length, t.position, t.velocity);
                        break;
                    case JL.Sphere:
                        !function(t, e, i, r, n) {
                            switch (t) {
                            case QL.Volume:
                                oF(r, e * (1 - i), e),
                                di.normalize(n, r);
                                break;
                            case QL.Shell:
                                aF(r),
                                di.multiplyScalar(r, r, e),
                                di.normalize(n, r);
                                break;
                            default:
                                console.warn(t + " is not supported for sphere emitter.")
                            }
                        }(this.emitFrom, this.radius, this.radiusThickness, t.position, t.velocity);
                        break;
                    case JL.Hemisphere:
                        !function(t, e, i, r, n) {
                            switch (t) {
                            case QL.Volume:
                                oF(r, e * (1 - i), e),
                                r.z > 0 && (r.z *= -1),
                                di.normalize(n, r);
                                break;
                            case QL.Shell:
                                aF(r),
                                di.multiplyScalar(r, r, e),
                                r.z > 0 && (r.z *= -1),
                                di.normalize(n, r);
                                break;
                            default:
                                console.warn(t + " is not supported for hemisphere emitter.")
                            }
                        }(this.emitFrom, this.radius, this.radiusThickness, t.position, t.velocity);
                        break;
                    default:
                        console.warn(this.shapeType + " shapeType is not supported by ShapeModule.")
                    }
                    var e, i, r, n, s;
                    if (this.randomPositionAmount > 0 && (t.position.x += ts(-this.randomPositionAmount, this.randomPositionAmount),
                    t.position.y += ts(-this.randomPositionAmount, this.randomPositionAmount),
                    t.position.z += ts(-this.randomPositionAmount, this.randomPositionAmount)),
                    di.transformQuat(t.velocity, t.velocity, this.quat),
                    di.transformMat4(t.position, t.position, this.mat),
                    this.sphericalDirectionAmount > 0) {
                        var a = di.normalize(iU, t.position);
                        di.lerp(t.velocity, t.velocity, a, this.sphericalDirectionAmount)
                    }
                    this.lastTime = this.particleSystem._time
                }
                ,
                e.constructMat = function() {
                    nr.fromEuler(this.quat, this._rotation.x, this._rotation.y, this._rotation.z),
                    Ui.fromRTS(this.mat, this.quat, this._position, this._scale)
                }
                ,
                e.generateArcAngle = function() {
                    if (this.arcMode === $L.Random)
                        return ts(0, this._arc);
                    var t = this.totalAngle + 2 * Math.PI * this.arcSpeed.evaluate(this.particleSystem._time, 1) * (this.particleSystem._time - this.lastTime);
                    switch (this.totalAngle = t,
                    0 !== this.arcSpread && (t = Math.floor(t / (this._arc * this.arcSpread)) * this._arc * this.arcSpread),
                    this.arcMode) {
                    case $L.Loop:
                        return Jn(t, this._arc);
                    case $L.PingPong:
                        return ns(t, this._arc);
                    default:
                        return Jn(t, this._arc)
                    }
                }
                ,
                Je(t, [{
                    key: "position",
                    get: function() {
                        return this._position
                    },
                    set: function(t) {
                        this._position = t,
                        this.constructMat()
                    }
                }, {
                    key: "rotation",
                    get: function() {
                        return this._rotation
                    },
                    set: function(t) {
                        this._rotation = t,
                        this.constructMat()
                    }
                }, {
                    key: "scale",
                    get: function() {
                        return this._scale
                    },
                    set: function(t) {
                        this._scale = t,
                        this.constructMat()
                    }
                }, {
                    key: "arc",
                    get: function() {
                        return jn(this._arc)
                    },
                    set: function(t) {
                        this._arc = ir(t)
                    }
                }, {
                    key: "angle",
                    get: function() {
                        return Math.round(100 * jn(this._angle)) / 100
                    },
                    set: function(t) {
                        this._angle = ir(t)
                    }
                }, {
                    key: "enable",
                    get: function() {
                        return this._enable
                    },
                    set: function(t) {
                        this._enable = t
                    }
                }, {
                    key: "shapeType",
                    get: function() {
                        return this._shapeType
                    },
                    set: function(t) {
                        switch (this._shapeType = t,
                        this._shapeType) {
                        case JL.Box:
                            this.emitFrom === QL.Base && (this.emitFrom = QL.Volume);
                            break;
                        case JL.Cone:
                            this.emitFrom === QL.Edge && (this.emitFrom = QL.Base);
                            break;
                        case JL.Sphere:
                        case JL.Hemisphere:
                            this.emitFrom !== QL.Base && this.emitFrom !== QL.Edge || (this.emitFrom = QL.Volume)
                        }
                    }
                }]),
                t
            }(),
            Ei((Cz = Xz).prototype, "position", [PG, MG], Object.getOwnPropertyDescriptor(Cz.prototype, "position"), Cz.prototype),
            Ei(Cz.prototype, "rotation", [IG, LG], Object.getOwnPropertyDescriptor(Cz.prototype, "rotation"), Cz.prototype),
            Ei(Cz.prototype, "scale", [FG, NG], Object.getOwnPropertyDescriptor(Cz.prototype, "scale"), Cz.prototype),
            Ei(Cz.prototype, "arc", [kG, GG], Object.getOwnPropertyDescriptor(Cz.prototype, "arc"), Cz.prototype),
            Ei(Cz.prototype, "angle", [zG, UG], Object.getOwnPropertyDescriptor(Cz.prototype, "angle"), Cz.prototype),
            Rz = Ei(Cz.prototype, "_enable", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Ei(Cz.prototype, "enable", [HG], Object.getOwnPropertyDescriptor(Cz.prototype, "enable"), Cz.prototype),
            Bz = Ei(Cz.prototype, "_shapeType", [VG, WG, XG], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return JL.Cone
                }
            }),
            Ei(Cz.prototype, "shapeType", [jG, YG], Object.getOwnPropertyDescriptor(Cz.prototype, "shapeType"), Cz.prototype),
            xz = Ei(Cz.prototype, "emitFrom", [KG, Pi, ZG, qG], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return QL.Volume
                }
            }),
            Dz = Ei(Cz.prototype, "alignToDirection", [Pi, JG, QG], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            wz = Ei(Cz.prototype, "randomDirectionAmount", [Pi, $G, tz], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Oz = Ei(Cz.prototype, "sphericalDirectionAmount", [Pi, ez, iz], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Pz = Ei(Cz.prototype, "randomPositionAmount", [Pi, rz, nz], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Mz = Ei(Cz.prototype, "radius", [Pi, sz, az], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            Iz = Ei(Cz.prototype, "radiusThickness", [Pi, oz, lz], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            Lz = Ei(Cz.prototype, "arcMode", [hz, Pi, uz, cz], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return $L.Random
                }
            }),
            Fz = Ei(Cz.prototype, "arcSpread", [_z, Pi, dz, pz], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Nz = Ei(Cz.prototype, "arcSpeed", [fz, gz, mz, Pi, yz, vz], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            kz = Ei(Cz.prototype, "length", [Pi, Sz, Tz], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 5
                }
            }),
            Gz = Ei(Cz.prototype, "boxThickness", [Pi, bz, Ez], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new di(0,0,0)
                }
            }),
            zz = Ei(Cz.prototype, "_position", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new di(0,0,0)
                }
            }),
            Uz = Ei(Cz.prototype, "_rotation", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new di(0,0,0)
                }
            }),
            Hz = Ei(Cz.prototype, "_scale", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new di(1,1,1)
                }
            }),
            Vz = Ei(Cz.prototype, "_arc", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return ir(360)
                }
            }),
            Wz = Ei(Cz.prototype, "_angle", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return ir(25)
                }
            }),
            Az = Cz)) || Az);
            function aU(t, e) {
                e.x > 0 && (t[0] += .5 * ts(-e.x, e.x),
                t[0] = nn(t[0], -.5, .5)),
                e.y > 0 && (t[1] += .5 * ts(-e.y, e.y),
                t[1] = nn(t[1], -.5, .5)),
                e.z > 0 && (t[2] += .5 * ts(-e.z, e.z),
                t[2] = nn(t[2], -.5, .5))
            }
            var oU, lU, hU, uU, cU, _U, dU, pU, fU, gU, mU, yU, vU, SU, TU, bU, EU, AU, CU, RU, BU, xU, DU, wU, OU, PU, MU, IU, LU, FU, NU, kU, GU, zU, UU = [0, 0, 1, 0, 0, 1, 1, 1], HU = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this) || this)._capacity = void 0,
                    e._vertAttrs = void 0,
                    e._vertSize = void 0,
                    e._vBuffer = void 0,
                    e._vertAttrsFloatCount = void 0,
                    e._vdataF32 = void 0,
                    e._vdataUint32 = void 0,
                    e._iaInfo = void 0,
                    e._iaInfoBuffer = void 0,
                    e._subMeshData = void 0,
                    e._mesh = void 0,
                    e._vertCount = 0,
                    e._indexCount = 0,
                    e._startTimeOffset = 0,
                    e._lifeTimeOffset = 0,
                    e._material = null,
                    e.type = fr.PARTICLE_BATCH,
                    e._capacity = 0,
                    e._vertAttrs = null,
                    e._vertSize = 0,
                    e._vBuffer = null,
                    e._vertAttrsFloatCount = 0,
                    e._vdataF32 = null,
                    e._vdataUint32 = null,
                    e._iaInfo = new dt([new ct]),
                    e._iaInfoBuffer = e._device.createBuffer(new ht(f.INDIRECT,y.HOST | y.DEVICE,ee,ee)),
                    e._subMeshData = null,
                    e._mesh = null,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.setCapacity = function(t) {
                    var e = this._capacity !== t;
                    this._capacity = t,
                    this._subMeshData && e && this.rebuild()
                }
                ,
                i.setVertexAttributes = function(t, e) {
                    if (this._mesh !== t || this._vertAttrs !== e) {
                        this._mesh = t,
                        this._vertAttrs = e,
                        this._vertSize = 0;
                        for (var i, r = ui(this._vertAttrs); !(i = r()).done; ) {
                            var n = i.value;
                            n.offset = this._vertSize,
                            this._vertSize += Jt[n.format].size
                        }
                        this._vertAttrsFloatCount = this._vertSize / 4,
                        this.rebuild()
                    }
                }
                ,
                i.createSubMeshData = function() {
                    this.destroySubMeshData(),
                    this._vertCount = 4,
                    this._indexCount = 6,
                    this._mesh && (this._vertCount = this._mesh.struct.vertexBundles[this._mesh.struct.primitives[0].vertexBundelIndices[0]].view.count,
                    this._indexCount = this._mesh.struct.primitives[0].indexView.count);
                    var t = this._device.createBuffer(new ht(f.VERTEX | f.TRANSFER_DST,y.HOST | y.DEVICE,this._vertSize * this._capacity * this._vertCount,this._vertSize))
                      , e = new ArrayBuffer(this._vertSize * this._capacity * this._vertCount);
                    if (this._mesh) {
                        var i = this._vertAttrs[this._vertAttrs.findIndex((function(t) {
                            return t.name === qt.ATTR_TEX_COORD
                        }
                        ))].offset;
                        this._mesh.copyAttribute(0, qt.ATTR_TEX_COORD, e, this._vertSize, i);
                        var r = this._vertAttrs.findIndex((function(t) {
                            return t.name === qt.ATTR_TEX_COORD3
                        }
                        ));
                        if (i = this._vertAttrs[r++].offset,
                        this._mesh.copyAttribute(0, qt.ATTR_POSITION, e, this._vertSize, i),
                        i = this._vertAttrs[r++].offset,
                        this._mesh.copyAttribute(0, qt.ATTR_NORMAL, e, this._vertSize, i),
                        i = this._vertAttrs[r++].offset,
                        !this._mesh.copyAttribute(0, qt.ATTR_COLOR, e, this._vertSize, i))
                            for (var n = new Uint32Array(e), s = 0; s < this._vertCount; ++s)
                                n[s * this._vertAttrsFloatCount + i / 4] = Zi.WHITE._val;
                        for (var a = new Float32Array(e), o = 1; o < this._capacity; o++)
                            a.copyWithin(o * this._vertSize * this._vertCount / 4, 0, this._vertSize * this._vertCount / 4)
                    }
                    t.update(e);
                    var l = new Uint16Array(this._capacity * this._indexCount);
                    if (this._mesh) {
                        this._mesh.copyIndices(0, l);
                        for (var h = 1; h < this._capacity; h++)
                            for (var u = 0; u < this._indexCount; u++)
                                l[h * this._indexCount + u] = l[u] + h * this._vertCount
                    } else
                        for (var c = 0, _ = 0; _ < this._capacity; ++_) {
                            var d = 4 * _;
                            l[c++] = d,
                            l[c++] = d + 1,
                            l[c++] = d + 2,
                            l[c++] = d + 3,
                            l[c++] = d + 2,
                            l[c++] = d + 1
                        }
                    var p = this._device.createBuffer(new ht(f.INDEX | f.TRANSFER_DST,y.DEVICE,this._capacity * this._indexCount * Uint16Array.BYTES_PER_ELEMENT,Uint16Array.BYTES_PER_ELEMENT));
                    return p.update(l),
                    this._iaInfo.drawInfos[0].vertexCount = this._capacity * this._vertCount,
                    this._iaInfo.drawInfos[0].indexCount = this._capacity * this._indexCount,
                    this._iaInfoBuffer || (this._iaInfoBuffer = this._device.createBuffer(new ht(f.INDIRECT,y.HOST | y.DEVICE,ee,ee))),
                    this._iaInfoBuffer.update(this._iaInfo),
                    this._subMeshData = new $r([t],this._vertAttrs,N.TRIANGLE_LIST,p,this._iaInfoBuffer),
                    this.initSubModel(0, this._subMeshData, this._material),
                    e
                }
                ,
                i.updateMaterial = function(t) {
                    this._material = t,
                    this.setSubModelMaterial(0, t)
                }
                ,
                i.addParticleVertexData = function(t, e) {
                    if (this._mesh)
                        for (var i = 0; i < this._vertCount; i++) {
                            var r = (t * this._vertCount + i) * this._vertAttrsFloatCount;
                            this._vdataF32[r++] = e[0].x,
                            this._vdataF32[r++] = e[0].y,
                            this._vdataF32[r++] = e[0].z,
                            r += 2,
                            this._vdataF32[r++] = e[1].z,
                            this._vdataF32[r++] = e[2].x,
                            this._vdataF32[r++] = e[2].y,
                            this._vdataF32[r++] = e[2].z,
                            this._vdataF32[r++] = e[3].x,
                            this._vdataF32[r++] = e[3].y,
                            this._vdataF32[r++] = e[3].z,
                            this._vdataUint32[r++] = e[4]
                        }
                    else {
                        var n = t * this._vertAttrsFloatCount;
                        this._vdataF32[n++] = e[0].x,
                        this._vdataF32[n++] = e[0].y,
                        this._vdataF32[n++] = e[0].z,
                        this._vdataF32[n++] = e[1].x,
                        this._vdataF32[n++] = e[1].y,
                        this._vdataF32[n++] = e[1].z,
                        this._vdataF32[n++] = e[2].x,
                        this._vdataF32[n++] = e[2].y,
                        this._vdataF32[n++] = e[2].z,
                        this._vdataF32[n++] = e[3].x,
                        this._vdataF32[n++] = e[3].y,
                        this._vdataF32[n++] = e[3].z,
                        this._vdataUint32[n++] = e[4],
                        e[5] && (this._vdataF32[n++] = e[5].x,
                        this._vdataF32[n++] = e[5].y,
                        this._vdataF32[n++] = e[5].z)
                    }
                }
                ,
                i.addGPUParticleVertexData = function(t, e, i) {
                    for (var r = e * this._vertAttrsFloatCount * this._vertCount, n = 0; n < this._vertCount; n++) {
                        var s = r;
                        this._vdataF32[s++] = t.position.x,
                        this._vdataF32[s++] = t.position.y,
                        this._vdataF32[s++] = t.position.z,
                        this._vdataF32[s++] = i,
                        this._vdataF32[s++] = t.startSize.x,
                        this._vdataF32[s++] = t.startSize.y,
                        this._vdataF32[s++] = t.startSize.z,
                        this._vdataF32[s++] = UU[2 * n],
                        this._vdataF32[s++] = t.rotation.x,
                        this._vdataF32[s++] = t.rotation.y,
                        this._vdataF32[s++] = t.rotation.z,
                        this._vdataF32[s++] = UU[2 * n + 1],
                        this._vdataF32[s++] = t.startColor.r / 255,
                        this._vdataF32[s++] = t.startColor.g / 255,
                        this._vdataF32[s++] = t.startColor.b / 255,
                        this._vdataF32[s++] = t.startColor.a / 255,
                        this._vdataF32[s++] = t.velocity.x,
                        this._vdataF32[s++] = t.velocity.y,
                        this._vdataF32[s++] = t.velocity.z,
                        this._vdataF32[s++] = t.startLifetime,
                        this._vdataF32[s++] = t.randomSeed,
                        r += this._vertAttrsFloatCount
                    }
                }
                ,
                i.updateGPUParticles = function(t, e, i) {
                    for (var r = this._vertAttrsFloatCount * this._vertCount, n = 0, s = 0, a = 0, o = 0; o < t; ++o)
                        n = o * r,
                        s = this._vdataF32[n + this._startTimeOffset],
                        this._vdataF32[n + this._lifeTimeOffset] - (e - s) < i && (a = --t * r,
                        this._vdataF32.copyWithin(n, a, a + r),
                        o--);
                    return t
                }
                ,
                i.constructAttributeIndex = function() {
                    if (this._vertAttrs) {
                        var t = this._vertAttrs.findIndex((function(t) {
                            return "a_position_starttime" === t.name
                        }
                        ))
                          , e = this._vertAttrs[t].offset;
                        this._startTimeOffset = e / 4 + 3,
                        t = this._vertAttrs.findIndex((function(t) {
                            return "a_dir_life" === t.name
                        }
                        )),
                        e = this._vertAttrs[t].offset,
                        this._lifeTimeOffset = e / 4 + 3
                    }
                }
                ,
                i.updateIA = function(t) {
                    this._subModels[0].inputAssembler.vertexBuffers[0].update(this._vdataF32),
                    this._iaInfo.drawInfos[0].firstIndex = 0,
                    this._iaInfo.drawInfos[0].indexCount = this._indexCount * t,
                    this._iaInfoBuffer.update(this._iaInfo)
                }
                ,
                i.clear = function() {
                    this._subModels[0].inputAssembler.indexCount = 0
                }
                ,
                i.destroy = function() {
                    t.prototype.destroy.call(this),
                    this._vBuffer = null,
                    this._vdataF32 = null,
                    this.destroySubMeshData(),
                    this._iaInfoBuffer && (this._iaInfoBuffer.destroy(),
                    this._iaInfoBuffer = null)
                }
                ,
                i.rebuild = function() {
                    this._vBuffer = this.createSubMeshData(),
                    this._vdataF32 = new Float32Array(this._vBuffer),
                    this._vdataUint32 = new Uint32Array(this._vBuffer)
                }
                ,
                i.destroySubMeshData = function() {
                    this._subMeshData && (this._subMeshData.destroy(),
                    this._subMeshData = null,
                    this._iaInfoBuffer = null)
                }
                ,
                e
            }(vi), VU = function() {
                function t(t) {
                    this._particleSystem = null,
                    this._model = null,
                    this._renderInfo = null,
                    this._vertAttrs = [],
                    this._renderInfo = t
                }
                var e = t.prototype;
                return e.getInfo = function() {
                    return this._renderInfo
                }
                ,
                e.onInit = function(t) {
                    this._particleSystem = t
                }
                ,
                e.onEnable = function() {
                    if (this._particleSystem) {
                        this.attachToScene();
                        var t = this._model;
                        t && (t.node = t.transform = this._particleSystem.node,
                        t.enabled = this._particleSystem.enabledInHierarchy)
                    }
                }
                ,
                e.onDisable = function() {
                    this.detachFromScene()
                }
                ,
                e.onDestroy = function() {
                    this._model && (ci.director.root.destroyModel(this._model),
                    this._model = null)
                }
                ,
                e.attachToScene = function() {
                    this._model && (this._model.scene && this.detachFromScene(),
                    this._particleSystem._getRenderScene().addModel(this._model))
                }
                ,
                e.detachFromScene = function() {
                    this._model && this._model.scene && this._model.scene.removeModel(this._model)
                }
                ,
                e.setVertexAttributes = function() {
                    this._model && this._model.setVertexAttributes(this._renderInfo.renderMode === qL.Mesh ? this._renderInfo.mesh : null, this._vertAttrs)
                }
                ,
                e.clear = function() {
                    this._model && (this._model.enabled = !1)
                }
                ,
                e.getModel = function() {
                    return this._model
                }
                ,
                e._initModel = function() {
                    this._model || (this._model = ci.director.root.createModel(HU),
                    this._model.setCapacity(this._particleSystem.capacity),
                    this._model.visFlags = this._particleSystem.visibility)
                }
                ,
                e.updateTrailMaterial = function() {}
                ,
                e.getDefaultTrailMaterial = function() {
                    return null
                }
                ,
                t
            }(), WU = new di, XU = new Ui, jU = new nr, YU = (new di,
            ["_colorOverLifetimeModule", "_sizeOvertimeModule", "_velocityOvertimeModule", "_forceOvertimeModule", "_limitVelocityOvertimeModule", "_rotationOvertimeModule", "_textureAnimationModule"]), KU = [0, 0, 1, 0, 0, 1, 1, 1], ZU = [new Rt(qt.ATTR_POSITION,_.RGB32F), new Rt(qt.ATTR_TEX_COORD,_.RGB32F), new Rt(qt.ATTR_TEX_COORD1,_.RGB32F), new Rt(qt.ATTR_TEX_COORD2,_.RGB32F), new Rt(qt.ATTR_COLOR,_.RGBA8,!0)], qU = [new Rt(qt.ATTR_POSITION,_.RGB32F), new Rt(qt.ATTR_TEX_COORD,_.RGB32F), new Rt(qt.ATTR_TEX_COORD1,_.RGB32F), new Rt(qt.ATTR_TEX_COORD2,_.RGB32F), new Rt(qt.ATTR_COLOR,_.RGBA8,!0), new Rt(qt.ATTR_COLOR1,_.RGB32F)], JU = [new Rt(qt.ATTR_POSITION,_.RGB32F), new Rt(qt.ATTR_TEX_COORD,_.RGB32F), new Rt(qt.ATTR_TEX_COORD1,_.RGB32F), new Rt(qt.ATTR_TEX_COORD2,_.RGB32F), new Rt(qt.ATTR_COLOR,_.RGBA8,!0), new Rt(qt.ATTR_TEX_COORD3,_.RGB32F), new Rt(qt.ATTR_NORMAL,_.RGB32F), new Rt(qt.ATTR_COLOR1,_.RGBA8,!0)], QU = {
                parent: null,
                owner: null,
                subModelIdx: 0
            }, $U = function(t) {
                function e(e) {
                    var i;
                    return (i = t.call(this, e) || this)._defines = void 0,
                    i._trailDefines = void 0,
                    i._frameTile_velLenScale = void 0,
                    i._tmp_velLenScale = void 0,
                    i._defaultMat = null,
                    i._node_scale = void 0,
                    i._attrs = void 0,
                    i._particles = null,
                    i._defaultTrailMat = null,
                    i._updateList = new Map,
                    i._animateList = new Map,
                    i._runAnimateList = new Array,
                    i._fillDataFunc = null,
                    i._uScaleHandle = 0,
                    i._uLenHandle = 0,
                    i._uNodeRotHandle = 0,
                    i._alignSpace = ZL.View,
                    i._inited = !1,
                    i._localMat = new Ui,
                    i._gravity = new Mi,
                    i._model = null,
                    i._frameTile_velLenScale = new Mi(1,1,0,0),
                    i._tmp_velLenScale = i._frameTile_velLenScale.clone(),
                    i._node_scale = new Mi,
                    i._attrs = new Array(5),
                    i._defines = {
                        CC_USE_WORLD_SPACE: !0,
                        CC_USE_BILLBOARD: !0,
                        CC_USE_STRETCHED_BILLBOARD: !1,
                        CC_USE_HORIZONTAL_BILLBOARD: !1,
                        CC_USE_VERTICAL_BILLBOARD: !1
                    },
                    i._trailDefines = {
                        CC_USE_WORLD_SPACE: !0
                    },
                    i
                }
                qe(e, t);
                var r = e.prototype;
                return r.onInit = function(e) {
                    var r = this;
                    t.prototype.onInit.call(this, e),
                    this._particles = new i((function() {
                        return new sL(r)
                    }
                    ),16),
                    this._setVertexAttrib(),
                    this._setFillFunc(),
                    this._initModuleList(),
                    this._initModel(),
                    this.updateMaterialParams(),
                    this.updateTrailMaterial(),
                    this.setVertexAttributes(),
                    this._inited = !0
                }
                ,
                r.clear = function() {
                    t.prototype.clear.call(this),
                    this._particles.reset(),
                    this._particleSystem._trailModule && this._particleSystem._trailModule.clear(),
                    this.updateRenderData(),
                    this._model.enabled = !1
                }
                ,
                r.updateRenderMode = function() {
                    this._setVertexAttrib(),
                    this._setFillFunc(),
                    this.updateMaterialParams(),
                    this.setVertexAttributes()
                }
                ,
                r.getFreeParticle = function() {
                    return this._particles.length >= this._particleSystem.capacity ? null : this._particles.add()
                }
                ,
                r.getDefaultTrailMaterial = function() {
                    return this._defaultTrailMat
                }
                ,
                r.setNewParticle = function() {}
                ,
                r._initModuleList = function() {
                    var t = this;
                    YU.forEach((function(e) {
                        var i = t._particleSystem[e];
                        i && i.enable && (i.needUpdate && (t._updateList[i.name] = i),
                        i.needAnimate && (t._animateList[i.name] = i))
                    }
                    )),
                    this._runAnimateList.length = 0;
                    for (var e = 0, i = WL.length; e < i; e++) {
                        var r = this._animateList[WL[e]];
                        r && this._runAnimateList.push(r)
                    }
                }
                ,
                r.enableModule = function(t, e, i) {
                    e ? (i.needUpdate && (this._updateList[i.name] = i),
                    i.needAnimate && (this._animateList[i.name] = i)) : (delete this._animateList[t],
                    delete this._updateList[t]),
                    this._runAnimateList.length = 0;
                    for (var r = 0, n = WL.length; r < n; r++) {
                        var s = this._animateList[WL[r]];
                        s && this._runAnimateList.push(s)
                    }
                    this.updateMaterialParams()
                }
                ,
                r.updateAlignSpace = function(t) {
                    this._alignSpace = t
                }
                ,
                r.updateRotation = function() {
                    var t = this._particleSystem;
                    if (t) {
                        var e = (t.getMaterialInstance(0) || this._defaultMat).passes[0];
                        this.doUpdateRotation(e)
                    }
                }
                ,
                r.doUpdateRotation = function(t) {
                    if (this._alignSpace === ZL.Local)
                        this._particleSystem.node.getRotation(jU);
                    else if (this._alignSpace === ZL.World)
                        this._particleSystem.node.getWorldRotation(jU);
                    else if (this._alignSpace === ZL.View) {
                        var e;
                        jU.set(0, 0, 0, 1);
                        var i = null === (e = this._particleSystem.node.scene.renderScene) || void 0 === e ? void 0 : e.cameras;
                        if (void 0 !== i)
                            for (var r = 0; r < (null == i ? void 0 : i.length); ++r) {
                                var n = i[r];
                                if ((n.visibility & this._particleSystem.node.layer) === this._particleSystem.node.layer) {
                                    nr.fromViewUp(jU, n.forward);
                                    break
                                }
                            }
                    } else
                        jU.set(0, 0, 0, 1);
                    t.setUniform(this._uNodeRotHandle, jU)
                }
                ,
                r.updateScale = function() {
                    var t = this._particleSystem;
                    if (t) {
                        var e = (t.getMaterialInstance(0) || this._defaultMat).passes[0];
                        this.doUpdateScale(e)
                    }
                }
                ,
                r.doUpdateScale = function(t) {
                    switch (this._particleSystem.scaleSpace) {
                    case YL.Local:
                        this._particleSystem.node.getScale(this._node_scale);
                        break;
                    case YL.World:
                        this._particleSystem.node.getWorldScale(this._node_scale)
                    }
                    t.setUniform(this._uScaleHandle, this._node_scale)
                }
                ,
                r.updateParticles = function(t) {
                    var e = this
                      , i = this._particleSystem;
                    if (!i)
                        return this._particles.length;
                    i.node.getWorldMatrix(XU);
                    var r = (i.getMaterialInstance(0) || this._defaultMat).passes[0];
                    this.doUpdateScale(r),
                    this.doUpdateRotation(r),
                    this._updateList.forEach((function(t) {
                        t.update(i._simulationSpace, XU)
                    }
                    ));
                    var n = i._trailModule
                      , s = n && n.enable;
                    if (s && n.update(),
                    i.simulationSpace === YL.Local) {
                        var a = i.node.getRotation();
                        Ui.fromQuat(this._localMat, a),
                        this._localMat.transpose()
                    }
                    for (var o = function(r) {
                        var a = e._particles.data[r];
                        if (a.remainingLifetime -= t,
                        di.set(a.animatedVelocity, 0, 0, 0),
                        a.remainingLifetime < 0)
                            return s && n.removeParticle(a),
                            e._particles.removeAt(r),
                            --r,
                            l = r,
                            "continue";
                        if (i.simulationSpace === YL.Local) {
                            var o = 9.8 * -i.gravityModifier.evaluate(1 - a.remainingLifetime / a.startLifetime, Qn(a.randomSeed)) * t;
                            e._gravity.x = 0,
                            e._gravity.y = o,
                            e._gravity.z = 0,
                            e._gravity.w = 1,
                            e._gravity = e._gravity.transformMat4(e._localMat),
                            a.velocity.x += e._gravity.x,
                            a.velocity.y += e._gravity.y,
                            a.velocity.z += e._gravity.z
                        } else
                            a.velocity.y -= 9.8 * i.gravityModifier.evaluate(1 - a.remainingLifetime / a.startLifetime, Qn(a.randomSeed)) * t;
                        di.copy(a.ultimateVelocity, a.velocity),
                        e._runAnimateList.forEach((function(e) {
                            e.animate(a, t)
                        }
                        )),
                        di.scaleAndAdd(a.position, a.position, a.ultimateVelocity, t),
                        s && n.animate(a, t),
                        l = r
                    }, l = 0; l < this._particles.length; ++l)
                        o(l);
                    return this._model.enabled = this._particles.length > 0,
                    this._particles.length
                }
                ,
                r.updateRenderData = function() {
                    for (var t = 0, e = 0; e < this._particles.length; ++e) {
                        var i = this._particles.data[e]
                          , r = 0
                          , n = this._particleSystem._textureAnimationModule;
                        n && n.enable && (r = i.frameIndex),
                        t = 4 * e,
                        this._fillDataFunc(i, t, r)
                    }
                }
                ,
                r.beforeRender = function() {
                    this._model.updateIA(this._particles.length)
                }
                ,
                r.getParticleCount = function() {
                    return this._particles.length
                }
                ,
                r.onMaterialModified = function(t) {
                    this._inited && (0 === t ? this.updateMaterialParams() : this.updateTrailMaterial())
                }
                ,
                r.onRebuildPSO = function(t, e) {
                    this._model && 0 === t && this._model.setSubModelMaterial(0, e);
                    var i = this._particleSystem._trailModule;
                    i && i._trailModel && 1 === t && i._trailModel.setSubModelMaterial(0, e)
                }
                ,
                r._setFillFunc = function() {
                    this._renderInfo.renderMode === qL.Mesh ? this._fillDataFunc = this._fillMeshData : this._renderInfo.renderMode === qL.StrecthedBillboard ? this._fillDataFunc = this._fillStrecthedData : this._fillDataFunc = this._fillNormalData
                }
                ,
                r._fillMeshData = function(t, e, i) {
                    var r = e / 4;
                    this._attrs[0] = t.position,
                    WU.z = i,
                    this._attrs[1] = WU,
                    this._attrs[2] = t.size,
                    this._attrs[3] = t.rotation,
                    this._attrs[4] = t.color._val,
                    this._model.addParticleVertexData(r, this._attrs)
                }
                ,
                r._fillStrecthedData = function(t, e, i) {
                    for (var r = 0; r < 4; ++r)
                        this._attrs[0] = t.position,
                        WU.x = KU[2 * r],
                        WU.y = KU[2 * r + 1],
                        WU.z = i,
                        this._attrs[1] = WU,
                        this._attrs[2] = t.size,
                        this._attrs[3] = t.rotation,
                        this._attrs[4] = t.color._val,
                        this._attrs[5] = t.ultimateVelocity,
                        this._attrs[6] = null,
                        this._model.addParticleVertexData(e++, this._attrs)
                }
                ,
                r._fillNormalData = function(t, e, i) {
                    for (var r = 0; r < 4; ++r)
                        this._attrs[0] = t.position,
                        WU.x = KU[2 * r],
                        WU.y = KU[2 * r + 1],
                        WU.z = i,
                        this._attrs[1] = WU,
                        this._attrs[2] = t.size,
                        this._attrs[3] = t.rotation,
                        this._attrs[4] = t.color._val,
                        this._attrs[5] = null,
                        this._model.addParticleVertexData(e++, this._attrs)
                }
                ,
                r._setVertexAttrib = function() {
                    switch (this._renderInfo.renderMode) {
                    case qL.StrecthedBillboard:
                        this._vertAttrs = qU.slice();
                        break;
                    case qL.Mesh:
                        this._vertAttrs = JU.slice();
                        break;
                    default:
                        this._vertAttrs = ZU.slice()
                    }
                }
                ,
                r.updateMaterialParams = function() {
                    if (this._particleSystem) {
                        var t = this._particleSystem
                          , e = t.sharedMaterial;
                        if (null != e) {
                            var i = e._effectAsset._name;
                            this._renderInfo.mainTexture = e.getProperty("mainTexture", 0),
                            -1 !== i.indexOf("particle") && -1 === i.indexOf("particle-gpu") || t.setMaterial(null, 0)
                        }
                        null == t.sharedMaterial && null == this._defaultMat && (QU.parent = Di.get("default-particle-material"),
                        QU.owner = this._particleSystem,
                        QU.subModelIdx = 0,
                        this._defaultMat = new en(QU),
                        QU.parent = null,
                        QU.owner = null,
                        QU.subModelIdx = 0,
                        null !== this._renderInfo.mainTexture && this._defaultMat.setProperty("mainTexture", this._renderInfo.mainTexture));
                        var r = t.getMaterialInstance(0) || this._defaultMat;
                        t._simulationSpace === YL.World ? this._defines.CC_USE_WORLD_SPACE = !0 : this._defines.CC_USE_WORLD_SPACE = !1;
                        var n = r.passes[0];
                        this._uScaleHandle = n.getHandle("scale"),
                        this._uLenHandle = n.getHandle("frameTile_velLenScale"),
                        this._uNodeRotHandle = n.getHandle("nodeRotation");
                        var s = this._renderInfo.renderMode
                          , a = this._frameTile_velLenScale;
                        s === qL.Billboard ? this._defines.CC_RENDER_MODE = 0 : s === qL.StrecthedBillboard ? (this._defines.CC_RENDER_MODE = 1,
                        a.z = this._renderInfo.velocityScale,
                        a.w = this._renderInfo.lengthScale) : s === qL.HorizontalBillboard ? this._defines.CC_RENDER_MODE = 2 : s === qL.VerticalBillboard ? this._defines.CC_RENDER_MODE = 3 : s === qL.Mesh ? this._defines.CC_RENDER_MODE = 4 : console.warn("particle system renderMode " + s + " not support.");
                        var o = t._textureAnimationModule;
                        o && o.enable ? (Mi.copy(this._tmp_velLenScale, a),
                        Br.set(this._tmp_velLenScale, o.numTilesX, o.numTilesY),
                        n.setUniform(this._uLenHandle, this._tmp_velLenScale)) : n.setUniform(this._uLenHandle, a);
                        var l, h = this._particleSystem._rotationOvertimeModule;
                        l = h && h.enable,
                        this._defines.ROTATION_OVER_TIME_MODULE_ENABLE = l,
                        r.recompileShaders(this._defines),
                        this._model && this._model.updateMaterial(r)
                    }
                }
                ,
                r.updateTrailMaterial = function() {
                    if (this._particleSystem) {
                        var t = this._particleSystem
                          , e = t._trailModule;
                        if (e && e.enable) {
                            t.simulationSpace === YL.World || e.space === YL.World ? this._trailDefines.CC_USE_WORLD_SPACE = !0 : this._trailDefines.CC_USE_WORLD_SPACE = !1;
                            var i = t.getMaterialInstance(1);
                            null === i && null === this._defaultTrailMat && (QU.parent = Di.get("default-trail-material"),
                            QU.owner = this._particleSystem,
                            QU.subModelIdx = 1,
                            this._defaultTrailMat = new en(QU),
                            QU.parent = null,
                            QU.owner = null,
                            QU.subModelIdx = 0),
                            (i = i || this._defaultTrailMat).recompileShaders(this._trailDefines),
                            e.updateMaterial()
                        }
                    }
                }
                ,
                e
            }(VU), tH = new Ui, eH = new Mi, iH = new nr, rH = new nr, nH = (new di,
            32), sH = "a_position_starttime", aH = "a_size_uv", oH = "a_rotation_uv", lH = "a_color", hH = "a_dir_life", uH = "a_rndSeed", cH = [new Rt(sH,_.RGBA32F), new Rt(aH,_.RGBA32F), new Rt(oH,_.RGBA32F), new Rt(lH,_.RGBA32F), new Rt(hH,_.RGBA32F), new Rt(uH,_.R32F)], _H = [new Rt(sH,_.RGBA32F), new Rt(aH,_.RGBA32F), new Rt(oH,_.RGBA32F), new Rt(lH,_.RGBA32F), new Rt(hH,_.RGBA32F), new Rt(uH,_.R32F), new Rt(qt.ATTR_TEX_COORD,_.RGB32F), new Rt(qt.ATTR_TEX_COORD3,_.RGB32F), new Rt(qt.ATTR_NORMAL,_.RGB32F), new Rt(qt.ATTR_COLOR1,_.RGBA8,!0)], dH = {
                parent: null,
                owner: null,
                subModelIdx: 0
            }, pH = function(t) {
                function e(e) {
                    var i;
                    return (i = t.call(this, e) || this)._defines = void 0,
                    i._frameTile_velLenScale = void 0,
                    i._unifrom_velLenScale = void 0,
                    i._tmp_velLenScale = void 0,
                    i._node_scale = void 0,
                    i._vertAttrs = [],
                    i._defaultMat = null,
                    i._particleNum = 0,
                    i._tempParticle = null,
                    i._colorTexture = null,
                    i._forceTexture = null,
                    i._velocityTexture = null,
                    i._rotationTexture = null,
                    i._sizeTexture = null,
                    i._animTexture = null,
                    i._uTimeHandle = 0,
                    i._uRotHandle = 0,
                    i._uNodeRotHandle = 0,
                    i._alignSpace = ZL.View,
                    i._inited = !1,
                    i._frameTile_velLenScale = new Mi(1,1,0,0),
                    i._unifrom_velLenScale = i._frameTile_velLenScale.clone(),
                    i._tmp_velLenScale = i._frameTile_velLenScale.clone(),
                    i._node_scale = new Mi,
                    i._defines = {
                        CC_USE_WORLD_SPACE: !0,
                        CC_USE_BILLBOARD: !0,
                        CC_USE_STRETCHED_BILLBOARD: !1,
                        CC_USE_HORIZONTAL_BILLBOARD: !1,
                        CC_USE_VERTICAL_BILLBOARD: !1,
                        COLOR_OVER_TIME_MODULE_ENABLE: !1
                    },
                    i._tempParticle = new sL(null),
                    i._particleNum = 0,
                    i
                }
                qe(e, t);
                var i = e.prototype;
                return i.onInit = function(e) {
                    t.prototype.onInit.call(this, e),
                    this._setVertexAttrib(),
                    this._initModel(),
                    this.updateMaterialParams(),
                    this.setVertexAttributes(),
                    this._inited = !0
                }
                ,
                i.updateRenderMode = function() {
                    this._setVertexAttrib(),
                    this.updateMaterialParams(),
                    this.setVertexAttributes()
                }
                ,
                i.setVertexAttributes = function() {
                    t.prototype.setVertexAttributes.call(this),
                    this._model.constructAttributeIndex()
                }
                ,
                i.clear = function() {
                    t.prototype.clear.call(this),
                    this._particleNum = 0,
                    this.updateRenderData()
                }
                ,
                i.onDestroy = function() {
                    t.prototype.onDestroy.call(this),
                    this._forceTexture && this._forceTexture.destroy(),
                    this._velocityTexture && this._velocityTexture.destroy(),
                    this._colorTexture && this._colorTexture.destroy(),
                    this._sizeTexture && this._sizeTexture.destroy(),
                    this._rotationTexture && this._rotationTexture.destroy(),
                    this._animTexture && this._animTexture.destroy()
                }
                ,
                i.enableModule = function() {
                    var t = this._particleSystem.getMaterialInstance(0) || this._defaultMat;
                    t && (this.initShaderUniform(t),
                    t.recompileShaders(this._defines),
                    this._model && this._model.setSubModelMaterial(0, t))
                }
                ,
                i.getFreeParticle = function() {
                    return this._particleNum >= this._particleSystem._capacity ? null : this._tempParticle
                }
                ,
                i.setNewParticle = function(t) {
                    this._model.addGPUParticleVertexData(t, this._particleNum, this._particleSystem._time),
                    this._particleNum++
                }
                ,
                i.updateRotation = function() {
                    var t = this._particleSystem.getMaterialInstance(0) || this._defaultMat;
                    if (t) {
                        var e = t.passes[0];
                        this.doUpdateRotation(e)
                    }
                }
                ,
                i.doUpdateRotation = function(t) {
                    if (this._alignSpace === ZL.Local)
                        this._particleSystem.node.getRotation(rH);
                    else if (this._alignSpace === ZL.World)
                        this._particleSystem.node.getWorldRotation(rH);
                    else if (this._alignSpace === ZL.View) {
                        var e;
                        rH.set(0, 0, 0, 1);
                        var i = null === (e = this._particleSystem.node.scene.renderScene) || void 0 === e ? void 0 : e.cameras;
                        if (void 0 !== i)
                            for (var r = 0; r < (null == i ? void 0 : i.length); ++r) {
                                var n = i[r];
                                if ((n.visibility & this._particleSystem.node.layer) === this._particleSystem.node.layer) {
                                    nr.fromViewUp(rH, n.forward);
                                    break
                                }
                            }
                    } else
                        rH.set(0, 0, 0, 1);
                    t.setUniform(this._uNodeRotHandle, rH)
                }
                ,
                i.updateScale = function() {
                    var t = this._particleSystem.getMaterialInstance(0) || this._defaultMat;
                    if (t) {
                        var e = t.passes[0];
                        this.doUpdateScale(e)
                    }
                }
                ,
                i.doUpdateScale = function(t) {
                    switch (this._particleSystem.scaleSpace) {
                    case YL.Local:
                        this._particleSystem.node.getScale(this._node_scale);
                        break;
                    case YL.World:
                        this._particleSystem.node.getWorldScale(this._node_scale)
                    }
                    t.setUniform(t.getHandle("scale"), this._node_scale)
                }
                ,
                i.updateParticles = function(t) {
                    return this._particleNum = this._model.updateGPUParticles(this._particleNum, this._particleSystem._time, t),
                    this.updateShaderUniform(t),
                    this._model.enabled = this._particleNum > 0,
                    this._particleNum
                }
                ,
                i.updateRenderData = function() {}
                ,
                i.beforeRender = function() {
                    this._model.updateIA(this._particleNum)
                }
                ,
                i.updateAlignSpace = function(t) {
                    this._alignSpace = t
                }
                ,
                i.updateShaderUniform = function(t) {
                    var e = this._particleSystem.getMaterialInstance(0) || this._defaultMat;
                    if (e) {
                        var i = e.passes[0];
                        eH.x = this._particleSystem._time,
                        eH.y = t,
                        i.setUniform(this._uTimeHandle, eH),
                        this._particleSystem.node.getWorldRotation(iH),
                        i.setUniform(this._uRotHandle, iH),
                        this.doUpdateRotation(i)
                    }
                }
                ,
                i.initShaderUniform = function(t) {
                    var e = t.passes[0];
                    this._uTimeHandle = e.getHandle("u_timeDelta"),
                    this._uRotHandle = e.getHandle("u_worldRot"),
                    this._uNodeRotHandle = e.getHandle("nodeRotation"),
                    this.doUpdateScale(e),
                    e.setUniform(e.getHandle("frameTile_velLenScale"), this._unifrom_velLenScale),
                    eH.x = nH,
                    eH.y = .03125,
                    e.setUniform(e.getHandle("u_sampleInfo"), eH);
                    var i = !1
                      , r = this._particleSystem._forceOvertimeModule;
                    if (i = r && r.enable,
                    this._defines.FORCE_OVER_TIME_MODULE_ENABLE = i,
                    i) {
                        this._forceTexture && this._forceTexture.destroy(),
                        this._forceTexture = KM(nH, r.x, r.y, r.z);
                        var n = e.getHandle("force_over_time_tex0")
                          , s = pn.getBindingFromHandle(n);
                        e.bindSampler(s, this._forceTexture.getGFXSampler()),
                        e.bindTexture(s, this._forceTexture.getGFXTexture());
                        var a = e.getHandle("u_force_space");
                        e.setUniform(a, r.space);
                        var o = e.getHandle("u_force_mode");
                        e.setUniform(o, this._forceTexture.height)
                    }
                    var l = this._particleSystem._velocityOvertimeModule;
                    if (i = l && l.enable,
                    this._defines.VELOCITY_OVER_TIME_MODULE_ENABLE = i,
                    i) {
                        this._velocityTexture && this._velocityTexture.destroy(),
                        this._velocityTexture = function(t, e, i, r, n) {
                            for (var s = Math.max(jM(e), jM(i), jM(r), jM(n)), a = new Float32Array(t * s * 4), o = [e, i, r, n], l = 1 / (t - 1), h = 0; h < s; h++)
                                for (var u = 0; u < 4; u++)
                                    for (var c = o[u], _ = 0, d = 0, p = 0; p < t; p++) {
                                        var f = XM(c, l * p, h);
                                        d = (_ += f) / (p + 1),
                                        a[4 * p + u] = d
                                    }
                            return YM(a, t, s)
                        }(nH, l.x, l.y, l.z, l.speedModifier);
                        var h = e.getHandle("velocity_over_time_tex0")
                          , u = pn.getBindingFromHandle(h);
                        e.bindSampler(u, this._velocityTexture.getGFXSampler()),
                        e.bindTexture(u, this._velocityTexture.getGFXTexture());
                        var c = e.getHandle("u_velocity_space");
                        e.setUniform(c, l.space);
                        var _ = e.getHandle("u_velocity_mode");
                        e.setUniform(_, this._velocityTexture.height)
                    }
                    var d = this._particleSystem._colorOverLifetimeModule;
                    if (i = d && d.enable,
                    this._defines.COLOR_OVER_TIME_MODULE_ENABLE = i,
                    i) {
                        this._colorTexture && this._colorTexture.destroy(),
                        this._colorTexture = function(t, e) {
                            for (var i = function(t) {
                                switch (t.mode) {
                                case $I.TwoColors:
                                case $I.TwoGradients:
                                    return 2;
                                default:
                                    return 1
                                }
                            }(e), r = new Uint8Array(t * i * 4), n = 1 / (t - 1), s = 0, a = 0; a < i; a++)
                                for (var o = 0; o < t; o++) {
                                    var l = eL(e, n * o, a);
                                    r[s] = l.r,
                                    r[s + 1] = l.g,
                                    r[s + 2] = l.b,
                                    r[s + 3] = l.a,
                                    s += 4
                                }
                            var h = new Er;
                            return h.create(t, i, Cr.RGBA8888),
                            h.setFilters(Ar.LINEAR, Ar.LINEAR),
                            h.setWrapMode(qn.CLAMP_TO_EDGE, qn.CLAMP_TO_EDGE),
                            h.uploadData(r),
                            h
                        }(nH, d.color);
                        var p = e.getHandle("color_over_time_tex0")
                          , f = pn.getBindingFromHandle(p);
                        e.bindSampler(f, this._colorTexture.getGFXSampler()),
                        e.bindTexture(f, this._colorTexture.getGFXTexture());
                        var g = e.getHandle("u_color_mode");
                        e.setUniform(g, this._colorTexture.height)
                    }
                    var m = this._particleSystem._rotationOvertimeModule;
                    if (i = m && m.enable,
                    this._defines.ROTATION_OVER_TIME_MODULE_ENABLE = i,
                    i) {
                        this._rotationTexture && this._rotationTexture.destroy(),
                        m.separateAxes ? this._rotationTexture = KM(nH, m.x, m.y, m.z) : this._rotationTexture = function(t, e) {
                            for (var i = jM(e), r = new Float32Array(t * i * 4), n = 1 / (t - 1), s = 0, a = 0; a < i; a++)
                                for (var o = 0; o < t; o++) {
                                    var l = XM(e, n * o, a);
                                    r[s + 2] = l,
                                    s += 4
                                }
                            return YM(r, t, i)
                        }(nH, m.z);
                        var y = e.getHandle("rotation_over_time_tex0")
                          , v = pn.getBindingFromHandle(y);
                        e.bindSampler(v, this._rotationTexture.getGFXSampler()),
                        e.bindTexture(v, this._rotationTexture.getGFXTexture());
                        var S = e.getHandle("u_rotation_mode");
                        e.setUniform(S, this._rotationTexture.height)
                    }
                    var T = this._particleSystem._sizeOvertimeModule;
                    if (i = T && T.enable,
                    this._defines.SIZE_OVER_TIME_MODULE_ENABLE = i,
                    i) {
                        this._sizeTexture && this._sizeTexture.destroy(),
                        T.separateAxes ? this._sizeTexture = KM(nH, T.x, T.y, T.z, !0) : this._sizeTexture = function(t, e) {
                            for (var i = jM(e), r = new Float32Array(t * i * 4), n = 1 / (t - 1), s = 0, a = 0, o = 0; o < i; o++) {
                                0;
                                for (var l = 0; l < t; l++) {
                                    var h = XM(e, n * l, o);
                                    s = h,
                                    r[a] = s,
                                    r[a + 1] = s,
                                    r[a + 2] = s,
                                    a += 4
                                }
                            }
                            return YM(r, t, i)
                        }(nH, T.size);
                        var b = e.getHandle("size_over_time_tex0")
                          , E = pn.getBindingFromHandle(b);
                        e.bindSampler(E, this._sizeTexture.getGFXSampler()),
                        e.bindTexture(E, this._sizeTexture.getGFXTexture());
                        var A = e.getHandle("u_size_mode");
                        e.setUniform(A, this._sizeTexture.height)
                    }
                    var C = this._particleSystem._textureAnimationModule;
                    if (i = C && C.enable,
                    this._defines.TEXTURE_ANIMATION_MODULE_ENABLE = i,
                    i) {
                        this._animTexture && this._animTexture.destroy(),
                        this._animTexture = function(t, e, i) {
                            for (var r = Math.max(jM(e), jM(i)), n = new Float32Array(t * r * 4), s = [e, i], a = 1 / (t - 1), o = 0; o < r; o++)
                                for (var l = 0; l < 2; l++)
                                    for (var h = s[l], u = 0, c = 0, _ = 0; _ < t; _++) {
                                        var d = XM(h, a * _, o);
                                        c = (u += d) / (_ + 1),
                                        n[4 * _ + l] = c
                                    }
                            return YM(n, t, r)
                        }(nH, C.startFrame, C.frameOverTime);
                        var R = e.getHandle("texture_animation_tex0")
                          , B = pn.getBindingFromHandle(R);
                        e.bindSampler(B, this._animTexture.getGFXSampler()),
                        e.bindTexture(B, this._animTexture.getGFXTexture());
                        var x = e.getHandle("u_anim_info");
                        eH.x = this._animTexture.height,
                        eH.y = C.numTilesX * C.numTilesY,
                        eH.z = C.cycleCount,
                        e.setUniform(x, eH)
                    }
                }
                ,
                i.getParticleCount = function() {
                    return this._particleNum
                }
                ,
                i.onMaterialModified = function() {
                    this._inited && this.updateMaterialParams()
                }
                ,
                i.onRebuildPSO = function(t, e) {
                    this._model && 0 === t && this._model.setSubModelMaterial(0, e)
                }
                ,
                i._setVertexAttrib = function() {
                    switch (this._renderInfo.renderMode) {
                    case qL.StrecthedBillboard:
                        this._vertAttrs = cH.slice();
                        break;
                    case qL.Mesh:
                        this._vertAttrs = _H.slice();
                        break;
                    default:
                        this._vertAttrs = cH.slice()
                    }
                }
                ,
                i.updateMaterialParams = function() {
                    if (this._particleSystem) {
                        var t = this._particleSystem
                          , e = t.sharedMaterial;
                        if (null !== e) {
                            var i = e._effectAsset._name;
                            this._renderInfo.mainTexture = e.getProperty("mainTexture", 0),
                            -1 === i.indexOf("particle-gpu") && (this._renderInfo.mainTexture = e.getProperty("mainTexture", 0),
                            this._particleSystem.setMaterial(null, 0))
                        }
                        null == t.sharedMaterial && null == this._defaultMat && (dH.parent = Di.get("default-particle-gpu-material"),
                        dH.owner = t,
                        dH.subModelIdx = 0,
                        this._defaultMat = new en(dH),
                        dH.parent = null,
                        dH.owner = null,
                        dH.subModelIdx = 0,
                        null !== this._renderInfo.mainTexture && this._defaultMat.setProperty("mainTexture", this._renderInfo.mainTexture));
                        var r = t.getMaterialInstance(0) || this._defaultMat;
                        t.node.getWorldMatrix(tH),
                        t._simulationSpace === YL.World ? this._defines.CC_USE_WORLD_SPACE = !0 : this._defines.CC_USE_WORLD_SPACE = !1;
                        var n = this._renderInfo.renderMode;
                        n === qL.Billboard ? this._defines.CC_RENDER_MODE = 0 : n === qL.StrecthedBillboard ? (this._defines.CC_RENDER_MODE = 1,
                        this._frameTile_velLenScale.z = this._renderInfo.velocityScale,
                        this._frameTile_velLenScale.w = this._renderInfo.lengthScale) : n === qL.HorizontalBillboard ? this._defines.CC_RENDER_MODE = 2 : n === qL.VerticalBillboard ? this._defines.CC_RENDER_MODE = 3 : n === qL.Mesh ? this._defines.CC_RENDER_MODE = 4 : console.warn("particle system renderMode " + n + " not support.");
                        var s = t._textureAnimationModule;
                        s && s.enable ? (Br.set(this._frameTile_velLenScale, s.numTilesX, s.numTilesY),
                        Mi.copy(this._unifrom_velLenScale, this._frameTile_velLenScale)) : (this._tmp_velLenScale.z = this._frameTile_velLenScale.z,
                        this._tmp_velLenScale.w = this._frameTile_velLenScale.w,
                        Mi.copy(this._unifrom_velLenScale, this._tmp_velLenScale)),
                        this.initShaderUniform(r),
                        r.recompileShaders(this._defines),
                        this._model && this._model.updateMaterial(r)
                    }
                }
                ,
                e
            }(VU);
            function fH() {
                var t = Ur.root.device;
                return !!(t.capabilities.maxVertexTextureUnits >= 8 && t.hasFeature(c.TEXTURE_FLOAT)) || (ci.warn("Maybe the device has restrictions on vertex textures or does not support float textures."),
                !1)
            }
            var gH, mH, yH, vH, SH, TH, bH, EH, AH, CH, RH, BH, xH, DH, wH, OH, PH, MH, IH, LH, FH, NH, kH, GH, zH, UH, HH, VH, WH, XH, jH, YH, KH, ZH, qH, JH, QH, $H, tV, eV, iV, rV, nV, sV, aV, oV, lV, hV, uV, cV, _V, dV, pV, fV, gV, mV, yV, vV, SV, TV, bV, EV, AV, CV, RV, BV, xV, DV, wV, OV, PV, MV, IV, LV, FV, NV, kV, GV, zV, UV, HV, VV, WV, XV, jV, YV, KV, ZV, qV, JV, QV, $V, tW, eW, iW, rW, nW, sW, aW, oW, lW, hW, uW, cW, _W, dW, pW, fW, gW, mW, yW, vW, SW, TW, bW, EW, AW, CW, RW, BW, xW, DW, wW, OW, PW, MW, IW, LW, FW, NW, kW, GW, zW, UW, HW, VW, WW, XW, jW, YW, KW, ZW, qW, JW, QW, $W, tX, eX, iX, rX, nX, sX, aX, oX, lX, hX, uX, cX, _X, dX, pX, fX, gX, mX, yX, vX, SX, TX, bX, EX, AX, CX, RX, BX, xX, DX, wX, OX, PX, MX, IX, LX, FX, NX, kX, GX, zX, UX, HX, VX, WX, XX, jX, YX, KX, ZX, qX, JX, QX, $X, tj, ej, ij, rj, nj, sj, aj, oj, lj, hj, uj, cj, _j, dj, pj, fj, gj, mj, yj, vj, Sj, Tj, bj, Ej, Aj, Cj, Rj, Bj, xj, Dj, wj, Oj, Pj, Mj, Ij = (oU = Ti("cc.ParticleSystemRenderer"),
            lU = Ci(qL),
            hU = Xr(),
            uU = Ni(),
            cU = Xr(),
            _U = Ni(),
            dU = Xr(),
            pU = Ni(),
            fU = Ci(qL),
            gU = Ci(fi),
            mU = Xr(),
            yU = Ni(),
            vU = Ci(Tr),
            SU = Xr(),
            TU = Ni(),
            bU = Ci(Tr),
            EU = Xr(),
            AU = Ni(),
            CU = Xr(),
            RU = Ni(),
            BU = Ci(ZL),
            xU = Xr(),
            DU = Ni(),
            oU((zU = GU = function() {
                function t() {
                    Oi(this, "_renderMode", PU, this),
                    Oi(this, "_velocityScale", MU, this),
                    Oi(this, "_lengthScale", IU, this),
                    Oi(this, "_mesh", LU, this),
                    Oi(this, "_mainTexture", FU, this),
                    Oi(this, "_useGPU", NU, this),
                    Oi(this, "_alignSpace", kU, this),
                    this._particleSystem = null
                }
                var e = t.prototype;
                return e.create = function(t) {
                    null === this._particleSystem ? this._particleSystem = t : this._particleSystem !== t && Qe(6033)
                }
                ,
                e.onInit = function(t) {
                    if (this.create(t),
                    this._particleSystem.processor)
                        Qe(6034);
                    else {
                        var e = this._useGPU && fH();
                        this._particleSystem.processor = e ? new pH(this) : new $U(this),
                        this._particleSystem.processor.updateAlignSpace(this.alignSpace),
                        this._particleSystem.processor.onInit(t)
                    }
                }
                ,
                e._switchProcessor = function() {
                    this._particleSystem && (this._particleSystem.processor && (this._particleSystem.processor.detachFromScene(),
                    this._particleSystem.processor.clear(),
                    this._particleSystem.processor = null),
                    this._particleSystem.processor = this._useGPU ? new pH(this) : new $U(this),
                    this._particleSystem.processor.onInit(this._particleSystem),
                    this._particleSystem.processor.onEnable(),
                    this._particleSystem.bindModule())
                }
                ,
                Je(t, [{
                    key: "renderMode",
                    get: function() {
                        return this._renderMode
                    },
                    set: function(t) {
                        this._renderMode !== t && (this._renderMode = t,
                        this._particleSystem && this._particleSystem.processor.updateRenderMode())
                    }
                }, {
                    key: "velocityScale",
                    get: function() {
                        return this._velocityScale
                    },
                    set: function(t) {
                        this._velocityScale = t,
                        this._particleSystem && this._particleSystem.processor.updateMaterialParams()
                    }
                }, {
                    key: "lengthScale",
                    get: function() {
                        return this._lengthScale
                    },
                    set: function(t) {
                        this._lengthScale = t,
                        this._particleSystem && this._particleSystem.processor.updateMaterialParams()
                    }
                }, {
                    key: "mesh",
                    get: function() {
                        return this._mesh
                    },
                    set: function(t) {
                        this._mesh = t,
                        this._particleSystem && this._particleSystem.processor.setVertexAttributes()
                    }
                }, {
                    key: "particleMaterial",
                    get: function() {
                        return this._particleSystem ? this._particleSystem.getMaterial(0) : null
                    },
                    set: function(t) {
                        this._particleSystem && this._particleSystem.setMaterial(t, 0)
                    }
                }, {
                    key: "trailMaterial",
                    get: function() {
                        return this._particleSystem ? this._particleSystem.getMaterial(1) : null
                    },
                    set: function(t) {
                        this._particleSystem && this._particleSystem.setMaterial(t, 1)
                    }
                }, {
                    key: "mainTexture",
                    get: function() {
                        return this._mainTexture
                    },
                    set: function(t) {
                        this._mainTexture = t
                    }
                }, {
                    key: "useGPU",
                    get: function() {
                        return this._useGPU
                    },
                    set: function(t) {
                        this._useGPU !== t && (fH() ? this._useGPU = t : this._useGPU = !1,
                        this._switchProcessor())
                    }
                }, {
                    key: "alignSpace",
                    get: function() {
                        return this._alignSpace
                    },
                    set: function(t) {
                        this._alignSpace = t,
                        this._particleSystem.processor.updateAlignSpace(this._alignSpace)
                    }
                }]),
                t
            }(),
            GU.AlignmentSpace = ZL,
            Ei((OU = zU).prototype, "renderMode", [lU, hU, uU], Object.getOwnPropertyDescriptor(OU.prototype, "renderMode"), OU.prototype),
            Ei(OU.prototype, "velocityScale", [cU, _U], Object.getOwnPropertyDescriptor(OU.prototype, "velocityScale"), OU.prototype),
            Ei(OU.prototype, "lengthScale", [dU, pU], Object.getOwnPropertyDescriptor(OU.prototype, "lengthScale"), OU.prototype),
            PU = Ei(OU.prototype, "_renderMode", [fU, Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return qL.Billboard
                }
            }),
            MU = Ei(OU.prototype, "_velocityScale", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            IU = Ei(OU.prototype, "_lengthScale", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            LU = Ei(OU.prototype, "_mesh", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ei(OU.prototype, "mesh", [gU, mU, yU], Object.getOwnPropertyDescriptor(OU.prototype, "mesh"), OU.prototype),
            Ei(OU.prototype, "particleMaterial", [vU, SU, TU], Object.getOwnPropertyDescriptor(OU.prototype, "particleMaterial"), OU.prototype),
            Ei(OU.prototype, "trailMaterial", [bU, EU, AU], Object.getOwnPropertyDescriptor(OU.prototype, "trailMaterial"), OU.prototype),
            FU = Ei(OU.prototype, "_mainTexture", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            NU = Ei(OU.prototype, "_useGPU", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Ei(OU.prototype, "useGPU", [CU, RU], Object.getOwnPropertyDescriptor(OU.prototype, "useGPU"), OU.prototype),
            Ei(OU.prototype, "alignSpace", [BU, xU, DU], Object.getOwnPropertyDescriptor(OU.prototype, "alignSpace"), OU.prototype),
            kU = Ei(OU.prototype, "_alignSpace", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return ZL.View
                }
            }),
            wU = OU)) || wU), Lj = Math.cos(ir(100)), Fj = {
                position: new di,
                velocity: new di
            }, Nj = new nr, kj = new Ui, Gj = new di, zj = new di, Uj = new Zi, Hj = function() {
                function t(t) {
                    for (this.start = void 0,
                    this.end = void 0,
                    this.trailElements = void 0,
                    this.start = -1,
                    this.end = -1,
                    this.trailElements = []; t--; )
                        this.trailElements.push({
                            position: new di,
                            lifetime: 0,
                            width: 0,
                            velocity: new di,
                            direction: 0,
                            color: new Zi
                        })
                }
                var e = t.prototype;
                return e.getElement = function(t) {
                    return -1 === this.start ? null : (t < 0 && (t = (t + this.trailElements.length) % this.trailElements.length),
                    t >= this.trailElements.length && (t %= this.trailElements.length),
                    this.trailElements[t])
                }
                ,
                e.addElement = function() {
                    if (0 === this.trailElements.length)
                        return null;
                    if (-1 === this.start)
                        return this.start = 0,
                        this.end = 1,
                        this.trailElements[0];
                    this.start === this.end && (this.trailElements.splice(this.end, 0, {
                        position: new di,
                        lifetime: 0,
                        width: 0,
                        velocity: new di,
                        direction: 0,
                        color: new Zi
                    }),
                    this.start++,
                    this.start %= this.trailElements.length);
                    var t = this.end++;
                    return this.end %= this.trailElements.length,
                    this.trailElements[t]
                }
                ,
                e.iterateElement = function(t, e, i, r) {
                    for (var n = this.start >= this.end ? this.end + this.trailElements.length : this.end, s = this.start; s < n; s++)
                        e(t, this.trailElements[s % this.trailElements.length], i, r) && (this.start++,
                        this.start %= this.trailElements.length);
                    this.start === n && (this.start = -1,
                    this.end = -1)
                }
                ,
                e.count = function() {
                    return this.start < this.end ? this.end - this.start : this.trailElements.length + this.end - this.start
                }
                ,
                e.clear = function() {
                    this.start = -1,
                    this.end = -1
                }
                ,
                t
            }(), Vj = (gH = Ti("cc.TrailModule"),
            mH = Xr(),
            yH = Ci(tF),
            vH = Xr(),
            SH = Ni(),
            TH = Ci(WM),
            bH = ji(),
            EH = Xr(),
            AH = Ni(),
            CH = Xr(),
            RH = Ni(),
            BH = Ci(YL),
            xH = Xr(),
            DH = Ni(),
            wH = Ci(eF),
            OH = Xr(),
            PH = Ni(),
            MH = Xr(),
            IH = Ni(),
            LH = Ci(WM),
            FH = ji(),
            NH = Xr(),
            kH = Ni(),
            GH = Xr(),
            zH = Ni(),
            UH = Ci(tL),
            HH = Xr(),
            VH = Ni(),
            WH = Ci(tL),
            XH = Xr(),
            jH = Ni(),
            YH = Ci(YL),
            gH((hV = function() {
                function t() {
                    Oi(this, "_enable", qH, this),
                    Oi(this, "mode", JH, this),
                    Oi(this, "lifeTime", QH, this),
                    Oi(this, "_minParticleDistance", $H, this),
                    Oi(this, "existWithParticles", tV, this),
                    Oi(this, "textureMode", eV, this),
                    Oi(this, "widthFromParticle", iV, this),
                    Oi(this, "widthRatio", rV, this),
                    Oi(this, "colorFromParticle", nV, this),
                    Oi(this, "colorOverTrail", sV, this),
                    Oi(this, "colorOvertime", aV, this),
                    Oi(this, "_space", oV, this),
                    Oi(this, "_particleSystem", lV, this),
                    this._minSquaredDistance = 0,
                    this._vertSize = void 0,
                    this._trailNum = 0,
                    this._trailLifetime = 0,
                    this.vbOffset = 0,
                    this.ibOffset = 0,
                    this._trailSegments = null,
                    this._particleTrail = void 0,
                    this._trailModel = null,
                    this._iaInfo = void 0,
                    this._iaInfoBuffer = null,
                    this._subMeshData = null,
                    this._vertAttrs = void 0,
                    this._vbF32 = null,
                    this._vbUint32 = null,
                    this._iBuffer = null,
                    this._needTransform = !1,
                    this._material = null,
                    this._iaInfo = new dt([new ct]),
                    this._vertAttrs = [new Rt(qt.ATTR_POSITION,_.RGB32F), new Rt(qt.ATTR_TEX_COORD,_.RGBA32F), new Rt(qt.ATTR_TEX_COORD1,_.RGB32F), new Rt(qt.ATTR_COLOR,_.RGBA8,!0)],
                    this._vertSize = 0;
                    for (var t, e = ui(this._vertAttrs); !(t = e()).done; ) {
                        var i = t.value;
                        this._vertSize += Jt[i.format].size
                    }
                    this._particleTrail = new Map
                }
                var i = t.prototype;
                return i.onInit = function(t) {
                    this._particleSystem = t,
                    this.minParticleDistance = this._minParticleDistance;
                    for (var i = 0, r = t.startLifetime.getMax(), n = t.rateOverTime.getMax(), s = t.duration, a = 0, o = t.bursts.length; a < o; a++)
                        i += t.bursts[a].getMaxCount(t) * Math.ceil(r / s);
                    this._trailNum = Math.ceil(r * this.lifeTime.getMax() * 60 * (n * s + i)),
                    this._trailSegments = new e((function() {
                        return new Hj(10)
                    }
                    ),Math.ceil(n * s),(function(t) {
                        return t.trailElements.length = 0
                    }
                    )),
                    this._enable && (this.enable = this._enable)
                }
                ,
                i.onEnable = function() {
                    this._attachToScene()
                }
                ,
                i.onDisable = function() {
                    this._particleTrail.clear(),
                    this._detachFromScene()
                }
                ,
                i._attachToScene = function() {
                    this._trailModel && (this._trailModel.scene && this._detachFromScene(),
                    this._particleSystem._getRenderScene().addModel(this._trailModel))
                }
                ,
                i._detachFromScene = function() {
                    this._trailModel && this._trailModel.scene && this._trailModel.scene.removeModel(this._trailModel)
                }
                ,
                i.destroy = function() {
                    this.destroySubMeshData(),
                    this._trailModel && (Ur.root.destroyModel(this._trailModel),
                    this._trailModel = null),
                    this._trailSegments && (this._trailSegments.destroy(),
                    this._trailSegments = null)
                }
                ,
                i.play = function() {
                    this._trailModel && this._enable && (this._trailModel.enabled = !0)
                }
                ,
                i.clear = function() {
                    if (this.enable) {
                        for (var t = this._particleTrail.values(), e = t.next(); !e.done; )
                            e.value.clear(),
                            e = t.next();
                        this._particleTrail.clear(),
                        this.updateRenderData(),
                        this._trailModel && (this._trailModel.enabled = !1)
                    }
                }
                ,
                i.updateMaterial = function() {
                    this._particleSystem && (this._material = this._particleSystem.getMaterialInstance(1) || this._particleSystem.processor._defaultTrailMat,
                    this._trailModel && this._trailModel.setSubModelMaterial(0, this._material))
                }
                ,
                i.update = function() {
                    this._trailLifetime = this.lifeTime.evaluate(this._particleSystem._time, 1),
                    this.space === YL.World && this._particleSystem._simulationSpace === YL.Local ? (this._needTransform = !0,
                    this._particleSystem.node.getWorldMatrix(kj),
                    this._particleSystem.node.getWorldRotation(Nj)) : this._needTransform = !1
                }
                ,
                i.animate = function(t, e) {
                    if (this._trailSegments)
                        if (t.loopCount > t.lastLoop)
                            t.trailDelay > 1 ? (t.lastLoop = t.loopCount,
                            t.trailDelay = 0) : t.trailDelay++;
                        else {
                            var i = this._particleTrail.get(t);
                            if (!i)
                                return i = this._trailSegments.alloc(),
                                void this._particleTrail.set(t, i);
                            var r = i.getElement(i.end - 1);
                            if (this._needTransform ? di.transformMat4(Gj, t.position, kj) : di.copy(Gj, t.position),
                            !(r && (i.iterateElement(this, this._updateTrailElement, t, e),
                            di.squaredDistance(r.position, Gj) < this._minSquaredDistance)) && (r = i.addElement())) {
                                di.copy(r.position, Gj),
                                r.lifetime = 0,
                                this.widthFromParticle ? r.width = t.size.x * this.widthRatio.evaluate(0, 1) : r.width = this.widthRatio.evaluate(0, 1);
                                var n = i.count();
                                if (2 === n) {
                                    var s = i.getElement(i.end - 2);
                                    di.subtract(s.velocity, r.position, s.position)
                                } else if (n > 2) {
                                    var a = i.getElement(i.end - 2)
                                      , o = i.getElement(i.end - 3);
                                    di.subtract(Gj, o.position, a.position),
                                    di.subtract(zj, r.position, a.position),
                                    di.subtract(a.velocity, zj, Gj),
                                    di.equals(di.ZERO, a.velocity) && di.copy(a.velocity, Gj),
                                    di.normalize(a.velocity, a.velocity),
                                    this._checkDirectionReverse(a, o)
                                }
                                this.colorFromParticle ? r.color.set(t.color) : r.color.set(this.colorOvertime.evaluate(0, 1))
                            }
                        }
                }
                ,
                i.removeParticle = function(t) {
                    var e = this._particleTrail.get(t);
                    e && this._trailSegments && (e.clear(),
                    this._trailSegments.free(e),
                    this._particleTrail.delete(t))
                }
                ,
                i.updateRenderData = function() {
                    this.vbOffset = 0,
                    this.ibOffset = 0;
                    for (var t, e = ui(this._particleTrail.keys()); !(t = e()).done; ) {
                        var i = t.value
                          , r = this._particleTrail.get(i);
                        if (-1 !== r.start) {
                            var n = 4 * this.vbOffset / this._vertSize
                              , s = r.start >= r.end ? r.end + r.trailElements.length : r.end
                              , a = s - r.start
                              , o = 1 / a
                              , l = r.trailElements[r.start];
                            this._fillVertexBuffer(l, this.colorOverTrail.evaluate(1, 1), n, 1, 0, 4);
                            for (var h = r.start + 1; h < s; h++) {
                                var u = r.trailElements[h % r.trailElements.length]
                                  , c = h - r.start;
                                this._fillVertexBuffer(u, this.colorOverTrail.evaluate(1 - c / a, 1), n, 1 - c * o, c, 5)
                            }
                            this._needTransform ? di.transformMat4(Fj.position, i.position, kj) : di.copy(Fj.position, i.position);
                            var _ = this._trailModel;
                            if (_ && _.node.invalidateChildren(xi.POSITION),
                            1 === a || 2 === a) {
                                var d = r.getElement(r.end - 1);
                                di.subtract(d.velocity, Fj.position, d.position),
                                this._vbF32[this.vbOffset - this._vertSize / 4 - 4] = d.velocity.x,
                                this._vbF32[this.vbOffset - this._vertSize / 4 - 3] = d.velocity.y,
                                this._vbF32[this.vbOffset - this._vertSize / 4 - 2] = d.velocity.z,
                                this._vbF32[this.vbOffset - 4] = d.velocity.x,
                                this._vbF32[this.vbOffset - 3] = d.velocity.y,
                                this._vbF32[this.vbOffset - 2] = d.velocity.z,
                                di.subtract(Fj.velocity, Fj.position, d.position),
                                this._checkDirectionReverse(Fj, d)
                            } else if (a > 2) {
                                var p = r.getElement(r.end - 1)
                                  , f = r.getElement(r.end - 2);
                                di.subtract(Gj, f.position, p.position),
                                di.subtract(zj, Fj.position, p.position),
                                di.normalize(Gj, Gj),
                                di.normalize(zj, zj),
                                di.subtract(p.velocity, zj, Gj),
                                di.normalize(p.velocity, p.velocity),
                                this._checkDirectionReverse(p, f),
                                this.vbOffset -= this._vertSize / 4 * 2,
                                this.ibOffset -= 6,
                                this._fillVertexBuffer(p, this.colorOverTrail.evaluate(o, 1), n, o, a - 1, 5),
                                di.subtract(Fj.velocity, Fj.position, p.position),
                                di.normalize(Fj.velocity, Fj.velocity),
                                this._checkDirectionReverse(Fj, p)
                            }
                            this.widthFromParticle ? Fj.width = i.size.x * this.widthRatio.evaluate(0, 1) : Fj.width = this.widthRatio.evaluate(0, 1),
                            Fj.color = i.color,
                            di.equals(Fj.velocity, di.ZERO) ? this.ibOffset -= 3 : this._fillVertexBuffer(Fj, this.colorOverTrail.evaluate(0, 1), n, 0, a, 1)
                        }
                    }
                    this._trailModel.enabled = this.ibOffset > 0
                }
                ,
                i.updateIA = function(t) {
                    var e = this._trailModel && this._trailModel.subModels;
                    if (e && e.length > 0) {
                        var i = e[0];
                        i.inputAssembler.vertexBuffers[0].update(this._vbF32),
                        i.inputAssembler.indexBuffer.update(this._iBuffer),
                        this._iaInfo.drawInfos[0].firstIndex = 0,
                        this._iaInfo.drawInfos[0].indexCount = t,
                        this._iaInfoBuffer.update(this._iaInfo)
                    }
                }
                ,
                i.beforeRender = function() {
                    this.updateIA(this.ibOffset)
                }
                ,
                i._createModel = function() {
                    this._trailModel || (this._trailModel = ci.director.root.createModel(vi))
                }
                ,
                i.rebuild = function() {
                    var t = Ur.root.device
                      , e = t.createBuffer(new ht(f.VERTEX | f.TRANSFER_DST,y.HOST | y.DEVICE,this._vertSize * (this._trailNum + 1) * 2,this._vertSize))
                      , i = new ArrayBuffer(this._vertSize * (this._trailNum + 1) * 2);
                    this._vbF32 = new Float32Array(i),
                    this._vbUint32 = new Uint32Array(i),
                    e.update(i);
                    var r = t.createBuffer(new ht(f.INDEX | f.TRANSFER_DST,y.HOST | y.DEVICE,6 * Math.max(1, this._trailNum) * Uint16Array.BYTES_PER_ELEMENT,Uint16Array.BYTES_PER_ELEMENT));
                    this._iBuffer = new Uint16Array(6 * Math.max(1, this._trailNum)),
                    r.update(this._iBuffer),
                    this._iaInfoBuffer = t.createBuffer(new ht(f.INDIRECT,y.HOST | y.DEVICE,ee,ee)),
                    this._iaInfo.drawInfos[0].vertexCount = 2 * (this._trailNum + 1),
                    this._iaInfo.drawInfos[0].indexCount = 6 * this._trailNum,
                    this._iaInfoBuffer.update(this._iaInfo),
                    this._subMeshData = new $r([e],this._vertAttrs,N.TRIANGLE_LIST,r,this._iaInfoBuffer);
                    var n = this._trailModel;
                    n && (n.node = n.transform = this._particleSystem.node,
                    n.visFlags = this._particleSystem.visibility,
                    n.initSubModel(0, this._subMeshData, this._material),
                    n.enabled = !0)
                }
                ,
                i._updateTrailElement = function(t, e, i, r) {
                    return e.lifetime += r,
                    t.colorFromParticle ? (e.color.set(i.color),
                    e.color.multiply(t.colorOvertime.evaluate(1 - i.remainingLifetime / i.startLifetime, 1))) : e.color.set(t.colorOvertime.evaluate(1 - i.remainingLifetime / i.startLifetime, 1)),
                    t.widthFromParticle ? e.width = i.size.x * t.widthRatio.evaluate(e.lifetime / t._trailLifetime, 1) : e.width = t.widthRatio.evaluate(e.lifetime / t._trailLifetime, 1),
                    e.lifetime > t._trailLifetime
                }
                ,
                i._fillVertexBuffer = function(t, e, i, r, n, s) {
                    this._vbF32[this.vbOffset++] = t.position.x,
                    this._vbF32[this.vbOffset++] = t.position.y,
                    this._vbF32[this.vbOffset++] = t.position.z,
                    this._vbF32[this.vbOffset++] = t.direction,
                    this._vbF32[this.vbOffset++] = t.width,
                    this._vbF32[this.vbOffset++] = r,
                    this._vbF32[this.vbOffset++] = 0,
                    this._vbF32[this.vbOffset++] = t.velocity.x,
                    this._vbF32[this.vbOffset++] = t.velocity.y,
                    this._vbF32[this.vbOffset++] = t.velocity.z,
                    Uj.set(t.color),
                    Uj.multiply(e),
                    this._vbUint32[this.vbOffset++] = Uj._val,
                    this._vbF32[this.vbOffset++] = t.position.x,
                    this._vbF32[this.vbOffset++] = t.position.y,
                    this._vbF32[this.vbOffset++] = t.position.z,
                    this._vbF32[this.vbOffset++] = 1 - t.direction,
                    this._vbF32[this.vbOffset++] = t.width,
                    this._vbF32[this.vbOffset++] = r,
                    this._vbF32[this.vbOffset++] = 1,
                    this._vbF32[this.vbOffset++] = t.velocity.x,
                    this._vbF32[this.vbOffset++] = t.velocity.y,
                    this._vbF32[this.vbOffset++] = t.velocity.z,
                    this._vbUint32[this.vbOffset++] = Uj._val,
                    1 & s && (this._iBuffer[this.ibOffset++] = i + 2 * n,
                    this._iBuffer[this.ibOffset++] = i + 2 * n - 1,
                    this._iBuffer[this.ibOffset++] = i + 2 * n + 1),
                    4 & s && (this._iBuffer[this.ibOffset++] = i + 2 * n,
                    this._iBuffer[this.ibOffset++] = i + 2 * n + 1,
                    this._iBuffer[this.ibOffset++] = i + 2 * n + 2)
                }
                ,
                i._checkDirectionReverse = function(t, e) {
                    di.dot(t.velocity, e.velocity) < Lj ? t.direction = 1 - e.direction : t.direction = e.direction
                }
                ,
                i.destroySubMeshData = function() {
                    this._subMeshData && (this._subMeshData.destroy(),
                    this._subMeshData = null)
                }
                ,
                Je(t, [{
                    key: "enable",
                    get: function() {
                        return this._enable
                    },
                    set: function(t) {
                        t === this._enable && this._trailModel || (t && !this._enable && (this._enable = t,
                        this._particleSystem.processor && this._particleSystem.processor.updateTrailMaterial()),
                        t && !this._trailModel && (this._createModel(),
                        this.rebuild()),
                        this._enable = t,
                        this._trailModel && (this._trailModel.enabled = t),
                        t ? this.onEnable() : this.onDisable())
                    }
                }, {
                    key: "minParticleDistance",
                    get: function() {
                        return this._minParticleDistance
                    },
                    set: function(t) {
                        this._minParticleDistance = t,
                        this._minSquaredDistance = t * t
                    }
                }, {
                    key: "space",
                    get: function() {
                        return this._space
                    },
                    set: function(t) {
                        this._space = t;
                        var e = this._particleSystem;
                        e && e.processor && e.processor.updateTrailMaterial()
                    }
                }]),
                t
            }(),
            Ei((ZH = hV).prototype, "enable", [mH], Object.getOwnPropertyDescriptor(ZH.prototype, "enable"), ZH.prototype),
            qH = Ei(ZH.prototype, "_enable", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            JH = Ei(ZH.prototype, "mode", [yH, Pi, vH, SH], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return tF.Particles
                }
            }),
            QH = Ei(ZH.prototype, "lifeTime", [TH, Pi, bH, EH, AH], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            $H = Ei(ZH.prototype, "_minParticleDistance", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return .1
                }
            }),
            Ei(ZH.prototype, "minParticleDistance", [CH, RH], Object.getOwnPropertyDescriptor(ZH.prototype, "minParticleDistance"), ZH.prototype),
            Ei(ZH.prototype, "space", [BH, xH, DH], Object.getOwnPropertyDescriptor(ZH.prototype, "space"), ZH.prototype),
            tV = Ei(ZH.prototype, "existWithParticles", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            eV = Ei(ZH.prototype, "textureMode", [wH, Pi, OH, PH], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return eF.Stretch
                }
            }),
            iV = Ei(ZH.prototype, "widthFromParticle", [Pi, MH, IH], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            rV = Ei(ZH.prototype, "widthRatio", [LH, Pi, FH, NH, kH], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            nV = Ei(ZH.prototype, "colorFromParticle", [Pi, GH, zH], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            sV = Ei(ZH.prototype, "colorOverTrail", [UH, Pi, HH, VH], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new tL
                }
            }),
            aV = Ei(ZH.prototype, "colorOvertime", [WH, Pi, XH, jH], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new tL
                }
            }),
            oV = Ei(ZH.prototype, "_space", [YH], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return YL.World
                }
            }),
            lV = Ei(ZH.prototype, "_particleSystem", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            KH = ZH)) || KH), Wj = new Ui, Xj = new nr, jj = new di, Yj = ["_colorOverLifetimeModule", "_sizeOvertimeModule", "_velocityOvertimeModule", "_forceOvertimeModule", "_limitVelocityOvertimeModule", "_rotationOvertimeModule", "_textureAnimationModule"], Kj = function() {
                function t(t) {
                    this._particleSystem = void 0,
                    this._processor = void 0,
                    this._node = void 0,
                    this._particlesAll = void 0,
                    this._updateList = new Map,
                    this._animateList = new Map,
                    this._runAnimateList = new Array,
                    this._localMat = new Ui,
                    this._gravity = new Mi,
                    this.minPos = new di,
                    this.maxPos = new di,
                    this._nodePos = new di,
                    this._nodeSize = new di,
                    this._particleSystem = t,
                    this._processor = this._particleSystem.processor,
                    this._node = t.node,
                    this._particlesAll = [],
                    this._initModuleList()
                }
                var e = t.prototype;
                return e._updateBoundingNode = function() {
                    this._nodeSize.set(this.maxPos.x - this.minPos.x, this.maxPos.y - this.minPos.y, this.maxPos.z - this.minPos.z),
                    this._nodePos.set(this.minPos.x + .5 * this._nodeSize.x, this.minPos.y + .5 * this._nodeSize.y, this.minPos.z + .5 * this._nodeSize.z)
                }
                ,
                e.setBoundingBoxSize = function(t) {
                    this.maxPos.x = this._nodePos.x + t.x,
                    this.maxPos.y = this._nodePos.y + t.y,
                    this.maxPos.z = this._nodePos.z + t.z,
                    this.minPos.x = this._nodePos.x - t.x,
                    this.minPos.y = this._nodePos.y - t.y,
                    this.minPos.z = this._nodePos.z - t.z,
                    this._updateBoundingNode()
                }
                ,
                e.setBoundingBoxCenter = function(t, e, i) {
                    this.maxPos.x = t + .5 * this._nodeSize.x,
                    this.maxPos.y = e + .5 * this._nodeSize.y,
                    this.maxPos.z = i + .5 * this._nodeSize.z,
                    this.minPos.x = t - .5 * this._nodeSize.x,
                    this.minPos.y = e - .5 * this._nodeSize.y,
                    this.minPos.z = i - .5 * this._nodeSize.z,
                    this._updateBoundingNode()
                }
                ,
                e._initModuleList = function() {
                    var t = this;
                    Yj.forEach((function(e) {
                        var i = t._particleSystem[e];
                        i && i.enable && (i.needUpdate && (t._updateList[i.name] = i),
                        i.needAnimate && (t._animateList[i.name] = i))
                    }
                    )),
                    this._runAnimateList.length = 0;
                    for (var e = 0, i = WL.length; e < i; e++) {
                        var r = this._animateList[WL[e]];
                        r && this._runAnimateList.push(r)
                    }
                }
                ,
                e._emit = function(t, e, i) {
                    var r = this._particleSystem
                      , n = this._node
                      , s = r.time % r.duration / r.duration;
                    n.invalidateChildren(xi.POSITION),
                    r.simulationSpace === YL.World && (n.getWorldMatrix(Wj),
                    n.getWorldRotation(Xj));
                    for (var a = 0; a < t; ++a) {
                        var o = new sL(r);
                        o.particleSystem = r,
                        o.reset();
                        var l = Qn(es(0, ss));
                        r._shapeModule && r._shapeModule.enable ? r._shapeModule.emit(o) : (di.set(o.position, 0, 0, 0),
                        di.copy(o.velocity, rF)),
                        r._textureAnimationModule && r._textureAnimationModule.enable && r._textureAnimationModule.init(o);
                        var h = r.startSpeed.evaluate(s, l);
                        di.multiplyScalar(o.velocity, o.velocity, h),
                        r.simulationSpace === YL.World && (di.transformMat4(o.position, o.position, Wj),
                        di.transformQuat(o.velocity, o.velocity, Xj)),
                        di.copy(o.ultimateVelocity, o.velocity),
                        di.set(o.rotation, 0, 0, 0),
                        r.startSize3D ? di.set(o.startSize, r.startSizeX.evaluate(s, l), r.startSizeY.evaluate(s, l), r.startSizeZ.evaluate(s, l)) : (di.set(o.startSize, r.startSizeX.evaluate(s, l), 1, 1),
                        o.startSize.y = o.startSize.x),
                        di.copy(o.size, o.startSize),
                        o.startLifetime = r.startLifetime.evaluate(s, l) + e,
                        o.remainingLifetime = o.startLifetime,
                        i.push(o)
                    }
                }
                ,
                e._updateParticles = function(t, e) {
                    var i = this
                      , r = this._particleSystem;
                    switch (r.node.getWorldMatrix(Wj),
                    r.scaleSpace) {
                    case YL.Local:
                        r.node.getScale(jj);
                        break;
                    case YL.World:
                        r.node.getWorldScale(jj)
                    }
                    if (this._updateList.forEach((function(t) {
                        t.update(r.simulationSpace, Wj)
                    }
                    )),
                    r.simulationSpace === YL.Local) {
                        var n = r.node.getRotation();
                        Ui.fromQuat(this._localMat, n),
                        this._localMat.transpose()
                    }
                    for (var s = function(n) {
                        var s = e[n];
                        if (s.remainingLifetime -= t,
                        di.set(s.animatedVelocity, 0, 0, 0),
                        r.simulationSpace === YL.Local) {
                            var a = 9.8 * -r.gravityModifier.evaluate(1 - s.remainingLifetime / s.startLifetime, Qn(s.randomSeed)) * t;
                            i._gravity.x = 0,
                            i._gravity.y = a,
                            i._gravity.z = 0,
                            i._gravity.w = 1,
                            i._gravity = i._gravity.transformMat4(i._localMat),
                            s.velocity.x += i._gravity.x,
                            s.velocity.y += i._gravity.y,
                            s.velocity.z += i._gravity.z
                        } else
                            s.velocity.y -= 9.8 * r.gravityModifier.evaluate(1 - s.remainingLifetime / s.startLifetime, Qn(s.randomSeed)) * t;
                        di.copy(s.ultimateVelocity, s.velocity),
                        i._runAnimateList.forEach((function(e) {
                            e.animate(s, t)
                        }
                        )),
                        di.scaleAndAdd(s.position, s.position, s.ultimateVelocity, t)
                    }, a = 0; a < e.length; ++a)
                        s(a)
                }
                ,
                e._calculateBounding = function(t) {
                    var e = new di
                      , i = new di
                      , r = new di
                      , n = new di
                      , s = new di(1,1,1);
                    if (this._processor.getInfo().renderMode === qL.Mesh) {
                        var a = this._processor.getInfo().mesh;
                        if (a && a.struct.minPosition && a.struct.maxPosition) {
                            var o = new sr;
                            sr.fromPoints(o, a.struct.minPosition, a.struct.maxPosition);
                            var l = Math.max(o.halfExtents.x, o.halfExtents.y, o.halfExtents.z);
                            s.set(l, l, l)
                        }
                    }
                    for (var h = 0; h < this._particlesAll.length; ++h) {
                        var u = this._particlesAll[h];
                        di.multiply(e, jj, u.size),
                        di.multiply(e, e, s),
                        i.set(u.position),
                        this._particleSystem.simulationSpace !== YL.World && di.transformMat4(i, i, this._particleSystem.node._mat),
                        t && 0 === h ? (di.subtract(this.minPos, i, e),
                        di.add(this.maxPos, i, e)) : (di.subtract(r, i, e),
                        di.add(n, i, e),
                        di.min(this.minPos, this.minPos, r),
                        di.max(this.maxPos, this.maxPos, n))
                    }
                }
                ,
                e.calculatePositions = function() {
                    this._emit(this._particleSystem.capacity, 0, this._particlesAll);
                    var t = Qn(es(0, ss));
                    this._updateParticles(0, this._particlesAll),
                    this._calculateBounding(!0),
                    this._updateParticles(this._particleSystem.startLifetime.evaluate(0, t), this._particlesAll),
                    this._calculateBounding(!1),
                    this._updateBoundingNode()
                }
                ,
                e.clear = function() {
                    this._particlesAll.length = 0
                }
                ,
                e.destroy = function() {}
                ,
                t
            }(), Zj = new Ui, qj = new nr, Jj = Object.getOwnPropertyDescriptor(zi.prototype, "sharedMaterials"), Qj = function(e) {
                return t({
                    ParticleSystem: e,
                    ParticleSystemComponent: e
                }),
                e
            }((uV = Ti("cc.ParticleSystem"),
            cV = Ii(),
            _V = Fi(),
            dV = Li(99),
            pV = Xr(),
            fV = Ni(),
            gV = Ci(tL),
            mV = Xr(),
            yV = Ni(),
            vV = Ci(YL),
            SV = Xr(),
            TV = Ni(),
            bV = Xr(),
            EV = Ni(),
            AV = bi("startSize"),
            CV = ji(),
            RV = Ci(WM),
            BV = Xr(),
            xV = Ni(),
            DV = Ci(WM),
            wV = ji(),
            OV = Xr(),
            PV = Ni(),
            MV = Ci(WM),
            IV = ji(),
            LV = Xr(),
            FV = Ni(),
            NV = Ci(WM),
            kV = ji(),
            GV = Xr(),
            zV = Ni(),
            UV = Xr(),
            HV = Ni(),
            VV = Ci(WM),
            WV = ji(),
            XV = Xr(),
            jV = Ni(),
            YV = Ci(WM),
            KV = ji(),
            ZV = Xr(),
            qV = Ni(),
            JV = Ci(WM),
            QV = bi("startRotation"),
            $V = ji(),
            tW = Xr(),
            eW = Ni(),
            iW = Ci(WM),
            rW = ji(),
            nW = Xr(),
            sW = Ni(),
            aW = Ci(WM),
            oW = ji(),
            lW = Xr(),
            hW = Ni(),
            uW = Xr(),
            cW = Ni(),
            _W = Xr(),
            dW = Ni(),
            pW = Xr(),
            fW = Ni(),
            gW = Ci(YL),
            mW = Xr(),
            yW = Ni(),
            vW = Xr(),
            SW = Ni(),
            TW = Xr(),
            bW = Ni(),
            EW = Ci(WM),
            AW = ji(),
            CW = Xr(),
            RW = Ni(),
            BW = Ci(WM),
            xW = ji(),
            DW = Xr(),
            wW = Ni(),
            OW = Ci(WM),
            PW = ji(),
            MW = Xr(),
            IW = Ni(),
            LW = Ci([eU]),
            FW = Xr(),
            NW = Ni(),
            kW = Ci(Boolean),
            GW = Xr(),
            zW = Ni(),
            UW = Ci(KL),
            HW = Xr(),
            VW = Ni(),
            WW = Ci(Number),
            XW = Xr(),
            jW = Ni(),
            YW = Ci(Number),
            KW = Xr(),
            ZW = Ni(),
            qW = Ci(Number),
            JW = Xr(),
            QW = Ni(),
            $W = Xr(),
            tX = Ni(),
            eX = bi("enableCulling"),
            iX = ki(),
            rX = Ci(Tr),
            nX = qr(),
            sX = Ci(iF),
            aX = Ci(iF),
            oX = Xr(),
            lX = Ni(),
            hX = Ci(sU),
            uX = Ci(sU),
            cX = Xr(),
            _X = Ni(),
            dX = Ci(Yz),
            pX = Ci(Yz),
            fX = Xr(),
            gX = Ni(),
            mX = Ci(tU),
            yX = Ci(tU),
            vX = Xr(),
            SX = Ni(),
            TX = Ci(vN),
            bX = Ci(vN),
            EX = Xr(),
            AX = Ni(),
            CX = Ci(EN),
            RX = Ci(EN),
            BX = Xr(),
            xX = Ni(),
            DX = Ci(jz),
            wX = Ci(jz),
            OX = Xr(),
            PX = Ni(),
            MX = Ci(Jz),
            IX = Ci(Jz),
            LX = Xr(),
            FX = Ni(),
            NX = Ci(Vj),
            kX = Ci(Vj),
            GX = Xr(),
            zX = Ni(),
            UX = Ci(Ij),
            HX = Xr(),
            VX = Ni(),
            uV(WX = cV(WX = _V(WX = dV(WX = Ri((Mj = Pj = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "startColor", jX, Gi(e)),
                    Oi(e, "scaleSpace", YX, Gi(e)),
                    Oi(e, "startSize3D", KX, Gi(e)),
                    Oi(e, "startSizeX", ZX, Gi(e)),
                    Oi(e, "startSizeY", qX, Gi(e)),
                    Oi(e, "startSizeZ", JX, Gi(e)),
                    Oi(e, "startSpeed", QX, Gi(e)),
                    Oi(e, "startRotation3D", $X, Gi(e)),
                    Oi(e, "startRotationX", tj, Gi(e)),
                    Oi(e, "startRotationY", ej, Gi(e)),
                    Oi(e, "startRotationZ", ij, Gi(e)),
                    Oi(e, "startDelay", rj, Gi(e)),
                    Oi(e, "startLifetime", nj, Gi(e)),
                    Oi(e, "duration", sj, Gi(e)),
                    Oi(e, "loop", aj, Gi(e)),
                    Oi(e, "simulationSpeed", oj, Gi(e)),
                    Oi(e, "playOnAwake", lj, Gi(e)),
                    Oi(e, "gravityModifier", hj, Gi(e)),
                    Oi(e, "rateOverTime", uj, Gi(e)),
                    Oi(e, "rateOverDistance", cj, Gi(e)),
                    Oi(e, "bursts", _j, Gi(e)),
                    Oi(e, "_renderCulling", dj, Gi(e)),
                    Oi(e, "_cullingMode", pj, Gi(e)),
                    Oi(e, "_aabbHalfX", fj, Gi(e)),
                    Oi(e, "_aabbHalfY", gj, Gi(e)),
                    Oi(e, "_aabbHalfZ", mj, Gi(e)),
                    Oi(e, "_dataCulling", yj, Gi(e)),
                    Oi(e, "_colorOverLifetimeModule", vj, Gi(e)),
                    Oi(e, "_shapeModule", Sj, Gi(e)),
                    Oi(e, "_sizeOvertimeModule", Tj, Gi(e)),
                    Oi(e, "_velocityOvertimeModule", bj, Gi(e)),
                    Oi(e, "_forceOvertimeModule", Ej, Gi(e)),
                    Oi(e, "_limitVelocityOvertimeModule", Aj, Gi(e)),
                    Oi(e, "_rotationOvertimeModule", Cj, Gi(e)),
                    Oi(e, "_textureAnimationModule", Rj, Gi(e)),
                    Oi(e, "_trailModule", Bj, Gi(e)),
                    Oi(e, "renderer", xj, Gi(e)),
                    e._isPlaying = void 0,
                    e._isPaused = void 0,
                    e._isStopped = void 0,
                    e._isEmitting = void 0,
                    e._needRefresh = void 0,
                    e._time = void 0,
                    e._emitRateTimeCounter = void 0,
                    e._emitRateDistanceCounter = void 0,
                    e._oldWPos = void 0,
                    e._curWPos = void 0,
                    e._boundingBox = void 0,
                    e._culler = void 0,
                    e._oldPos = void 0,
                    e._curPos = void 0,
                    e._isCulled = void 0,
                    e._customData1 = void 0,
                    e._customData2 = void 0,
                    e._subEmitters = void 0,
                    Oi(e, "_prewarm", Dj, Gi(e)),
                    Oi(e, "_capacity", wj, Gi(e)),
                    Oi(e, "_simulationSpace", Oj, Gi(e)),
                    e.processor = null,
                    e.rateOverTime.constant = 10,
                    e.startLifetime.constant = 5,
                    e.startSizeX.constant = 1,
                    e.startSpeed.constant = 5,
                    e._isPlaying = !1,
                    e._isPaused = !1,
                    e._isStopped = !0,
                    e._isEmitting = !1,
                    e._needRefresh = !0,
                    e._time = 0,
                    e._emitRateTimeCounter = 0,
                    e._emitRateDistanceCounter = 0,
                    e._oldWPos = new di,
                    e._curWPos = new di,
                    e._boundingBox = null,
                    e._culler = null,
                    e._oldPos = null,
                    e._curPos = null,
                    e._isCulled = !1,
                    e._customData1 = new Br,
                    e._customData2 = new Br,
                    e._subEmitters = [],
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.onFocusInEditor = function() {
                    this.renderer.create(this)
                }
                ,
                i.onLoad = function() {
                    this.renderer.onInit(this),
                    this._shapeModule && this._shapeModule.onInit(this),
                    this._trailModule && this._trailModule.onInit(this),
                    this.bindModule(),
                    this._resetPosition()
                }
                ,
                i._onMaterialModified = function(t, e) {
                    null !== this.processor && this.processor.onMaterialModified(t, e)
                }
                ,
                i._onRebuildPSO = function(t, e) {
                    this.processor.onRebuildPSO(t, e)
                }
                ,
                i._collectModels = function() {
                    return this._models.length = 0,
                    this._models.push(this.processor._model),
                    this._trailModule && this._trailModule.enable && this._trailModule._trailModel && this._models.push(this._trailModule._trailModel),
                    this._models
                }
                ,
                i._attachToScene = function() {
                    this.processor.attachToScene(),
                    this._trailModule && this._trailModule.enable && this._trailModule._attachToScene()
                }
                ,
                i._detachFromScene = function() {
                    this.processor.detachFromScene(),
                    this._trailModule && this._trailModule.enable && this._trailModule._detachFromScene(),
                    this._boundingBox && (this._boundingBox = null),
                    this._culler && (this._culler.clear(),
                    this._culler.destroy(),
                    this._culler = null)
                }
                ,
                i.bindModule = function() {
                    this._colorOverLifetimeModule && this._colorOverLifetimeModule.bindTarget(this.processor),
                    this._sizeOvertimeModule && this._sizeOvertimeModule.bindTarget(this.processor),
                    this._rotationOvertimeModule && this._rotationOvertimeModule.bindTarget(this.processor),
                    this._forceOvertimeModule && this._forceOvertimeModule.bindTarget(this.processor),
                    this._limitVelocityOvertimeModule && this._limitVelocityOvertimeModule.bindTarget(this.processor),
                    this._velocityOvertimeModule && this._velocityOvertimeModule.bindTarget(this.processor),
                    this._textureAnimationModule && this._textureAnimationModule.bindTarget(this.processor)
                }
                ,
                i.play = function() {
                    this._isPaused && (this._isPaused = !1),
                    this._isStopped && (this._isStopped = !1),
                    this._isPlaying = !0,
                    this._isEmitting = !0,
                    this._resetPosition(),
                    this._prewarm && this._prewarmSystem(),
                    this._trailModule && this._trailModule.play()
                }
                ,
                i.pause = function() {
                    this._isStopped ? console.warn("pause(): particle system is already stopped.") : (this._isPlaying && (this._isPlaying = !1),
                    this._isPaused = !0)
                }
                ,
                i.stop = function() {
                    (this._isPlaying || this._isPaused) && this.clear(),
                    this._isPlaying && (this._isPlaying = !1),
                    this._isPaused && (this._isPaused = !1),
                    this._time = 0,
                    this._emitRateTimeCounter = 0,
                    this._emitRateDistanceCounter = 0,
                    this._isStopped = !0,
                    this._needRefresh = !0
                }
                ,
                i.clear = function() {
                    this.enabledInHierarchy && (this.processor.clear(),
                    this._trailModule && this._trailModule.clear()),
                    this._calculateBounding(!0)
                }
                ,
                i.getParticleCount = function() {
                    return this.processor.getParticleCount()
                }
                ,
                i.setCustomData1 = function(t, e) {
                    Br.set(this._customData1, t, e)
                }
                ,
                i.setCustomData2 = function(t, e) {
                    Br.set(this._customData2, t, e)
                }
                ,
                i.onDestroy = function() {
                    ci.director.off(ci.Director.EVENT_BEFORE_COMMIT, this.beforeRender, this),
                    this.processor.onDestroy(),
                    this._trailModule && this._trailModule.destroy(),
                    this._culler && (this._culler.clear(),
                    this._culler.destroy(),
                    this._culler = null)
                }
                ,
                i.onEnable = function() {
                    ci.director.on(ci.Director.EVENT_BEFORE_COMMIT, this.beforeRender, this),
                    this.playOnAwake && this.play(),
                    this.processor.onEnable(),
                    this._trailModule && this._trailModule.onEnable()
                }
                ,
                i.onDisable = function() {
                    ci.director.off(ci.Director.EVENT_BEFORE_COMMIT, this.beforeRender, this),
                    this.processor.onDisable(),
                    this._trailModule && this._trailModule.onDisable(),
                    this._boundingBox && (this._boundingBox = null),
                    this._culler && (this._culler.clear(),
                    this._culler.destroy(),
                    this._culler = null)
                }
                ,
                i._calculateBounding = function(t) {
                    this._boundingBox && (this._culler || (this._culler = new Kj(this)),
                    this._culler.calculatePositions(),
                    sr.fromPoints(this._boundingBox, this._culler.minPos, this._culler.maxPos),
                    t ? (this.aabbHalfX = this._boundingBox.halfExtents.x,
                    this.aabbHalfY = this._boundingBox.halfExtents.y,
                    this.aabbHalfZ = this._boundingBox.halfExtents.z) : (this.aabbHalfX ? this.setBoundingX(this.aabbHalfX) : this.aabbHalfX = this._boundingBox.halfExtents.x,
                    this.aabbHalfY ? this.setBoundingY(this.aabbHalfY) : this.aabbHalfY = this._boundingBox.halfExtents.y,
                    this.aabbHalfZ ? this.setBoundingZ(this.aabbHalfZ) : this.aabbHalfZ = this._boundingBox.halfExtents.z),
                    this._culler.clear())
                }
                ,
                i.update = function(t) {
                    var e = t * this.simulationSpeed;
                    if (this.renderCulling) {
                        var i;
                        if (this._boundingBox || (this._boundingBox = new sr,
                        this._calculateBounding(!1)),
                        this._curPos || (this._curPos = new di),
                        this.node.getWorldPosition(this._curPos),
                        this._oldPos || (this._oldPos = new di,
                        this._oldPos.set(this._curPos)),
                        !this._curPos.equals(this._oldPos) && this._boundingBox && this._culler) {
                            var r = this._curPos.x - this._oldPos.x
                              , n = this._curPos.y - this._oldPos.y
                              , s = this._curPos.z - this._oldPos.z
                              , a = this._boundingBox.center;
                            a.x += r,
                            a.y += n,
                            a.z += s,
                            this._culler.setBoundingBoxCenter(a.x, a.y, a.z),
                            this._oldPos.set(this._curPos)
                        }
                        var o = null === (i = this.node.scene.renderScene) || void 0 === i ? void 0 : i.cameras
                          , l = !0;
                        if (void 0 !== o && this._boundingBox)
                            for (var h = 0; h < o.length; ++h) {
                                var u = o[h];
                                if ((u.visibility & this.node.layer) === this.node.layer && as.aabbFrustum(this._boundingBox, u.frustum)) {
                                    l = !1;
                                    break
                                }
                            }
                        if (l) {
                            if (this._cullingMode !== KL.AlwaysSimulate && this.pause(),
                            this._isCulled || (this.processor.detachFromScene(),
                            this._isCulled = !0),
                            this._trailModule && this._trailModule.enable && this._trailModule._detachFromScene(),
                            this._cullingMode === KL.PauseAndCatchup && (this._time += e),
                            this._cullingMode !== KL.AlwaysSimulate)
                                return
                        } else
                            this._isCulled && (this._attachToScene(),
                            this._isCulled = !1),
                            this._isPlaying || this.play()
                    } else
                        this._boundingBox && (this._boundingBox = null),
                        this._culler && (this._culler.clear(),
                        this._culler.destroy(),
                        this._culler = null);
                    this._isPlaying ? (this._time += e,
                    this._emit(e),
                    0 !== this.processor.updateParticles(e) || this._isEmitting || this.stop()) : (this.processor.updateRotation(),
                    this.processor.updateScale()),
                    this.processor.updateRenderData(),
                    this._trailModule && this._trailModule.enable && this._trailModule.updateRenderData()
                }
                ,
                i.beforeRender = function() {
                    this._isPlaying && (this.processor.beforeRender(),
                    this._trailModule && this._trailModule.enable && this._trailModule.beforeRender())
                }
                ,
                i._onVisibilityChange = function(t) {
                    this.processor._model && (this.processor._model.visFlags = t)
                }
                ,
                i.emit = function(t, e) {
                    var i = this._time % this.duration / this.duration;
                    this._needRefresh && (this.node.invalidateChildren(xi.POSITION),
                    this._needRefresh = !1),
                    this._simulationSpace === YL.World && (this.node.getWorldMatrix(Zj),
                    this.node.getWorldRotation(qj));
                    for (var r = 0; r < t; ++r) {
                        var n = this.processor.getFreeParticle();
                        if (null === n)
                            return;
                        n.particleSystem = this,
                        n.reset();
                        var s = Qn(es(0, ss));
                        this._shapeModule && this._shapeModule.enable ? this._shapeModule.emit(n) : (di.set(n.position, 0, 0, 0),
                        di.copy(n.velocity, rF)),
                        this._textureAnimationModule && this._textureAnimationModule.enable && this._textureAnimationModule.init(n);
                        var a = this.startSpeed.evaluate(i, s);
                        di.multiplyScalar(n.velocity, n.velocity, a),
                        this._simulationSpace === YL.World && (di.transformMat4(n.position, n.position, Zj),
                        di.transformQuat(n.velocity, n.velocity, qj)),
                        di.copy(n.ultimateVelocity, n.velocity),
                        this.startRotation3D ? n.startEuler.set(this.startRotationX.evaluate(i, s), this.startRotationY.evaluate(i, s), this.startRotationZ.evaluate(i, s)) : n.startEuler.set(0, 0, this.startRotationZ.evaluate(i, s)),
                        di.set(n.rotation, n.startEuler.x, n.startEuler.y, n.startEuler.z),
                        this.startSize3D ? di.set(n.startSize, this.startSizeX.evaluate(i, s), this.startSizeY.evaluate(i, s), this.startSizeZ.evaluate(i, s)) : (di.set(n.startSize, this.startSizeX.evaluate(i, s), 1, 1),
                        n.startSize.y = n.startSize.x),
                        di.copy(n.size, n.startSize),
                        n.startColor.set(this.startColor.evaluate(i, s)),
                        n.color.set(n.startColor),
                        n.startLifetime = this.startLifetime.evaluate(i, s) + e,
                        n.remainingLifetime = n.startLifetime,
                        n.randomSeed = es(0, 233280),
                        n.loopCount++,
                        this.processor.setNewParticle(n)
                    }
                }
                ,
                i._prewarmSystem = function() {
                    this.startDelay.mode = VM.Constant,
                    this.startDelay.constant = 0;
                    for (var t = this.duration / 1, e = 0; e < t; ++e)
                        this._time += 1,
                        this._emit(1),
                        this.processor.updateParticles(1)
                }
                ,
                i._emit = function(t) {
                    var e = this.startDelay.evaluate(0, 1);
                    if (this._time > e) {
                        if (this._time > this.duration + e && !this.loop)
                            return void (this._isEmitting = !1);
                        if (this._emitRateTimeCounter += this.rateOverTime.evaluate(this._time / this.duration, 1) * t,
                        this._emitRateTimeCounter > 1 && this._isEmitting) {
                            var i = Math.floor(this._emitRateTimeCounter);
                            this._emitRateTimeCounter -= i,
                            this.emit(i, t)
                        }
                        this.node.getWorldPosition(this._curWPos);
                        var r = di.distance(this._curWPos, this._oldWPos);
                        if (di.copy(this._oldWPos, this._curWPos),
                        this._emitRateDistanceCounter += r * this.rateOverDistance.evaluate(this._time / this.duration, 1),
                        this._emitRateDistanceCounter > 1 && this._isEmitting) {
                            var n = Math.floor(this._emitRateDistanceCounter);
                            this._emitRateDistanceCounter -= n,
                            this.emit(n, t)
                        }
                        for (var s, a = ui(this.bursts); !(s = a()).done; )
                            s.value.update(this, t)
                    }
                }
                ,
                i._resetPosition = function() {
                    this.node.getWorldPosition(this._oldWPos),
                    di.copy(this._curWPos, this._oldWPos)
                }
                ,
                i.addSubEmitter = function(t) {
                    this._subEmitters.push(t)
                }
                ,
                i.removeSubEmitter = function(t) {
                    this._subEmitters.splice(this._subEmitters.indexOf(t), 1)
                }
                ,
                i.addBurst = function(t) {
                    this.bursts.push(t)
                }
                ,
                i.removeBurst = function(t) {
                    this.bursts.splice(this.bursts.indexOf(t), 1)
                }
                ,
                i.getBoundingX = function() {
                    return this._aabbHalfX
                }
                ,
                i.getBoundingY = function() {
                    return this._aabbHalfY
                }
                ,
                i.getBoundingZ = function() {
                    return this._aabbHalfZ
                }
                ,
                i.setBoundingX = function(t) {
                    this._boundingBox && this._culler && (this._boundingBox.halfExtents.x = t,
                    this._culler.setBoundingBoxSize(this._boundingBox.halfExtents),
                    this._aabbHalfX = t)
                }
                ,
                i.setBoundingY = function(t) {
                    this._boundingBox && this._culler && (this._boundingBox.halfExtents.y = t,
                    this._culler.setBoundingBoxSize(this._boundingBox.halfExtents),
                    this._aabbHalfY = t)
                }
                ,
                i.setBoundingZ = function(t) {
                    this._boundingBox && this._culler && (this._boundingBox.halfExtents.z = t,
                    this._culler.setBoundingBoxSize(this._boundingBox.halfExtents),
                    this._aabbHalfZ = t)
                }
                ,
                i._onBeforeSerialize = function(t) {
                    var e = this;
                    return this.dataCulling ? t.filter((function(t) {
                        return !XL.includes(t) || e[t] && e[t].enable
                    }
                    )) : t
                }
                ,
                Je(e, [{
                    key: "capacity",
                    get: function() {
                        return this._capacity
                    },
                    set: function(t) {
                        this._capacity = Math.floor(t),
                        this.processor && this.processor._model && this.processor._model.setCapacity(this._capacity)
                    }
                }, {
                    key: "prewarm",
                    get: function() {
                        return this._prewarm
                    },
                    set: function(t) {
                        !0 === t && this.loop,
                        this._prewarm = t
                    }
                }, {
                    key: "simulationSpace",
                    get: function() {
                        return this._simulationSpace
                    },
                    set: function(t) {
                        t !== this._simulationSpace && (this._simulationSpace = t,
                        this.processor && (this.processor.updateMaterialParams(),
                        this.processor.updateTrailMaterial()))
                    }
                }, {
                    key: "renderCulling",
                    get: function() {
                        return this._renderCulling
                    },
                    set: function(t) {
                        this._renderCulling = t,
                        t && (this._boundingBox || (this._boundingBox = new sr,
                        this._calculateBounding(!1)))
                    }
                }, {
                    key: "cullingMode",
                    get: function() {
                        return this._cullingMode
                    },
                    set: function(t) {
                        this._cullingMode = t
                    }
                }, {
                    key: "aabbHalfX",
                    get: function() {
                        return this.getBoundingX() || 0
                    },
                    set: function(t) {
                        this.setBoundingX(t)
                    }
                }, {
                    key: "aabbHalfY",
                    get: function() {
                        return this.getBoundingY() || 0
                    },
                    set: function(t) {
                        this.setBoundingY(t)
                    }
                }, {
                    key: "aabbHalfZ",
                    get: function() {
                        return this.getBoundingZ() || 0
                    },
                    set: function(t) {
                        this.setBoundingZ(t)
                    }
                }, {
                    key: "dataCulling",
                    get: function() {
                        return this._dataCulling
                    },
                    set: function(t) {
                        this._dataCulling = t
                    }
                }, {
                    key: "sharedMaterials",
                    get: function() {
                        return Jj.get.call(this)
                    },
                    set: function(t) {
                        Jj.set.call(this, t)
                    }
                }, {
                    key: "colorOverLifetimeModule",
                    get: function() {
                        return this._colorOverLifetimeModule
                    },
                    set: function(t) {
                        t && (this._colorOverLifetimeModule = t)
                    }
                }, {
                    key: "shapeModule",
                    get: function() {
                        return this._shapeModule
                    },
                    set: function(t) {
                        t && (this._shapeModule = t)
                    }
                }, {
                    key: "sizeOvertimeModule",
                    get: function() {
                        return this._sizeOvertimeModule
                    },
                    set: function(t) {
                        t && (this._sizeOvertimeModule = t)
                    }
                }, {
                    key: "velocityOvertimeModule",
                    get: function() {
                        return this._velocityOvertimeModule
                    },
                    set: function(t) {
                        t && (this._velocityOvertimeModule = t)
                    }
                }, {
                    key: "forceOvertimeModule",
                    get: function() {
                        return this._forceOvertimeModule
                    },
                    set: function(t) {
                        t && (this._forceOvertimeModule = t)
                    }
                }, {
                    key: "limitVelocityOvertimeModule",
                    get: function() {
                        return this._limitVelocityOvertimeModule
                    },
                    set: function(t) {
                        t && (this._limitVelocityOvertimeModule = t)
                    }
                }, {
                    key: "rotationOvertimeModule",
                    get: function() {
                        return this._rotationOvertimeModule
                    },
                    set: function(t) {
                        t && (this._rotationOvertimeModule = t)
                    }
                }, {
                    key: "textureAnimationModule",
                    get: function() {
                        return this._textureAnimationModule
                    },
                    set: function(t) {
                        t && (this._textureAnimationModule = t)
                    }
                }, {
                    key: "trailModule",
                    get: function() {
                        return this._trailModule
                    },
                    set: function(t) {
                        t && (this._trailModule = t)
                    }
                }, {
                    key: "isPlaying",
                    get: function() {
                        return this._isPlaying
                    }
                }, {
                    key: "isPaused",
                    get: function() {
                        return this._isPaused
                    }
                }, {
                    key: "isStopped",
                    get: function() {
                        return this._isStopped
                    }
                }, {
                    key: "isEmitting",
                    get: function() {
                        return this._isEmitting
                    }
                }, {
                    key: "time",
                    get: function() {
                        return this._time
                    }
                }]),
                e
            }(zi),
            Pj.CullingMode = KL,
            Ei((XX = Mj).prototype, "capacity", [pV, fV], Object.getOwnPropertyDescriptor(XX.prototype, "capacity"), XX.prototype),
            jX = Ei(XX.prototype, "startColor", [gV, Pi, mV, yV], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new tL
                }
            }),
            YX = Ei(XX.prototype, "scaleSpace", [vV, Pi, SV, TV], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return YL.Local
                }
            }),
            KX = Ei(XX.prototype, "startSize3D", [Pi, bV, EV], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            ZX = Ei(XX.prototype, "startSizeX", [AV, CV, RV, BV, xV], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            qX = Ei(XX.prototype, "startSizeY", [DV, Pi, wV, OV, PV], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            JX = Ei(XX.prototype, "startSizeZ", [MV, Pi, IV, LV, FV], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            QX = Ei(XX.prototype, "startSpeed", [NV, Pi, kV, GV, zV], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            $X = Ei(XX.prototype, "startRotation3D", [Pi, UV, HV], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            tj = Ei(XX.prototype, "startRotationX", [VV, Pi, WV, rs, XV, jV], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            ej = Ei(XX.prototype, "startRotationY", [YV, Pi, KV, rs, ZV, qV], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            ij = Ei(XX.prototype, "startRotationZ", [JV, QV, $V, rs, tW, eW], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            rj = Ei(XX.prototype, "startDelay", [iW, Pi, rW, nW, sW], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            nj = Ei(XX.prototype, "startLifetime", [aW, Pi, oW, lW, hW], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            sj = Ei(XX.prototype, "duration", [Pi, uW, cW], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 5
                }
            }),
            aj = Ei(XX.prototype, "loop", [Pi, _W, dW], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            Ei(XX.prototype, "prewarm", [pW, fW], Object.getOwnPropertyDescriptor(XX.prototype, "prewarm"), XX.prototype),
            Ei(XX.prototype, "simulationSpace", [gW, Pi, mW, yW], Object.getOwnPropertyDescriptor(XX.prototype, "simulationSpace"), XX.prototype),
            oj = Ei(XX.prototype, "simulationSpeed", [Pi, vW, SW], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            lj = Ei(XX.prototype, "playOnAwake", [Pi, TW, bW], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            hj = Ei(XX.prototype, "gravityModifier", [EW, Pi, AW, CW, RW], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            uj = Ei(XX.prototype, "rateOverTime", [BW, Pi, xW, DW, wW], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            cj = Ei(XX.prototype, "rateOverDistance", [OW, Pi, PW, MW, IW], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new WM
                }
            }),
            _j = Ei(XX.prototype, "bursts", [LW, Pi, FW, NW], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            Ei(XX.prototype, "renderCulling", [kW, GW, zW], Object.getOwnPropertyDescriptor(XX.prototype, "renderCulling"), XX.prototype),
            dj = Ei(XX.prototype, "_renderCulling", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Ei(XX.prototype, "cullingMode", [UW, HW, VW], Object.getOwnPropertyDescriptor(XX.prototype, "cullingMode"), XX.prototype),
            pj = Ei(XX.prototype, "_cullingMode", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return KL.Pause
                }
            }),
            Ei(XX.prototype, "aabbHalfX", [WW, XW, jW], Object.getOwnPropertyDescriptor(XX.prototype, "aabbHalfX"), XX.prototype),
            fj = Ei(XX.prototype, "_aabbHalfX", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Ei(XX.prototype, "aabbHalfY", [YW, KW, ZW], Object.getOwnPropertyDescriptor(XX.prototype, "aabbHalfY"), XX.prototype),
            gj = Ei(XX.prototype, "_aabbHalfY", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Ei(XX.prototype, "aabbHalfZ", [qW, JW, QW], Object.getOwnPropertyDescriptor(XX.prototype, "aabbHalfZ"), XX.prototype),
            mj = Ei(XX.prototype, "_aabbHalfZ", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Ei(XX.prototype, "dataCulling", [$W, tX], Object.getOwnPropertyDescriptor(XX.prototype, "dataCulling"), XX.prototype),
            yj = Ei(XX.prototype, "_dataCulling", [Pi, eX], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            Ei(XX.prototype, "sharedMaterials", [Rr, iX, rX, Pi, nX], Object.getOwnPropertyDescriptor(XX.prototype, "sharedMaterials"), XX.prototype),
            vj = Ei(XX.prototype, "_colorOverLifetimeModule", [sX], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ei(XX.prototype, "colorOverLifetimeModule", [aX, oX, lX], Object.getOwnPropertyDescriptor(XX.prototype, "colorOverLifetimeModule"), XX.prototype),
            Sj = Ei(XX.prototype, "_shapeModule", [hX], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ei(XX.prototype, "shapeModule", [uX, cX, _X], Object.getOwnPropertyDescriptor(XX.prototype, "shapeModule"), XX.prototype),
            Tj = Ei(XX.prototype, "_sizeOvertimeModule", [dX], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ei(XX.prototype, "sizeOvertimeModule", [pX, fX, gX], Object.getOwnPropertyDescriptor(XX.prototype, "sizeOvertimeModule"), XX.prototype),
            bj = Ei(XX.prototype, "_velocityOvertimeModule", [mX], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ei(XX.prototype, "velocityOvertimeModule", [yX, vX, SX], Object.getOwnPropertyDescriptor(XX.prototype, "velocityOvertimeModule"), XX.prototype),
            Ej = Ei(XX.prototype, "_forceOvertimeModule", [TX], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ei(XX.prototype, "forceOvertimeModule", [bX, EX, AX], Object.getOwnPropertyDescriptor(XX.prototype, "forceOvertimeModule"), XX.prototype),
            Aj = Ei(XX.prototype, "_limitVelocityOvertimeModule", [CX], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ei(XX.prototype, "limitVelocityOvertimeModule", [RX, BX, xX], Object.getOwnPropertyDescriptor(XX.prototype, "limitVelocityOvertimeModule"), XX.prototype),
            Cj = Ei(XX.prototype, "_rotationOvertimeModule", [DX], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ei(XX.prototype, "rotationOvertimeModule", [wX, OX, PX], Object.getOwnPropertyDescriptor(XX.prototype, "rotationOvertimeModule"), XX.prototype),
            Rj = Ei(XX.prototype, "_textureAnimationModule", [MX], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ei(XX.prototype, "textureAnimationModule", [IX, LX, FX], Object.getOwnPropertyDescriptor(XX.prototype, "textureAnimationModule"), XX.prototype),
            Bj = Ei(XX.prototype, "_trailModule", [NX], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            Ei(XX.prototype, "trailModule", [kX, GX, zX], Object.getOwnPropertyDescriptor(XX.prototype, "trailModule"), XX.prototype),
            xj = Ei(XX.prototype, "renderer", [UX, Pi, HX, VX], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new Ij
                }
            }),
            Dj = Ei(XX.prototype, "_prewarm", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            wj = Ei(XX.prototype, "_capacity", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 100
                }
            }),
            Oj = Ei(XX.prototype, "_simulationSpace", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return YL.Local
                }
            }),
            WX = XX)) || WX) || WX) || WX) || WX) || WX)), $j = t("ParticleUtils", function() {
                function t() {}
                return t.instantiate = function(t) {
                    return this.registeredSceneEvent || (Ur.on(Hr.EVENT_BEFORE_SCENE_LAUNCH, this.onSceneUnload, this),
                    this.registeredSceneEvent = !0),
                    this.particleSystemPool.has(t._uuid) || this.particleSystemPool.set(t._uuid, new e((function() {
                        return os(t) || new Sr
                    }
                    ),1,(function(t) {
                        return t.destroy()
                    }
                    ))),
                    this.particleSystemPool.get(t._uuid).alloc()
                }
                ,
                t.destroy = function(t) {
                    this.particleSystemPool.has(t._prefab.asset._uuid) && (this.stop(t),
                    this.particleSystemPool.get(t._prefab.asset._uuid).free(t))
                }
                ,
                t.play = function(t) {
                    for (var e, i = ui(t.getComponentsInChildren(Qj)); !(e = i()).done; )
                        e.value.play()
                }
                ,
                t.stop = function(t) {
                    for (var e, i = ui(t.getComponentsInChildren(Qj)); !(e = i()).done; )
                        e.value.stop()
                }
                ,
                t.onSceneUnload = function() {
                    this.particleSystemPool.forEach((function(t) {
                        return t.destroy()
                    }
                    )),
                    this.particleSystemPool.clear()
                }
                ,
                t
            }());
            $j.particleSystemPool = new Map,
            $j.registeredSceneEvent = !1,
            Hi(eU.prototype, "Burst.prototype", [{
                name: "minCount"
            }, {
                name: "maxCount"
            }]),
            rr(Qj.prototype, "ParticleSystem.prototype", [{
                name: "enableCulling",
                newName: "dataCulling"
            }]),
            ci.ParticleSystemComponent = Qj,
            Vi.setClassAlias(Qj, "cc.ParticleSystemComponent"),
            ci.BillboardComponent = NM,
            Vi.setClassAlias(NM, "cc.BillboardComponent"),
            ci.LineComponent = nL,
            Vi.setClassAlias(nL, "cc.LineComponent"),
            ci.ParticleUtils = $j;
            var tY = {
                type: "onTriggerEnter",
                selfCollider: null,
                otherCollider: null,
                impl: null
            }
              , eY = {
                type: "onCollisionEnter",
                selfCollider: null,
                otherCollider: null,
                contacts: [],
                impl: null
            }
              , iY = function() {
                function t() {
                    this.BT_TRANSFORM_0 = ls.Transform_new(),
                    this.BT_TRANSFORM_1 = ls.Transform_new(),
                    this.BT_V3_0 = ls.Vec3_new(0, 0, 0),
                    this.BT_V3_1 = ls.Vec3_new(0, 0, 0),
                    this.BT_V3_2 = ls.Vec3_new(0, 0, 0),
                    this.BT_QUAT_0 = ls.Quat_new(0, 0, 0, 1)
                }
                return t.setWrapper = function(t, e, i) {
                    this.ROOT[e] || (this.ROOT[e] = {}),
                    this.ROOT[e][t] = i
                }
                ,
                t.delWrapper = function(t, e) {
                    delete this.ROOT[e][t]
                }
                ,
                t.getWrapper = function(t, e) {
                    return this.ROOT[e][t]
                }
                ,
                t.isNotEmptyShape = function(t) {
                    return t !== ls.EmptyShape_static()
                }
                ,
                Je(t, null, [{
                    key: "instance",
                    get: function() {
                        return null == t._instance && (t._instance = new t),
                        t._instance
                    }
                }]),
                t
            }();
            iY._instance = void 0,
            iY.ROOT = {};
            var rY, nY, sY, aY, oY, lY = new di, hY = new di, uY = new nr;
            function cY(t, e) {
                return ls.Vec3_set(t, e.x, e.y, e.z),
                t
            }
            function _Y(t, e) {
                return t.x = ls.Vec3_x(e),
                t.y = ls.Vec3_y(e),
                t.z = ls.Vec3_z(e),
                t
            }
            function dY(t, e) {
                return ls.Quat_set(t, e.x, e.y, e.z, e.w),
                t
            }
            function pY(t, e) {
                return t.x = ls.Quat_x(e),
                t.y = ls.Quat_y(e),
                t.z = ls.Quat_z(e),
                t.w = ls.Quat_w(e),
                t
            }
            ls.CACHE = iY,
            function(t) {
                t[t.BODY_RE_ADD = 1] = "BODY_RE_ADD",
                t[t.GHOST_RE_ADD = 2] = "GHOST_RE_ADD"
            }(rY || (rY = {})),
            function(t) {
                t[t.CF_STATIC_OBJECT = 1] = "CF_STATIC_OBJECT",
                t[t.CF_KINEMATIC_OBJECT = 2] = "CF_KINEMATIC_OBJECT",
                t[t.CF_NO_CONTACT_RESPONSE = 4] = "CF_NO_CONTACT_RESPONSE",
                t[t.CF_CUSTOM_MATERIAL_CALLBACK = 8] = "CF_CUSTOM_MATERIAL_CALLBACK",
                t[t.CF_CHARACTER_OBJECT = 16] = "CF_CHARACTER_OBJECT",
                t[t.CF_DISABLE_VISUALIZE_OBJECT = 32] = "CF_DISABLE_VISUALIZE_OBJECT",
                t[t.CF_DISABLE_SPU_COLLISION_PROCESSING = 64] = "CF_DISABLE_SPU_COLLISION_PROCESSING"
            }(nY || (nY = {})),
            function(t) {
                t[t.CO_COLLISION_OBJECT = 1] = "CO_COLLISION_OBJECT",
                t[t.CO_RIGID_BODY = 2] = "CO_RIGID_BODY",
                t[t.CO_GHOST_OBJECT = 4] = "CO_GHOST_OBJECT",
                t[t.CO_SOFT_BODY = 8] = "CO_SOFT_BODY",
                t[t.CO_HF_FLUID = 16] = "CO_HF_FLUID",
                t[t.CO_USER_TYPE = 32] = "CO_USER_TYPE",
                t[t.CO_FEATHERSTONE_LINK = 64] = "CO_FEATHERSTONE_LINK"
            }(sY || (sY = {})),
            function(t) {
                t[t.ACTIVE_TAG = 1] = "ACTIVE_TAG",
                t[t.ISLAND_SLEEPING = 2] = "ISLAND_SLEEPING",
                t[t.WANTS_DEACTIVATION = 3] = "WANTS_DEACTIVATION",
                t[t.DISABLE_DEACTIVATION = 4] = "DISABLE_DEACTIVATION",
                t[t.DISABLE_SIMULATION = 5] = "DISABLE_SIMULATION"
            }(aY || (aY = {})),
            function(t) {
                t[t.BT_DISABLE_WORLD_GRAVITY = 1] = "BT_DISABLE_WORLD_GRAVITY",
                t[t.BT_ENABLE_GYROPSCOPIC_FORCE = 2] = "BT_ENABLE_GYROPSCOPIC_FORCE"
            }(oY || (oY = {}));
            var fY = lY
              , gY = hY
              , mY = function() {
                var t = e.prototype;
                function e() {
                    this.id = void 0,
                    this._isEnabled = !1,
                    this._isUsingCCD = !1,
                    this.id = e.idCounter++
                }
                return t.setMass = function(t) {
                    this._rigidBody.isDynamic && (ls.RigidBody_setMass(this.impl, t),
                    this._wakeUpIfSleep(),
                    this._sharedBody.dirty |= rY.BODY_RE_ADD)
                }
                ,
                t.setType = function(t) {
                    this._sharedBody.setType(t)
                }
                ,
                t.setLinearDamping = function() {
                    ls.RigidBody_setDamping(this.impl, this._rigidBody.linearDamping, this._rigidBody.angularDamping)
                }
                ,
                t.setAngularDamping = function() {
                    ls.RigidBody_setDamping(this.impl, this._rigidBody.linearDamping, this._rigidBody.angularDamping)
                }
                ,
                t.useGravity = function(t) {
                    if (this._rigidBody.isDynamic) {
                        var e = ls.RigidBody_getFlags(this.impl);
                        t ? e &= ~oY.BT_DISABLE_WORLD_GRAVITY : (ls.RigidBody_setGravity(this.impl, cY(iY.instance.BT_V3_0, di.ZERO)),
                        e |= oY.BT_DISABLE_WORLD_GRAVITY),
                        ls.RigidBody_setFlags(this.impl, e),
                        this._wakeUpIfSleep(),
                        this._sharedBody.dirty |= rY.BODY_RE_ADD
                    }
                }
                ,
                t.useCCD = function(t) {
                    ls.CollisionObject_setCcdMotionThreshold(this.impl, t ? .01 : 0),
                    ls.CollisionObject_setCcdSweptSphereRadius(this.impl, t ? .1 : 0),
                    this._isUsingCCD = t
                }
                ,
                t.isUsingCCD = function() {
                    return this._isUsingCCD
                }
                ,
                t.setLinearFactor = function(t) {
                    ls.RigidBody_setLinearFactor(this.impl, cY(iY.instance.BT_V3_0, t)),
                    this._wakeUpIfSleep()
                }
                ,
                t.setAngularFactor = function(t) {
                    ls.RigidBody_setAngularFactor(this.impl, cY(iY.instance.BT_V3_0, t)),
                    this._wakeUpIfSleep()
                }
                ,
                t.setAllowSleep = function(t) {
                    this._rigidBody.isDynamic && (t ? ls.CollisionObject_forceActivationState(this.impl, aY.ACTIVE_TAG) : ls.CollisionObject_forceActivationState(this.impl, aY.DISABLE_DEACTIVATION),
                    this._wakeUpIfSleep())
                }
                ,
                t.clearState = function() {
                    ls.RigidBody_clearState(this.impl)
                }
                ,
                t.clearVelocity = function() {
                    this.setLinearVelocity(di.ZERO),
                    this.setAngularVelocity(di.ZERO)
                }
                ,
                t.clearForces = function() {
                    ls.RigidBody_clearForces(this.impl)
                }
                ,
                t.initialize = function(t) {
                    this._rigidBody = t,
                    this._sharedBody = hs.instance.physicsWorld.getSharedBody(this._rigidBody.node, this),
                    this._sharedBody.reference = !0
                }
                ,
                t.onEnable = function() {
                    this._isEnabled = !0,
                    this.setMass(this._rigidBody.mass),
                    this.setAllowSleep(this._rigidBody.allowSleep),
                    this.setLinearDamping(this._rigidBody.linearDamping),
                    this.setAngularDamping(this._rigidBody.angularDamping),
                    this.setLinearFactor(this._rigidBody.linearFactor),
                    this.setAngularFactor(this._rigidBody.angularFactor),
                    this.useGravity(this._rigidBody.useGravity),
                    this._sharedBody.bodyEnabled = !0
                }
                ,
                t.onDisable = function() {
                    this._isEnabled = !1,
                    this._sharedBody.bodyEnabled = !1
                }
                ,
                t.onDestroy = function() {
                    this._sharedBody.reference = !1,
                    this._rigidBody = null,
                    this._sharedBody = null
                }
                ,
                t.wakeUp = function(t) {
                    void 0 === t && (t = !0),
                    ls.CollisionObject_activate(this.impl, t)
                }
                ,
                t.sleep = function() {
                    return ls.RigidBody_wantsSleeping(this.impl)
                }
                ,
                t.setSleepThreshold = function(t) {
                    this._wakeUpIfSleep(),
                    ls.RigidBody_setSleepingThresholds(this.impl, t, t)
                }
                ,
                t.getSleepThreshold = function() {
                    return ls.RigidBody_getLinearSleepingThreshold(this.impl)
                }
                ,
                t.getLinearVelocity = function(t) {
                    return _Y(t, ls.RigidBody_getLinearVelocity(this.impl))
                }
                ,
                t.setLinearVelocity = function(t) {
                    this._wakeUpIfSleep(),
                    cY(ls.RigidBody_getLinearVelocity(this.impl), t)
                }
                ,
                t.getAngularVelocity = function(t) {
                    return _Y(t, ls.RigidBody_getAngularVelocity(this.impl))
                }
                ,
                t.setAngularVelocity = function(t) {
                    this._wakeUpIfSleep(),
                    cY(ls.RigidBody_getAngularVelocity(this.impl), t)
                }
                ,
                t.applyLocalForce = function(t, e) {
                    this._sharedBody.syncSceneToPhysics(),
                    this._wakeUpIfSleep();
                    var i = this._sharedBody.node.worldRotation
                      , r = di.transformQuat(fY, t, i)
                      , n = e ? di.transformQuat(gY, e, i) : di.ZERO;
                    ls.RigidBody_applyForce(this.impl, cY(iY.instance.BT_V3_0, r), cY(iY.instance.BT_V3_1, n))
                }
                ,
                t.applyLocalTorque = function(t) {
                    this._sharedBody.syncSceneToPhysics(),
                    this._wakeUpIfSleep(),
                    di.transformQuat(fY, t, this._sharedBody.node.worldRotation),
                    ls.RigidBody_applyTorque(this.impl, cY(iY.instance.BT_V3_0, fY))
                }
                ,
                t.applyLocalImpulse = function(t, e) {
                    this._sharedBody.syncSceneToPhysics(),
                    this._wakeUpIfSleep();
                    var i = this._sharedBody.node.worldRotation
                      , r = di.transformQuat(fY, t, i)
                      , n = e ? di.transformQuat(gY, e, i) : di.ZERO;
                    ls.RigidBody_applyImpulse(this.impl, cY(iY.instance.BT_V3_0, r), cY(iY.instance.BT_V3_1, n))
                }
                ,
                t.applyForce = function(t, e) {
                    this._sharedBody.syncSceneToPhysics(),
                    this._wakeUpIfSleep();
                    var i = e || di.ZERO;
                    ls.RigidBody_applyForce(this.impl, cY(iY.instance.BT_V3_0, t), cY(iY.instance.BT_V3_1, i))
                }
                ,
                t.applyTorque = function(t) {
                    this._sharedBody.syncSceneToPhysics(),
                    this._wakeUpIfSleep(),
                    ls.RigidBody_applyTorque(this.impl, cY(iY.instance.BT_V3_0, t))
                }
                ,
                t.applyImpulse = function(t, e) {
                    this._sharedBody.syncSceneToPhysics(),
                    this._wakeUpIfSleep();
                    var i = e || di.ZERO;
                    ls.RigidBody_applyImpulse(this.impl, cY(iY.instance.BT_V3_0, t), cY(iY.instance.BT_V3_1, i))
                }
                ,
                t.getGroup = function() {
                    return this._sharedBody.collisionFilterGroup
                }
                ,
                t.setGroup = function(t) {
                    this._sharedBody.collisionFilterGroup = t
                }
                ,
                t.addGroup = function(t) {
                    this._sharedBody.collisionFilterGroup |= t
                }
                ,
                t.removeGroup = function(t) {
                    this._sharedBody.collisionFilterGroup &= ~t
                }
                ,
                t.getMask = function() {
                    return this._sharedBody.collisionFilterMask
                }
                ,
                t.setMask = function(t) {
                    this._sharedBody.collisionFilterMask = t
                }
                ,
                t.addMask = function(t) {
                    this._sharedBody.collisionFilterMask |= t
                }
                ,
                t.removeMask = function(t) {
                    this._sharedBody.collisionFilterMask &= ~t
                }
                ,
                t._wakeUpIfSleep = function() {
                    this.isAwake || ls.CollisionObject_activate(this.impl, !0)
                }
                ,
                Je(e, [{
                    key: "isAwake",
                    get: function() {
                        var t = ls.CollisionObject_getActivationState(this.impl);
                        return t === aY.ACTIVE_TAG || t === aY.DISABLE_DEACTIVATION
                    }
                }, {
                    key: "isSleepy",
                    get: function() {
                        return ls.CollisionObject_getActivationState(this.impl) === aY.WANTS_DEACTIVATION
                    }
                }, {
                    key: "isSleeping",
                    get: function() {
                        return ls.CollisionObject_getActivationState(this.impl) === aY.ISLAND_SLEEPING
                    }
                }, {
                    key: "impl",
                    get: function() {
                        return this._sharedBody.body
                    }
                }, {
                    key: "rigidBody",
                    get: function() {
                        return this._rigidBody
                    }
                }, {
                    key: "sharedBody",
                    get: function() {
                        return this._sharedBody
                    }
                }, {
                    key: "isEnabled",
                    get: function() {
                        return this._isEnabled
                    }
                }]),
                e
            }();
            mY.idCounter = 0;
            var yY = lY
              , vY = uY
              , SY = 0
              , TY = function() {
                function t(e, i) {
                    this.id = void 0,
                    this.node = void 0,
                    this.wrappedWorld = void 0,
                    this.wrappedJoints0 = [],
                    this.wrappedJoints1 = [],
                    this.dirty = 0,
                    this._collisionFilterGroup = hs.PhysicsGroup.DEFAULT,
                    this._collisionFilterMask = -1,
                    this.ref = 0,
                    this.bodyIndex = -1,
                    this.ghostIndex = -1,
                    this._wrappedBody = null,
                    this.id = t.idCounter++,
                    this.wrappedWorld = i,
                    this.node = e
                }
                t.getSharedBody = function(e, i, r) {
                    var n, s = e.uuid;
                    if (t.sharedBodesMap.has(s))
                        n = t.sharedBodesMap.get(s);
                    else {
                        n = new t(e,i);
                        var a = _s.DEFAULT
                          , o = hs.instance.collisionMatrix[a];
                        n._collisionFilterGroup = a,
                        n._collisionFilterMask = o,
                        t.sharedBodesMap.set(e.uuid, n)
                    }
                    if (r) {
                        n._wrappedBody = r;
                        var l = r.rigidBody.group
                          , h = hs.instance.collisionMatrix[l];
                        n._collisionFilterGroup = l,
                        n._collisionFilterMask = h
                    }
                    return n
                }
                ;
                var e = t.prototype;
                return e._instantiateBodyStruct = function() {
                    if (!this._bodyStruct) {
                        var t = 0;
                        this._wrappedBody && this._wrappedBody.rigidBody.enabled && this._wrappedBody.rigidBody.isDynamic && (t = this._wrappedBody.rigidBody.mass);
                        var e = iY.instance.BT_TRANSFORM_0
                          , i = iY.instance.BT_QUAT_0;
                        cY(ls.Transform_getOrigin(e), this.node.worldPosition),
                        dY(i, this.node.worldRotation),
                        ls.Transform_setRotation(e, i);
                        var r = ls.ccMotionState_new(this.id, e)
                          , n = ls.RigidBody_new(t, r)
                          , s = hs.instance.sleepThreshold;
                        ls.RigidBody_setSleepingThresholds(n, s, s),
                        this._bodyStruct = {
                            id: SY++,
                            body: n,
                            motionState: r,
                            compound: ls.ccCompoundShape_new(),
                            wrappedShapes: [],
                            useCompound: !1
                        },
                        iY.setWrapper(this.id, ls.BODY_CACHE_NAME, this),
                        this._ghostStruct && ls.CollisionObject_setIgnoreCollisionCheck(this.ghost, this.body, !0),
                        this._wrappedBody && this.setBodyType(this._wrappedBody.rigidBody.type)
                    }
                }
                ,
                e._instantiateGhostStruct = function() {
                    if (!this._ghostStruct) {
                        var t = ls.CollisionObject_new()
                          , e = ls.ccCompoundShape_new();
                        ls.CollisionObject_setCollisionShape(t, e),
                        ls.CollisionObject_setCollisionFlags(t, nY.CF_STATIC_OBJECT | nY.CF_NO_CONTACT_RESPONSE),
                        this._ghostStruct = {
                            id: SY++,
                            ghost: t,
                            compound: e,
                            wrappedShapes: []
                        },
                        this._bodyStruct && ls.CollisionObject_setIgnoreCollisionCheck(this.body, this.ghost, !0),
                        this._wrappedBody && this.setGhostType(this._wrappedBody.rigidBody.type)
                    }
                }
                ,
                e.setType = function(t) {
                    this.setBodyType(t),
                    this.setGhostType(t)
                }
                ,
                e.setBodyType = function(t) {
                    if (this._bodyStruct && this._wrappedBody) {
                        var e = this._bodyStruct.body
                          , i = this._wrappedBody
                          , r = i.rigidBody
                          , n = ls.CollisionObject_getCollisionFlags(e)
                          , s = iY.instance.BT_V3_0;
                        switch (t) {
                        case us.DYNAMIC:
                            n &= ~nY.CF_KINEMATIC_OBJECT,
                            n &= ~nY.CF_STATIC_OBJECT,
                            ls.CollisionObject_setCollisionFlags(e, n),
                            i.setMass(r.mass),
                            i.useGravity(r.useGravity),
                            i.setAllowSleep(r.allowSleep);
                            break;
                        case us.KINEMATIC:
                            ls.Vec3_set(s, 0, 0, 0),
                            ls.RigidBody_setMassProps(e, 0, s),
                            n |= nY.CF_KINEMATIC_OBJECT,
                            n &= ~nY.CF_STATIC_OBJECT,
                            ls.CollisionObject_setCollisionFlags(e, n),
                            ls.CollisionObject_forceActivationState(e, aY.DISABLE_DEACTIVATION);
                            break;
                        case us.STATIC:
                        default:
                            ls.Vec3_set(s, 0, 0, 0),
                            ls.RigidBody_setMassProps(e, 0, s),
                            n |= nY.CF_STATIC_OBJECT,
                            n &= ~nY.CF_KINEMATIC_OBJECT,
                            ls.CollisionObject_setCollisionFlags(e, n),
                            ls.CollisionObject_forceActivationState(e, aY.ISLAND_SLEEPING)
                        }
                        this.dirty |= rY.BODY_RE_ADD
                    }
                }
                ,
                e.setGhostType = function(t) {
                    if (this._ghostStruct) {
                        var e = this._ghostStruct.ghost
                          , i = ls.CollisionObject_getCollisionFlags(e);
                        switch (t) {
                        case us.DYNAMIC:
                        case us.KINEMATIC:
                            i &= ~nY.CF_STATIC_OBJECT,
                            i |= nY.CF_KINEMATIC_OBJECT,
                            ls.CollisionObject_setCollisionFlags(e, i),
                            ls.CollisionObject_forceActivationState(e, aY.DISABLE_DEACTIVATION);
                            break;
                        case us.STATIC:
                        default:
                            i &= ~nY.CF_KINEMATIC_OBJECT,
                            i |= nY.CF_STATIC_OBJECT,
                            ls.CollisionObject_setCollisionFlags(e, i),
                            ls.CollisionObject_forceActivationState(e, aY.ISLAND_SLEEPING)
                        }
                        this.dirty |= rY.GHOST_RE_ADD
                    }
                }
                ,
                e.addShape = function(t, e) {
                    function i(t, e) {
                        ls.CollisionObject_setCollisionShape(t.body, e),
                        t.dirty |= rY.BODY_RE_ADD,
                        t._wrappedBody && t._wrappedBody.isEnabled && t._wrappedBody.setMass(t._wrappedBody.rigidBody.mass)
                    }
                    if (e)
                        this.ghostStruct.wrappedShapes.indexOf(t) < 0 && (this.ghostStruct.wrappedShapes.push(t),
                        t.setCompound(this.ghostCompoundShape),
                        this.ghostEnabled = !0);
                    else if (this.bodyStruct.wrappedShapes.indexOf(t) < 0) {
                        if (this.bodyStruct.wrappedShapes.push(t),
                        this.bodyStruct.useCompound)
                            t.setCompound(this.bodyCompoundShape);
                        else {
                            var r = this.bodyStruct.wrappedShapes.length;
                            if (1 !== r || t.needCompound()) {
                                this.bodyStruct.useCompound = !0;
                                for (var n = 0; n < r; n++)
                                    this.bodyStruct.wrappedShapes[n].setCompound(this.bodyCompoundShape);
                                i(this, this.bodyStruct.compound)
                            } else
                                i(this, t.impl)
                        }
                        this.bodyEnabled = !0
                    }
                }
                ,
                e.removeShape = function(t, e) {
                    if (e) {
                        var i = this.ghostStruct.wrappedShapes.indexOf(t);
                        i >= 0 && (cs(this.ghostStruct.wrappedShapes, i),
                        t.setCompound(0),
                        this.ghostEnabled = !1)
                    } else {
                        var r = this.bodyStruct.wrappedShapes.indexOf(t);
                        r >= 0 && (this.bodyStruct.useCompound ? t.setCompound(0) : ls.CollisionObject_setCollisionShape(this.body, ls.EmptyShape_static()),
                        ls.CollisionObject_activate(this.body, !0),
                        this.dirty |= rY.BODY_RE_ADD,
                        cs(this.bodyStruct.wrappedShapes, r),
                        this.bodyEnabled = !1)
                    }
                }
                ,
                e.addJoint = function(t, e) {
                    e ? this.wrappedJoints1.indexOf(t) < 0 && this.wrappedJoints1.push(t) : this.wrappedJoints0.indexOf(t) < 0 && this.wrappedJoints0.push(t)
                }
                ,
                e.removeJoint = function(t, e) {
                    if (e) {
                        var i = this.wrappedJoints1.indexOf(t);
                        i >= 0 && cs(this.wrappedJoints1, i)
                    } else {
                        var r = this.wrappedJoints0.indexOf(t);
                        r >= 0 && cs(this.wrappedJoints0, r)
                    }
                }
                ,
                e.updateDirty = function() {
                    this.dirty && (this.bodyIndex >= 0 && this.dirty & rY.BODY_RE_ADD && this.updateBodyByReAdd(),
                    this.ghostIndex >= 0 && this.dirty & rY.GHOST_RE_ADD && this.updateGhostByReAdd(),
                    this.dirty = 0)
                }
                ,
                e.syncSceneToPhysics = function() {
                    if (this.node.hasChangedFlags) {
                        var t = iY.instance.BT_QUAT_0
                          , e = ls.CollisionObject_getWorldTransform(this.body);
                        if (dY(t, this.node.worldRotation),
                        cY(ls.Transform_getOrigin(e), this.node.worldPosition),
                        ls.Transform_setRotation(e, t),
                        this.node.hasChangedFlags & xi.SCALE && this.syncBodyScale(),
                        ls.CollisionObject_isKinematicObject(this.body)) {
                            var i = ls.RigidBody_getMotionState(this.body);
                            i && ls.MotionState_setWorldTransform(i, e)
                        } else
                            this.isBodySleeping() && ls.CollisionObject_activate(this.body)
                    }
                }
                ,
                e.syncPhysicsToScene = function() {
                    ls.CollisionObject_isStaticOrKinematicObject(this.body) || this.syncPhysicsToGraphics()
                }
                ,
                e.syncPhysicsToGraphics = function() {
                    if (!this.isBodySleeping()) {
                        var t = iY.instance.BT_QUAT_0
                          , e = iY.instance.BT_TRANSFORM_0;
                        if (ls.MotionState_getWorldTransform(ls.RigidBody_getMotionState(this.body), e),
                        ls.Transform_getRotation(e, t),
                        this.node.worldRotation = pY(vY, t),
                        this.node.worldPosition = _Y(yY, ls.Transform_getOrigin(e)),
                        this._ghostStruct) {
                            var i = ls.CollisionObject_getWorldTransform(this.ghost);
                            cY(ls.Transform_getOrigin(i), this.node.worldPosition),
                            dY(t, this.node.worldRotation),
                            ls.Transform_setRotation(i, t)
                        }
                    }
                }
                ,
                e.syncSceneToGhost = function() {
                    if (this.node.hasChangedFlags) {
                        var t = iY.instance.BT_QUAT_0
                          , e = ls.CollisionObject_getWorldTransform(this.ghost);
                        cY(ls.Transform_getOrigin(e), this.node.worldPosition),
                        dY(t, this.node.worldRotation),
                        ls.Transform_setRotation(e, t),
                        this.node.hasChangedFlags & xi.SCALE && this.syncGhostScale(),
                        ls.CollisionObject_activate(this.ghost)
                    }
                }
                ,
                e.syncInitialBody = function() {
                    var t = iY.instance.BT_QUAT_0
                      , e = ls.CollisionObject_getWorldTransform(this.body);
                    cY(ls.Transform_getOrigin(e), this.node.worldPosition),
                    dY(t, this.node.worldRotation),
                    ls.Transform_setRotation(e, t),
                    this.syncBodyScale(),
                    ls.CollisionObject_activate(this.body)
                }
                ,
                e.syncInitialGhost = function() {
                    var t = iY.instance.BT_QUAT_0
                      , e = ls.CollisionObject_getWorldTransform(this.ghost);
                    cY(ls.Transform_getOrigin(e), this.node.worldPosition),
                    dY(t, this.node.worldRotation),
                    ls.Transform_setRotation(e, t),
                    this.syncGhostScale(),
                    ls.CollisionObject_activate(this.body)
                }
                ,
                e.syncBodyScale = function() {
                    for (var t = 0; t < this.bodyStruct.wrappedShapes.length; t++)
                        this.bodyStruct.wrappedShapes[t].updateScale();
                    for (var e = 0; e < this.wrappedJoints0.length; e++)
                        this.wrappedJoints0[e].updateScale0();
                    for (var i = 0; i < this.wrappedJoints1.length; i++)
                        this.wrappedJoints1[i].updateScale1()
                }
                ,
                e.syncGhostScale = function() {
                    for (var t = 0; t < this.ghostStruct.wrappedShapes.length; t++)
                        this.ghostStruct.wrappedShapes[t].updateScale()
                }
                ,
                e.updateBodyByReAdd = function() {
                    this.bodyIndex >= 0 && (this.wrappedWorld.removeSharedBody(this),
                    this.bodyIndex = this.wrappedWorld.bodies.length,
                    this.wrappedWorld.addSharedBody(this))
                }
                ,
                e.updateGhostByReAdd = function() {
                    this.ghostIndex >= 0 && (this.wrappedWorld.removeGhostObject(this),
                    this.ghostIndex = this.wrappedWorld.ghosts.length,
                    this.wrappedWorld.addGhostObject(this))
                }
                ,
                e.destroy = function() {
                    if (t.sharedBodesMap.delete(this.node.uuid),
                    this.node = null,
                    this.wrappedWorld = null,
                    this._bodyStruct) {
                        var e = this._bodyStruct;
                        iY.delWrapper(e.body, ls.BODY_CACHE_NAME),
                        ls.MotionState_del(e.motionState),
                        ls.CollisionShape_del(e.compound),
                        ls.CollisionObject_del(e.body),
                        this._bodyStruct = null
                    }
                    if (this._ghostStruct) {
                        var i = this._ghostStruct;
                        ls.CollisionShape_del(i.compound),
                        ls.CollisionObject_del(i.ghost),
                        this._ghostStruct = null
                    }
                }
                ,
                e.isBodySleeping = function() {
                    return ls.CollisionObject_getActivationState(this.body) === aY.ISLAND_SLEEPING
                }
                ,
                Je(t, [{
                    key: "wrappedBody",
                    get: function() {
                        return this._wrappedBody
                    }
                }, {
                    key: "bodyCompoundShape",
                    get: function() {
                        return this.bodyStruct.compound
                    }
                }, {
                    key: "ghostCompoundShape",
                    get: function() {
                        return this.ghostStruct.compound
                    }
                }, {
                    key: "body",
                    get: function() {
                        return this.bodyStruct.body
                    }
                }, {
                    key: "ghost",
                    get: function() {
                        return this.ghostStruct.ghost
                    }
                }, {
                    key: "collisionFilterGroup",
                    get: function() {
                        return this._collisionFilterGroup
                    },
                    set: function(t) {
                        t !== this._collisionFilterGroup && (this._collisionFilterGroup = t,
                        this.dirty |= rY.BODY_RE_ADD,
                        this.dirty |= rY.GHOST_RE_ADD)
                    }
                }, {
                    key: "collisionFilterMask",
                    get: function() {
                        return this._collisionFilterMask
                    },
                    set: function(t) {
                        t !== this._collisionFilterMask && (this._collisionFilterMask = t,
                        this.dirty |= rY.BODY_RE_ADD,
                        this.dirty |= rY.GHOST_RE_ADD)
                    }
                }, {
                    key: "bodyStruct",
                    get: function() {
                        return this._instantiateBodyStruct(),
                        this._bodyStruct
                    }
                }, {
                    key: "ghostStruct",
                    get: function() {
                        return this._instantiateGhostStruct(),
                        this._ghostStruct
                    }
                }, {
                    key: "bodyEnabled",
                    set: function(t) {
                        if (t) {
                            if (this.bodyIndex < 0) {
                                if (0 === this.bodyStruct.wrappedShapes.length) {
                                    if (!this.wrappedBody)
                                        return;
                                    if (!this.wrappedBody.rigidBody.isDynamic)
                                        return
                                }
                                this.bodyIndex = this.wrappedWorld.bodies.length,
                                this.wrappedWorld.addSharedBody(this),
                                this.syncInitialBody()
                            }
                        } else
                            this.bodyIndex >= 0 && (0 === this.bodyStruct.wrappedShapes.length && null == this.wrappedBody || 0 === this.bodyStruct.wrappedShapes.length && null != this.wrappedBody && !this.wrappedBody.isEnabled || 0 === this.bodyStruct.wrappedShapes.length && null != this.wrappedBody && !this.wrappedBody.rigidBody.enabledInHierarchy) && (ls.RigidBody_clearState(this.body),
                            this.bodyIndex = -1,
                            this.wrappedWorld.removeSharedBody(this))
                    }
                }, {
                    key: "ghostEnabled",
                    set: function(t) {
                        t ? this.ghostIndex < 0 && this.ghostStruct.wrappedShapes.length > 0 && (this.ghostIndex = 1,
                        this.wrappedWorld.addGhostObject(this),
                        this.syncInitialGhost()) : this.ghostIndex >= 0 && 0 === this.ghostStruct.wrappedShapes.length && this.ghost && (this.ghostIndex = -1,
                        this.wrappedWorld.removeGhostObject(this))
                    }
                }, {
                    key: "reference",
                    set: function(t) {
                        t ? this.ref++ : this.ref--,
                        0 === this.ref && this.destroy()
                    }
                }]),
                t
            }();
            TY.idCounter = 0,
            TY.sharedBodesMap = new Map;
            var bY = lY
              , EY = {}
              , AY = function() {
                function t() {
                    this.id = t.idCounter++,
                    this._isEnabled = !1,
                    this._isTrigger = !1,
                    this._isInitialized = !1,
                    this._impl = 0,
                    this._compound = 0,
                    this.quat = ls.Quat_new(0, 0, 0, 1),
                    this.transform = ls.Transform_new()
                }
                var e = t.prototype;
                return e.updateEventListener = function() {
                    this._sharedBody.wrappedWorld.updateNeedEmitEvents(this.collider.needCollisionEvent || this.collider.needTriggerEvent)
                }
                ,
                e.setMaterial = function(t) {
                    if (!this._isTrigger && this._isEnabled && t)
                        if (this._compound) {
                            EY[t._uuid] || (EY[t._uuid] = ls.ccMaterial_new());
                            var e = EY[t._uuid];
                            ls.ccMaterial_set(e, t.restitution, t.friction, t.rollingFriction, t.spinningFriction),
                            ls.CollisionShape_setMaterial(this._impl, e)
                        } else
                            ls.CollisionObject_setMaterial(this._sharedBody.body, t.restitution, t.friction, t.rollingFriction, t.spinningFriction)
                }
                ,
                e.setCenter = function(t) {
                    di.copy(bY, t),
                    bY.multiply(this._collider.node.worldScale),
                    cY(ls.Transform_getOrigin(this.transform), bY),
                    this.updateCompoundTransform()
                }
                ,
                e.setAsTrigger = function(t) {
                    this._isTrigger !== t && (this._isEnabled && (this._sharedBody.removeShape(this, !t),
                    this._sharedBody.addShape(this, t)),
                    this._isTrigger = t)
                }
                ,
                e.getAABB = function(t) {
                    var e = iY.instance.BT_TRANSFORM_0;
                    ls.Transform_setIdentity(e),
                    ls.Transform_setRotation(e, dY(iY.instance.BT_QUAT_0, this._collider.node.worldRotation));
                    var i = iY.instance.BT_V3_0
                      , r = iY.instance.BT_V3_1;
                    ls.CollisionShape_getAabb(this._impl, e, i, r),
                    t.halfExtents.x = (ls.Vec3_x(r) - ls.Vec3_x(i)) / 2,
                    t.halfExtents.y = (ls.Vec3_y(r) - ls.Vec3_y(i)) / 2,
                    t.halfExtents.z = (ls.Vec3_z(r) - ls.Vec3_z(i)) / 2,
                    di.add(t.center, this._collider.node.worldPosition, this._collider.center)
                }
                ,
                e.getBoundingSphere = function(t) {
                    t.radius = ls.CollisionShape_getLocalBoundingSphere(this._impl),
                    di.add(t.center, this._collider.node.worldPosition, this._collider.center)
                }
                ,
                e.initialize = function(t) {
                    this._collider = t,
                    this._isInitialized = !0,
                    this._sharedBody = hs.instance.physicsWorld.getSharedBody(this._collider.node),
                    this._sharedBody.reference = !0,
                    this.onComponentSet(),
                    this.setWrapper()
                }
                ,
                e.setWrapper = function() {
                    iY.isNotEmptyShape(this._impl) && (ls.CollisionShape_setUserPointer(this._impl, this._impl),
                    iY.setWrapper(this._impl, t.TYPE, this))
                }
                ,
                e.onLoad = function() {
                    this.setCenter(this._collider.center),
                    this.setAsTrigger(this._collider.isTrigger)
                }
                ,
                e.onEnable = function() {
                    this._isEnabled = !0,
                    this._sharedBody.addShape(this, this._isTrigger),
                    this.setMaterial(this.collider.sharedMaterial)
                }
                ,
                e.onDisable = function() {
                    this._isEnabled = !1,
                    this._sharedBody.removeShape(this, this._isTrigger)
                }
                ,
                e.onDestroy = function() {
                    this._sharedBody.reference = !1,
                    this._collider = null,
                    ls.Quat_del(this.quat),
                    ls.Transform_del(this.transform),
                    this._compound && ls.CollisionShape_del(this._compound),
                    iY.isNotEmptyShape(this._impl) && (ls.CollisionShape_del(this._impl),
                    iY.delWrapper(this._impl, t.TYPE))
                }
                ,
                e.updateByReAdd = function() {
                    this._isEnabled && (this._sharedBody.removeShape(this, this._isTrigger),
                    this._sharedBody.addShape(this, this._isTrigger))
                }
                ,
                e.getGroup = function() {
                    return this._sharedBody.collisionFilterGroup
                }
                ,
                e.setGroup = function(t) {
                    this._sharedBody.collisionFilterGroup = t
                }
                ,
                e.addGroup = function(t) {
                    this._sharedBody.collisionFilterGroup |= t
                }
                ,
                e.removeGroup = function(t) {
                    this._sharedBody.collisionFilterGroup &= ~t
                }
                ,
                e.getMask = function() {
                    return this._sharedBody.collisionFilterMask
                }
                ,
                e.setMask = function(t) {
                    this._sharedBody.collisionFilterMask = t
                }
                ,
                e.addMask = function(t) {
                    this._sharedBody.collisionFilterMask |= t
                }
                ,
                e.removeMask = function(t) {
                    this._sharedBody.collisionFilterMask &= ~t
                }
                ,
                e.setCompound = function(t) {
                    this._compound && ls.CompoundShape_removeChildShape(this._compound, this._impl),
                    t && ls.CompoundShape_addChildShape(t, this.transform, this._impl),
                    this._compound = t
                }
                ,
                e.updateScale = function() {
                    this.setCenter(this._collider.center)
                }
                ,
                e.updateCompoundTransform = function() {
                    this._compound ? ls.CompoundShape_updateChildTransform(this._compound, this._impl, this.transform, !0) : this._isEnabled && !this._isTrigger && this._sharedBody && !this._sharedBody.bodyStruct.useCompound && (this._sharedBody.dirty |= rY.BODY_RE_ADD)
                }
                ,
                e.needCompound = function() {
                    return this._collider.type === ds.TERRAIN || !this._collider.center.equals(di.ZERO)
                }
                ,
                Je(t, [{
                    key: "attachedRigidBody",
                    get: function() {
                        return this._sharedBody.wrappedBody ? this._sharedBody.wrappedBody.rigidBody : null
                    }
                }, {
                    key: "impl",
                    get: function() {
                        return this._impl
                    }
                }, {
                    key: "collider",
                    get: function() {
                        return this._collider
                    }
                }, {
                    key: "sharedBody",
                    get: function() {
                        return this._sharedBody
                    }
                }]),
                t
            }();
            AY.TYPE = "shape",
            AY.idCounter = 0;
            var CY = function() {
                function t() {
                    this.matrix = []
                }
                var e = t.prototype;
                return e.get = function(t, e) {
                    if (e > t) {
                        var i = e;
                        e = t,
                        t = i
                    }
                    return this.matrix[(t * (t + 1) >> 1) + e - 1]
                }
                ,
                e.set = function(t, e, i) {
                    if (e > t) {
                        var r = e;
                        e = t,
                        t = r
                    }
                    this.matrix[(t * (t + 1) >> 1) + e - 1] = i ? 1 : 0
                }
                ,
                e.reset = function() {
                    this.matrix.length = 0
                }
                ,
                e.setNumObjects = function(t) {
                    this.matrix.length = t * (t - 1) >> 1
                }
                ,
                t
            }()
              , RY = function() {
                function t() {
                    this.data = void 0,
                    this.data = {
                        keys: []
                    }
                }
                var e = t.prototype;
                return e.get = function(t, e) {
                    if (t > e) {
                        var i = e;
                        e = t,
                        t = i
                    }
                    return this.data[t + "-" + e]
                }
                ,
                e.set = function(t, e, i) {
                    if (t > e) {
                        var r = e;
                        e = t,
                        t = r
                    }
                    var n = t + "-" + e;
                    if (null == i) {
                        var s = this.data.keys.indexOf(n);
                        if (-1 !== s)
                            return this.data.keys.splice(s, 1),
                            delete this.data[n],
                            i
                    }
                    return this.get(t, e) || this.data.keys.push(n),
                    this.data[n] = i,
                    this.data[n]
                }
                ,
                e.reset = function() {
                    this.data = {
                        keys: []
                    }
                }
                ,
                e.getLength = function() {
                    return this.data.keys.length
                }
                ,
                e.getKeyByIndex = function(t) {
                    return this.data.keys[t]
                }
                ,
                e.getDataByKey = function(t) {
                    return this.data[t]
                }
                ,
                t
            }()
              , BY = function() {
                function t(t) {
                    this.impl = 0,
                    this.event = t
                }
                var e = t.prototype;
                return e.getLocalPointOnA = function(t) {
                    this.impl && _Y(t, ls.ManifoldPoint_get_m_localPointA(this.impl))
                }
                ,
                e.getLocalPointOnB = function(t) {
                    this.impl && _Y(t, ls.ManifoldPoint_get_m_localPointB(this.impl))
                }
                ,
                e.getWorldPointOnA = function(t) {
                    this.impl && _Y(t, ls.ManifoldPoint_get_m_positionWorldOnA(this.impl))
                }
                ,
                e.getWorldPointOnB = function(t) {
                    this.impl && _Y(t, ls.ManifoldPoint_get_m_positionWorldOnB(this.impl))
                }
                ,
                e.getLocalNormalOnA = function(t) {
                    if (this.impl) {
                        var e = iY.instance.BT_QUAT_0
                          , i = ls.PersistentManifold_getBody0(this.impl)
                          , r = ls.CollisionObject_getWorldTransform(i);
                        ls.Transform_getRotation(r, e);
                        var n = uY;
                        pY(n, e),
                        nr.conjugate(n, n),
                        _Y(t, ls.ManifoldPoint_get_m_normalWorldOnB(this.impl)),
                        this.isBodyA || di.negate(t, t),
                        di.transformQuat(t, t, n)
                    }
                }
                ,
                e.getLocalNormalOnB = function(t) {
                    if (this.impl) {
                        var e = iY.instance.BT_QUAT_0
                          , i = ls.PersistentManifold_getBody1(this.impl)
                          , r = ls.CollisionObject_getWorldTransform(i);
                        ls.Transform_getRotation(r, e);
                        var n = uY;
                        pY(n, e),
                        nr.conjugate(n, n),
                        _Y(t, ls.ManifoldPoint_get_m_normalWorldOnB(this.impl)),
                        di.transformQuat(t, t, n)
                    }
                }
                ,
                e.getWorldNormalOnA = function(t) {
                    this.impl && (_Y(t, ls.ManifoldPoint_get_m_normalWorldOnB(this.impl)),
                    this.isBodyA || di.negate(t, t))
                }
                ,
                e.getWorldNormalOnB = function(t) {
                    this.impl && _Y(t, ls.ManifoldPoint_get_m_normalWorldOnB(this.impl))
                }
                ,
                Je(t, [{
                    key: "isBodyA",
                    get: function() {
                        return this.event.selfCollider.shape.sharedBody.body === ls.PersistentManifold_getBody0(this.impl)
                    }
                }]),
                t
            }()
              , xY = []
              , DY = lY
              , wY = hY
              , OY = function() {
                var t = e.prototype;
                function e() {
                    this._world = void 0,
                    this._broadphase = void 0,
                    this._solver = void 0,
                    this._dispatcher = void 0,
                    this._needEmitEvents = !1,
                    this._needSyncAfterEvents = !1,
                    this.bodies = [],
                    this.ghosts = [],
                    this.constraints = [],
                    this.triggerArrayMat = new CY,
                    this.collisionArrayMat = new CY,
                    this.contactsDic = new RY,
                    this.oldContactsDic = new RY,
                    this._broadphase = ls.DbvtBroadphase_new(),
                    this._dispatcher = ls.CollisionDispatcher_new(),
                    this._solver = ls.SequentialImpulseConstraintSolver_new(),
                    this._world = ls.ccDiscreteDynamicsWorld_new(this._dispatcher, this._broadphase, this._solver)
                }
                return t.setDefaultMaterial = function() {}
                ,
                t.setAllowSleep = function(t) {
                    ls.ccDiscreteDynamicsWorld_setAllowSleep(this._world, t)
                }
                ,
                t.setGravity = function(t) {
                    ls.DynamicsWorld_setGravity(this._world, cY(iY.instance.BT_V3_0, t))
                }
                ,
                t.updateNeedEmitEvents = function(t) {
                    if (this.ghosts)
                        if (t)
                            this._needEmitEvents = !0;
                        else {
                            this._needEmitEvents = !1;
                            for (var e = 0; e < this.ghosts.length; e++)
                                for (var i = this.ghosts[e].ghostStruct.wrappedShapes, r = 0; r < i.length; r++) {
                                    var n = i[r].collider;
                                    if (n.needCollisionEvent || n.needTriggerEvent)
                                        return void (this._needEmitEvents = !0)
                                }
                            for (var s = 0; s < this.bodies.length; s++)
                                for (var a = this.bodies[s].bodyStruct.wrappedShapes, o = 0; o < a.length; o++) {
                                    var l = a[o].collider;
                                    if (l.needCollisionEvent || l.needTriggerEvent)
                                        return void (this._needEmitEvents = !0)
                                }
                        }
                }
                ,
                t.destroy = function() {
                    (this.constraints.length || this.bodies.length) && ti("You should destroy all physics component first."),
                    ls.CollisionWorld_del(this._world),
                    ls.DbvtBroadphase_del(this._broadphase),
                    ls.CollisionDispatcher_del(this._dispatcher),
                    ls.SequentialImpulseConstraintSolver_del(this._solver),
                    this.bodies = null,
                    this.ghosts = null,
                    this.constraints = null,
                    this.triggerArrayMat = null,
                    this.collisionArrayMat = null,
                    this.contactsDic = null,
                    this.oldContactsDic = null,
                    xY.length = 0
                }
                ,
                t.step = function(t, e, i) {
                    void 0 === i && (i = 0),
                    (this.bodies.length || this.ghosts.length) && (void 0 === e && (e = t),
                    ls.DynamicsWorld_stepSimulation(this._world, e, i, t))
                }
                ,
                t.syncSceneToPhysics = function() {
                    for (var t = this.ghosts.length - 1; t >= 0; t--) {
                        var e = this.ghosts[t];
                        e.updateDirty(),
                        e.syncSceneToGhost()
                    }
                    for (var i = this.bodies.length - 1; i >= 0; i--) {
                        var r = this.bodies[i];
                        r.updateDirty(),
                        r.syncSceneToPhysics()
                    }
                }
                ,
                t.syncAfterEvents = function() {
                    this._needSyncAfterEvents && this.syncSceneToPhysics()
                }
                ,
                t.raycast = function(t, e, i, r) {
                    t.computeHit(DY, e.maxDistance);
                    var n = cY(iY.instance.BT_V3_0, DY)
                      , s = cY(iY.instance.BT_V3_1, t.o)
                      , a = ls.ccAllRayCallback_static();
                    if (ls.ccAllRayCallback_reset(a, s, n, e.mask, e.queryTrigger),
                    ls.CollisionWorld_rayTest(this._world, s, n, a),
                    ls.RayCallback_hasHit(a)) {
                        for (var o = ls.ccAllRayCallback_getHitPointWorld(a), l = ls.ccAllRayCallback_getHitNormalWorld(a), h = ls.ccAllRayCallback_getCollisionShapePtrs(a), u = 0, c = ls.int_array_size(h); u < c; u++) {
                            _Y(DY, ls.Vec3_array_at(o, u)),
                            _Y(wY, ls.Vec3_array_at(l, u));
                            var _ = iY.getWrapper(ls.int_array_at(h, u), AY.TYPE)
                              , d = i.add();
                            r.push(d),
                            d._assign(DY, di.distance(t.o, DY), _.collider, wY)
                        }
                        return !0
                    }
                    return !1
                }
                ,
                t.raycastClosest = function(t, e, i) {
                    t.computeHit(DY, e.maxDistance);
                    var r = cY(iY.instance.BT_V3_0, DY)
                      , n = cY(iY.instance.BT_V3_1, t.o)
                      , s = ls.ccClosestRayCallback_static();
                    if (ls.ccClosestRayCallback_reset(s, n, r, e.mask, e.queryTrigger),
                    ls.CollisionWorld_rayTest(this._world, n, r, s),
                    ls.RayCallback_hasHit(s)) {
                        _Y(DY, ls.ccClosestRayCallback_getHitPointWorld(s)),
                        _Y(wY, ls.ccClosestRayCallback_getHitNormalWorld(s));
                        var a = iY.getWrapper(ls.ccClosestRayCallback_getCollisionShapePtr(s), AY.TYPE);
                        return i._assign(DY, di.distance(t.o, DY), a.collider, wY),
                        !0
                    }
                    return !1
                }
                ,
                t.getSharedBody = function(t, e) {
                    return TY.getSharedBody(t, this, e)
                }
                ,
                t.addSharedBody = function(t) {
                    this.bodies.indexOf(t) < 0 && (this.bodies.push(t),
                    ls.DynamicsWorld_addRigidBody(this._world, t.body, t.collisionFilterGroup, t.collisionFilterMask))
                }
                ,
                t.removeSharedBody = function(t) {
                    var e = this.bodies.indexOf(t);
                    e >= 0 && (cs(this.bodies, e),
                    ls.DynamicsWorld_removeRigidBody(this._world, t.body))
                }
                ,
                t.addGhostObject = function(t) {
                    this.ghosts.indexOf(t) < 0 && (this.ghosts.push(t),
                    ls.CollisionWorld_addCollisionObject(this._world, t.ghost, t.collisionFilterGroup, t.collisionFilterMask))
                }
                ,
                t.removeGhostObject = function(t) {
                    var e = this.ghosts.indexOf(t);
                    e >= 0 && (cs(this.ghosts, e),
                    ls.CollisionWorld_removeCollisionObject(this._world, t.ghost))
                }
                ,
                t.addConstraint = function(t) {
                    var e = this.constraints.indexOf(t);
                    e < 0 && (this.constraints.push(t),
                    ls.DynamicsWorld_addConstraint(this.impl, t.impl, !t.constraint.enableCollision),
                    t.index = e)
                }
                ,
                t.removeConstraint = function(t) {
                    var e = this.constraints.indexOf(t);
                    e >= 0 && (this.constraints.splice(e, 1),
                    ls.DynamicsWorld_removeConstraint(this.impl, t.impl),
                    t.index = -1)
                }
                ,
                t.emitEvents = function() {
                    if (this._needSyncAfterEvents = !1,
                    this._needEmitEvents) {
                        this.gatherConatactData();
                        for (var t = this.contactsDic.getLength(); t--; ) {
                            xY.push.apply(xY, eY.contacts),
                            eY.contacts.length = 0;
                            var e = this.contactsDic.getKeyByIndex(t)
                              , i = this.contactsDic.getDataByKey(e)
                              , r = i.shape0
                              , n = i.shape1;
                            this.oldContactsDic.set(r.id, n.id, i);
                            var s = r.collider
                              , a = n.collider;
                            if (s && a) {
                                if (s.isTrigger || a.isTrigger)
                                    this.triggerArrayMat.get(r.id, n.id) ? tY.type = "onTriggerStay" : (tY.type = "onTriggerEnter",
                                    this.triggerArrayMat.set(r.id, n.id, !0)),
                                    tY.impl = i.impl,
                                    tY.selfCollider = s,
                                    tY.otherCollider = a,
                                    s.emit(tY.type, tY),
                                    tY.selfCollider = a,
                                    tY.otherCollider = s,
                                    a.emit(tY.type, tY),
                                    this._needSyncAfterEvents = !0;
                                else {
                                    var o = s.attachedRigidBody
                                      , l = a.attachedRigidBody;
                                    if (o && l) {
                                        if (o.isSleeping && l.isSleeping)
                                            continue
                                    } else if (!o && l) {
                                        if (l.isSleeping)
                                            continue
                                    } else if (!l && o && o.isSleeping)
                                        continue;
                                    this.collisionArrayMat.get(r.id, n.id) ? eY.type = "onCollisionStay" : (eY.type = "onCollisionEnter",
                                    this.collisionArrayMat.set(r.id, n.id, !0));
                                    for (var h = 0; h < i.contacts.length; h++) {
                                        var u = i.contacts[h];
                                        if (xY.length > 0) {
                                            var c = xY.pop();
                                            c.impl = u,
                                            eY.contacts.push(c)
                                        } else {
                                            var _ = new BY(eY);
                                            _.impl = u,
                                            eY.contacts.push(_)
                                        }
                                    }
                                    eY.impl = i.impl,
                                    eY.selfCollider = s,
                                    eY.otherCollider = a,
                                    s.emit(eY.type, eY),
                                    eY.selfCollider = a,
                                    eY.otherCollider = s,
                                    a.emit(eY.type, eY),
                                    this._needSyncAfterEvents = !0
                                }
                                null == this.oldContactsDic.get(r.id, n.id) && this.oldContactsDic.set(r.id, n.id, i)
                            }
                        }
                        for (var d = this.oldContactsDic.getLength(); d--; ) {
                            var p = this.oldContactsDic.getKeyByIndex(d)
                              , f = this.oldContactsDic.getDataByKey(p)
                              , g = f.shape0
                              , m = f.shape1
                              , y = g.collider
                              , v = m.collider;
                            if (y && v) {
                                var S = y.isTrigger || v.isTrigger;
                                null == this.contactsDic.getDataByKey(p) && (S ? this.triggerArrayMat.get(g.id, m.id) && (tY.type = "onTriggerExit",
                                tY.selfCollider = y,
                                tY.otherCollider = v,
                                y.emit(tY.type, tY),
                                tY.selfCollider = v,
                                tY.otherCollider = y,
                                v.emit(tY.type, tY),
                                this.triggerArrayMat.set(g.id, m.id, !1),
                                this.oldContactsDic.set(g.id, m.id, null),
                                this._needSyncAfterEvents = !0) : this.collisionArrayMat.get(g.id, m.id) && (xY.push.apply(xY, eY.contacts),
                                eY.contacts.length = 0,
                                eY.type = "onCollisionExit",
                                eY.selfCollider = y,
                                eY.otherCollider = v,
                                y.emit(eY.type, eY),
                                eY.selfCollider = v,
                                eY.otherCollider = y,
                                v.emit(eY.type, eY),
                                this.collisionArrayMat.set(g.id, m.id, !1),
                                this.oldContactsDic.set(g.id, m.id, null),
                                this._needSyncAfterEvents = !0))
                            }
                        }
                        this.contactsDic.reset()
                    }
                }
                ,
                t.gatherConatactData = function() {
                    for (var t = ls.Dispatcher_getNumManifolds(this._dispatcher), e = 0; e < t; e++)
                        for (var i = ls.Dispatcher_getManifoldByIndexInternal(this._dispatcher, e), r = ls.PersistentManifold_getNumContacts(i), n = 0; n < r; n++) {
                            var s = ls.PersistentManifold_getContactPoint(i, n)
                              , a = ls.ManifoldPoint_getShape0(s)
                              , o = ls.ManifoldPoint_getShape1(s)
                              , l = iY.getWrapper(a, AY.TYPE)
                              , h = iY.getWrapper(o, AY.TYPE);
                            if (l.collider.needTriggerEvent || h.collider.needTriggerEvent || l.collider.needCollisionEvent || h.collider.needCollisionEvent) {
                                var u = this.contactsDic.get(l.id, h.id);
                                u || (u = this.contactsDic.set(l.id, h.id, {
                                    shape0: l,
                                    shape1: h,
                                    contacts: [],
                                    impl: i
                                })),
                                u.contacts.push(s)
                            }
                        }
                }
                ,
                Je(e, [{
                    key: "impl",
                    get: function() {
                        return this._world
                    }
                }]),
                e
            }()
              , PY = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.updateSize = function() {
                    var t = iY.instance.BT_V3_0;
                    cY(t, this.getMinUnscaledHalfExtents(ps)),
                    ls.BoxShape_setUnscaledHalfExtents(this.impl, t),
                    this.updateCompoundTransform()
                }
                ,
                i.onComponentSet = function() {
                    var t = iY.instance.BT_V3_0;
                    cY(t, this.getMinUnscaledHalfExtents(ps)),
                    this._impl = ls.BoxShape_new(t),
                    this.updateScale()
                }
                ,
                i.updateScale = function() {
                    t.prototype.updateScale.call(this);
                    var e = iY.instance.BT_V3_0;
                    ls.CollisionShape_setLocalScaling(this._impl, cY(e, this.getMinScale(ps))),
                    this.updateCompoundTransform()
                }
                ,
                i.getMinUnscaledHalfExtents = function(t) {
                    var e = this.collider.size
                      , i = fs(ps.set(this._collider.node.worldScale))
                      , r = hs.instance.minVolumeSize
                      , n = e.x / 2
                      , s = e.y / 2
                      , a = e.z / 2
                      , o = n * i.x < r ? r / i.x : n
                      , l = s * i.y < r ? r / i.y : s
                      , h = a * i.z < r ? r / i.z : a;
                    return t.set(o, l, h),
                    t
                }
                ,
                i.getMinScale = function(t) {
                    var e = this.collider.size
                      , i = fs(ps.set(this._collider.node.worldScale))
                      , r = hs.instance.minVolumeSize
                      , n = e.x / 2
                      , s = e.y / 2
                      , a = e.z / 2
                      , o = n * i.x < r ? r / n : i.x
                      , l = s * i.y < r ? r / s : i.y
                      , h = a * i.z < r ? r / a : i.z;
                    return t.set(o, l, h),
                    t
                }
                ,
                Je(e, [{
                    key: "collider",
                    get: function() {
                        return this._collider
                    }
                }]),
                e
            }(AY)
              , MY = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.updateRadius = function() {
                    ls.SphereShape_setUnscaledRadius(this.impl, this.getMinUnscaledRadius()),
                    this.updateCompoundTransform()
                }
                ,
                i.onComponentSet = function() {
                    this._impl = ls.SphereShape_new(this.getMinUnscaledRadius()),
                    this.updateScale()
                }
                ,
                i.updateScale = function() {
                    t.prototype.updateScale.call(this);
                    var e = this.getMinScale();
                    lY.set(e, e, e);
                    var i = iY.instance.BT_V3_0;
                    ls.CollisionShape_setLocalScaling(this._impl, cY(i, lY)),
                    this.updateCompoundTransform()
                }
                ,
                i.getMinUnscaledRadius = function() {
                    var t = this.collider.radius
                      , e = Math.abs(gs(this._collider.node.worldScale))
                      , i = hs.instance.minVolumeSize;
                    return e * t < i ? i / e : t
                }
                ,
                i.getMinScale = function() {
                    var t = this.collider.radius
                      , e = Math.abs(gs(this._collider.node.worldScale))
                      , i = hs.instance.minVolumeSize;
                    return e * t < i ? i / t : e
                }
                ,
                Je(e, [{
                    key: "collider",
                    get: function() {
                        return this._collider
                    }
                }]),
                e
            }(AY)
              , IY = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.setCylinderHeight = function() {
                    this.updateProperties(this.collider.radius, this.collider.cylinderHeight, this.collider.direction, this._collider.node.worldScale)
                }
                ,
                i.setDirection = function() {
                    this.updateProperties(this.collider.radius, this.collider.cylinderHeight, this.collider.direction, this._collider.node.worldScale)
                }
                ,
                i.setRadius = function() {
                    this.updateProperties(this.collider.radius, this.collider.cylinderHeight, this.collider.direction, this._collider.node.worldScale)
                }
                ,
                i.onComponentSet = function() {
                    this._impl = ls.CapsuleShape_new(.5, 1),
                    this.setRadius(this.collider.radius)
                }
                ,
                i.updateScale = function() {
                    t.prototype.updateScale.call(this),
                    this.setRadius(this.collider.radius)
                }
                ,
                i.updateProperties = function(t, e, i, r) {
                    var n, s, a = r, o = i;
                    1 === o ? (n = t * Math.abs(ms(a.x, a.z)),
                    s = e / 2 * Math.abs(a.y)) : 0 === o ? (n = t * Math.abs(ms(a.y, a.z)),
                    s = e / 2 * Math.abs(a.x)) : (n = t * Math.abs(ms(a.x, a.y)),
                    s = e / 2 * Math.abs(a.z)),
                    ls.CapsuleShape_updateProp(this._impl, n, s, o),
                    this.updateCompoundTransform()
                }
                ,
                Je(e, [{
                    key: "collider",
                    get: function() {
                        return this._collider
                    }
                }]),
                e
            }(AY)
              , LY = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this).refBtTriangleMesh = 0,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.setMesh = function(t) {
                    if (this._isInitialized)
                        if (this._impl && iY.isNotEmptyShape(this._impl))
                            ii(9620);
                        else {
                            var e = t;
                            if (e && e.renderingSubMeshes.length > 0) {
                                var i = this._getBtTriangleMesh(e);
                                this.collider.convex ? this._impl = ls.ConvexTriangleMeshShape_new(i) : this._impl = ls.BvhTriangleMeshShape_new(i, !0, !0);
                                var r = iY.instance.BT_V3_0;
                                cY(r, this._collider.node.worldScale),
                                ls.CollisionShape_setMargin(this._impl, .01),
                                ls.CollisionShape_setLocalScaling(this._impl, r),
                                this.setCompound(this._compound),
                                this.updateByReAdd(),
                                this.setWrapper()
                            } else
                                this._impl = ls.EmptyShape_static()
                        }
                }
                ,
                i.onComponentSet = function() {
                    this.setMesh(this.collider.mesh)
                }
                ,
                i.onDestroy = function() {
                    this.refBtTriangleMesh && ls.TriangleMesh_del(this.refBtTriangleMesh),
                    t.prototype.onDestroy.call(this)
                }
                ,
                i.updateScale = function() {
                    t.prototype.updateScale.call(this);
                    var e = iY.instance.BT_V3_0;
                    cY(e, this._collider.node.worldScale),
                    ls.CollisionShape_setLocalScaling(this._impl, e),
                    this.updateCompoundTransform()
                }
                ,
                i._getBtTriangleMesh = function(t) {
                    return this.refBtTriangleMesh = ls.TriangleMesh_new(),
                    function(t, e) {
                        for (var i = e.renderingSubMeshes.length, r = 0; r < i; r++) {
                            var n = e.renderingSubMeshes[r]
                              , s = n.geometricInfo;
                            if (s) {
                                var a = n.primitiveMode
                                  , o = s.positions
                                  , l = s.indices
                                  , h = iY.instance.BT_V3_0
                                  , u = iY.instance.BT_V3_1
                                  , c = iY.instance.BT_V3_2;
                                if (a === N.TRIANGLE_LIST)
                                    for (var _ = l.length, d = 0; d < _; d += 3) {
                                        var p = 3 * l[d]
                                          , f = 3 * l[d + 1]
                                          , g = 3 * l[d + 2];
                                        ls.Vec3_set(h, o[p], o[p + 1], o[p + 2]),
                                        ls.Vec3_set(u, o[f], o[f + 1], o[f + 2]),
                                        ls.Vec3_set(c, o[g], o[g + 1], o[g + 2]),
                                        ls.TriangleMesh_addTriangle(t, h, u, c)
                                    }
                                else if (a === N.TRIANGLE_STRIP)
                                    for (var m = l.length - 2, y = 0, v = 0; v < m; v += 1) {
                                        var S = 3 * l[v - y]
                                          , T = 3 * l[v + y + 1]
                                          , b = 3 * l[v + 2];
                                        y = ~y,
                                        ls.Vec3_set(h, o[S], o[S + 1], o[S + 2]),
                                        ls.Vec3_set(u, o[T], o[T + 1], o[T + 2]),
                                        ls.Vec3_set(c, o[b], o[b + 1], o[b + 2]),
                                        ls.TriangleMesh_addTriangle(t, h, u, c)
                                    }
                                else if (a === N.TRIANGLE_FAN) {
                                    var E = l.length - 1
                                      , A = 3 * l[0];
                                    ls.Vec3_set(h, o[A], o[A + 1], o[A + 2]);
                                    for (var C = 1; C < E; C += 1) {
                                        var R = 3 * l[C]
                                          , B = 3 * l[C + 1];
                                        ls.Vec3_set(u, o[R], o[R + 1], o[R + 2]),
                                        ls.Vec3_set(c, o[B], o[B + 1], o[B + 2]),
                                        ls.TriangleMesh_addTriangle(t, h, u, c)
                                    }
                                }
                            }
                        }
                    }(this.refBtTriangleMesh, t),
                    this.refBtTriangleMesh
                }
                ,
                Je(e, [{
                    key: "collider",
                    get: function() {
                        return this._collider
                    }
                }]),
                e
            }(AY)
              , FY = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.setHeight = function() {
                    this.updateProperties(this.collider.radius, this.collider.height, this.collider.direction, this._collider.node.worldScale)
                }
                ,
                i.setDirection = function() {
                    this.updateProperties(this.collider.radius, this.collider.height, this.collider.direction, this._collider.node.worldScale)
                }
                ,
                i.setRadius = function() {
                    this.updateProperties(this.collider.radius, this.collider.height, this.collider.direction, this._collider.node.worldScale)
                }
                ,
                i.onComponentSet = function() {
                    var t = iY.instance.BT_V3_0;
                    ls.Vec3_set(t, .5, 1, .5),
                    this._impl = ls.CylinderShape_new(t),
                    this.setRadius(this.collider.radius)
                }
                ,
                i.updateScale = function() {
                    t.prototype.updateScale.call(this),
                    this.setRadius(this.collider.radius)
                }
                ,
                i.updateProperties = function(t, e, i, r) {
                    var n, s, a = r, o = i;
                    1 === o ? (s = e * Math.abs(a.y),
                    n = t * Math.abs(ms(a.x, a.z))) : 0 === o ? (s = e * Math.abs(a.x),
                    n = t * Math.abs(ms(a.y, a.z))) : (s = e * Math.abs(a.z),
                    n = t * Math.abs(ms(a.x, a.y))),
                    ls.CylinderShape_updateProp(this._impl, n, s / 2, o),
                    this.updateCompoundTransform()
                }
                ,
                Je(e, [{
                    key: "collider",
                    get: function() {
                        return this._collider
                    }
                }]),
                e
            }(AY)
              , NY = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.setHeight = function() {
                    this.updateProperties(this.collider.radius, this.collider.height, this.collider.direction, this._collider.node.worldScale)
                }
                ,
                i.setDirection = function() {
                    this.updateProperties(this.collider.radius, this.collider.height, this.collider.direction, this._collider.node.worldScale)
                }
                ,
                i.setRadius = function() {
                    this.updateProperties(this.collider.radius, this.collider.height, this.collider.direction, this._collider.node.worldScale)
                }
                ,
                i.onComponentSet = function() {
                    this._impl = ls.ConeShape_new(.5, 1),
                    this.setRadius(this.collider.radius)
                }
                ,
                i.updateScale = function() {
                    t.prototype.updateScale.call(this),
                    this.setRadius(this.collider.radius)
                }
                ,
                i.updateProperties = function(t, e, i, r) {
                    var n, s, a = r, o = i;
                    1 === o ? (s = e * Math.abs(a.y),
                    n = t * Math.abs(ms(a.x, a.z))) : 0 === o ? (s = e * Math.abs(a.x),
                    n = t * Math.abs(ms(a.y, a.z))) : (s = e * Math.abs(a.z),
                    n = t * Math.abs(ms(a.x, a.y))),
                    ls.ConeShape_setRadius(this._impl, n),
                    ls.ConeShape_setHeight(this._impl, s),
                    ls.ConeShape_setConeUpIndex(this._impl, o);
                    var l = iY.instance.BT_V3_0;
                    ls.Vec3_set(l, 1, 1, 1),
                    ls.CollisionShape_setLocalScaling(this._impl, l),
                    this.updateCompoundTransform()
                }
                ,
                Je(e, [{
                    key: "impl",
                    get: function() {
                        return this._impl
                    }
                }, {
                    key: "collider",
                    get: function() {
                        return this._collider
                    }
                }]),
                e
            }(AY)
              , kY = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._bufPtr = 0,
                    e._tileSize = 0,
                    e._localOffset = new di,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.setTerrain = function(t) {
                    if (this._isInitialized)
                        if (this._impl && iY.isNotEmptyShape(this._impl))
                            ri("[Physics][Bullet]: change the terrain asset after initialization is not support.");
                        else {
                            var e = t;
                            if (e) {
                                this._tileSize = e.tileSize;
                                var i = e.getVertexCountI()
                                  , r = e.getVertexCountJ();
                                this._bufPtr = ls._malloc(4 * i * r);
                                for (var n = 0, s = Number.MAX_SAFE_INTEGER, a = Number.MIN_SAFE_INTEGER, o = 0; o < r; o++)
                                    for (var l = 0; l < i; l++) {
                                        var h = e.getHeight(l, o);
                                        ls._write_f32(this._bufPtr + n, h),
                                        s > h && (s = h),
                                        h > a && (a = h),
                                        n += 4
                                    }
                                a += .01,
                                s -= .01,
                                this._localOffset.set((i - 1) / 2 * this._tileSize, (a + s) / 2, (r - 1) / 2 * this._tileSize),
                                this._impl = ls.TerrainShape_new(i, r, this._bufPtr, 1, s, a);
                                var u = iY.instance.BT_V3_0;
                                ls.Vec3_set(u, this._tileSize, 1, this._tileSize),
                                ls.CollisionShape_setLocalScaling(this._impl, u),
                                this.setCompound(this._compound),
                                this.updateByReAdd(),
                                this.setWrapper()
                            } else
                                this._impl = ls.EmptyShape_static()
                        }
                }
                ,
                i.onComponentSet = function() {
                    this.setTerrain(this.collider.terrain)
                }
                ,
                i.onDestroy = function() {
                    this._bufPtr && ls._free(this._bufPtr),
                    t.prototype.onDestroy.call(this)
                }
                ,
                i.setCenter = function(t) {
                    di.copy(lY, t),
                    lY.add(this._localOffset),
                    cY(ls.Transform_getOrigin(this.transform), lY),
                    this.updateCompoundTransform()
                }
                ,
                Je(e, [{
                    key: "collider",
                    get: function() {
                        return this._collider
                    }
                }]),
                e
            }(AY)
              , GY = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.setShapeType = function() {}
                ,
                i.setVertices = function() {}
                ,
                i.onComponentSet = function() {
                    this._impl = ls.SimplexShape_new();
                    for (var t = this.collider.shapeType, e = this.collider.vertices, i = iY.instance.BT_V3_0, r = 0; r < t; r++)
                        ls.SimplexShape_addVertex(this._impl, cY(i, e[r]));
                    ls.CollisionShape_setLocalScaling(this._impl, cY(i, this._collider.node.worldScale))
                }
                ,
                i.onLoad = function() {
                    t.prototype.onLoad.call(this),
                    this.collider.updateVertices()
                }
                ,
                i.updateScale = function() {
                    t.prototype.updateScale.call(this);
                    var e = iY.instance.BT_V3_0;
                    ls.CollisionShape_setLocalScaling(this._impl, cY(e, this._collider.node.worldScale))
                }
                ,
                Je(e, [{
                    key: "collider",
                    get: function() {
                        return this._collider
                    }
                }]),
                e
            }(AY)
              , zY = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.setNormal = function(t) {
                    cY(ls.StaticPlaneShape_getPlaneNormal(this.impl), t),
                    this.updateCompoundTransform()
                }
                ,
                i.setConstant = function(t) {
                    ls.StaticPlaneShape_setPlaneConstant(this.impl, t),
                    this.updateCompoundTransform()
                }
                ,
                i.updateScale = function() {
                    t.prototype.updateScale.call(this);
                    var e = iY.instance.BT_V3_0;
                    cY(e, this._collider.node.worldScale),
                    ls.CollisionShape_setLocalScaling(this._impl, e),
                    this.updateCompoundTransform()
                }
                ,
                i.onComponentSet = function() {
                    var t = iY.instance.BT_V3_0;
                    cY(t, this.collider.normal),
                    this._impl = ls.StaticPlaneShape_new(t, this.collider.constant),
                    this.updateScale()
                }
                ,
                Je(e, [{
                    key: "collider",
                    get: function() {
                        return this._collider
                    }
                }]),
                e
            }(AY)
              , UY = function() {
                function t() {
                    this.dirty = 0,
                    this.index = -1,
                    this._impl = 0,
                    this._collided = !1
                }
                var e = t.prototype;
                return e.setConnectedBody = function() {}
                ,
                e.setEnableCollision = function(t) {
                    this._collided !== t && (this._collided = t,
                    this.updateByReAdd())
                }
                ,
                e.updateByReAdd = function() {
                    if (this._rigidBody && this.index >= 0) {
                        var t = this._rigidBody.body.sharedBody;
                        t.wrappedWorld.removeConstraint(this),
                        t.wrappedWorld.addConstraint(this)
                    }
                }
                ,
                e.initialize = function(t) {
                    this._com = t,
                    this._rigidBody = t.attachedBody,
                    this._collided = t.enableCollision,
                    this.onComponentSet()
                }
                ,
                e.onEnable = function() {
                    var t = this._rigidBody.body.sharedBody;
                    t.wrappedWorld.addConstraint(this),
                    t.addJoint(this, 0);
                    var e = this.constraint.connectedBody;
                    e && e.body.sharedBody.addJoint(this, 1)
                }
                ,
                e.onDisable = function() {
                    var t = this._rigidBody.body.sharedBody;
                    t.wrappedWorld.removeConstraint(this),
                    t.removeJoint(this, 0);
                    var e = this.constraint.connectedBody;
                    e && e.body.sharedBody.removeJoint(this, 1)
                }
                ,
                e.onDestroy = function() {
                    ls.TypedConstraint_del(this._impl),
                    this._com = null,
                    this._rigidBody = null
                }
                ,
                Je(t, [{
                    key: "impl",
                    get: function() {
                        return this._impl
                    }
                }, {
                    key: "constraint",
                    get: function() {
                        return this._com
                    }
                }]),
                t
            }()
              , HY = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.setPivotA = function() {
                    var t = this.constraint
                      , e = iY.instance.BT_V3_0;
                    di.multiply(lY, t.node.worldScale, t.pivotA),
                    cY(e, lY),
                    ls.P2PConstraint_setPivotA(this._impl, e),
                    t.connectedBody || this.setPivotB(t.pivotB)
                }
                ,
                i.setPivotB = function() {
                    var t = this.constraint
                      , e = this._rigidBody.node
                      , i = iY.instance.BT_V3_0
                      , r = t.connectedBody;
                    r ? (di.multiply(lY, r.node.worldScale, t.pivotB),
                    cY(i, lY)) : (di.multiply(lY, e.worldScale, t.pivotA),
                    di.add(lY, lY, e.worldPosition),
                    di.add(lY, lY, t.pivotB),
                    cY(i, lY)),
                    ls.P2PConstraint_setPivotB(this._impl, i)
                }
                ,
                i.onComponentSet = function() {
                    var t = this.constraint.connectedBody
                      , e = this._rigidBody.body.impl
                      , i = t ? t.body.impl : ls.TypedConstraint_getFixedBody()
                      , r = iY.instance.BT_V3_0
                      , n = iY.instance.BT_V3_1;
                    this._impl = ls.P2PConstraint_new(e, i, r, n),
                    this.setPivotA(this.constraint.pivotA),
                    this.setPivotB(this.constraint.pivotB)
                }
                ,
                i.updateScale0 = function() {
                    this.setPivotA(this.constraint.pivotA)
                }
                ,
                i.updateScale1 = function() {
                    this.setPivotB(this.constraint.pivotB)
                }
                ,
                Je(e, [{
                    key: "constraint",
                    get: function() {
                        return this._com
                    }
                }]),
                e
            }(UY)
              , VY = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.setPivotA = function() {
                    this.updateFrames()
                }
                ,
                i.setPivotB = function() {
                    this.updateFrames()
                }
                ,
                i.setAxis = function() {
                    this.updateFrames()
                }
                ,
                i.onComponentSet = function() {
                    var t = this.constraint.connectedBody
                      , e = this._rigidBody.body.impl
                      , i = t ? t.body.impl : ls.TypedConstraint_getFixedBody()
                      , r = iY.instance.BT_TRANSFORM_0
                      , n = iY.instance.BT_TRANSFORM_1;
                    this._impl = ls.HingeConstraint_new(e, i, r, n),
                    this.updateFrames()
                }
                ,
                i.updateFrames = function() {
                    var t = this.constraint
                      , e = t.node
                      , i = lY
                      , r = uY
                      , n = iY.instance.BT_TRANSFORM_0;
                    di.multiply(i, e.worldScale, t.pivotA),
                    cY(ls.Transform_getOrigin(n), i);
                    var s = iY.instance.BT_QUAT_0;
                    nr.rotationTo(r, di.UNIT_Z, t.axis),
                    dY(s, r),
                    ls.Transform_setRotation(n, s);
                    var a = iY.instance.BT_TRANSFORM_1
                      , o = this.constraint.connectedBody;
                    o ? di.multiply(i, o.node.worldScale, t.pivotB) : (di.multiply(i, e.worldScale, t.pivotA),
                    di.add(i, i, e.worldPosition),
                    di.add(i, i, t.pivotB),
                    nr.multiply(r, r, e.worldRotation)),
                    cY(ls.Transform_getOrigin(a), i),
                    dY(s, r),
                    ls.Transform_setRotation(a, s),
                    ls.HingeConstraint_setFrames(this._impl, n, a)
                }
                ,
                i.updateScale0 = function() {
                    this.updateFrames()
                }
                ,
                i.updateScale1 = function() {
                    this.updateFrames()
                }
                ,
                Je(e, [{
                    key: "constraint",
                    get: function() {
                        return this._com
                    }
                }]),
                e
            }(UY);
            On.once(ys.EVENT_ENGINE_INITED, (function() {
                vs.register("bullet", {
                    PhysicsWorld: OY,
                    RigidBody: mY,
                    BoxShape: PY,
                    SphereShape: MY,
                    CapsuleShape: IY,
                    TrimeshShape: LY,
                    CylinderShape: FY,
                    ConeShape: NY,
                    TerrainShape: kY,
                    SimplexShape: GY,
                    PlaneShape: zY,
                    PointToPointConstraint: HY,
                    HingeConstraint: VY
                })
            }
            ));
            var WY, XY, jY, YY, KY = function() {
                function t(t, e, i) {
                    this._id = void 0,
                    this._opts = void 0,
                    this._accumStart = void 0,
                    this._total = 0,
                    this._value = 0,
                    this._averageValue = 0,
                    this._accumValue = 0,
                    this._accumSamples = 0,
                    this._id = t,
                    this._opts = e,
                    this._accumStart = i
                }
                var e = t.prototype;
                return e.sample = function(t) {
                    this._average(this._value, t)
                }
                ,
                e.human = function() {
                    var t = this._opts
                      , e = t.average
                      , i = t.isInteger
                      , r = e ? this._averageValue : this._value;
                    return i ? Math.round(r) : Math.round(100 * r) / 100
                }
                ,
                e.alarm = function() {
                    return this._opts.below && this._value < this._opts.below || this._opts.over && this._value > this._opts.over
                }
                ,
                e._average = function(t, e) {
                    if (void 0 === e && (e = 0),
                    this._opts.average) {
                        this._accumValue += t,
                        ++this._accumSamples;
                        var i = e;
                        i - this._accumStart >= this._opts.average && (this._averageValue = this._accumValue / this._accumSamples,
                        this._accumValue = 0,
                        this._accumStart = i,
                        this._accumSamples = 0)
                    }
                }
                ,
                Je(t, [{
                    key: "value",
                    get: function() {
                        return this._value
                    },
                    set: function(t) {
                        this._value = t
                    }
                }]),
                t
            }(), ZY = Ti("cc.PerfCounter")(WY = function(t) {
                function e(e, i, r) {
                    var n;
                    return (n = t.call(this, e, i, r) || this)._time = void 0,
                    n._time = r,
                    n
                }
                qe(e, t);
                var i = e.prototype;
                return i.start = function(t) {
                    void 0 === t && (t = 0),
                    this._time = t
                }
                ,
                i.end = function(t) {
                    void 0 === t && (t = 0),
                    this._value = t - this._time,
                    this._average(this._value)
                }
                ,
                i.tick = function() {
                    this.end(),
                    this.start()
                }
                ,
                i.frame = function(t) {
                    var e = t
                      , i = e - this._time;
                    this._total++,
                    i > (this._opts.average || 1e3) && (this._value = 1e3 * this._total / i,
                    this._total = 0,
                    this._time = e,
                    this._average(this._value))
                }
                ,
                e
            }(KY)) || WY, qY = "0123456789. ", JY = 500, QY = {
                0: 0,
                1: 1,
                2: 2,
                3: 3,
                4: 4,
                5: 5,
                6: 6,
                7: 7,
                8: 8,
                9: 9,
                ".": 10
            }, $Y = {
                fps: {
                    desc: "Framerate (FPS)",
                    below: 30,
                    average: JY,
                    isInteger: !0
                },
                draws: {
                    desc: "Draw call",
                    isInteger: !0
                },
                frame: {
                    desc: "Frame time (ms)",
                    min: 0,
                    max: 50,
                    average: JY
                },
                instances: {
                    desc: "Instance Count",
                    isInteger: !0
                },
                tricount: {
                    desc: "Triangle",
                    isInteger: !0
                },
                logic: {
                    desc: "Game Logic (ms)",
                    min: 0,
                    max: 50,
                    average: JY,
                    color: "#080"
                },
                physics: {
                    desc: "Physics (ms)",
                    min: 0,
                    max: 50,
                    average: JY
                },
                render: {
                    desc: "Renderer (ms)",
                    min: 0,
                    max: 50,
                    average: JY,
                    color: "#f90"
                },
                textureMemory: {
                    desc: "GFX Texture Mem(M)"
                },
                bufferMemory: {
                    desc: "GFX Buffer Mem(M)"
                }
            }, tK = t("Profiler", function() {
                function t() {
                    this._stats = null,
                    this.id = "__Profiler__",
                    this._showFPS = !1,
                    this._rootNode = null,
                    this._device = null,
                    this._swapchain = null,
                    this._pipeline = null,
                    this._meshRenderer = null,
                    this._canvas = null,
                    this._ctx = null,
                    this._texture = null,
                    this._region = new rt,
                    this._canvasArr = [],
                    this._regionArr = [this._region],
                    this.digitsData = null,
                    this.offsetData = null,
                    this.pass = null,
                    this._canvasDone = !1,
                    this._statsDone = !1,
                    this._inited = !1,
                    this._lineHeight = 256 / (Object.keys($Y).length + 1),
                    this._wordHeight = 0,
                    this._eachNumWidth = 0,
                    this._totalLines = 0,
                    this.lastTime = 0,
                    this._canvas = document.createElement("canvas"),
                    this._ctx = this._canvas.getContext("2d"),
                    this._canvasArr.push(this._canvas)
                }
                var e = t.prototype;
                return e.isShowingStats = function() {
                    return this._showFPS
                }
                ,
                e.hideStats = function() {
                    this._showFPS && (this._rootNode && (this._rootNode.active = !1),
                    ci.game.off(ci.Game.EVENT_RESTART, this.generateNode, this),
                    ci.director.off(ci.Director.EVENT_BEFORE_UPDATE, this.beforeUpdate, this),
                    ci.director.off(ci.Director.EVENT_AFTER_UPDATE, this.afterUpdate, this),
                    ci.director.off(ci.Director.EVENT_BEFORE_PHYSICS, this.beforePhysics, this),
                    ci.director.off(ci.Director.EVENT_AFTER_PHYSICS, this.afterPhysics, this),
                    ci.director.off(ci.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this),
                    ci.director.off(ci.Director.EVENT_AFTER_DRAW, this.afterDraw, this),
                    this._showFPS = !1,
                    this._pipeline.profiler = null,
                    ci.game.config.showFPS = !1)
                }
                ,
                e.showStats = function() {
                    if (!this._showFPS) {
                        if (!this._device) {
                            var t = ci.director.root;
                            this._device = t.device,
                            this._swapchain = t.mainWindow.swapchain,
                            this._pipeline = t.pipeline
                        }
                        this.generateCanvas(),
                        this.generateStats(),
                        ci.game.once(ci.Game.EVENT_ENGINE_INITED, this.generateNode, this),
                        ci.game.on(ci.Game.EVENT_RESTART, this.generateNode, this),
                        this._rootNode && (this._rootNode.active = !0),
                        ci.director.on(ci.Director.EVENT_BEFORE_UPDATE, this.beforeUpdate, this),
                        ci.director.on(ci.Director.EVENT_AFTER_UPDATE, this.afterUpdate, this),
                        ci.director.on(ci.Director.EVENT_BEFORE_PHYSICS, this.beforePhysics, this),
                        ci.director.on(ci.Director.EVENT_AFTER_PHYSICS, this.afterPhysics, this),
                        ci.director.on(ci.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this),
                        ci.director.on(ci.Director.EVENT_AFTER_DRAW, this.afterDraw, this),
                        this._showFPS = !0,
                        this._canvasDone = !0,
                        this._statsDone = !0,
                        ci.game.config.showFPS = !0
                    }
                }
                ,
                e.generateCanvas = function() {
                    if (!this._canvasDone) {
                        this._ctx && this._canvas && (this._canvas.width = 256,
                        this._canvas.height = 256,
                        this._canvas.style.width = "" + this._canvas.width,
                        this._canvas.style.height = "" + this._canvas.height,
                        this._ctx.font = "23px Arial",
                        this._ctx.textBaseline = "top",
                        this._ctx.fillStyle = "#fff",
                        this._texture = this._device.createTexture(new pt(v.TEX2D,S.SAMPLED | S.TRANSFER_DST,_.RGBA8,256,256)),
                        this._region.texExtent.width = 256,
                        this._region.texExtent.height = 256)
                    }
                }
                ,
                e.generateStats = function() {
                    if (!this._statsDone && this._ctx && this._canvas) {
                        this._stats = null;
                        var t = performance.now();
                        this._ctx.textAlign = "left";
                        var e = 0;
                        for (var i in $Y) {
                            var r = $Y[i];
                            this._ctx.fillText(r.desc, 0, e * this._lineHeight),
                            r.counter = new ZY(i,r,t),
                            e++
                        }
                        this._totalLines = e,
                        this._wordHeight = this._totalLines * this._lineHeight / this._canvas.height;
                        for (var n = 0; n < qY.length; ++n) {
                            var s = this._ctx.measureText(qY[n]).width;
                            this._eachNumWidth = Math.max(this._eachNumWidth, s)
                        }
                        for (var a = 0; a < qY.length; ++a)
                            this._ctx.fillText(qY[a], a * this._eachNumWidth, this._totalLines * this._lineHeight);
                        this._eachNumWidth /= this._canvas.width,
                        this._stats = $Y,
                        this._canvasArr[0] = this._canvas,
                        this._device.copyTexImagesToTexture(this._canvasArr, this._texture, this._regionArr)
                    }
                }
                ,
                e.generateNode = function() {
                    if (!this._rootNode || !this._rootNode.isValid) {
                        this._rootNode = new Sr("PROFILER_NODE"),
                        ci.game.addPersistRootNode(this._rootNode);
                        var t = new Sr("Profiler_Root");
                        t.parent = this._rootNode;
                        for (var e = .4, i = e / this._totalLines, r = e / this._wordHeight, n = i / 23, s = this._eachNumWidth * this._canvas.width * n, a = [0, e, 0, r, e, 0, r, 0, 0, 0, 0, 0], o = [0, 2, 1, 0, 3, 2], l = [0, 0, -1, 0, 1, 0, -1, 0, 1, this._wordHeight, -1, 0, 0, this._wordHeight, -1, 0], h = 0, u = 0; u < this._totalLines; u++)
                            for (var c = 0; c < 8; c++) {
                                a.push(r + c * s, e - u * i, 0),
                                a.push(r + (c + 1) * s, e - u * i, 0),
                                a.push(r + (c + 1) * s, e - (u + 1) * i, 0),
                                a.push(r + c * s, e - (u + 1) * i, 0),
                                h = 4 * (8 * u + c + 1),
                                o.push(0 + h, 2 + h, 1 + h, 0 + h, 3 + h, 2 + h);
                                var _ = 8 * u + c
                                  , d = Math.floor(_ / 4)
                                  , p = _ - 4 * d;
                                l.push(0, this._wordHeight, d, p),
                                l.push(this._eachNumWidth, this._wordHeight, d, p),
                                l.push(this._eachNumWidth, 1, d, p),
                                l.push(0, 1, d, p)
                            }
                        this._meshRenderer = t.addComponent(Fl),
                        this._meshRenderer.mesh = Oo({
                            positions: a,
                            indices: o,
                            colors: l
                        });
                        var f = new Tr;
                        f.initialize({
                            effectName: "profiler"
                        });
                        var g = this.pass = f.passes[0]
                          , m = g.getBinding("mainTexture")
                          , y = g.getBinding("digits")
                          , v = g.getBinding("offset");
                        g.bindTexture(m, this._texture),
                        this.digitsData = g.blocks[y],
                        this.offsetData = g.blocks[v],
                        this.offsetData[3] = -1,
                        this._meshRenderer.material = f,
                        this._meshRenderer.node.layer = dn.Enum.PROFILER,
                        this._inited = !0
                    }
                }
                ,
                e.beforeUpdate = function() {
                    if (this._stats) {
                        var t = performance.now();
                        this._stats.frame.counter.start(t),
                        this._stats.logic.counter.start(t)
                    }
                }
                ,
                e.afterUpdate = function() {
                    if (this._stats) {
                        var t = performance.now();
                        ci.director.isPaused() ? this._stats.frame.counter.start(t) : this._stats.logic.counter.end(t)
                    }
                }
                ,
                e.beforePhysics = function() {
                    if (this._stats) {
                        var t = performance.now();
                        this._stats.physics.counter.start(t)
                    }
                }
                ,
                e.afterPhysics = function() {
                    if (this._stats) {
                        var t = performance.now();
                        this._stats.physics.counter.end(t)
                    }
                }
                ,
                e.beforeDraw = function() {
                    if (this._stats && this._inited) {
                        var t = this._swapchain.surfaceTransform
                          , e = this._device.capabilities.clipSpaceSignY;
                        if (t !== this.offsetData[3]) {
                            var i = Ss[t]
                              , r = -.9 * e;
                            this.offsetData[0] = -.9 * i[0] + r * i[2],
                            this.offsetData[1] = -.9 * i[1] + r * i[3],
                            this.offsetData[2] = this._eachNumWidth,
                            this.offsetData[3] = t
                        }
                        this.pass._setRootBufferDirty(!0),
                        this._meshRenderer.model && (this._pipeline.profiler = this._meshRenderer.model);
                        var n = performance.now();
                        this._stats.render.counter.start(n)
                    }
                }
                ,
                e.afterDraw = function() {
                    if (this._stats && this._inited) {
                        var t = performance.now();
                        if (this._stats.frame.counter.end(t),
                        this._stats.fps.counter.frame(t),
                        this._stats.render.counter.end(t),
                        !(t - this.lastTime < JY)) {
                            this.lastTime = t;
                            var e = this._device;
                            this._stats.draws.counter.value = e.numDrawCalls,
                            this._stats.instances.counter.value = e.numInstances,
                            this._stats.bufferMemory.counter.value = e.memoryStatus.bufferSize / 1048576,
                            this._stats.textureMemory.counter.value = e.memoryStatus.textureSize / 1048576,
                            this._stats.tricount.counter.value = e.numTris;
                            var i = 0
                              , r = this.digitsData;
                            for (var n in this._stats) {
                                var s = this._stats[n];
                                s.counter.sample(t);
                                for (var a = s.counter.human().toString(), o = 7; o >= 0; o--) {
                                    var l = 8 * i + o
                                      , h = a[a.length - (8 - o)]
                                      , u = QY[h];
                                    void 0 === u && (u = 11),
                                    r[l] = u
                                }
                                i++
                            }
                        }
                    }
                }
                ,
                t
            }()), eK = t("profiler", new tK);
            ci.profiler = eK,
            function(t) {
                t.PLAYED = "play",
                t.PAUSED = "pause",
                t.STOPPED = "stop",
                t.SEEKED = "seeked",
                t.ENDED = "ended",
                t.INTERRUPTION_BEGIN = "interruptionBegin",
                t.INTERRUPTION_END = "interruptionEnd",
                t.USER_GESTURE = "on_gesture"
            }(XY || (XY = {})),
            function(t) {
                t[t.DOM_AUDIO = 0] = "DOM_AUDIO",
                t[t.WEB_AUDIO = 1] = "WEB_AUDIO",
                t[t.MINIGAME_AUDIO = 2] = "MINIGAME_AUDIO",
                t[t.NATIVE_AUDIO = 3] = "NATIVE_AUDIO",
                t[t.UNKNOWN_AUDIO = 4] = "UNKNOWN_AUDIO"
            }(jY || (jY = {})),
            function(t) {
                t[t.INIT = 0] = "INIT",
                t[t.PLAYING = 1] = "PLAYING",
                t[t.PAUSED = 2] = "PAUSED",
                t[t.STOPPED = 3] = "STOPPED",
                t[t.INTERRUPTED = 4] = "INTERRUPTED"
            }(YY || (YY = {}));
            var iK, rK, nK = 0;
            function sK(t, e) {
                var i;
                e.invoking || (e.invoking = !0,
                (i = e.func).call.apply(i, [t].concat(e.args)).then((function() {
                    e.invoking = !1,
                    t._operationQueue.shift(),
                    t._eventTarget.emit(e.id.toString());
                    var i = t._operationQueue[0];
                    i && sK(t, i)
                }
                )).catch((function() {}
                )))
            }
            function aK(t, e, i) {
                var r = i.value;
                i.value = function() {
                    for (var t = this, e = arguments.length, i = new Array(e), n = 0; n < e; n++)
                        i[n] = arguments[n];
                    return new Promise((function(e) {
                        var n = nK++
                          , s = t;
                        s._operationQueue.push({
                            id: n,
                            func: r,
                            args: i,
                            invoking: !1
                        }),
                        s._eventTarget.once(n.toString(), e),
                        sK(s, s._operationQueue[0])
                    }
                    ))
                }
            }
            function oK(t) {
                return new Promise((function(e) {
                    var i = t.play();
                    return void 0 === i ? e() : (i.then(e).catch((function() {
                        var i = function() {
                            t.play().catch((function() {}
                            )),
                            e()
                        }
                          , r = document.getElementById("GameCanvas");
                        null == r || r.addEventListener("touchend", i, {
                            once: !0
                        }),
                        null == r || r.addEventListener("mousedown", i, {
                            once: !0
                        })
                    }
                    )),
                    null)
                }
                ))
            }
            var lK, hK, uK, cK = function() {
                function t(t, e) {
                    this._domAudio = void 0,
                    this._onPlayCb = void 0,
                    this._onEndCb = void 0,
                    this._domAudio = t,
                    t.volume = e
                }
                var e = t.prototype;
                return e.play = function() {
                    var t = this;
                    oK(this._domAudio).then((function() {
                        var e;
                        null === (e = t.onPlay) || void 0 === e || e.call(t)
                    }
                    )).catch((function() {}
                    ))
                }
                ,
                e.stop = function() {
                    this._domAudio.pause()
                }
                ,
                Je(t, [{
                    key: "onPlay",
                    get: function() {
                        return this._onPlayCb
                    },
                    set: function(t) {
                        this._onPlayCb = t
                    }
                }, {
                    key: "onEnd",
                    get: function() {
                        return this._onEndCb
                    },
                    set: function(t) {
                        this._onEndCb && this._domAudio.removeEventListener("ended", this._onEndCb),
                        this._onEndCb = t,
                        t && this._domAudio.addEventListener("ended", t)
                    }
                }]),
                t
            }(), _K = (rK = function() {
                function t(t) {
                    var e = this;
                    this._domAudio = void 0,
                    this._state = YY.INIT,
                    this._onEnded = void 0,
                    this._eventTarget = new bs,
                    this._operationQueue = [],
                    this._domAudio = t,
                    Ts.on("hide", this._onHide, this),
                    Ts.on("show", this._onShow, this),
                    this._onEnded = function() {
                        e.seek(0).catch((function() {}
                        )),
                        e._state = YY.INIT,
                        e._eventTarget.emit(XY.ENDED)
                    }
                    ,
                    this._domAudio.addEventListener("ended", this._onEnded)
                }
                var e = t.prototype;
                return e.destroy = function() {
                    Ts.off("hide", this._onHide, this),
                    Ts.off("show", this._onShow, this),
                    this._domAudio.removeEventListener("ended", this._onEnded),
                    this._domAudio = null
                }
                ,
                t.load = function(e) {
                    return new Promise((function(i) {
                        t.loadNative(e).then((function(e) {
                            i(new t(e))
                        }
                        )).catch((function() {}
                        ))
                    }
                    ))
                }
                ,
                t.loadNative = function(t) {
                    return new Promise((function(e, i) {
                        var r = document.createElement("audio")
                          , n = "canplaythrough";
                        Ts.os === si.IOS ? n = "loadedmetadata" : Ts.browserType === ai.FIREFOX && (n = "canplay");
                        var s = setTimeout((function() {
                            0 === r.readyState ? l() : o()
                        }
                        ), 8e3)
                          , a = function() {
                            clearTimeout(s),
                            r.removeEventListener(n, o, !1),
                            r.removeEventListener("error", l, !1)
                        }
                          , o = function() {
                            a(),
                            e(r)
                        }
                          , l = function() {
                            a(),
                            i("load audio failure - " + t)
                        };
                        r.addEventListener(n, o, !1),
                        r.addEventListener("error", l, !1),
                        r.src = t
                    }
                    ))
                }
                ,
                t.loadOneShotAudio = function(e, i) {
                    return new Promise((function(r, n) {
                        t.loadNative(e).then((function(t) {
                            var e = new cK(t,i);
                            r(e)
                        }
                        )).catch(n)
                    }
                    ))
                }
                ,
                e._onHide = function() {
                    var t = this;
                    this._state === YY.PLAYING && this.pause().then((function() {
                        t._state = YY.INTERRUPTED,
                        t._eventTarget.emit(XY.INTERRUPTION_BEGIN)
                    }
                    )).catch((function() {}
                    ))
                }
                ,
                e._onShow = function() {
                    var t = this;
                    this._state === YY.INTERRUPTED && this.play().then((function() {
                        t._eventTarget.emit(XY.INTERRUPTION_END)
                    }
                    )).catch((function() {}
                    ))
                }
                ,
                e.seek = function(t) {
                    return t = nn(t, 0, this.duration),
                    this._domAudio.currentTime = t,
                    Promise.resolve()
                }
                ,
                e.play = function() {
                    var t = this;
                    return new Promise((function(e) {
                        oK(t._domAudio).then((function() {
                            t._state = YY.PLAYING,
                            e()
                        }
                        )).catch((function() {}
                        ))
                    }
                    ))
                }
                ,
                e.pause = function() {
                    return this._domAudio.pause(),
                    this._state = YY.PAUSED,
                    Promise.resolve()
                }
                ,
                e.stop = function() {
                    var t = this;
                    return new Promise((function(e) {
                        t._domAudio.pause(),
                        t._domAudio.currentTime = 0,
                        t._state = YY.STOPPED,
                        e()
                    }
                    ))
                }
                ,
                e.onInterruptionBegin = function(t) {
                    this._eventTarget.on(XY.INTERRUPTION_BEGIN, t)
                }
                ,
                e.offInterruptionBegin = function(t) {
                    this._eventTarget.off(XY.INTERRUPTION_BEGIN, t)
                }
                ,
                e.onInterruptionEnd = function(t) {
                    this._eventTarget.on(XY.INTERRUPTION_END, t)
                }
                ,
                e.offInterruptionEnd = function(t) {
                    this._eventTarget.off(XY.INTERRUPTION_END, t)
                }
                ,
                e.onEnded = function(t) {
                    this._eventTarget.on(XY.ENDED, t)
                }
                ,
                e.offEnded = function(t) {
                    this._eventTarget.off(XY.ENDED, t)
                }
                ,
                Je(t, [{
                    key: "src",
                    get: function() {
                        return this._domAudio ? this._domAudio.src : ""
                    }
                }, {
                    key: "type",
                    get: function() {
                        return jY.DOM_AUDIO
                    }
                }, {
                    key: "state",
                    get: function() {
                        return this._state
                    }
                }, {
                    key: "loop",
                    get: function() {
                        return this._domAudio.loop
                    },
                    set: function(t) {
                        this._domAudio.loop = t
                    }
                }, {
                    key: "volume",
                    get: function() {
                        return this._domAudio.volume
                    },
                    set: function(t) {
                        t = kn(t),
                        this._domAudio.volume = t
                    }
                }, {
                    key: "duration",
                    get: function() {
                        return this._domAudio.duration
                    }
                }, {
                    key: "currentTime",
                    get: function() {
                        return this._domAudio.currentTime
                    }
                }]),
                t
            }(),
            Ei((iK = rK).prototype, "seek", [aK], Object.getOwnPropertyDescriptor(iK.prototype, "seek"), iK.prototype),
            Ei(iK.prototype, "play", [aK], Object.getOwnPropertyDescriptor(iK.prototype, "play"), iK.prototype),
            Ei(iK.prototype, "pause", [aK], Object.getOwnPropertyDescriptor(iK.prototype, "pause"), iK.prototype),
            Ei(iK.prototype, "stop", [aK], Object.getOwnPropertyDescriptor(iK.prototype, "stop"), iK.prototype),
            iK), dK = function() {
                function t(t) {
                    this._nativeAudio = void 0,
                    this._startTime = 0,
                    this._startOffset = 0,
                    this._isPaused = !0,
                    this._nativeAudio = t
                }
                var e = t.prototype;
                return e.destroy = function() {
                    this._nativeAudio = void 0
                }
                ,
                e._now = function() {
                    return performance.now() / 1e3
                }
                ,
                e._calculateCurrentTime = function() {
                    var t = this._now() - this._startTime
                      , e = this._startOffset + t;
                    return e >= this.duration && (this._startTime = this._now(),
                    this._startOffset = 0),
                    e % this.duration
                }
                ,
                e.start = function() {
                    this._isPaused = !1,
                    this._startTime = this._now()
                }
                ,
                e.pause = function() {
                    this._isPaused || (this._isPaused = !0,
                    this._startOffset = this._calculateCurrentTime())
                }
                ,
                e.stop = function() {
                    this._isPaused = !0,
                    this._startOffset = 0
                }
                ,
                e.seek = function(t) {
                    this._startTime = this._now(),
                    this._startOffset = nn(t, 0, this.duration)
                }
                ,
                Je(t, [{
                    key: "duration",
                    get: function() {
                        return this._nativeAudio.duration
                    }
                }, {
                    key: "currentTime",
                    get: function() {
                        return this._isPaused ? this._startOffset : this._calculateCurrentTime()
                    }
                }]),
                t
            }(), pK = new (function() {
                function t() {
                    this._audioBufferDataMap = {}
                }
                var e = t.prototype;
                return e.addCache = function(t, e) {
                    this._audioBufferDataMap[t] ? console.warn("Audio buffer " + t + " has been cached") : this._audioBufferDataMap[t] = {
                        usedCount: 1,
                        audioBuffer: e
                    }
                }
                ,
                e.retainCache = function(t) {
                    var e = this._audioBufferDataMap[t];
                    e ? e.usedCount++ : console.warn("Audio buffer cache " + t + " has not been added.")
                }
                ,
                e.getCache = function(t) {
                    var e = this._audioBufferDataMap[t];
                    return null == e ? void 0 : e.audioBuffer
                }
                ,
                e.tryReleasingCache = function(t) {
                    var e = this._audioBufferDataMap[t];
                    e ? --e.usedCount <= 0 && delete this._audioBufferDataMap[t] : console.warn("Audio buffer cache " + t + " has not been added.")
                }
                ,
                t
            }()), fK = window.AudioContext || window.webkitAudioContext || window.mozAudioContext, gK = function() {
                function t() {
                    this._context = void 0,
                    this._context = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)
                }
                var e = t.prototype;
                return e.decodeAudioData = function(t) {
                    var e = this;
                    return new Promise((function(i) {
                        var r = e._context.decodeAudioData(t, (function(t) {
                            i(t)
                        }
                        ), (function(t) {
                            console.error("failed to load Web Audio", t)
                        }
                        ));
                        null == r || r.catch((function() {}
                        ))
                    }
                    ))
                }
                ,
                e.runContext = function() {
                    var t = this;
                    return new Promise((function(e) {
                        var i = t._context;
                        if (i.resume)
                            if ("running" !== i.state) {
                                var r = document.getElementById("GameCanvas")
                                  , n = function() {
                                    i.resume().then(e).catch((function() {}
                                    ))
                                };
                                null == r || r.addEventListener("touchend", n, {
                                    once: !0,
                                    capture: !0
                                }),
                                null == r || r.addEventListener("mouseup", n, {
                                    once: !0,
                                    capture: !0
                                })
                            } else
                                e();
                        else
                            e()
                    }
                    ))
                }
                ,
                e.createBufferSource = function(t, e) {
                    var i = this._context.createBufferSource();
                    return void 0 !== t && (i.buffer = t),
                    void 0 !== e && (i.loop = e),
                    i
                }
                ,
                e.createGain = function(t) {
                    void 0 === t && (t = 1);
                    var e = this._context.createGain();
                    return this.setGainValue(e, t),
                    e
                }
                ,
                e.setGainValue = function(t, e) {
                    if (t.gain.setTargetAtTime)
                        try {
                            t.gain.setTargetAtTime(e, this._context.currentTime, 0)
                        } catch (i) {
                            t.gain.setTargetAtTime(e, this._context.currentTime, .01)
                        }
                    else
                        t.gain.value = e
                }
                ,
                e.connectContext = function(t) {
                    this._context && t.connect(this._context.destination)
                }
                ,
                Je(t, [{
                    key: "currentTime",
                    get: function() {
                        return this._context.currentTime
                    }
                }]),
                t
            }();
            gK.support = !!fK,
            gK.support && (uK = new gK);
            var mK, yK, vK, SK, TK, bK = function() {
                function t(t, e, i) {
                    this._duration = void 0,
                    this._bufferSourceNode = void 0,
                    this._onPlayCb = void 0,
                    this._currentTimer = 0,
                    this._url = void 0,
                    this._onEndCb = void 0,
                    this._duration = t.duration,
                    this._url = i,
                    this._bufferSourceNode = uK.createBufferSource(t, !1);
                    var r = uK.createGain(e);
                    this._bufferSourceNode.connect(r),
                    uK.connectContext(r)
                }
                var e = t.prototype;
                return e.play = function() {
                    var t = this;
                    this._bufferSourceNode.start(),
                    uK.runContext().then((function() {
                        var e;
                        null === (e = t.onPlay) || void 0 === e || e.call(t),
                        t._currentTimer = window.setTimeout((function() {
                            var e;
                            pK.tryReleasingCache(t._url),
                            null === (e = t.onEnd) || void 0 === e || e.call(t)
                        }
                        ), 1e3 * t._duration)
                    }
                    )).catch((function() {}
                    ))
                }
                ,
                e.stop = function() {
                    clearTimeout(this._currentTimer),
                    pK.tryReleasingCache(this._url),
                    this._bufferSourceNode.stop()
                }
                ,
                Je(t, [{
                    key: "onPlay",
                    get: function() {
                        return this._onPlayCb
                    },
                    set: function(t) {
                        this._onPlayCb = t
                    }
                }, {
                    key: "onEnd",
                    get: function() {
                        return this._onEndCb
                    },
                    set: function(t) {
                        this._onEndCb = t
                    }
                }]),
                t
            }(), EK = (hK = function() {
                function t(t, e) {
                    this._src = void 0,
                    this._audioBuffer = void 0,
                    this._sourceNode = void 0,
                    this._gainNode = void 0,
                    this._currentTimer = 0,
                    this._volume = 1,
                    this._loop = !1,
                    this._state = YY.INIT,
                    this._audioTimer = void 0,
                    this._eventTarget = new bs,
                    this._operationQueue = [],
                    this._audioBuffer = t,
                    this._audioTimer = new dK(t),
                    this._gainNode = uK.createGain(),
                    uK.connectContext(this._gainNode),
                    this._src = e,
                    Ts.on("hide", this._onHide, this),
                    Ts.on("show", this._onShow, this)
                }
                var e = t.prototype;
                return e.destroy = function() {
                    this._audioTimer.destroy(),
                    this._audioBuffer && (this._audioBuffer = null),
                    pK.tryReleasingCache(this._src),
                    Ts.off("hide", this._onHide, this),
                    Ts.off("show", this._onShow, this)
                }
                ,
                t.load = function(e) {
                    return new Promise((function(i) {
                        t.loadNative(e).then((function(r) {
                            i(new t(r,e))
                        }
                        )).catch((function() {}
                        ))
                    }
                    ))
                }
                ,
                t.loadNative = function(t) {
                    return new Promise((function(e, i) {
                        var r = pK.getCache(t);
                        if (r)
                            return pK.retainCache(t),
                            void e(r);
                        var n = new XMLHttpRequest
                          , s = "load audio failed: " + t + ", status: ";
                        n.open("GET", t, !0),
                        n.responseType = "arraybuffer",
                        n.onload = function() {
                            200 === n.status || 0 === n.status ? uK.decodeAudioData(n.response).then((function(i) {
                                pK.addCache(t, i),
                                e(i)
                            }
                            )).catch((function() {}
                            )) : i(new Error("" + s + n.status + "(no response)"))
                        }
                        ,
                        n.onerror = function() {
                            i(new Error("" + s + n.status + "(error)"))
                        }
                        ,
                        n.ontimeout = function() {
                            i(new Error("" + s + n.status + "(time out)"))
                        }
                        ,
                        n.onabort = function() {
                            i(new Error("" + s + n.status + "(abort)"))
                        }
                        ,
                        n.send(null)
                    }
                    ))
                }
                ,
                t.loadOneShotAudio = function(e, i) {
                    return new Promise((function(r, n) {
                        t.loadNative(e).then((function(t) {
                            var n = new bK(t,i,e);
                            r(n)
                        }
                        )).catch(n)
                    }
                    ))
                }
                ,
                e._onHide = function() {
                    var t = this;
                    this._state === YY.PLAYING && this.pause().then((function() {
                        t._state = YY.INTERRUPTED,
                        t._eventTarget.emit(XY.INTERRUPTION_BEGIN)
                    }
                    )).catch((function() {}
                    ))
                }
                ,
                e._onShow = function() {
                    var t = this;
                    this._state === YY.INTERRUPTED && this.play().then((function() {
                        t._eventTarget.emit(XY.INTERRUPTION_END)
                    }
                    )).catch((function() {}
                    ))
                }
                ,
                e.seek = function(t) {
                    var e = this;
                    return new Promise((function(i) {
                        e._audioTimer.seek(t),
                        e._state === YY.PLAYING ? e._doPlay().then(i).catch((function() {}
                        )) : i()
                    }
                    ))
                }
                ,
                e.play = function() {
                    return this._doPlay()
                }
                ,
                e._doPlay = function() {
                    var t = this;
                    return new Promise((function(e) {
                        t._stopSourceNode(),
                        t._sourceNode = uK.createBufferSource(t._audioBuffer, t.loop),
                        t._sourceNode.connect(t._gainNode),
                        t._sourceNode.start(0, t._audioTimer.currentTime),
                        uK.runContext().then((function() {
                            t._state = YY.PLAYING,
                            t._audioTimer.start(),
                            window.clearTimeout(t._currentTimer),
                            t._currentTimer = window.setTimeout((function e() {
                                t.loop ? t._currentTimer = window.setTimeout(e, 1e3 * t._audioBuffer.duration) : (t._audioTimer.stop(),
                                t._eventTarget.emit(XY.ENDED),
                                t._state = YY.INIT)
                            }
                            ), 1e3 * (t._audioBuffer.duration - t._audioTimer.currentTime)),
                            e()
                        }
                        )).catch((function() {}
                        ))
                    }
                    ))
                }
                ,
                e._stopSourceNode = function() {
                    try {
                        var t;
                        null === (t = this._sourceNode) || void 0 === t || t.stop()
                    } catch (t) {}
                }
                ,
                e.pause = function() {
                    return this._state === YY.PLAYING && this._sourceNode ? (this._audioTimer.pause(),
                    this._state = YY.PAUSED,
                    window.clearTimeout(this._currentTimer),
                    this._stopSourceNode(),
                    Promise.resolve()) : Promise.resolve()
                }
                ,
                e.stop = function() {
                    return this._sourceNode ? (this._audioTimer.stop(),
                    this._state = YY.STOPPED,
                    window.clearTimeout(this._currentTimer),
                    this._stopSourceNode(),
                    Promise.resolve()) : Promise.resolve()
                }
                ,
                e.onInterruptionBegin = function(t) {
                    this._eventTarget.on(XY.INTERRUPTION_BEGIN, t)
                }
                ,
                e.offInterruptionBegin = function(t) {
                    this._eventTarget.off(XY.INTERRUPTION_BEGIN, t)
                }
                ,
                e.onInterruptionEnd = function(t) {
                    this._eventTarget.on(XY.INTERRUPTION_END, t)
                }
                ,
                e.offInterruptionEnd = function(t) {
                    this._eventTarget.off(XY.INTERRUPTION_END, t)
                }
                ,
                e.onEnded = function(t) {
                    this._eventTarget.on(XY.ENDED, t)
                }
                ,
                e.offEnded = function(t) {
                    this._eventTarget.off(XY.ENDED, t)
                }
                ,
                Je(t, [{
                    key: "src",
                    get: function() {
                        return this._src
                    }
                }, {
                    key: "type",
                    get: function() {
                        return jY.WEB_AUDIO
                    }
                }, {
                    key: "state",
                    get: function() {
                        return this._state
                    }
                }, {
                    key: "loop",
                    get: function() {
                        return this._loop
                    },
                    set: function(t) {
                        this._loop = t,
                        this._sourceNode && (this._sourceNode.loop = t)
                    }
                }, {
                    key: "volume",
                    get: function() {
                        return this._volume
                    },
                    set: function(t) {
                        t = kn(t),
                        this._volume = t,
                        uK.setGainValue(this._gainNode, t)
                    }
                }, {
                    key: "duration",
                    get: function() {
                        return this._audioBuffer.duration
                    }
                }, {
                    key: "currentTime",
                    get: function() {
                        return this._audioTimer.currentTime
                    }
                }]),
                t
            }(),
            Ei((lK = hK).prototype, "seek", [aK], Object.getOwnPropertyDescriptor(lK.prototype, "seek"), lK.prototype),
            Ei(lK.prototype, "play", [aK], Object.getOwnPropertyDescriptor(lK.prototype, "play"), lK.prototype),
            Ei(lK.prototype, "pause", [aK], Object.getOwnPropertyDescriptor(lK.prototype, "pause"), lK.prototype),
            Ei(lK.prototype, "stop", [aK], Object.getOwnPropertyDescriptor(lK.prototype, "stop"), lK.prototype),
            lK), AK = function() {
                function t(t) {
                    this._audio = void 0,
                    this._audio = t
                }
                var e = t.prototype;
                return e.play = function() {
                    this._audio.play()
                }
                ,
                e.stop = function() {
                    this._audio.stop()
                }
                ,
                Je(t, [{
                    key: "onPlay",
                    get: function() {
                        return this._audio.onPlay
                    },
                    set: function(t) {
                        this._audio.onPlay = t
                    }
                }, {
                    key: "onEnd",
                    get: function() {
                        return this._audio.onEnd
                    },
                    set: function(t) {
                        this._audio.onEnd = t
                    }
                }]),
                t
            }(), CK = function() {
                function t(t) {
                    this._player = void 0,
                    this._player = t
                }
                t.load = function(e, i) {
                    return new Promise((function(r) {
                        (null == i ? void 0 : i.audioLoadMode) !== jY.DOM_AUDIO && gK.support ? EK.load(e).then((function(e) {
                            r(new t(e))
                        }
                        )).catch((function() {}
                        )) : (gK.support || ii(5201),
                        _K.load(e).then((function(e) {
                            r(new t(e))
                        }
                        )).catch((function() {}
                        )))
                    }
                    ))
                }
                ;
                var e = t.prototype;
                return e.destroy = function() {
                    this._player.destroy()
                }
                ,
                t.loadNative = function(t, e) {
                    return (null == e ? void 0 : e.audioLoadMode) !== jY.DOM_AUDIO && gK.support ? EK.loadNative(t) : (gK.support || ii(5201),
                    _K.loadNative(t))
                }
                ,
                t.loadOneShotAudio = function(t, e, i) {
                    return new Promise((function(r, n) {
                        (null == i ? void 0 : i.audioLoadMode) !== jY.DOM_AUDIO && gK.support ? EK.loadOneShotAudio(t, e).then((function(t) {
                            r(new AK(t))
                        }
                        )).catch(n) : (gK.support || ii(5201),
                        _K.loadOneShotAudio(t, e).then((function(t) {
                            r(new AK(t))
                        }
                        )).catch(n))
                    }
                    ))
                }
                ,
                e.seek = function(t) {
                    return this._player.seek(t)
                }
                ,
                e.play = function() {
                    return this._player.play()
                }
                ,
                e.pause = function() {
                    return this._player.pause()
                }
                ,
                e.stop = function() {
                    return this._player.stop()
                }
                ,
                e.onInterruptionBegin = function(t) {
                    this._player.onInterruptionBegin(t)
                }
                ,
                e.offInterruptionBegin = function(t) {
                    this._player.offInterruptionBegin(t)
                }
                ,
                e.onInterruptionEnd = function(t) {
                    this._player.onInterruptionEnd(t)
                }
                ,
                e.offInterruptionEnd = function(t) {
                    this._player.offInterruptionEnd(t)
                }
                ,
                e.onEnded = function(t) {
                    this._player.onEnded(t)
                }
                ,
                e.offEnded = function(t) {
                    this._player.offEnded(t)
                }
                ,
                Je(t, [{
                    key: "src",
                    get: function() {
                        return this._player.src
                    }
                }, {
                    key: "type",
                    get: function() {
                        return this._player.type
                    }
                }, {
                    key: "state",
                    get: function() {
                        return this._player.state
                    }
                }, {
                    key: "loop",
                    get: function() {
                        return this._player.loop
                    },
                    set: function(t) {
                        this._player.loop = t
                    }
                }, {
                    key: "volume",
                    get: function() {
                        return this._player.volume
                    },
                    set: function(t) {
                        this._player.volume = t
                    }
                }, {
                    key: "duration",
                    get: function() {
                        return this._player.duration
                    }
                }, {
                    key: "currentTime",
                    get: function() {
                        return this._player.currentTime
                    }
                }]),
                t
            }();
            CK.maxAudioChannel = 24;
            var RK = t("AudioClip", Ti("cc.AudioClip")((TK = SK = function(t) {
                function e() {
                    var e;
                    return e = t.call(this) || this,
                    Oi(e, "_duration", vK, Gi(e)),
                    e._loadMode = jY.UNKNOWN_AUDIO,
                    e._meta = null,
                    e._player = void 0,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.destroy = function() {
                    var e, i = t.prototype.destroy.call(this);
                    return null === (e = this._player) || void 0 === e || e.destroy(),
                    i
                }
                ,
                i.validate = function() {
                    return !!this._meta
                }
                ,
                i.getDuration = function() {
                    return this._duration ? this._duration : this._meta ? this._meta.duration : 0
                }
                ,
                i.getCurrentTime = function() {
                    return this._player ? this._player.currentTime : 0
                }
                ,
                i.getVolume = function() {
                    return this._player ? this._player.volume : 0
                }
                ,
                i.getLoop = function() {
                    return !!this._player && this._player.loop
                }
                ,
                i.setCurrentTime = function(t) {
                    var e;
                    null === (e = this._player) || void 0 === e || e.seek(t).catch((function() {}
                    ))
                }
                ,
                i.setVolume = function(t) {
                    this._player && (this._player.volume = t)
                }
                ,
                i.setLoop = function(t) {
                    this._player && (this._player.loop = t)
                }
                ,
                i.play = function() {
                    var t;
                    null === (t = this._player) || void 0 === t || t.play().catch((function() {}
                    ))
                }
                ,
                i.pause = function() {
                    var t;
                    null === (t = this._player) || void 0 === t || t.pause().catch((function() {}
                    ))
                }
                ,
                i.stop = function() {
                    var t;
                    null === (t = this._player) || void 0 === t || t.stop().catch((function() {}
                    ))
                }
                ,
                i.playOneShot = function(t) {
                    void 0 === t && (t = 1),
                    this._nativeAsset && CK.loadOneShotAudio(this._nativeAsset.url, t).then((function(t) {
                        t.play()
                    }
                    )).catch((function() {}
                    ))
                }
                ,
                Je(e, [{
                    key: "_nativeAsset",
                    get: function() {
                        return this._meta
                    },
                    set: function(t) {
                        this._meta = t,
                        t ? (this._loadMode = t.type,
                        this._player = t.player) : (this._meta = null,
                        this._loadMode = jY.UNKNOWN_AUDIO,
                        this._duration = 0)
                    }
                }, {
                    key: "_nativeDep",
                    get: function() {
                        return {
                            uuid: this._uuid,
                            audioLoadMode: this.loadMode,
                            ext: this._native,
                            __isNative__: !0
                        }
                    }
                }, {
                    key: "loadMode",
                    get: function() {
                        return this._loadMode
                    }
                }, {
                    key: "state",
                    get: function() {
                        return this._player ? this._player.state : YY.INIT
                    }
                }]),
                e
            }(Mr),
            SK.AudioType = jY,
            vK = Ei((yK = TK).prototype, "_duration", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            Ei(yK.prototype, "_nativeDep", [Rr], Object.getOwnPropertyDescriptor(yK.prototype, "_nativeDep"), yK.prototype),
            mK = yK)) || mK);
            function BK(t, e, i) {
                CK.load(t, {
                    audioLoadMode: e.audioLoadMode
                }).then((function(e) {
                    var r = {
                        player: e,
                        url: t,
                        duration: e.duration,
                        type: e.type
                    };
                    i(null, r)
                }
                )).catch((function(t) {
                    i(t)
                }
                ))
            }
            function xK(t, e, i, r) {
                var n = new RK;
                n._nativeUrl = t,
                n._nativeAsset = e,
                n._duration = e.duration,
                r(null, n)
            }
            ci.AudioClip = RK,
            Cn.register({
                ".mp3": BK,
                ".ogg": BK,
                ".wav": BK,
                ".m4a": BK
            }),
            Rn.register({
                ".mp3": xK,
                ".ogg": xK,
                ".wav": xK,
                ".m4a": xK
            });
            var DK, wK, OK, PK, MK, IK, LK, FK, NK, kK, GK, zK, UK, HK, VK, WK, XK, jK, YK, KK = new (function() {
                function t() {
                    this._oneShotAudioInfoList = [],
                    this._audioPlayerInfoList = []
                }
                var e = t.prototype;
                return e._findIndex = function(t, e) {
                    return t.findIndex((function(t) {
                        return t.audio === e
                    }
                    ))
                }
                ,
                e._tryAddPlaying = function(t, e) {
                    var i = this._findIndex(t, e);
                    return i > -1 ? (t[i].playTime = performance.now(),
                    !1) : (t.push({
                        audio: e,
                        playTime: performance.now()
                    }),
                    !0)
                }
                ,
                e.addPlaying = function(t) {
                    if (t instanceof CK) {
                        if (this._tryAddPlaying(this._audioPlayerInfoList, t))
                            return
                    } else
                        this._tryAddPlaying(this._oneShotAudioInfoList, t)
                }
                ,
                e._tryRemovePlaying = function(t, e) {
                    var i = this._findIndex(t, e);
                    return -1 !== i && (cs(t, i),
                    !0)
                }
                ,
                e.removePlaying = function(t) {
                    if (t instanceof CK) {
                        if (this._tryRemovePlaying(this._audioPlayerInfoList, t))
                            return
                    } else
                        this._tryRemovePlaying(this._oneShotAudioInfoList, t)
                }
                ,
                e.discardOnePlayingIfNeeded = function() {
                    var t;
                    this._audioPlayerInfoList.length + this._oneShotAudioInfoList.length < CK.maxAudioChannel || (this._oneShotAudioInfoList.length > 0 ? this._oneShotAudioInfoList.forEach((function(e) {
                        (!t || e.playTime < t.playTime) && (t = e)
                    }
                    )) : this._audioPlayerInfoList.forEach((function(e) {
                        (!t || e.playTime < t.playTime) && (t = e)
                    }
                    )),
                    t && (t.audio.stop(),
                    this.removePlaying(t.audio)))
                }
                ,
                t
            }());
            !function(t) {
                t.STARTED = "started",
                t.ENDED = "ended"
            }(YK || (YK = {}));
            var ZK, qK = function(e) {
                return t({
                    AudioSource: e,
                    AudioSourceComponent: e
                }),
                e
            }((DK = Ti("cc.AudioSource"),
            wK = Ii(),
            OK = Fi(),
            PK = Ci(RK),
            MK = Ci(RK),
            IK = Ni(),
            LK = Ni(),
            FK = Ni(),
            NK = ji(),
            kK = Ni(),
            DK(GK = wK(GK = OK((jK = XK = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "_clip", UK, Gi(e)),
                    e._player = null,
                    Oi(e, "_loop", HK, Gi(e)),
                    Oi(e, "_playOnAwake", VK, Gi(e)),
                    Oi(e, "_volume", WK, Gi(e)),
                    e._cachedCurrentTime = 0,
                    e._operationsBeforeLoading = [],
                    e._isLoaded = !1,
                    e._lastSetClip = void 0,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i._syncPlayer = function() {
                    var t = this
                      , e = this._clip;
                    this._isLoaded = !1,
                    e && this._lastSetClip !== e && (e._nativeAsset ? (this._lastSetClip = e,
                    CK.load(e._nativeAsset.url, {
                        audioLoadMode: e.loadMode
                    }).then((function(i) {
                        t._lastSetClip === e && (t._isLoaded = !0,
                        t._player && (t._player.offEnded(),
                        t._player.offInterruptionBegin(),
                        t._player.offInterruptionEnd(),
                        t._player.destroy()),
                        t._player = i,
                        i.onEnded((function() {
                            KK.removePlaying(i),
                            t.node.emit(YK.ENDED, t)
                        }
                        )),
                        i.onInterruptionBegin((function() {
                            KK.removePlaying(i)
                        }
                        )),
                        i.onInterruptionEnd((function() {
                            KK.addPlaying(i)
                        }
                        )),
                        t._syncStates())
                    }
                    )).catch((function() {}
                    ))) : console.error("Invalid audio clip"))
                }
                ,
                i.onLoad = function() {
                    this._syncPlayer()
                }
                ,
                i.onEnable = function() {
                    this._playOnAwake && !this.playing && this.play()
                }
                ,
                i.onDisable = function() {
                    var t = this._getRootNode();
                    (null == t ? void 0 : t._persistNode) || this.pause()
                }
                ,
                i.onDestroy = function() {
                    var t;
                    this.stop(),
                    null === (t = this._player) || void 0 === t || t.destroy()
                }
                ,
                i._getRootNode = function() {
                    for (var t, e, i = this.node, r = null === (t = i) || void 0 === t || null === (e = t.parent) || void 0 === e ? void 0 : e.parent; r; ) {
                        var n, s, a;
                        r = null === (s = i = null === (n = i) || void 0 === n ? void 0 : n.parent) || void 0 === s || null === (a = s.parent) || void 0 === a ? void 0 : a.parent
                    }
                    return i
                }
                ,
                i.play = function() {
                    var t, e, i = this;
                    this._isLoaded ? (KK.discardOnePlayingIfNeeded(),
                    this.state === YY.PLAYING && (null === (e = this._player) || void 0 === e || e.stop().catch((function() {}
                    ))),
                    null === (t = this._player) || void 0 === t || t.play().then((function() {
                        KK.addPlaying(i._player),
                        i.node.emit(YK.STARTED, i)
                    }
                    )).catch((function() {}
                    ))) : this._operationsBeforeLoading.push("play")
                }
                ,
                i.pause = function() {
                    var t, e = this;
                    this._isLoaded ? null === (t = this._player) || void 0 === t || t.pause().then((function() {
                        KK.removePlaying(e._player)
                    }
                    )).catch((function() {}
                    )) : this._operationsBeforeLoading.push("pause")
                }
                ,
                i.stop = function() {
                    var t, e = this;
                    this._isLoaded ? null === (t = this._player) || void 0 === t || t.stop().then((function() {
                        KK.removePlaying(e._player)
                    }
                    )).catch((function() {}
                    )) : this._operationsBeforeLoading.push("stop")
                }
                ,
                i.playOneShot = function(t, e) {
                    void 0 === e && (e = 1),
                    t._nativeAsset ? CK.loadOneShotAudio(t._nativeAsset.url, this._volume * e, {
                        audioLoadMode: t.loadMode
                    }).then((function(t) {
                        KK.discardOnePlayingIfNeeded(),
                        t.onPlay = function() {
                            KK.addPlaying(t)
                        }
                        ,
                        t.onEnd = function() {
                            KK.removePlaying(t)
                        }
                        ,
                        t.play()
                    }
                    )).catch((function() {}
                    )) : console.error("Invalid audio clip")
                }
                ,
                i._syncStates = function() {
                    var t = this;
                    this._player && this._player.seek(this._cachedCurrentTime).then((function() {
                        t._player && (t._player.loop = t._loop,
                        t._player.volume = t._volume,
                        t._operationsBeforeLoading.forEach((function(e) {
                            var i;
                            null === (i = t[e]) || void 0 === i || i.call(t)
                        }
                        )),
                        t._operationsBeforeLoading.length = 0)
                    }
                    )).catch((function() {}
                    ))
                }
                ,
                Je(e, [{
                    key: "clip",
                    get: function() {
                        return this._clip
                    },
                    set: function(t) {
                        t !== this._clip && (this._clip = t,
                        this._syncPlayer())
                    }
                }, {
                    key: "loop",
                    get: function() {
                        return this._loop
                    },
                    set: function(t) {
                        this._loop = t,
                        this._player && (this._player.loop = t)
                    }
                }, {
                    key: "playOnAwake",
                    get: function() {
                        return this._playOnAwake
                    },
                    set: function(t) {
                        this._playOnAwake = t
                    }
                }, {
                    key: "volume",
                    get: function() {
                        return this._volume
                    },
                    set: function(t) {
                        Number.isNaN(t) ? console.warn("illegal audio volume!") : (t = nn(t, 0, 1),
                        this._player ? (this._player.volume = t,
                        this._volume = this._player.volume) : this._volume = t)
                    }
                }, {
                    key: "currentTime",
                    get: function() {
                        return this._player ? this._player.currentTime : this._cachedCurrentTime
                    },
                    set: function(t) {
                        var e;
                        Number.isNaN(t) ? console.warn("illegal audio time!") : (t = nn(t, 0, this.duration),
                        this._cachedCurrentTime = t,
                        null === (e = this._player) || void 0 === e || e.seek(this._cachedCurrentTime).catch((function() {}
                        )))
                    }
                }, {
                    key: "duration",
                    get: function() {
                        var t, e;
                        return null !== (t = null === (e = this._clip) || void 0 === e ? void 0 : e.getDuration()) && void 0 !== t ? t : this._player ? this._player.currentTime : 0
                    }
                }, {
                    key: "state",
                    get: function() {
                        return this._player ? this._player.state : YY.INIT
                    }
                }, {
                    key: "playing",
                    get: function() {
                        return this.state === e.AudioState.PLAYING
                    }
                }], [{
                    key: "maxAudioChannel",
                    get: function() {
                        return CK.maxAudioChannel
                    }
                }]),
                e
            }(Ki),
            XK.AudioState = YY,
            XK.EventType = YK,
            UK = Ei((zK = jK).prototype, "_clip", [PK], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return null
                }
            }),
            HK = Ei(zK.prototype, "_loop", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            VK = Ei(zK.prototype, "_playOnAwake", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }),
            WK = Ei(zK.prototype, "_volume", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }),
            Ei(zK.prototype, "clip", [MK, IK], Object.getOwnPropertyDescriptor(zK.prototype, "clip"), zK.prototype),
            Ei(zK.prototype, "loop", [LK], Object.getOwnPropertyDescriptor(zK.prototype, "loop"), zK.prototype),
            Ei(zK.prototype, "playOnAwake", [FK], Object.getOwnPropertyDescriptor(zK.prototype, "playOnAwake"), zK.prototype),
            Ei(zK.prototype, "volume", [NK, kK], Object.getOwnPropertyDescriptor(zK.prototype, "volume"), zK.prototype),
            GK = zK)) || GK) || GK) || GK));
            rr(RK, "AudioClip", [{
                name: "PlayingState",
                newName: "AudioState",
                target: qK,
                targetName: "AudioSource"
            }]),
            un(RK.prototype, "AudioClip.prototype", ["state", "play", "pause", "stop", "playOneShot", "setCurrentTime", "setVolume", "setLoop", "getCurrentTime", "getVolume", "getLoop"].map((function(t) {
                return {
                    name: t,
                    suggest: "please use AudioSource.prototype." + t + " instead"
                }
            }
            ))),
            ci.AudioSourceComponent = qK,
            Vi.setClassAlias(qK, "cc.AudioSourceComponent"),
            function(t) {
                t.NONE = "none",
                t.LOADING = "loading",
                t.LOADED = "loaded",
                t.ERROR = "error"
            }(ZK || (ZK = {}));
            var JK = function() {
                function t(t) {
                    this._componentEventList = new Map,
                    this._state = ZK.NONE,
                    this._wrapper = void 0,
                    this._webview = null,
                    this._loaded = !1,
                    this._forceUpdate = !1,
                    this._component = null,
                    this._uiTrans = null,
                    this._node = null,
                    this._w = 0,
                    this._h = 0,
                    this._m00 = 0,
                    this._m01 = 0,
                    this._m04 = 0,
                    this._m05 = 0,
                    this._m12 = 0,
                    this._m13 = 0,
                    this._component = t,
                    this._node = t.node,
                    this._uiTrans = t.node.getComponent(yd),
                    this.reset(),
                    this.createWebView()
                }
                var e = t.prototype;
                return e.reset = function() {
                    this._wrapper = null,
                    this._webview = null,
                    this._loaded = !1,
                    this._w = 0,
                    this._h = 0,
                    this._m00 = 0,
                    this._m01 = 0,
                    this._m04 = 0,
                    this._m05 = 0,
                    this._m12 = 0,
                    this._m13 = 0,
                    this._state = ZK.NONE,
                    this._forceUpdate = !1
                }
                ,
                e.dispatchEvent = function(t) {
                    var e = this._componentEventList.get(t);
                    if (e) {
                        this._state = t;
                        for (var i = arguments.length, r = new Array(i > 1 ? i - 1 : 0), n = 1; n < i; n++)
                            r[n - 1] = arguments[n];
                        e.call(this, r)
                    }
                }
                ,
                e.destroy = function() {
                    this.removeWebView(),
                    this._wrapper = null,
                    this._webview = null,
                    this._loaded = !1,
                    this._component = null,
                    this._uiTrans = null,
                    this._forceUpdate = !1,
                    this._componentEventList.clear()
                }
                ,
                Je(t, [{
                    key: "loaded",
                    get: function() {
                        return this._loaded
                    }
                }, {
                    key: "componentEventList",
                    get: function() {
                        return this._componentEventList
                    }
                }, {
                    key: "webview",
                    get: function() {
                        return this._webview
                    }
                }, {
                    key: "state",
                    get: function() {
                        return this._state
                    }
                }, {
                    key: "UICamera",
                    get: function() {
                        return Ur.root.batcher2D.getFirstRenderCamera(this._node)
                    }
                }]),
                t
            }();
            ci.internal.WebViewImpl = JK;
            var QK, $K, tZ, eZ, iZ, rZ, nZ, sZ, aZ, oZ, lZ, hZ, uZ, cZ, _Z = Es(), dZ = function(t) {
                function e(e) {
                    return t.call(this, e) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i._bindDomEvent = function() {
                    var t = this;
                    this.webview && this.webview.addEventListener("load", (function(e) {
                        t._forceUpdate = !0,
                        t.dispatchEvent(ZK.LOADED);
                        var i = e.target
                          , r = i.contentDocument && i.contentDocument.body;
                        r && r.innerHTML.includes("404") && t.dispatchEvent(ZK.ERROR, r.innerHTML)
                    }
                    ))
                }
                ,
                i.loadURL = function(t) {
                    this.webview && (this.webview.src = t,
                    this.dispatchEvent(ZK.LOADING))
                }
                ,
                i.createWebView = function() {
                    var t = document.createElement("div");
                    this._wrapper = t,
                    t.id = "webview-wrapper",
                    t.style["-webkit-overflow"] = "auto",
                    t.style["-webkit-overflow-scrolling"] = "touch",
                    t.style.position = "absolute",
                    t.style.bottom = "0px",
                    t.style.left = "0px",
                    t.style.transformOrigin = "0px 100% 0px",
                    t.style["-webkit-transform-origin"] = "0px 100% 0px",
                    On.container.appendChild(t);
                    var e = document.createElement("iframe");
                    this._webview = e,
                    e.id = "webview",
                    e.style.border = "none",
                    e.style.width = "100%",
                    e.style.height = "100%",
                    t.appendChild(e),
                    this._bindDomEvent()
                }
                ,
                i.removeWebView = function() {
                    var t = this._wrapper;
                    Pn(On.container, t) && On.container.removeChild(t),
                    this.reset()
                }
                ,
                i.enable = function() {
                    this._wrapper && (this._wrapper.style.visibility = "visible")
                }
                ,
                i.disable = function() {
                    this._wrapper && (this._wrapper.style.visibility = "hidden")
                }
                ,
                i.evaluateJS = function(t) {
                    if (this.webview) {
                        var e = this.webview.contentWindow;
                        if (e)
                            try {
                                e.eval(t)
                            } catch (t) {
                                this.dispatchEvent(ZK.ERROR, t),
                                ti(t)
                            }
                    }
                }
                ,
                i.setOnJSCallback = function() {
                    ri("The platform does not support")
                }
                ,
                i.setJavascriptInterfaceScheme = function() {
                    ri("The platform does not support")
                }
                ,
                i.syncMatrix = function() {
                    if (this._wrapper && this._uiTrans && this._component && "hidden" !== this._wrapper.style.visibility) {
                        var t = this.UICamera;
                        if (t) {
                            this._component.node.getWorldMatrix(_Z),
                            t.update(!0),
                            t.worldMatrixToScreen(_Z, _Z, On.canvas.width, On.canvas.height);
                            var e = this._uiTrans.contentSize
                              , i = e.width
                              , r = e.height;
                            if (this._forceUpdate || this._m00 !== _Z.m00 || this._m01 !== _Z.m01 || this._m04 !== _Z.m04 || this._m05 !== _Z.m05 || this._m12 !== _Z.m12 || this._m13 !== _Z.m13 || this._w !== i || this._h !== r) {
                                this._m00 = _Z.m00,
                                this._m01 = _Z.m01,
                                this._m04 = _Z.m04,
                                this._m05 = _Z.m05,
                                this._m12 = _Z.m12,
                                this._m13 = _Z.m13,
                                this._w = i,
                                this._h = r;
                                var n = Mn.devicePixelRatio
                                  , s = 1 / n
                                  , a = 1 / n
                                  , o = On.container
                                  , l = _Z.m00 * s
                                  , h = _Z.m01
                                  , u = _Z.m04
                                  , c = _Z.m05 * a;
                                this._wrapper.style.width = i + "px",
                                this._wrapper.style.height = r + "px";
                                var _ = this._w * s
                                  , d = this._h * a
                                  , p = _ * _Z.m00 * this._uiTrans.anchorX
                                  , f = d * _Z.m05 * this._uiTrans.anchorY
                                  , g = o && o.style.paddingLeft ? parseInt(o.style.paddingLeft) : 0
                                  , m = o && o.style.paddingBottom ? parseInt(o.style.paddingBottom) : 0
                                  , y = "matrix(" + l + "," + -h + "," + -u + "," + c + "," + (_Z.m12 * s - p + g) + "," + -(_Z.m13 * a - f + m) + ")";
                                this._wrapper.style.transform = y,
                                this._wrapper.style["-webkit-transform"] = y,
                                this._forceUpdate = !1
                            }
                        }
                    }
                }
                ,
                e
            }(JK), pZ = function() {
                function t() {}
                return t.getImpl = function(t) {
                    return new dZ(t)
                }
                ,
                t
            }();
            ci.internal.WebViewImplManager = pZ;
            var fZ = t("WebView", (QK = Ti("cc.WebView"),
            $K = Ii(),
            tZ = Fi(),
            eZ = Zr(yd),
            iZ = Ni(),
            rZ = Ci([Bn]),
            nZ = Xr(),
            sZ = Ni(),
            QK(aZ = $K(aZ = tZ(aZ = eZ(aZ = Ri((cZ = uZ = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return e = t.call.apply(t, [this].concat(r)) || this,
                    Oi(e, "_url", lZ, Gi(e)),
                    e._impl = null,
                    Oi(e, "webviewEvents", hZ, Gi(e)),
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.setJavascriptInterfaceScheme = function(t) {
                    this._impl && this._impl.setJavascriptInterfaceScheme(t)
                }
                ,
                i.setOnJSCallback = function(t) {
                    this._impl && this._impl.setOnJSCallback(t)
                }
                ,
                i.evaluateJS = function(t) {
                    this._impl && this._impl.evaluateJS(t)
                }
                ,
                i.__preload = function() {
                    this._impl = pZ.getImpl(this),
                    this._impl.componentEventList.set(ZK.LOADING, this.onLoading.bind(this)),
                    this._impl.componentEventList.set(ZK.LOADED, this.onLoaded.bind(this)),
                    this._impl.componentEventList.set(ZK.ERROR, this.onError.bind(this)),
                    this._impl.loadURL(this._url)
                }
                ,
                i.onLoading = function() {
                    Bn.emitEvents(this.webviewEvents, this, ZK.LOADING),
                    this.node.emit(ZK.LOADING, this)
                }
                ,
                i.onLoaded = function() {
                    Bn.emitEvents(this.webviewEvents, this, ZK.LOADED),
                    this.node.emit(ZK.LOADED, this)
                }
                ,
                i.onError = function() {
                    for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++)
                        e[i] = arguments[i];
                    Bn.emitEvents(this.webviewEvents, this, ZK.ERROR, e),
                    this.node.emit(ZK.ERROR, this, e)
                }
                ,
                i.onEnable = function() {
                    this._impl && this._impl.enable()
                }
                ,
                i.onDisable = function() {
                    this._impl && this._impl.disable()
                }
                ,
                i.onDestroy = function() {
                    this._impl && (this._impl.destroy(),
                    this._impl = null)
                }
                ,
                i.update = function() {
                    this._impl && this._impl.syncMatrix()
                }
                ,
                Je(e, [{
                    key: "url",
                    get: function() {
                        return this._url
                    },
                    set: function(t) {
                        this._url = t,
                        this._impl && this._impl.loadURL(t)
                    }
                }, {
                    key: "nativeWebView",
                    get: function() {
                        return this._impl && this._impl.webview || null
                    }
                }, {
                    key: "state",
                    get: function() {
                        return this._impl ? this._impl.state : ZK.NONE
                    }
                }]),
                e
            }(Ki),
            uZ.EventType = ZK,
            lZ = Ei((oZ = cZ).prototype, "_url", [Pi], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return "https://cocos.com"
                }
            }),
            Ei(oZ.prototype, "url", [iZ], Object.getOwnPropertyDescriptor(oZ.prototype, "url"), oZ.prototype),
            hZ = Ei(oZ.prototype, "webviewEvents", [Pi, rZ, nZ, sZ], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }),
            aZ = oZ)) || aZ) || aZ) || aZ) || aZ) || aZ));
            ci.internal.WebView = fZ;
            var gZ = function() {
                function t() {
                    this.originalTarget = null,
                    this.target = null,
                    this.tag = t.TAG_INVALID
                }
                var e = t.prototype;
                return e.clone = function() {
                    var e = new t;
                    return e.originalTarget = null,
                    e.target = null,
                    e.tag = this.tag,
                    e
                }
                ,
                e.isDone = function() {
                    return !0
                }
                ,
                e.startWithTarget = function(t) {
                    this.originalTarget = t,
                    this.target = t
                }
                ,
                e.stop = function() {
                    this.target = null
                }
                ,
                e.step = function() {
                    mn(1006)
                }
                ,
                e.update = function() {
                    mn(1007)
                }
                ,
                e.getTarget = function() {
                    return this.target
                }
                ,
                e.setTarget = function(t) {
                    this.target = t
                }
                ,
                e.getOriginalTarget = function() {
                    return this.originalTarget
                }
                ,
                e.setOriginalTarget = function(t) {
                    this.originalTarget = t
                }
                ,
                e.getTag = function() {
                    return this.tag
                }
                ,
                e.setTag = function(t) {
                    this.tag = t
                }
                ,
                e.reverse = function() {
                    return mn(1008),
                    null
                }
                ,
                e.retain = function() {}
                ,
                e.release = function() {}
                ,
                t
            }();
            gZ.TAG_INVALID = -1;
            var mZ = function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this)._duration = 0,
                    e._timesForRepeat = 1,
                    e
                }
                qe(e, t);
                var i = e.prototype;
                return i.getDuration = function() {
                    return this._duration * (this._timesForRepeat || 1)
                }
                ,
                i.setDuration = function(t) {
                    this._duration = t
                }
                ,
                i.clone = function() {
                    return new e
                }
                ,
                e
            }(gZ)
              , yZ = (function(t) {
                function e(e, i) {
                    var r;
                    return void 0 === i && (i = 1),
                    (r = t.call(this) || this)._speed = 0,
                    r._innerAction = null,
                    e && r.initWithAction(e, i),
                    r
                }
                qe(e, t);
                var i = e.prototype;
                i.getSpeed = function() {
                    return this._speed
                }
                ,
                i.setSpeed = function(t) {
                    this._speed = t
                }
                ,
                i.initWithAction = function(t, e) {
                    return t ? (this._innerAction = t,
                    this._speed = e,
                    !0) : (Qe(1021),
                    !1)
                }
                ,
                i.clone = function() {
                    var t = new e;
                    return t.initWithAction(this._innerAction.clone(), this._speed),
                    t
                }
                ,
                i.startWithTarget = function(t) {
                    gZ.prototype.startWithTarget.call(this, t),
                    this._innerAction.startWithTarget(t)
                }
                ,
                i.stop = function() {
                    this._innerAction.stop(),
                    gZ.prototype.stop.call(this)
                }
                ,
                i.step = function(t) {
                    this._innerAction.step(t * this._speed)
                }
                ,
                i.isDone = function() {
                    return this._innerAction.isDone()
                }
                ,
                i.reverse = function() {
                    return new e(this._innerAction.reverse(),this._speed)
                }
                ,
                i.setInnerAction = function(t) {
                    this._innerAction !== t && (this._innerAction = t)
                }
                ,
                i.getInnerAction = function() {
                    return this._innerAction
                }
            }(gZ),
            0)
              , vZ = function() {
                this.actions = [],
                this.target = null,
                this.actionIndex = 0,
                this.currentAction = null,
                this.paused = !1,
                this.lock = !1
            }
              , SZ = function() {
                function t() {
                    this._hashTargets = new Map,
                    this._arrayTargets = [],
                    this._elementPool = []
                }
                var e = t.prototype;
                return e._searchElementByTarget = function(t, e) {
                    for (var i = 0; i < t.length; i++)
                        if (e === t[i].target)
                            return t[i];
                    return null
                }
                ,
                e._getElement = function(t, e) {
                    var i = this._elementPool.pop();
                    return i || (i = new vZ),
                    i.target = t,
                    i.paused = !!e,
                    i
                }
                ,
                e._putElement = function(t) {
                    t.actions.length = 0,
                    t.actionIndex = 0,
                    t.currentAction = null,
                    t.paused = !1,
                    t.target = null,
                    t.lock = !1,
                    this._elementPool.push(t)
                }
                ,
                e.addAction = function(t, e, i) {
                    if (t && e) {
                        null == e.uuid && (e.uuid = "_TWEEN_UUID_" + yZ++);
                        var r = this._hashTargets.get(e);
                        r ? r.actions || (r.actions = []) : (r = this._getElement(e, i),
                        this._hashTargets.set(e, r),
                        this._arrayTargets.push(r)),
                        r.target = e,
                        r.actions.push(t),
                        t.startWithTarget(e)
                    } else
                        Qe(1e3)
                }
                ,
                e.removeAllActions = function() {
                    for (var t = this._arrayTargets, e = 0; e < t.length; e++) {
                        var i = t[e];
                        i && this._putElement(i)
                    }
                    this._arrayTargets.length = 0,
                    this._hashTargets = new Map
                }
                ,
                e.removeAllActionsFromTarget = function(t) {
                    if (null != t) {
                        var e = this._hashTargets.get(t);
                        e && (e.actions.length = 0,
                        this._deleteHashElement(e))
                    }
                }
                ,
                e.removeAction = function(t) {
                    if (null != t) {
                        var e = t.getOriginalTarget()
                          , i = this._hashTargets.get(e);
                        if (i)
                            for (var r = 0; r < i.actions.length; r++)
                                if (i.actions[r] === t) {
                                    i.actions.splice(r, 1),
                                    i.actionIndex >= r && i.actionIndex--;
                                    break
                                }
                    }
                }
                ,
                e._removeActionByTag = function(t, e, i) {
                    for (var r = 0, n = e.actions.length; r < n; ++r) {
                        var s = e.actions[r];
                        if (s && s.getTag() === t) {
                            if (i && s.getOriginalTarget() !== i)
                                continue;
                            this._removeActionAtIndex(r, e);
                            break
                        }
                    }
                }
                ,
                e.removeActionByTag = function(t, e) {
                    var i = this;
                    t === gZ.TAG_INVALID && mn(1002);
                    var r = this._hashTargets;
                    if (e) {
                        var n = r.get(e);
                        n && this._removeActionByTag(t, n, e)
                    } else
                        r.forEach((function(e) {
                            i._removeActionByTag(t, e)
                        }
                        ))
                }
                ,
                e.getActionByTag = function(t, e) {
                    t === gZ.TAG_INVALID && mn(1004);
                    var i = this._hashTargets.get(e);
                    if (i) {
                        if (null != i.actions)
                            for (var r = 0; r < i.actions.length; ++r) {
                                var n = i.actions[r];
                                if (n && n.getTag() === t)
                                    return n
                            }
                        mn(1005, t)
                    }
                    return null
                }
                ,
                e.getNumberOfRunningActionsInTarget = function(t) {
                    var e = this._hashTargets.get(t);
                    return e && e.actions ? e.actions.length : 0
                }
                ,
                e.pauseTarget = function(t) {
                    var e = this._hashTargets.get(t);
                    e && (e.paused = !0)
                }
                ,
                e.resumeTarget = function(t) {
                    var e = this._hashTargets.get(t);
                    e && (e.paused = !1)
                }
                ,
                e.pauseAllRunningActions = function() {
                    for (var t = [], e = this._arrayTargets, i = 0; i < e.length; i++) {
                        var r = e[i];
                        r && !r.paused && (r.paused = !0,
                        t.push(r.target))
                    }
                    return t
                }
                ,
                e.resumeTargets = function(t) {
                    if (t)
                        for (var e = 0; e < t.length; e++)
                            t[e] && this.resumeTarget(t[e])
                }
                ,
                e.pauseTargets = function(t) {
                    if (t)
                        for (var e = 0; e < t.length; e++)
                            t[e] && this.pauseTarget(t[e])
                }
                ,
                e.purgeSharedManager = function() {
                    ci.director.getScheduler().unscheduleUpdate(this)
                }
                ,
                e._removeActionAtIndex = function(t, e) {
                    e.actions[t],
                    e.actions.splice(t, 1),
                    e.actionIndex >= t && e.actionIndex--,
                    0 === e.actions.length && this._deleteHashElement(e)
                }
                ,
                e._deleteHashElement = function(t) {
                    var e = !1;
                    if (t && !t.lock && this._hashTargets.get(t.target)) {
                        this._hashTargets.delete(t.target);
                        for (var i = this._arrayTargets, r = 0, n = i.length; r < n; r++)
                            if (i[r] === t) {
                                i.splice(r, 1);
                                break
                            }
                        this._putElement(t),
                        e = !0
                    }
                    return e
                }
                ,
                e.update = function(t) {
                    for (var e, i = this._arrayTargets, r = 0; r < i.length; r++) {
                        this._currentTarget = i[r];
                        var n = (e = this._currentTarget).target;
                        if (n instanceof tn && !n.isValid)
                            this.removeAllActionsFromTarget(n),
                            r--;
                        else {
                            if (!e.paused && e.actions) {
                                for (e.lock = !0,
                                e.actionIndex = 0; e.actionIndex < e.actions.length; e.actionIndex++)
                                    if (e.currentAction = e.actions[e.actionIndex],
                                    e.currentAction) {
                                        if (e.currentAction.step(t * (e.currentAction._speedMethod ? e.currentAction._speed : 1)),
                                        e.currentAction && e.currentAction.isDone()) {
                                            e.currentAction.stop();
                                            var s = e.currentAction;
                                            e.currentAction = null,
                                            this.removeAction(s)
                                        }
                                        e.currentAction = null
                                    }
                                e.lock = !1
                            }
                            0 === e.actions.length && this._deleteHashElement(e) && r--
                        }
                    }
                }
                ,
                t
            }()
              , TZ = t("TweenSystem", function(t) {
                function e() {
                    for (var e, i = arguments.length, r = new Array(i), n = 0; n < i; n++)
                        r[n] = arguments[n];
                    return (e = t.call.apply(t, [this].concat(r)) || this).actionMgr = new SZ,
                    e
                }
                return qe(e, t),
                e.prototype.update = function(t) {
                    this.actionMgr.update(t)
                }
                ,
                Je(e, [{
                    key: "ActionManager",
                    get: function() {
                        return this.actionMgr
                    }
                }]),
                e
            }(As));
            TZ.ID = "TWEEN",
            TZ.instance = void 0,
            Ur.on(Hr.EVENT_INIT, (function() {
                var t = new TZ;
                TZ.instance = t,
                Ur.registerSystem(TZ.ID, t, As.Priority.MEDIUM)
            }
            ));
            var bZ = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.isDone = function() {
                    return !0
                }
                ,
                i.step = function() {
                    this.update(1)
                }
                ,
                i.update = function() {}
                ,
                i.reverse = function() {
                    return this.clone()
                }
                ,
                i.clone = function() {
                    return new e
                }
                ,
                e
            }(mZ)
              , EZ = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.update = function() {
                    for (var t = this.target.getComponentsInChildren(zi), e = 0; e < t.length; ++e)
                        t[e].enabled = !0
                }
                ,
                i.reverse = function() {
                    return new AZ
                }
                ,
                i.clone = function() {
                    return new e
                }
                ,
                e
            }(bZ)
              , AZ = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.update = function() {
                    for (var t = this.target.getComponentsInChildren(zi), e = 0; e < t.length; ++e)
                        t[e].enabled = !1
                }
                ,
                i.reverse = function() {
                    return new EZ
                }
                ,
                i.clone = function() {
                    return new e
                }
                ,
                e
            }(bZ);
            !function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                i.update = function() {
                    for (var t = this.target.getComponentsInChildren(zi), e = 0; e < t.length; ++e) {
                        var i = t[e];
                        i.enabled = !i.enabled
                    }
                }
                ,
                i.reverse = function() {
                    return new e
                }
                ,
                i.clone = function() {
                    return new e
                }
            }(bZ);
            var CZ = function(t) {
                function e(e) {
                    var i;
                    return (i = t.call(this) || this)._isNeedCleanUp = !0,
                    void 0 !== e && i.init(e),
                    i
                }
                qe(e, t);
                var i = e.prototype;
                return i.update = function() {
                    this.target.removeFromParent(),
                    this._isNeedCleanUp && this.target.destroy()
                }
                ,
                i.init = function(t) {
                    return this._isNeedCleanUp = t,
                    !0
                }
                ,
                i.reverse = function() {
                    return new e(this._isNeedCleanUp)
                }
                ,
                i.clone = function() {
                    return new e(this._isNeedCleanUp)
                }
                ,
                e
            }(bZ)
              , RZ = function(t) {
                function e(e, i, r) {
                    var n;
                    return (n = t.call(this) || this)._selectorTarget = null,
                    n._function = null,
                    n._data = null,
                    n.initWithFunction(e, i, r),
                    n
                }
                qe(e, t);
                var i = e.prototype;
                return i.initWithFunction = function(t, e, i) {
                    return t && (this._function = t),
                    e && (this._selectorTarget = e),
                    void 0 !== i && (this._data = i),
                    !0
                }
                ,
                i.execute = function() {
                    this._function && this._function.call(this._selectorTarget, this.target, this._data)
                }
                ,
                i.update = function() {
                    this.execute()
                }
                ,
                i.getTargetCallback = function() {
                    return this._selectorTarget
                }
                ,
                i.setTargetCallback = function(t) {
                    t !== this._selectorTarget && (this._selectorTarget && (this._selectorTarget = null),
                    this._selectorTarget = t)
                }
                ,
                i.clone = function() {
                    var t = new e;
                    return t.initWithFunction(this._function, this._selectorTarget, this._data),
                    t
                }
                ,
                e
            }(bZ)
              , BZ = function(t) {
                function e(e) {
                    var i;
                    return (i = t.call(this) || this).MAX_VALUE = 2,
                    i._elapsed = 0,
                    i._firstTick = !1,
                    i._easeList = [],
                    i._speed = 1,
                    i._repeatForever = !1,
                    i._repeatMethod = !1,
                    i._speedMethod = !1,
                    void 0 === e || isNaN(e) || i.initWithDuration(e),
                    i
                }
                qe(e, t);
                var i = e.prototype;
                return i.getElapsed = function() {
                    return this._elapsed
                }
                ,
                i.initWithDuration = function(t) {
                    return this._duration = 0 === t ? li.FLT_EPSILON : t,
                    this._elapsed = 0,
                    this._firstTick = !0,
                    !0
                }
                ,
                i.isDone = function() {
                    return this._elapsed >= this._duration
                }
                ,
                i._cloneDecoration = function(t) {
                    t._repeatForever = this._repeatForever,
                    t._speed = this._speed,
                    t._timesForRepeat = this._timesForRepeat,
                    t._easeList = this._easeList,
                    t._speedMethod = this._speedMethod,
                    t._repeatMethod = this._repeatMethod
                }
                ,
                i._reverseEaseList = function(t) {
                    if (this._easeList) {
                        t._easeList = [];
                        for (var e = 0; e < this._easeList.length; e++)
                            t._easeList.push(this._easeList[e])
                    }
                }
                ,
                i.clone = function() {
                    var t = new e(this._duration);
                    return this._cloneDecoration(t),
                    t
                }
                ,
                i.easing = function(t) {
                    this._easeList ? this._easeList.length = 0 : this._easeList = [];
                    for (var e = 0; e < arguments.length; e++)
                        this._easeList.push(arguments[e]);
                    return this
                }
                ,
                i._computeEaseTime = function(t) {
                    return t
                }
                ,
                i.step = function(t) {
                    this._firstTick ? (this._firstTick = !1,
                    this._elapsed = 0) : this._elapsed += t;
                    var e = this._elapsed / (this._duration > 1.192092896e-7 ? this._duration : 1.192092896e-7);
                    e = e < 1 ? e : 1,
                    this.update(e > 0 ? e : 0),
                    this._repeatMethod && this._timesForRepeat > 1 && this.isDone() && (this._repeatForever || this._timesForRepeat--,
                    this.startWithTarget(this.target),
                    this.step(this._elapsed - this._duration))
                }
                ,
                i.startWithTarget = function(t) {
                    gZ.prototype.startWithTarget.call(this, t),
                    this._elapsed = 0,
                    this._firstTick = !0
                }
                ,
                i.reverse = function() {
                    return mn(1010),
                    this
                }
                ,
                i.setAmplitudeRate = function() {
                    mn(1011)
                }
                ,
                i.getAmplitudeRate = function() {
                    return mn(1012),
                    0
                }
                ,
                i.speed = function(t) {
                    return t <= 0 ? (mn(1013),
                    this) : (this._speedMethod = !0,
                    this._speed *= t,
                    this)
                }
                ,
                i.getSpeed = function() {
                    return this._speed
                }
                ,
                i.setSpeed = function(t) {
                    return this._speed = t,
                    this
                }
                ,
                i.repeat = function(t) {
                    return t = Math.round(t),
                    isNaN(t) || t < 1 ? (mn(1014),
                    this) : (this._repeatMethod = !0,
                    this._timesForRepeat *= t,
                    this)
                }
                ,
                i.repeatForever = function() {
                    return this._repeatMethod = !0,
                    this._timesForRepeat = this.MAX_VALUE,
                    this._repeatForever = !0,
                    this
                }
                ,
                e
            }(mZ)
              , xZ = function(t) {
                function e(i) {
                    var r;
                    (r = t.call(this) || this)._actions = [],
                    r._split = 0,
                    r._last = 0,
                    r._reversed = !1;
                    var n = i instanceof Array ? i : arguments;
                    if (1 === n.length)
                        return Qe(1019),
                        Gi(r);
                    var s = n.length - 1;
                    if (s >= 0 && null == n[s] && mn(1015),
                    s >= 0) {
                        for (var a, o = n[0], l = 1; l < s; l++)
                            n[l] && (a = o,
                            o = e._actionOneTwo(a, n[l]));
                        r.initWithTwoActions(o, n[s])
                    }
                    return r
                }
                qe(e, t);
                var i = e.prototype;
                return i.initWithTwoActions = function(t, e) {
                    if (!t || !e)
                        return Qe(1025),
                        !1;
                    var i = t._duration
                      , r = e._duration
                      , n = (i *= t._repeatMethod ? t._timesForRepeat : 1) + (r *= e._repeatMethod ? e._timesForRepeat : 1);
                    return this.initWithDuration(n),
                    this._actions[0] = t,
                    this._actions[1] = e,
                    !0
                }
                ,
                i.clone = function() {
                    var t = new e;
                    return this._cloneDecoration(t),
                    t.initWithTwoActions(this._actions[0].clone(), this._actions[1].clone()),
                    t
                }
                ,
                i.startWithTarget = function(t) {
                    BZ.prototype.startWithTarget.call(this, t),
                    this._split = this._actions[0]._duration / this._duration,
                    this._split *= this._actions[0]._repeatMethod ? this._actions[0]._timesForRepeat : 1,
                    this._last = -1
                }
                ,
                i.stop = function() {
                    -1 !== this._last && this._actions[this._last].stop(),
                    gZ.prototype.stop.call(this)
                }
                ,
                i.update = function(t) {
                    var e, i, r = 0, n = this._split, s = this._actions, a = this._last;
                    (t = this._computeEaseTime(t)) < n ? (e = 0 !== n ? t / n : 1,
                    0 === r && 1 === a && this._reversed && (s[1].update(0),
                    s[1].stop())) : (r = 1,
                    e = 1 === n ? 1 : (t - n) / (1 - n),
                    -1 === a && (s[0].startWithTarget(this.target),
                    s[0].update(1),
                    s[0].stop()),
                    0 === a && (s[0].update(1),
                    s[0].stop())),
                    i = s[r],
                    a === r && i.isDone() || (a !== r && i.startWithTarget(this.target),
                    e *= i._timesForRepeat,
                    i.update(e > 1 ? e % 1 : e),
                    this._last = r)
                }
                ,
                i.reverse = function() {
                    var t = e._actionOneTwo(this._actions[1].reverse(), this._actions[0].reverse());
                    return this._cloneDecoration(t),
                    this._reverseEaseList(t),
                    t._reversed = !0,
                    t
                }
                ,
                e
            }(BZ);
            function DZ(t) {
                var e = t instanceof Array ? t : arguments;
                if (1 === e.length)
                    return Qe(1019),
                    null;
                var i = e.length - 1;
                i >= 0 && null == e[i] && mn(1015);
                var r = null;
                if (i >= 0) {
                    r = e[0];
                    for (var n = 1; n <= i; n++)
                        e[n] && (r = xZ._actionOneTwo(r, e[n]))
                }
                return r
            }
            xZ._actionOneTwo = function(t, e) {
                var i = new xZ;
                return i.initWithTwoActions(t, e),
                i
            }
            ;
            var wZ = function(t) {
                function e(e, i) {
                    var r;
                    return (r = t.call(this) || this)._times = 0,
                    r._total = 0,
                    r._nextDt = 0,
                    r._actionInstant = !1,
                    r._innerAction = null,
                    void 0 !== i && r.initWithAction(e, i),
                    r
                }
                qe(e, t);
                var i = e.prototype;
                return i.initWithAction = function(t, e) {
                    var i = t._duration * e;
                    return !!this.initWithDuration(i) && (this._times = e,
                    this._innerAction = t,
                    t instanceof bZ && (this._actionInstant = !0,
                    this._times -= 1),
                    this._total = 0,
                    !0)
                }
                ,
                i.clone = function() {
                    var t = new e;
                    return this._cloneDecoration(t),
                    t.initWithAction(this._innerAction.clone(), this._times),
                    t
                }
                ,
                i.startWithTarget = function(t) {
                    this._total = 0,
                    this._nextDt = this._innerAction._duration / this._duration,
                    BZ.prototype.startWithTarget.call(this, t),
                    this._innerAction.startWithTarget(t)
                }
                ,
                i.stop = function() {
                    this._innerAction.stop(),
                    gZ.prototype.stop.call(this)
                }
                ,
                i.update = function(t) {
                    t = this._computeEaseTime(t);
                    var e = this._innerAction
                      , i = this._duration
                      , r = this._times
                      , n = this._nextDt;
                    if (t >= n) {
                        for (; t > n && this._total < r; )
                            e.update(1),
                            this._total++,
                            e.stop(),
                            e.startWithTarget(this.target),
                            n += e._duration / i,
                            this._nextDt = n > 1 ? 1 : n;
                        t >= 1 && this._total < r && (e.update(1),
                        this._total++),
                        this._actionInstant || (this._total === r ? e.stop() : e.update(t - (n - e._duration / i)))
                    } else
                        e.update(t * r % 1)
                }
                ,
                i.isDone = function() {
                    return this._total === this._times
                }
                ,
                i.reverse = function() {
                    var t = new e(this._innerAction.reverse(),this._times);
                    return this._cloneDecoration(t),
                    this._reverseEaseList(t),
                    t
                }
                ,
                i.setInnerAction = function(t) {
                    this._innerAction !== t && (this._innerAction = t)
                }
                ,
                i.getInnerAction = function() {
                    return this._innerAction
                }
                ,
                e
            }(BZ)
              , OZ = function(t) {
                function e(e) {
                    var i;
                    return (i = t.call(this) || this)._innerAction = null,
                    e && i.initWithAction(e),
                    i
                }
                qe(e, t);
                var i = e.prototype;
                return i.initWithAction = function(t) {
                    return t ? (this._innerAction = t,
                    !0) : (Qe(1026),
                    !1)
                }
                ,
                i.clone = function() {
                    var t = new e;
                    return this._cloneDecoration(t),
                    t.initWithAction(this._innerAction.clone()),
                    t
                }
                ,
                i.startWithTarget = function(t) {
                    BZ.prototype.startWithTarget.call(this, t),
                    this._innerAction.startWithTarget(t)
                }
                ,
                i.step = function(t) {
                    var e = this._innerAction;
                    e.step(t),
                    e.isDone() && (e.startWithTarget(this.target),
                    e.step(e.getElapsed() - e._duration))
                }
                ,
                i.isDone = function() {
                    return !1
                }
                ,
                i.reverse = function() {
                    var t = new e(this._innerAction.reverse());
                    return this._cloneDecoration(t),
                    this._reverseEaseList(t),
                    t
                }
                ,
                i.setInnerAction = function(t) {
                    this._innerAction !== t && (this._innerAction = t)
                }
                ,
                i.getInnerAction = function() {
                    return this._innerAction
                }
                ,
                e
            }(BZ)
              , PZ = function(t) {
                function e(i) {
                    var r;
                    (r = t.call(this) || this)._one = null,
                    r._two = null;
                    var n = i instanceof Array ? i : arguments;
                    if (1 === n.length)
                        return Qe(1020),
                        Gi(r);
                    var s = n.length - 1;
                    if (s >= 0 && null == n[s] && mn(1015),
                    s >= 0) {
                        for (var a, o = n[0], l = 1; l < s; l++)
                            n[l] && (a = o,
                            o = e._actionOneTwo(a, n[l]));
                        r.initWithTwoActions(o, n[s])
                    }
                    return r
                }
                qe(e, t);
                var i = e.prototype;
                return i.initWithTwoActions = function(t, e) {
                    if (!t || !e)
                        return Qe(1027),
                        !1;
                    var i = !1
                      , r = t._duration
                      , n = e._duration;
                    return this.initWithDuration(Math.max(r, n)) && (this._one = t,
                    this._two = e,
                    r > n ? this._two = xZ._actionOneTwo(e, LZ(r - n)) : r < n && (this._one = xZ._actionOneTwo(t, LZ(n - r))),
                    i = !0),
                    i
                }
                ,
                i.clone = function() {
                    var t = new e;
                    return this._cloneDecoration(t),
                    t.initWithTwoActions(this._one.clone(), this._two.clone()),
                    t
                }
                ,
                i.startWithTarget = function(t) {
                    BZ.prototype.startWithTarget.call(this, t),
                    this._one.startWithTarget(t),
                    this._two.startWithTarget(t)
                }
                ,
                i.stop = function() {
                    this._one.stop(),
                    this._two.stop(),
                    gZ.prototype.stop.call(this)
                }
                ,
                i.update = function(t) {
                    t = this._computeEaseTime(t),
                    this._one && this._one.update(t),
                    this._two && this._two.update(t)
                }
                ,
                i.reverse = function() {
                    var t = e._actionOneTwo(this._one.reverse(), this._two.reverse());
                    return this._cloneDecoration(t),
                    this._reverseEaseList(t),
                    t
                }
                ,
                e
            }(BZ);
            function MZ(t) {
                var e = t instanceof Array ? t : arguments;
                if (1 === e.length)
                    return Qe(1020),
                    null;
                e.length > 0 && null == e[e.length - 1] && mn(1015);
                for (var i = e[0], r = 1; r < e.length; r++)
                    null != e[r] && (i = PZ._actionOneTwo(i, e[r]));
                return i
            }
            PZ._actionOneTwo = function(t, e) {
                var i = new PZ;
                return i.initWithTwoActions(t, e),
                i
            }
            ;
            var IZ = function(t) {
                function e() {
                    return t.apply(this, arguments) || this
                }
                qe(e, t);
                var i = e.prototype;
                return i.update = function() {}
                ,
                i.reverse = function() {
                    var t = new e(this._duration);
                    return this._cloneDecoration(t),
                    this._reverseEaseList(t),
                    t
                }
                ,
                i.clone = function() {
                    var t = new e;
                    return this._cloneDecoration(t),
                    t.initWithDuration(this._duration),
                    t
                }
                ,
                e
            }(BZ);
            function LZ(t) {
                return new IZ(t)
            }
            var FZ = function(t) {
                function e(e) {
                    var i;
                    return (i = t.call(this) || this)._other = null,
                    e && i.initWithAction(e),
                    i
                }
                qe(e, t);
                var i = e.prototype;
                return i.initWithAction = function(t) {
                    return t ? t === this._other ? (Qe(1029),
                    !1) : !!BZ.prototype.initWithDuration.call(this, t._duration) && (this._other = t,
                    !0) : (Qe(1028),
                    !1)
                }
                ,
                i.clone = function() {
                    var t = new e;
                    return this._cloneDecoration(t),
                    t.initWithAction(this._other.clone()),
                    t
                }
                ,
                i.startWithTarget = function(t) {
                    BZ.prototype.startWithTarget.call(this, t),
                    this._other.startWithTarget(t)
                }
                ,
                i.update = function(t) {
                    t = this._computeEaseTime(t),
                    this._other && this._other.update(1 - t)
                }
                ,
                i.reverse = function() {
                    return this._other.clone()
                }
                ,
                i.stop = function() {
                    this._other.stop(),
                    gZ.prototype.stop.call(this)
                }
                ,
                e
            }(BZ)
              , NZ = t("TweenAction", function(t) {
                function e(e, i, r) {
                    var n;
                    if ((n = t.call(this) || this)._opts = void 0,
                    n._props = void 0,
                    n._originProps = void 0,
                    null == r)
                        r = Object.create(null);
                    else if (function(t) {
                        var e = " [Tween:] "
                          , i = " option is not support in v + " + Rs
                          , r = t;
                        r.delay && ri(e + "delay" + i),
                        r.repeat && ri(e + "repeat" + i),
                        r.repeatDelay && ri(e + "repeatDelay" + i),
                        r.interpolation && ri(e + "interpolation" + i),
                        r.onStop && ri(e + "onStop" + i)
                    }(r),
                    r.easing && "string" == typeof r.easing && (r.easing = function(t) {
                        var e = t.charAt(0);
                        if (/[A-Z]/.test(e)) {
                            var i = (t = t.replace(e, e.toLowerCase())).split("-");
                            if (2 === i.length) {
                                var r = i[0];
                                if ("linear" === r)
                                    t = "linear";
                                else {
                                    var n = i[1];
                                    switch (r) {
                                    case "quadratic":
                                        t = "quad" + n;
                                        break;
                                    case "quartic":
                                        t = "quart" + n;
                                        break;
                                    case "quintic":
                                        t = "quint" + n;
                                        break;
                                    case "sinusoidal":
                                        t = "sine" + n;
                                        break;
                                    case "exponential":
                                        t = "expo" + n;
                                        break;
                                    case "circular":
                                        t = "circ" + n;
                                        break;
                                    default:
                                        t = r + n
                                    }
                                }
                            }
                        }
                        return t
                    }(r.easing)),
                    r.progress || (r.progress = n.progress),
                    r.easing && "string" == typeof r.easing) {
                        var s = r.easing;
                        r.easing = Cs[s],
                        r.easing || ii(1031, s)
                    }
                    for (var a in n._opts = r,
                    n._props = Object.create(null),
                    i)
                        if (i.hasOwnProperty(a)) {
                            var o = i[a];
                            if ("function" == typeof o && (o = o()),
                            null != o && "string" != typeof o) {
                                var l = void 0
                                  , h = void 0;
                                void 0 !== o.value && (o.easing || o.progress) && ("string" == typeof o.easing ? (l = Cs[o.easing]) || ii(1031, o.easing) : l = o.easing,
                                h = o.progress,
                                o = o.value);
                                var u = Object.create(null);
                                u.value = o,
                                u.easing = l,
                                u.progress = h,
                                n._props[a] = u
                            }
                        }
                    return n._originProps = i,
                    n.initWithDuration(e),
                    n
                }
                qe(e, t);
                var i = e.prototype;
                return i.clone = function() {
                    var t = new e(this._duration,this._originProps,this._opts);
                    return this._cloneDecoration(t),
                    t
                }
                ,
                i.startWithTarget = function(t) {
                    BZ.prototype.startWithTarget.call(this, t);
                    var e = !!this._opts.relative
                      , i = this._props;
                    for (var r in i) {
                        var n = t[r];
                        if (void 0 !== n) {
                            var s = i[r]
                              , a = s.value;
                            if ("number" == typeof n)
                                s.start = n,
                                s.current = n,
                                s.end = e ? n + a : a;
                            else if ("object" == typeof n)
                                for (var o in null == s.start && (s.start = {},
                                s.current = {},
                                s.end = {}),
                                a)
                                    isNaN(n[o]) || (s.start[o] = n[o],
                                    s.current[o] = n[o],
                                    s.end[o] = e ? n[o] + a[o] : a[o])
                        }
                    }
                    this._opts.onStart && this._opts.onStart(this.target)
                }
                ,
                i.update = function(t) {
                    var e = this.target;
                    if (e) {
                        var i = this._props
                          , r = this._opts
                          , n = t;
                        r.easing && (n = r.easing(t));
                        var s = r.progress;
                        for (var a in i) {
                            var o = i[a]
                              , l = o.easing ? o.easing(t) : n
                              , h = o.progress ? o.progress : s
                              , u = o.start
                              , c = o.end;
                            if ("number" == typeof u)
                                o.current = h(u, c, o.current, l);
                            else if ("object" == typeof u)
                                for (var _ in u)
                                    o.current[_] = h(u[_], c[_], o.current[_], l);
                            e[a] = o.current
                        }
                        r.onUpdate && r.onUpdate(this.target, t),
                        1 === t && r.onComplete && r.onComplete(this.target)
                    }
                }
                ,
                i.progress = function(t, e, i, r) {
                    return t + (e - t) * r
                }
                ,
                e
            }(BZ))
              , kZ = function(t) {
                function e(e) {
                    var i;
                    return (i = t.call(this) || this)._props = void 0,
                    i._props = {},
                    void 0 !== e && i.init(e),
                    i
                }
                qe(e, t);
                var i = e.prototype;
                return i.init = function(t) {
                    for (var e in t)
                        this._props[e] = t[e];
                    return !0
                }
                ,
                i.update = function() {
                    var t = this._props
                      , e = this.target;
                    for (var i in t)
                        e[i] = t[i]
                }
                ,
                i.clone = function() {
                    var t = new e;
                    return t.init(this._props),
                    t
                }
                ,
                e
            }(bZ)
              , GZ = t("Tween", function() {
                function t(t) {
                    this._actions = [],
                    this._finalAction = null,
                    this._target = null,
                    this._tag = gZ.TAG_INVALID,
                    this._target = void 0 === t ? null : t
                }
                var e = t.prototype;
                return e.tag = function(t) {
                    return this._tag = t,
                    this
                }
                ,
                e.then = function(t) {
                    return t instanceof gZ ? this._actions.push(t.clone()) : this._actions.push(t._union()),
                    this
                }
                ,
                e.target = function(t) {
                    return this._target = t,
                    this
                }
                ,
                e.start = function() {
                    return this._target ? (this._finalAction && TZ.instance.ActionManager.removeAction(this._finalAction),
                    this._finalAction = this._union(),
                    this._finalAction.setTag(this._tag),
                    TZ.instance.ActionManager.addAction(this._finalAction, this._target, !1),
                    this) : (ri("Please set target to tween first"),
                    this)
                }
                ,
                e.stop = function() {
                    return this._finalAction && TZ.instance.ActionManager.removeAction(this._finalAction),
                    this
                }
                ,
                e.clone = function(t) {
                    var e = this._union();
                    return zZ(t).then(e.clone())
                }
                ,
                e.union = function() {
                    var t = this._union();
                    return this._actions.length = 0,
                    this._actions.push(t),
                    this
                }
                ,
                e.to = function(t, e, i) {
                    (i = i || Object.create(null)).relative = !1;
                    var r = new NZ(t,e,i);
                    return this._actions.push(r),
                    this
                }
                ,
                e.by = function(t, e, i) {
                    (i = i || Object.create(null)).relative = !0;
                    var r = new NZ(t,e,i);
                    return this._actions.push(r),
                    this
                }
                ,
                e.set = function(t) {
                    var e = new kZ(t);
                    return this._actions.push(e),
                    this
                }
                ,
                e.delay = function(t) {
                    var e = LZ(t);
                    return this._actions.push(e),
                    this
                }
                ,
                e.call = function(t) {
                    var e = function(t) {
                        return new RZ(t,void 0,void 0)
                    }(t);
                    return this._actions.push(e),
                    this
                }
                ,
                e.sequence = function() {
                    var e = t._wrappedSequence.apply(t, arguments);
                    return this._actions.push(e),
                    this
                }
                ,
                e.parallel = function() {
                    var e = t._wrappedParallel.apply(t, arguments);
                    return this._actions.push(e),
                    this
                }
                ,
                e.repeat = function(e, i) {
                    if (e == 1 / 0)
                        return this.repeatForever(i);
                    var r, n = this._actions;
                    return r = i instanceof t ? i._union() : n.pop(),
                    n.push(function(t, e) {
                        return new wZ(t,e)
                    }(r, e)),
                    this
                }
                ,
                e.repeatForever = function(e) {
                    var i, r = this._actions;
                    return i = e instanceof t ? e._union() : r.pop(),
                    r.push(function(t) {
                        return new OZ(t)
                    }(i)),
                    this
                }
                ,
                e.reverseTime = function(e) {
                    var i, r = this._actions;
                    return i = e instanceof t ? e._union() : r.pop(),
                    r.push(function(t) {
                        return new FZ(t)
                    }(i)),
                    this
                }
                ,
                e.hide = function() {
                    var t = new AZ;
                    return this._actions.push(t),
                    this
                }
                ,
                e.show = function() {
                    var t = new EZ;
                    return this._actions.push(t),
                    this
                }
                ,
                e.removeSelf = function() {
                    var t = new CZ(!1);
                    return this._actions.push(t),
                    this
                }
                ,
                t.stopAll = function() {
                    TZ.instance.ActionManager.removeAllActions()
                }
                ,
                t.stopAllByTag = function(t, e) {
                    TZ.instance.ActionManager.removeActionByTag(t, e)
                }
                ,
                t.stopAllByTarget = function(t) {
                    TZ.instance.ActionManager.removeAllActionsFromTarget(t)
                }
                ,
                e._union = function() {
                    var t = this._actions;
                    return 1 === t.length ? t[0] : DZ(t)
                }
                ,
                e._destroy = function() {
                    this.stop()
                }
                ,
                t._wrappedSequence = function() {
                    var e = t._tmp_args;
                    e.length = 0;
                    for (var i = arguments.length, r = 0; r < i; r++) {
                        var n = e[r] = r < 0 || arguments.length <= r ? void 0 : arguments[r];
                        n instanceof t && (e[r] = n._union())
                    }
                    return DZ.apply(DZ, e)
                }
                ,
                t._wrappedParallel = function() {
                    var e = t._tmp_args;
                    e.length = 0;
                    for (var i = arguments.length, r = 0; r < i; r++) {
                        var n = e[r] = r < 0 || arguments.length <= r ? void 0 : arguments[r];
                        n instanceof t && (e[r] = n._union())
                    }
                    return MZ.apply(MZ, e)
                }
                ,
                t
            }());
            function zZ(t) {
                return new GZ(t)
            }
            function UZ(t) {
                return ri("tweenUtil' is deprecated, please use 'tween' instead "),
                new GZ(t)
            }
            GZ._tmp_args = [],
            ci.Tween = GZ,
            ci.tween = zZ,
            ci.tweenUtil = UZ
        }
    }
}
));
